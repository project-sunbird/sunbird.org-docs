openapi: 3.0.1
info:
  title: Sunbird Content API(s)
  description: "The Content API resources perform operations related to all the _Content_\
    \ on the Sunbird Platform. \n- Each of the endpoints serve a different purpose,\
    \ so which one to use depends on what you want to do\n- The operations include\
    \ CRUD (Create, Update, Read and Delete) operations and other operations such\
    \ as upload and publish. \n- The URL for Sunbird Content API(s) is `content/v1`"
  termsOfService: https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE
  contact:
    email: info@sunbird.org
  version: "1.0"
servers:
- url: https://staging.open-sunbird.org/api/content/v1
paths:
  /create:
    post:
      tags:
      - Content APIs
      summary: Create Content
      description: |-
        This API is associated with creating content on the Sunbird Platform.
           - The endpoint for **Create Content** is `/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Create Content
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: x-channel-id
        in: header
        description: 'Represents a physical location (e.g: state) uniquely to which
          the user belongs.'
        required: true
        schema:
          type: string
      - name: X-Authenticated-Userid
        in: header
        description: Represents the authorized User ID to execute the API.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: "'The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:'\n\
          \ \n - JSON \n - XML data\n\nThe body is the representation of the resource\
          \ object for creating content (an array of parameters which describes the\
          \ content)"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateContentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateContentRequest'
        required: true
      responses:
        200:
          description: SUCCESS. The **Create Content** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: '''BAD REQUEST. The **Create Content** operation failed. You
            may have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /content/v1/create
          headers:
            Content-Type: application/json
            X-Channel-id: channel
            Authorization: Bearer {{api_key}}
          body: |-
            {
              "request": {
                "content": {
                  "visibility": "Default",
                  "status": "Draft",
                  "contentType": "Resource",
                  "code": "test_cwp_3",
                  "osId": "org.ekstep.quiz.app",
                  "languageCode": "hi",
                  "name": "Test Content",
                  "description": "Test Content",
                  "language": [
                    "Hindi"
                  ],
                  "createdFor": [
                    "012297427021119488540"
                  ],
                  "createdBy": "89cf1a7e-dfd3-46c9-a428-d37e9a2bc001",
                  "mimeType": "application/vnd.ekstep.ecml-archive"
                }
              }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Create Content
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /update/{Content_ID}:
    patch:
      tags:
      - Content APIs
      summary: Update Content
      description: |-
        This API is associated with updating content on the Sunbird Platform.
          - The endpoint for **Update Content** is `/update/{Content_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Update Content
      parameters:
      - name: Content_ID
        in: path
        description: Please append a valid Content ID To the Request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-Authenticated-Userid
        in: header
        description: Represents the authorized User ID to execute the API.
        required: true
        schema:
          type: string
      - name: X-Channel-id
        in: header
        description: 'Represents a physical location (e.g: state) uniquely to which
          the user belongs.'
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:'
          - JSON  - XML data
          The body is the representation of the resource object for  updating the content.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateContentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateContentRequest'
        required: true
      responses:
        200:
          description: SUCCESS. The **Update Content** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: '''BAD REQUEST. The **Create Content** operation failed. You
            may have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: PATCH
          uri: /content/v1/update/{Content_Id}
          headers:
            Content-Type: application/json
            X-Authenticated-Userid: '{{user_id}}'
            X-Channel-id: channel
            Authorization: Bearer {{api_key}}
          body: |-
            {
              "request": {
                "content": {
                  "languageCode": "string",
                  "name": "string",
                  "description": "string",
                  "language": [
                    "Hindi"
                  ],
                  "createdFor": [
                    "012297427021119488540"
                  ]
                }
              }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update Content
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /publish/{Content_ID}:
    post:
      tags:
      - Content APIs
      summary: Publish Content
      description: |-
        This API is associated with publishing content on the Sunbird Platform.
          - The endpoint for **Publish Content** is `/publish/{Content_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Publish Content
      parameters:
      - name: Content_ID
        in: path
        description: Please append a valid Content ID To the Request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-Authenticated-Userid
        in: header
        description: Represents the authorized User ID to execute the API.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: "'The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:'\n\
          \ \n - JSON \n - XML data\n\nThe body is the representation of the resource\
          \ object for publishing the content "
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishContentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PublishContentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PublishContentRequest'
        required: true
      responses:
        200:
          description: SUCCESS. The **Publish Content** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: '''BAD REQUEST. The **Publish Content** operation failed. You
            may have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /content/v1/publish/{Content_Id}
          headers:
            Content-Type: application/json
            X-Authenticated-Userid: '{{user_id}}'
            Authorization: Bearer {{api_key}}
          body: |-
            {
              "request": {
                "content": {
                  "lastPublishedBy": "89cf1a7e-dfd3-46c9-a428-d37e9a2bc001"
                }
              }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Publish Content
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /unlisted/publish/{Content_ID}:
    post:
      tags:
      - Content APIs
      summary: Privately Publish Content
      description: |-
        This API is associated with publishing content on the Sunbird Platform.
          - The endpoint for **Privately Publish Content** is `/unlisted/publish/{Content_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Unlisted Publish Content
      parameters:
      - name: Content_ID
        in: path
        description: Please append a valid Content ID To the Request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-Authenticated-Userid
        in: header
        description: Represents the authorized User ID to execute the API.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: "The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:'\n\
          - JSON  - XML data\nThe body is the representation of the resource object\
          \ for publishing the (unlisted)content privately "
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishContentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PublishContentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PublishContentRequest'
        required: true
      responses:
        200:
          description: SUCCESS. The **Publish Content** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: '''BAD REQUEST. The **Publish Content** operation failed. You
            may have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /content/v1/publish/{Content_Id}
          headers:
            Content-Type: application/json
            X-Authenticated-Userid: '{{user_id}}'
            Authorization: Bearer {{api_key}}
          body: |-
            {
              "request": {
                "content": {
                  "lastPublishedBy": "89cf1a7e-dfd3-46c9-a428-d37e9a2bc001"
                }
              }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Publish Content
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /retire/{Content_ID}:
    delete:
      tags:
      - Content APIs
      summary: Retire Content
      description: |-
        This API is associated with publishing content on the Sunbird Platform.
          - The endpoint for **Retire Content** is `/retire/{Content_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Retire Content
      parameters:
      - name: Content_ID
        in: path
        description: Please append a valid Content Id To the Request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json"
        required: true
        schema:
          type: string
      - name: X-Authenticated-Userid
        in: header
        description: Represents the registered User ID to execute the API.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: "The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:'\n\
          \ \n - JSON \n - XML data\n\n The body is the representation of the resource\
          \ object for deleting content"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetireContentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RetireContentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RetireContentRequest'
        required: true
      responses:
        200:
          description: SUCCESS. The **Delete Content** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The **Delete Content** operation failed. You may
            have missed input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: DELETE
          uri: /content/v1/retire/{Content_Id}
          headers:
            Content-Type: application/json
            X-Authenticated-Userid: '{{user_id}}'
            Authorization: Bearer {{api_key}}
          body: |-
            {
              "request": {
                "contentIds": [
                  "do_3123180264398192642407"
                ]
              }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Retire Content
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /review/{Content_ID}:
    post:
      tags:
      - Content APIs
      summary: Submit for Review
      description: "This API is associated with Submission of content for Review \
        \ on the Sunbird Platform.  \n  - The endpoint for **Submit for Review** is\
        \ `/review/{Content_ID}`\n  - The fields marked with an asterisk (*) are mandatory.\
        \ They cannot be null or empty."
      operationId: Submit for Review
      parameters:
      - name: Content_ID
        in: path
        description: Please append a valid Content ID To the Request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-Authenticated-Userid
        in: header
        description: Represents the registered User ID to execute the API.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:'
          - JSON  - XML data
          The body is the representation of the resource object for  sending content for review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewContentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewContentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewContentRequest'
        required: true
      responses:
        200:
          description: SUCCESS. The **Content Sent for Review** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: '''BAD REQUEST. The **Content Sent for Review** operation failed.
            You may have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /content/v1/review/{contentId}
          headers:
            Content-Type: application/json
            X-Authenticated-Userid: '{{user_id}}'
            Authorization: Bearer {{api_key}}
          body: '{ }'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Submit for Review
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /upload/{Content_ID}:
    post:
      tags:
      - Content APIs
      summary: Upload Content
      description: |-
        This API is associated with uploading content on the Sunbird Platform.
           - The endpoint for **Upload Content** is `/upload/{Content_ID}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Upload Content
      parameters:
      - name: Content_ID
        in: path
        description: Please append a valid Content ID To the Request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-Authenticated-Userid
        in: header
        description: Represents the registered User ID to execute the API.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              properties:
                file:
                  type: string
                  description: Content package file which you intend to upload
                  format: binary
        required: true
      responses:
        200:
          description: SUCCESS. The **Upload Content** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentUploadResponse'
        400:
          description: '''BAD REQUEST. The **Upload Content** operation failed. You
            may have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /search:
    post:
      tags:
      - Content APIs
      summary: Search Content
      description: |-
        This API is associated with Searching content on the Sunbird Platform.
          - The endpoint for **Search Content** is `/search`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Search Content
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: X-Authenticated-Userid
        in: header
        description: Represents the registered User ID to execute the API.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:'
          - JSON  - XML data
          The body is the representation of the resource object for searching the content.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchContentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SearchContentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SearchContentRequest'
        required: true
      responses:
        200:
          description: SUCCESS. The **Search Content** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentSearchResponse'
        400:
          description: '''BAD REQUEST. The **Search Content** operation failed. You
            may have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /content/v1/search
          headers:
            Content-Type: application/json
            Authorization: Bearer {{api_key}}
            X-Authenticated-Userid: '{{user_id}}'
          body: |-
            {
                "request": {
                    "filters":{"metadata of content"}
                    "sort_by": {"createdOn": "asc"},
                    "fields": ["name", "contentType", "createdFor", "createdBy", "createdOn", "status", "mimeType", "channel", "lastUpdatedOn"]
                }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Search Content
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /flag/{Content_ID}:
    post:
      tags:
      - Content APIs
      summary: Flag Content
      description: |-
        This API is associated with setting Flag for content under review on the Sunbird Platform.
          - The endpoint for **Flag Content** is `/flag/{Content_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Flag Content
      parameters:
      - name: Content_ID
        in: path
        description: Please append a valid Content ID To the Request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-Authenticated-Userid
        in: header
        description: Represents the authorized User ID to execute the API.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: "The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:'\n\
          \ \n - JSON \n - XML data\n\n The body is the representation of the resource\
          \ object, that contains request for setting flag to \"Accept\" or \"Reject\"\
          \ for any of the content that is in review process."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlagContentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FlagContentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FlagContentRequest'
        required: true
      responses:
        200:
          description: SUCCESS. The **Flag Content** operation was successful!.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: '''BAD REQUEST. The **Flag Content* operation failed. You may
            have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /content/v1/flag/<contentId>
          headers:
            Content-Type: application/json
            X-Authenticated-Userid: '{{user_id}}'
            Authorization: Bearer {{api_key}}
          body: |-
            {
              "request": {
                "content": {
                  "flaggedBy": "89cf1a7e-dfd3-46c9-a428-d37e9a2bc001",
                  "flagReasons": ["Flag comment"],
                  "flags": ["InAppropriate Content"]
                }
              }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Flag Content
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /flag/accept/{Content_ID}:
    post:
      tags:
      - Content APIs
      summary: Accept Flag
      description: |-
        This API is associated with setting Accept Flag for content under review process on the Sunbird Platform.
          - The endpoint for **Accept Flag** is `/flag/accept/{Content_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Accept Flag
      parameters:
      - name: Content_ID
        in: path
        description: Please append a valid Content ID To the Request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-Authenticated-Userid
        in: header
        description: Represents the authorized User ID to execute the API.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:'
          - JSON  - XML data
          The body is the representation of the resource object for setting the flag to "accept" for the content that is in review process.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlagAcceptContentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FlagAcceptContentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FlagAcceptContentRequest'
        required: true
      responses:
        200:
          description: SUCCESS. The **Accept Flag** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: '''BAD REQUEST. The **Accept Flag** operation failed. You may
            have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /content/v1/flag/accept/<contentId>
          headers:
            Content-Type: application/json
            X-Authenticated-Userid: '{{user_id}}'
            Authorization: Bearer {{api_key}}
          body: '{}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Accept Flag
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /flag/reject/{Content_ID}:
    post:
      tags:
      - Content APIs
      summary: Reject Flag
      description: |-
        This API is associated with setting Reject Flag for content under review process on the Sunbird Platform.
          - The endpoint for **Reject Flag** is `/flag/reject/{Content_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Reject Flag
      parameters:
      - name: Content_ID
        in: path
        description: Please append a valid Content ID To the Request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-Authenticated-Userid
        in: header
        description: Represents the authorized User ID to execute the API.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload
          - JSON  - XML data
          The body is the representation of the resource object for  setting the flag to "reject" for the content in review process.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlagRejectContentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FlagRejectContentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FlagRejectContentRequest'
        required: true
      responses:
        200:
          description: SUCCESS. The **Reject Flag** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: '''BAD REQUEST. The **Reject Flag** operation failed. You may
            have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /content/v1/flag/reject/<contentId>
          headers:
            Content-Type: application/json
            X-Authenticated-Userid: '{{user_id}}'
            Authorization: Bearer {{api_key}}
          body: '{}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Reject Flag
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /reject/{Content_ID}:
    post:
      tags:
      - Content APIs
      summary: Reject Content Review
      description: |-
        This API is associated with Rejecting rejecting content under review after "Reject content flag" has been set on the Sunbird Platform.
          - The endpoint for **Reject Content Review** is `/reject/{Content_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Reject Content Review
      parameters:
      - name: Content_ID
        in: path
        description: Please append a valid Content ID To the Request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-Authenticated-Userid
        in: header
        description: Represents the authorized User ID to execute the API.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload
          - JSON  - XML data
          The body is the representation of the resource object for rejecting the content after the review process.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectContentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RejectContentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RejectContentRequest'
        required: true
      responses:
        200:
          description: SUCCESS. The **Reject Content** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: '''BAD REQUEST. The **Reject Content** operation failed. You
            may have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /content/v1/reject/<contentId>
          headers:
            Content-Type: application/json
            X-Authenticated-Userid: '{{user_id}}'
            Authorization: Bearer {{api_key}}
          body: '{}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Reject Content Review
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /read/{Content_ID}:
    get:
      tags:
      - Content APIs
      summary: Read Content
      description: |-
        This API is associated with viewing and reading out the content on the Sunbird Platform.
          - The endpoint for **Read Content** is `/read/{Content_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Read Content
      parameters:
      - name: licenseDetails
        in: query
        description: |-
          This is used to fetch the details of the content's license. Below are the possible values to fetch
            - name
            - description
            - url
        schema:
          type: string
      - name: Content_ID
        in: path
        description: Please append a valid Content ID To the Request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-Authenticated-Userid
        in: header
        description: Represents the authorized User ID to execute the API.
        required: true
        schema:
          type: string
      - name: X-Channel-id
        in: header
        description: 'Represents a physical location (e.g: state) uniquely to which
          the user belongs.'
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      responses:
        200:
          description: SUCCESS. The **Read Content** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentGetResponse'
        400:
          description: '''BAD REQUEST. The **Read Content** operation failed. You
            may have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: GET
          uri: /content/v1/read/<contentId>
          headers:
            Content-Type: application/json
            X-Authenticated-Userid: '{{user_id}}'
            X-Channel-id: channel
            Authorization: Bearer {{api_key}}
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Read Content
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /hierarchy/update:
    post:
      tags:
      - Content APIs
      summary: Hierarchy Update Content
      description: |-
        This API is associated with updating hierarchy content on the Sunbird Platform.
           - The endpoint for **Hierarchy Update Content** is `/hierarchy/update`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Hierarchy Update Content
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The Registered User ID to execute the API.
        required: true
        schema:
          type: string
      - name: x-channel-id
        in: header
        description: 'Represents a physical location (e.g: state) uniquely to which
          the user belongs.'
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload
          - JSON  - XML data
          The body is the representation of the resource object for updating the content hierarchy.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHierarchyContentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateHierarchyContentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateHierarchyContentRequest'
        required: true
      responses:
        200:
          description: SUCCESS. The **Update Hierarchy Content** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentUpdateHierarchyResponse'
        400:
          description: '''BAD REQUEST. The **Update Hierarchy Content** operation
            failed. You may have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /content/v1/create
          headers:
            Content-Type: application/json
            X-Authenticated-Userid: '{{user_id}}'
            X-Channel-id: channel
            Authorization: Bearer {{api_key}}
          body: |-
            {
              "request": {
                "content": {
                  "visibility": "Default",
                  "status": "Draft",
                  "contentType": "Resource",
                  "code": "test_cwp_3",
                  "osId": "org.ekstep.quiz.app",
                  "languageCode": "hi",
                  "name": "Test Content",
                  "description": "Test Content",
                  "language": [
                    "Hindi"
                  ],
                  "createdFor": [
                    "012297427021119488540"
                  ],
                  "createdBy": "89cf1a7e-dfd3-46c9-a428-d37e9a2bc001",
                  "mimeType": "application/vnd.ekstep.ecml-archive"
                }
              }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Create Content
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /hierarchy/{Content_ID}:
    get:
      tags:
      - Content APIs
      summary: Get Content Hierarchy Object
      description: |-
        This API is associated with fetching the content hierarchy using a specific content ID on the Sunbird Platform.
          - The endpoint for **Get Content Hierarchy Object** is `/hierarchy/{Content_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Get Content Hierarchy
      parameters:
      - name: Content_ID
        in: path
        description: Please append a valid Content ID To the Request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-Authenticated-Userid
        in: header
        description: Represents the authorized User ID to execute the API.
        required: true
        schema:
          type: string
      - name: X-Channel-id
        in: header
        description: 'Represents a physical location (e.g: state) uniquely to which
          the user belongs.'
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      responses:
        200:
          description: SUCCESS. The **Read Content Hierarchy** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentHierarchyGetResponse'
        400:
          description: '''BAD REQUEST. The **Read Content Hierarchy** operation failed.
            You may have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: GET
          uri: /content/v1/read/<contentId>
          headers:
            Content-Type: application/json
            X-Authenticated-Userid: '{{user_id}}'
            X-Channel-id: channel
            Authorization: Bearer {{api_key}}
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Read Content
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /copy/{Content_ID}:
    post:
      tags:
      - Content APIs
      summary: Copy Content
      description: |-
        This API is associated with copying content on the Sunbird Platform.
           - The endpoint for **Copy Content** is `/copy/{Content_ID}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Copy Content
      parameters:
      - name: Content_ID
        in: path
        description: Please append a valid Content ID To the Request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json"
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The Registered User token to execute the API.
        required: true
        schema:
          type: string
      - name: x-channel-id
        in: header
        description: 'Represents a physical location (e.g: state) uniquely to which
          the user belongs.'
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: "The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload\n\
          - JSON  - XML data\nThe body is the representation of the resource object\
          \ for copying the content "
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyContentRequestBody'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CopyContentRequestBody'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CopyContentRequestBody'
        required: true
      responses:
        200:
          description: SUCCESS. The **Copy Content** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCopySuccessResponse'
        400:
          description: '''BAD REQUEST. The **Copy Content** operation failed. You
            may have missed input for a mandatory parameter.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /content/v1/create
          headers:
            Content-Type: application/json
            X-Authenticated-Userid: '{{user_id}}'
            X-Channel-id: channel
            Authorization: Bearer {{api_key}}
          body: |-
            {
              "request": {
                  "content": {
                      "description": "",
                      "code": "",
                      "createdBy": "",
                      "createdFor": ["", "", ""],
                      "creator": "",
                      "organization": [""]
                  }
              }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Create Content
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
components:
  schemas:
    CreateContentRequest:
      title: Create ContentRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentCreateContentObject'
    ContentCreateContentObject:
      title: ContentCreateContentObject
      required:
      - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ContentCreateObject'
    ContentCreateObject:
      title: ContentCreateObject
      required:
      - code
      - mimeType
      - name
      type: object
      properties:
        name:
          type: string
          description: Represents the name of the content
        code:
          type: string
          description: Represents the unique code for the content
        audience:
          type: string
          description: The target audience of the Content
          example: ""
        badgeAssertions:
          type: array
          description: List of Badges assigned to the content
          items:
            type: object
            properties: {}
        contentCredits:
          type: array
          description: List of Content Credits
          items:
            type: object
            properties: {}
        mimeType:
          type: string
          description: Content mime type
          example: ""
        mediaType:
          type: string
          description: Content media type
          example: ""
        appIcon:
          type: string
          description: Url link for content icon
        createdFor:
          type: array
          description: Content created for
          items:
            type: string
        board:
          type: string
          description: Education Board (Like MP Board, NCERT, etc)
        subject:
          type: array
          description: Subject of the Content to use to teach
          items:
            type: string
        medium:
          type: array
          description: 'Medium of instruction. e.g: English, Hindi etc'
          items:
            type: string
        publisher:
          type: string
          description: Publisher of the content (e.g. Pratham Books)
        author:
          type: string
          description: Author of the content.
        owner:
          type: string
          description: Owner of the content.
        attributions:
          type: array
          description: Attributions/Credits given to the person
          items:
            type: string
        collaborators:
          type: array
          description: List of Collaborators
          items:
            type: string
        creators:
          type: string
          description: List of primary contributors
        contributors:
          type: string
          description: List of secondary contributors
        copyright:
          type: string
          description: Name of the person who owns the content
        license:
          type: string
          description: License of the content
          example: ""
        language:
          type: string
          description: Languarge of the content
          example: ""
        gradeLevel:
          type: array
          description: Grade Level for which content is created
          items:
            type: string
        topic:
          type: array
          description: List of Topic
          items:
            type: string
        contentType:
          type: string
          description: 'Content Type. e.g: TextBook, Resource, etc'
          example: ""
        resourceType:
          type: string
          description: 'Resource Type. e.g: Learn, Teach, Play'
          example: ""
        keywords:
          type: array
          description: Keywords for content
          items:
            type: string
        description:
          type: string
          description: Description for the content
        body:
          type: string
          description: Content body for content. Only for ECML content
        editorState:
          type: string
          description: Editor State
        createdBy:
          type: string
          description: ID of the user who created Content
        creator:
          type: string
          description: Name of the user who created Content
        pragma:
          type: string
          description: Content pragma
          example: ""
        ownershipType:
          type: array
          description: Ownership Type of the Content
          example:
          - createdBy
          - createdFor
          items:
            type: string
        dialcodeRequired:
          type: string
          description: Is dialcode generation required or not
          example: ""
        badgeAssociations:
          type: object
          properties: {}
          description: List of Badge Associations
        framework:
          type: string
          description: Framework Id of Content
        organisation:
          type: array
          description: List of org names (partner names)
          items:
            type: string
    UpdateContentRequest:
      title: Update ContentRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentUpdateContentObject'
    ContentUpdateContentObject:
      title: ContentUpdateContentObject
      required:
      - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ContentUpdateObject'
    ContentUpdateObject:
      title: ContentUpdateObject
      required:
      - versionKey
      type: object
      properties:
        versionKey:
          type: string
          description: Version key of the content
        name:
          type: string
          description: Represents the name of the content
        audience:
          type: string
          description: The target audience of the Content
          example: ""
        badgeAssertions:
          type: array
          description: List of Badges assigned to the content
          items:
            type: object
            properties: {}
        contentCredits:
          type: array
          description: List of Content Credits
          items:
            type: object
            properties: {}
        appIcon:
          type: string
          description: Url link for content icon
        createdFor:
          type: array
          description: Content created for
          items:
            type: string
        board:
          type: string
          description: Education Board (Like MP Board, NCERT, etc)
        subject:
          type: array
          description: Subject of the Content to use to teach
          items:
            type: string
        medium:
          type: array
          description: 'Medium of instruction. e.g: English, Hindi etc'
          items:
            type: string
        publisher:
          type: string
          description: Publisher of the content (e.g. Pratham Books)
        author:
          type: string
          description: Author of the content.
        owner:
          type: string
          description: Owner of the content.
        attributions:
          type: array
          description: Attributions/Credits given to the person
          items:
            type: string
        collaborators:
          type: array
          description: List of Collaborators
          items:
            type: string
        creators:
          type: string
          description: List of primary contributors
        contributors:
          type: string
          description: List of secondary contributors
        copyright:
          type: string
          description: Name of the person who owns the content
        license:
          type: string
          description: License of the content
          example: ""
        language:
          type: string
          description: Languarge of the content
          example: ""
        gradeLevel:
          type: array
          description: Grade Level for which content is created
          items:
            type: string
        topic:
          type: array
          description: List of Topic
          items:
            type: string
        keywords:
          type: array
          description: Keywords for content
          items:
            type: string
        description:
          type: string
          description: Description for the content
        body:
          type: string
          description: Content body for content. Only for ECML content
        editorState:
          type: string
          description: Editor State
        creator:
          type: string
          description: Name of the user who created Content
        pragma:
          type: string
          description: Content pragma
          example: ""
        ownershipType:
          type: array
          description: Ownership Type of the Content
          example:
          - createdBy
          - createdFor
          items:
            type: string
        dialcodeRequired:
          type: string
          description: Is dialcode generation required or not
          example: ""
        badgeAssociations:
          type: object
          properties: {}
          description: List of Badge Associations
        framework:
          type: string
          description: Framework Id of Content
        organisation:
          type: array
          description: List of org names (partner names)
          items:
            type: string
    PublishContentRequest:
      title: Publish ContentRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentPublishContentObject'
    ContentPublishContentObject:
      title: ContentPublishContentObject
      required:
      - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ContentPublishObject'
    ContentPublishObject:
      title: ContentPublishObject
      required:
      - lastPublishedBy
      type: object
      properties:
        lastPublishedBy:
          type: string
          description: ""
        publishChecklist:
          type: array
          description: List of checklist mandatory for publishing the content.
          items:
            type: string
        publishComment:
          type: string
          description: Comment shared by publisher
    RetireContentRequest:
      title: Retire ContentRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentRetireObject'
    ContentRetireObject:
      title: ContentRetireObject
      type: object
    ReviewContentRequest:
      title: Review ContentRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentReviewObject'
    ContentReviewObject:
      title: ContentReviewObject
      type: object
    SearchContentRequest:
      title: Search ContentRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentSearchContentObject'
    ContentSearchContentObject:
      title: ContentSearchContentObject
      required:
      - fields
      - filters
      - sort_by
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/ContentSearchObject'
        sort_by:
          $ref: '#/components/schemas/SortBy'
        fields:
          type: array
          description: ""
          items:
            type: string
    ContentSearchObject:
      title: ContentSearchObject
      required:
      - channel
      - contentType
      - objectType
      - status
      type: object
      properties:
        channel:
          type: string
          description: ""
        objectType:
          type: array
          description: ""
          items:
            type: string
        contentType:
          type: array
          description: ""
          items:
            type: string
        status:
          type: array
          description: ""
          items:
            type: string
    SortBy:
      title: SortBy
      required:
      - createdOn
      type: object
      properties:
        createdOn:
          type: string
          description: ""
    FlagContentRequest:
      title: Flag ContentRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentFlagContentRequest'
    ContentFlagContentRequest:
      title: ContentFlagContentRequest
      required:
      - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ContentFlagObject'
    ContentFlagObject:
      title: ContentFlagObject
      required:
      - flagReasons
      - flaggedBy
      - versionKey
      type: object
      properties:
        flaggedBy:
          type: string
          description: ""
        flagReasons:
          type: array
          description: ""
          items:
            type: string
        versionKey:
          type: string
          description: ""
    FlagAcceptContentRequest:
      title: Publish ContentRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentFlagAcceptObject'
    ContentFlagAcceptObject:
      title: ContentFlagAcceptObject
      required:
      - versionKey
      type: object
      properties:
        versionKey:
          type: string
          description: ""
    FlagRejectContentRequest:
      title: Publish ContentRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentFlagRejectObject'
    ContentFlagRejectObject:
      title: ContentFlagRejectObject
      type: object
    RejectContentRequest:
      title: Reject ContentRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentRejectObject'
    ContentRejectObject:
      title: ContentRejectObject
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ContentRejectObjectRequest'
    ContentRejectObjectRequest:
      title: ContentRejectObjectRequest
      type: object
      properties:
        rejectReasons:
          type: array
          description: List of reject Reasons
          items:
            type: string
        rejectComment:
          type: string
          description: Reject comments
    UpdateHierarchyContentRequest:
      title: Update Hierarchy Content Request
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentUpdateHierarchyContentObject'
    ContentUpdateHierarchyContentObject:
      title: Content Update Hierarchy Object
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ContentUpdateHierarchyObject'
    ContentUpdateHierarchyObject:
      title: Content Update Hierarchy Object
      required:
      - hierarchy
      type: object
      properties:
        nodesModified:
          $ref: '#/components/schemas/ContentNodesModified'
        hierarchy:
          $ref: '#/components/schemas/ContentHierarchy'
    ContentNodesModified:
      title: Content Update Hierarchy Object
      required:
      - dummyNode
      type: object
      properties:
        dummyNode:
          $ref: '#/components/schemas/ContentDummyNode'
    ContentDummyNode:
      title: Content Metadata
      required:
      - metadata
      type: object
      properties:
        isNew:
          type: boolean
          description: Whether the content is new or existing
        root:
          type: boolean
          description: Whether the content is root node
        metadata:
          $ref: '#/components/schemas/ContentUpdateObject'
    ContentHierarchy:
      title: Content Hierarchy
      required:
      - dummyNode
      type: object
      properties:
        dummyNode:
          $ref: '#/components/schemas/DummyNodeHierarchy'
    DummyNodeHierarchy:
      title: Dummy Node Hierarchy
      type: object
      properties:
        name:
          type: string
          description: Represents the name of the content
        contentType:
          type: string
          description: Represents the content type of the content
        root:
          type: boolean
          description: Represents that the content is at root level in a hierarchial
            content tree
        children:
          type: array
          description: Represents the children node of the content tree
          items:
            type: string
    ContentCreateResponse:
      description: Create Content Response
      allOf:
      - $ref: '#/components/schemas/ResultWithNodeId'
      - $ref: '#/components/schemas/ResponseHeader'
    ContentUploadResponse:
      description: Upload Content Response
      allOf:
      - $ref: '#/components/schemas/ResultWithNodeIdAndUrl'
      - $ref: '#/components/schemas/ResponseHeader'
    ContentSearchResponse:
      description: Create Content Response
      allOf:
      - $ref: '#/components/schemas/ResultWithContentList'
      - $ref: '#/components/schemas/ResponseHeader'
    ContentUpdateHierarchyResponse:
      description: Create Content Response
      allOf:
      - $ref: '#/components/schemas/ResultUpdateHierarchy'
      - $ref: '#/components/schemas/ResponseHeader'
    ResultUpdateHierarchy:
      title: Result - Content Update Hierarchy
      required:
      - result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ResultUpdateHierarchyMap'
    ResultUpdateHierarchyMap:
      title: Result - Content Update Hierarchy
      type: object
      properties:
        content_id:
          type: string
          description: Parent content id
        identifiers:
          $ref: '#/components/schemas/NewContentMap'
    NewContentMap:
      title: Newly created content
      type: object
      properties:
        dummyNode:
          type: string
          description: Dummy Node Id
    ResultWithNodeId:
      title: Result Containing Node Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/NodeId'
    ResultWithNodeIdAndUrl:
      title: Result Containing Node Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/NodeIdAndUrl'
    ResultWithContentList:
      title: Result Containing Node Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ContentList'
    NodeId:
      title: Node Id
      type: object
      properties:
        node_id:
          type: string
          description: Node Identifier
        versionKey:
          type: string
          description: Represents the content version key
    NodeIdAndUrl:
      title: Node Id
      type: object
      properties:
        node_id:
          type: string
          description: Node Identifier
        versionKey:
          type: string
          description: Content version key
        content_url:
          type: string
          description: Content URL link
    ContentList:
      title: Content List
      type: object
      properties:
        count:
          type: number
          description: Represents the number of times the content is searched
        content:
          type: array
          description: Content object list
          items:
            type: object
            properties: {}
    ContentGetResponse:
      description: Get Content Response
      allOf:
      - $ref: '#/components/schemas/ResultWithContent'
      - $ref: '#/components/schemas/ResponseHeader'
    ResultWithContent:
      title: Result Containing Content Object
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ContentObject'
    ContentObject:
      title: Result Containing Content Object
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ContentProperties'
    ContentProperties:
      title: Node Id
      type: object
      properties:
        identifier:
          type: string
          description: It represents the Node
        name:
          type: string
          description: It is the name given to a node
        code:
          type: string
          description: Represents the Node associated with other specific node
        keywords:
          type: array
          description: It represents the Keywords associated with a node
          items:
            type: string
        downloadUrl:
          type: string
          description: Represents the S3 URL of the Ecar, which can be used for downloading
            the Ecar
        channel:
          type: string
          description: Represents the channel with which the content is associated
        description:
          type: string
          description: It denotes the description of content
        language:
          type: string
          description: Represents the language of the content
        variants:
          type: object
          properties: {}
          description: Represents the content variants based on medium of language
        mimeType:
          type: string
          description: Represents the mimetype of the content
        createdOn:
          type: string
          description: Represents the content creation date
        collections:
          type: array
          description: Represents the collections that are associated with content
          items:
            type: object
            properties: {}
        children:
          type: array
          description: Represents the children (nodes) associated with the content
          items:
            type: object
            properties: {}
        lastUpdatedOn:
          type: string
          description: Represents the date on which content was last updated
        mimeTypesCount:
          type: string
          description: Represents the count of  mimetypes in associated contents
        contentType:
          type: string
          description: Represents the type of content
        lastUpdatedBy:
          type: string
          description: Represents the user who updated the content previously
        audience:
          type: array
          description: Represents the audience of the content
          items:
            type: string
        toc_url:
          type: string
          description: Represents the S3 URL of the table of contents of a content
            file
        visibility:
          type: string
          description: Represents the visibility mode of the content
        contentTypesCount:
          type: string
          description: Represents the count of different content types within the
            associated content
        childNodes:
          type: array
          description: Lists the child nodes asociated with content
          items:
            type: string
        mediaType:
          type: string
          description: Represents the MediaType of the content
        lastPublishedBy:
          type: string
          description: Represents the date on which content was last published
        pkgVersion:
          type: string
          description: Represents the version of content package usually the last
            built package
        versionKey:
          type: string
          description: Represents the version number that was generated after last
            update
        tags:
          type: array
          description: Denotes the tags that are associated with the content
          items:
            type: string
        prevState:
          type: string
          description: Represents the previous state of the content
        s3Key:
          type: string
          description: Represents the S3 relative path of Ecar file
        framework:
          type: string
          description: Represents which framework was used to create the content
        size:
          type: integer
          description: Represents the size of the content
        lastPublishedOn:
          type: string
          description: Represents the date on which the content was last published
        leafNodesCount:
          type: integer
          description: Represents the total number of leaf nodes against the collection
            content
        compatibilityLevel:
          type: integer
          description: Represents the compatibility Level
        publisher:
          type: string
          description: Represents who is the publisher of the content
        resourceType:
          type: string
          description: Represents the type of the content
        status:
          type: string
          description: Represents the status of the content
        license:
          type: string
          description: Represents the youtube licence value
        previewUrl:
          type: string
          description: Represents the preview Url link
        artifactUrl:
          type: string
          description: Represents the artifact Url link
        lastSubmittedOn:
          type: string
          description: Represents the date for last Submitted On
        flagReasons:
          type: array
          description: Represents the Reasons of the flag
          items:
            type: string
        flaggedBy:
          type: array
          description: Represents the flaggedBy user
          items:
            type: string
        pragma:
          type: array
          description: Represents the pragma
          items:
            type: string
        subject:
          type: array
          description: Represents the subject of the content
          items:
            type: string
        medium:
          type: array
          description: Represents the medium of the content
          items:
            type: string
        topic:
          type: array
          description: Represents the topic of the content
          items:
            type: string
        board:
          type: string
          description: Represents the board of the content
        ownershipType:
          type: array
          description: Field for explaining Ownership type. There can be two possible
            value createdBy/createdFor. Default value is createdBy.
          items:
            type: string
        dialcodes:
          type: array
          description: List of dialcodes linked to the Content
          items:
            type: string
        origin:
          type: string
          description: Origin content
        originData:
          type: object
          properties: {}
          description: Origin Content metadata
        totalQuestions:
          type: number
          description: Total No of Questions
        totalScore:
          type: number
          description: Total Score
        reservedDialcodes:
          type: object
          properties: {}
          description: Reserved dialcodes for the content
        depth:
          type: number
          description: Depth for Collection Units
        totalCompressedSize:
          type: number
          description: Download File Size (in bytes)
        leafNodes:
          type: array
          description: List of leaf nodes to the collection
          items:
            type: string
    ContentHierarchyGetResponse:
      title: Get Content Response
      allOf:
      - $ref: '#/components/schemas/ResultWithContentHierarchyResponse'
      - $ref: '#/components/schemas/ResponseHeader'
    ResultWithContentHierarchyResponse:
      title: Result Containing Content Object
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ContentHierarchyResponseObject'
    ContentHierarchyResponseObject:
      title: Response Hierarchy Content Object
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ContentProperties'
    ResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: Represents the unique API Identifier
        ver:
          type: string
          description: Represents the API version information
        params:
          $ref: '#/components/schemas/ResponseParams'
        responseCode:
          type: object
          properties: {}
          description: Represents the API response code
    ResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: ID represents the response uniquely
        msgid:
          type: string
          description: Represents the unique ID of the response message
        err:
          type: string
          description: Represents the Error Code in case the execution fails
        status:
          type: string
          description: Represents the Response status when an API is called
        errmsg:
          type: string
          description: Represents the text that is part of response status
    EmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    ContentCreateErrorResponse:
      title: Create Content Error Response
      allOf:
      - $ref: '#/components/schemas/EmptyResult'
      - $ref: '#/components/schemas/ResponseHeader'
    CopyContentRequestBody:
      title: CopyContentRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContentCopyRequest'
    ContentCopyRequest:
      title: ContentCopyRequest
      required:
      - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/CopyContent'
    CopyContent:
      title: CopyContent
      required:
      - createdBy
      - createdFor
      - organization
      type: object
      properties:
        description:
          type: string
          description: Description of the content
        createdBy:
          type: string
          description: Copied Content created by
        createdFor:
          type: array
          description: Organisation id for which content is copied.
          items:
            type: string
        creator:
          type: string
          description: Name of the content creator
        organization:
          type: array
          description: Name of Organisation for which content is copied.
          items:
            type: string
        framework:
          type: string
          description: framework id for which content is copied
    ContentCopySuccessResponse:
      description: Copy Content Response
      allOf:
      - $ref: '#/components/schemas/ResponseHeader'
      - $ref: '#/components/schemas/ResultWithCopyContentId'
    ResultWithCopyContentId:
      title: Content Id
      type: object
      properties:
        result:
          type: object
          properties:
            sourceId:
              type: string
              example: copiedId
          description: result
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
