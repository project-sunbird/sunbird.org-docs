openapi: 3.0.1
info:
  title: Location Management API(s)
  description: "The Location management API resource is used to manage the the physical\
    \ location data of the following: \n  \n  - Users\n  - Organization\n\nOn the\
    \ basis of the data captured using this API resource, the location data helps\
    \ in grouping the users based on the location attribute.\n\nThe URL for Location\
    \ Management API(s) is `data/v1/location`\n\n**Note:** The parent location entity\
    \ used as parent code parameter represents the physical location (X) of a large\
    \ physical area, and incorporates locations of other smaller areas (Y). Similarly\
    \ location entity (Y) may incorporate futher smaller areas(Z) in each location\
    \ entity of (Y).   \n   \n   - You can say entity (X) is superset of location\
    \ entities in (Y). The (Y) location entity is the superset of location entities\
    \ in (Z). Also that (X), (Y) may have \"n\" number of \"Y\",\"Z\" entities respectively.\
    \  \n \n The location management API resources enables you to perform the following\
    \ operations:\n  - create\n  - update\n  - search "
  version: "1.0"
servers:
- url: https://staging.open-sunbird.org/api/data/v1/location
paths:
  /create:
    post:
      tags:
      - Location  API(s)
      summary: Create location
      description: "This API is used to create a physical location of a user or an\
        \ organization, depending upon the usecase\n  \n  - The endpoint for **Create\
        \ location** is `/create`\n  - The fields marked with an asterisk (*) are\
        \ mandatory. They cannot be null or empty.\n   "
      operationId: CreatePost
      parameters:
      - name: Authorization
        in: header
        description: '''To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.'''
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - It represents the set of parameters to be passed for creating a location
        content:
          multipart/form-data:
            schema:
              allOf:
              - $ref: '#/components/schemas/ApiRequest'
              - $ref: '#/components/schemas/CreateLocationRequest'
        required: true
      responses:
        200:
          description: SUCCESS. The **create location** operation was successful!
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  locationCreateResponse:
                    $ref: '#/components/schemas/locationCreateResponse'
        400:
          description: BAD REQUEST,**Create location** operation failed !The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  LocationErrorResponse:
                    $ref: '#/components/schemas/LocationErrorResponse'
        404:
          description: 'RESOURCE NOT FOUND.**Create Location ** operation failed !The
            possible reason for the failure is that requested resource could not be
            found '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  LocationErrorResponse:
                    $ref: '#/components/schemas/LocationErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  LocationErrorResponse:
                    $ref: '#/components/schemas/LocationErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /update:
    patch:
      tags:
      - Location  API(s)
      summary: Update Location
      description: "This API is associated with updating the location data of a user\
        \ or organization, \n   - The endpoint for **Update location** is `/update`\n\
        \   - The fields marked with an asterisk (*) are mandatory. They cannot be\
        \ null or empty.\n   \n**Note:** \n  - It's not allowed to update of type\
        \ of the location once it is created \n  - Incase, if you want to change the\
        \ type of the location, it is recommended to re-create a new location"
      operationId: locationUpdate
      parameters:
      - name: Authorization
        in: header
        description: To make use of any location API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - It represents the set of parameters to be passed for updating a location
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ApiRequest'
              - $ref: '#/components/schemas/UpdateLocationRequest'
        required: true
      responses:
        200:
          description: '''SUCCESS. The **Update location** operation was successful!'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  Result:
                    $ref: '#/components/schemas/Result'
        400:
          description: 'RESOURCE NOT FOUND.**Update Location ** operation failed !The
            possible reason for the failure is that requested resource could not be
            found '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  LocationErrorResponse:
                    $ref: '#/components/schemas/LocationErrorResponse'
        404:
          description: 'RESOURCE NOT FOUND.**Update Location ** operation failed !The
            possible reason for the failure is that requested resource could not be
            found '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  LocationErrorResponse:
                    $ref: '#/components/schemas/LocationErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  LocationErrorResponse:
                    $ref: '#/components/schemas/LocationErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /search:
    post:
      tags:
      - Location  API(s)
      summary: Search Location
      description: |-
        This API is associated with fetching the location data of a user or organization based on the criterias specified in the request body.
           - The endpoint for **Search location** is `/search`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: searchLocation
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any location API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the location to be searched
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ApiRequest'
              - $ref: '#/components/schemas/SearchLocationRequest'
        required: true
      responses:
        200:
          description: SUCCESS. The **Search location** operation was successful!
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  LocationListResponse:
                    $ref: '#/components/schemas/LocationListResponse'
        400:
          description: 'RESOURCE NOT FOUND.**Search location** operation failed !The
            possible reason for the failure is that requested resource could not be
            found '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  LocationErrorResponse:
                    $ref: '#/components/schemas/LocationErrorResponse'
        404:
          description: 'RESOURCE NOT FOUND.**Search Location ** operation failed !The
            possible reason for the failure is that requested resource could not be
            found '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  LocationErrorResponse:
                    $ref: '#/components/schemas/LocationErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  LocationErrorResponse:
                    $ref: '#/components/schemas/LocationErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
components:
  schemas:
    UpdateLocationRequest:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/LocationRequest'
    LocationRequest:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: The ID uniquely identifies a location
        name:
          type: string
          description: The name of the location
        code:
          type: string
          description: 'The alphanumeric string to represent a unique code of the
            location and the code can be either the code of state , district or any
            location type '
        parentCode:
          type: string
          description: "The alphanumeric string that uniquely identifies the location\
            \ of the parent entity The parent location entity represents the physical\
            \ location (X) of a large physical area, and incorporates locations of\
            \ other smaller areas (Y). Similarly location entity (Y) may incorporate\
            \ futher smaller areas(Z) in each location entity of (Y).   \n  - You\
            \ can say entity (X) is superset of location entities in (Y). The (Y)\
            \ location entity is the superset of location entities in (Z). Also that\
            \ (X), (Y) may have \"n\" number of \"Y\",\"Z\" entities respectively.\
            \  \n  - For example, If a an entity belongs to Z location , Z itself\
            \ is subset of Y location entity and Y itself is the subset of X location.\
            \ Here X entity is treated as parent entity. \n  - Depending on the usecase,\
            \ the parent location names vary"
        parentId:
          type: string
          description: 'This is a system generated ID that uniquely identifies the
            parent organization (location) for example: For a district, state ID will
            be the parent ID'
    CreateLocationRequest:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/Request'
    Request:
      required:
      - code
      - name
      - type
      type: object
      properties:
        name:
          type: string
          description: The name of the location
        code:
          type: string
          description: The alphanumeric string to represent a unique code of the location
            and the code can be either the code of state , district or any location
            type and it must be unique. for system AP, ap ,Ap,aP all four will be
            treated as some code.
        parentCode:
          type: string
          description: "The alphanumeric string that uniquely identifies the location\
            \ of the parent entity\n The parent location entity represents the physical\
            \ location (X) of a large physical area, and incorporates locations of\
            \ other smaller areas (Y). Similarly location entity (Y) may incorporate\
            \ futher smaller areas(Z) in each location entity of (Y).   \n      -\
            \ You can say entity (X) is superset of location entities in (Y). The\
            \ (Y) location entity is the superset of location entities in (Z). Also\
            \ that (X), (Y) may have \"n\" number of \"Y\",\"Z\" entities respectively.\
            \  \n     - For example, If a an entity belongs to Z location , Z itself\
            \ is subset of Y location entity and Y itself is the subset of X location.\
            \ Here X entity is treated as parent entity. \n     - Depending on the\
            \ usecase, the parent location names vary\n     - In case of non availability\
            \ of the parent entity, you can pass the parameter as empty"
        parentId:
          type: string
          description: 'This is a system generated ID that uniquely identifies the
            parent organization (location) for example: For a district, state ID will
            be the parent ID.'
        type:
          type: string
          description: 'type refer to valid location types: state,district,block,cluster '
    Result:
      title: Result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/deleteResp'
    ResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: The ID uniquely identifies the API Identifier
        ver:
          type: string
          description: The current version of the API version
        ts:
          type: string
          description: Represents the total ETA of API execution
        params:
          $ref: '#/components/schemas/ResponseParams'
        responseCode:
          type: string
          description: ok
    ResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: The ID uniquely identifies the response Message
        msgid:
          type: string
          description: The ID uniquely identifies the message in reponse
        err:
          type: string
          description: Represents the Error Code in case an errors occurs
        status:
          type: string
          description: Represents the response status of the request sent
        errmsg:
          type: string
          description: Represent the error message which comes as the API is executed
    EmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Represent the empty result state of the response
    deleteResp:
      title: This is the response body on deleting a location
      type: object
      properties:
        status:
          type: string
          description: Represent state of success or failure of the request
    LocationErrorResponse:
      title: This is the response body of create content error
      allOf:
      - $ref: '#/components/schemas/EmptyResult'
      - $ref: '#/components/schemas/ResponseHeader'
    SearchLocationRequest:
      title: This is the request body for searching location
      type: object
      properties:
        request:
          type: object
          properties:
            query:
              type: string
              description: Represents a search string
            filters:
              type: object
              properties:
                type:
                  type: string
                  description: 'Represents any valid key, value that can be passed
                    as single string or an array '
                parentId:
                  type: string
                  description: 'This is a system generated ID that uniquely identifies
                    the parent organization (location) for example: For a district,
                    state ID will be the parent ID'
                code:
                  type: string
                  description: The alphanumeric string to represent a unique code
                    of the location and the code can be either the code of state ,
                    district or any location type
            limit:
              type: integer
              description: Represents the set limit on how may records the user wants
                to get
            offset:
              type: integer
              description: The offset after which user want to read the records
    locationCreateResponse:
      title: This is the response body for create location
      type: object
      properties:
        result:
          type: object
          properties:
            id:
              type: string
              description: Represents the location ID in case the create request is
                successul
            response:
              type: string
              description: Represents the state of the request whether the API exaecution
                is successful or a failure
    LocationListResponse:
      title: This is the reponse body of list location
      type: object
      properties:
        result:
          type: object
          allOf:
          - $ref: '#/definitions/LocationList'
    LocationList:
      title: Represents the list of locations
      type: object
      properties:
        locations:
          type: array
          items:
            type: object
            allOf:
            - $ref: '#/definitions/LocationResponse'
    LocationResponse:
      title: This is the response body of single Location object
      type: object
      properties:
        result:
          type: object
          allOf:
          - $ref: '#/definitions/Location'
    Location:
      title: This is the data model for location object
      type: object
      properties:
        name:
          type: string
          description: Represents the name of the location
        code:
          type: string
          description: The alphanumeric string to represent a unique code of the location
            and the code can be either the code of state , district or any location
            type
        id:
          type: string
          description: This is a system generated ID that uniquely identifies the
            parent (organization)
        parentId:
          type: string
          description: 'This is a system generated ID that uniquely identifies the
            parent organization (location) for example: For a district, state ID will
            be the parent ID'
        type:
          type: string
          description: Uniquely identifies the kind of location object, for instance
            the values can be state or district or block or cluster
    ApiRequest:
      type: object
      properties:
        id:
          type: string
          description: Represents an API uniquely
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since
            EPOCH
          format: int64
        params:
          type: object
          properties:
            msgid:
              type: string
              description: Represents the unique ID of the message being sent
            did:
              type: string
              description: Represents the device UUID from which API is called
    ApiResponse:
      required:
      - ets
      - id
      - params
      - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since
            EPOCH
          format: int64
        params:
          required:
          - msgid
          - resmsgid
          - status
          type: object
          properties:
            msgid:
              type: string
              description: Represents the ID of the message sent
            resmsgid:
              type: string
              description: Represents the ID of the response message
            status:
              type: string
              enum:
              - success
              - error
        responseCode:
          type: string
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
    userToken:
      type: apiKey
      name: x-authenticated-user-token
      in: header
