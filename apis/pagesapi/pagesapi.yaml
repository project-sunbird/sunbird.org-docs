swagger: '2.0'
info:
  version: '1.0'
  title: Page API(s)
  description: >-
         The Page resources APIs are used to set up the current page, change settings, and configure how things will be displayed to the user
host: staging.open-sunbird.org
basePath: /api/data/v1/page
securityDefinitions:
  bearer:
      type: apiKey  # arbitrary name for the security scheme
      in: header # The secrity scheme parameter is in "header"
      name: Authorization # name of the header, query parameter or cookie
  userToken:
      type: apiKey  # arbitrary name for the security scheme
      in: header # The secrity scheme parameter is in "header"
      name: x-authenticated-user-token # name of the header, query parameter or cookie
schemes:
  - https
consumes:
  - application/json
  - multipart/form-data
  - application/x-www-form-urlencoded
produces:
  - application/json
paths:
  /create:
    post:
      description: >-
       This API is associated with creating a new page. To create a page first create the page section using section create api.make page name unique.
          - The **_/create_** endpoint executes the "create location" request based on parameters provided as metadata in the request body
          - Required fields cannot be left null or empty
      summary: Create Page
      tags:
      - Page APIs
      operationId: CreatePost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
            The body refers to the format of the request.
              - The body contains metadata about the request for creating a page.
        schema:
            allOf:
              - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
              - $ref: '#/definitions/CreatePagerequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which creating page request was sent.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API'
      responses:
        '200':
          description: 'OK ! Successful operation."create page" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "create page" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
  /section/list:
    get:
      description: >-
       This API is associated with fetching the settings of a page.
          - The **_/section/list_** endpoint executes the "fetch settings" request based on parameters provided as metadata in the request body
          - Required fields cannot be left null or empty
      summary: Fetch Page Settings
      tags:
      - Page APIs
      operationId: AllSettingsGet
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which fetch settings request was sent.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API'
      responses:
        '200':
          description: 'OK ! Successful operation."fetch settings" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "fetch settings" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: >-
           - INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.
  /read/{pageName}:
    parameters:
      - in: path
        name: pageName
        type: string
        required: true
        description: 'Please append a valid Section Id to the request URL' 
    get:
      description: >-
       This API is associated with fetching specific resources.
          - The **_/read/{pageName}_** endpoint executes the "get specific page resources" request based on parameters provided as metadata in the request body
          - Required fields cannot be left null or empty
      summary: Get Specific Page Resources
      tags:
      - Page APIs
      operationId: ResourceGet
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which get specific page resources request was sent.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API'
      responses:
        '200':
          description: 'OK ! Successful operation."get specific page resources" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "get specific page resources" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
  /section/create:
    post:
      description:  >-
       This API is associated with creating a new section on a page.
          - The **_/section/create_** endpoint executes the "create new section" request based on parameters provided as metadata in the request body
          - Required fields cannot be left null or empty
      summary: Create Page Section
      tags:
      - Page APIs
      operationId: SectionCreatePost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
            The body refers to the format of the request.
              - The body contains metadata about the request for creating geo location.
        schema:
           allOf:
              - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
              - $ref: '#/definitions/CreatePageSectionrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which create section request was sent.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API'
      responses:
        '200':
          description: 'OK ! Successful operation."create section" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "create section" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
  /section/update:
    patch:
      description:  >-
       This API is associated with updating content of a section on a page.
          - The **_section/update_** endpoint executes the "update section" request based on parameters provided as metadata in the request body
          - Required fields cannot be left null or empty
      summary: Update Page Section 
      tags:
      - Page APIs
      operationId: SectionUpdatePatch
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
            The body refers to the format of the request.
              - The body contains metadata about the request for creating geo location.
        schema:
          $ref: '#/definitions/UpdatePageSectionInforequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which updating page section request was sent.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API'
      responses:
        '200':
          description: 'OK ! Successful operation."page section" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "page section" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
  /section/read/{SectionId}:
    parameters:
      - in: path
        name: SectionId
        type: string
        required: true
        description: 'Please append a valid Section Id to the request URL' 
    get:
      description:  >-
       This API is associated with fetching specific section details.
          - The **_/section/read/{sectionId}_** endpoint executes the "fetch section" request based on parameters provided as metadata in the request body
          -  {...}refers to a section of endpoint URL path that needs to be replaced by appropriate Id
          - Required fields cannot be left null or empty
      summary: Fetch Section Details by Id
      tags:
      - Page APIs
      operationId: getSectionById
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which Fetch Section Details request was sent.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API'
      responses:
        '200':
          description: 'OK ! Successful operation."fetching section details" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "fetching section details" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
  /update:
    patch:
      description:  >-
       This API is associated with updating the page information
          - The **_update_** endpoint executes the "update page information" request based on parameters provided as metadata in the request body
          - Required fields cannot be left null or empty
      summary: Update Page Information
      tags:
      - Page APIs
      operationId: UpdatePageInfo
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
            The body refers to the format of the request.
              - The body contains metadata about the request for updating page info.
        schema:
          $ref: '#/definitions/UpdatePageInforequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which update page information request was sent.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API'
      responses:
        '200':
          description: 'OK ! Successful operation."update page information" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "update page information" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
  /assemble:
    post:
      description:  >-
       This API is associated with fetching page complete data.
          - The **_assemble_** endpoint executes the "Get Page data" request based on parameters provided as metadata in the request body
          - Required fields cannot be left null or empty
      summary: Get Page Data 
      tags:
      - Page APIs
      operationId: AssemblePage
      produces:
      - application/json
      parameters:
      - in : query
        name: orgdetails
        description: Extra data can be passed in query param with above mention key and comma separated value:Example ?orgdetails=email,name . Sunbird will take this query param and pass to content service as it is, and content service knows what need to be done.
        type: string
        required: false 
      - name: Body
        in: body
        required: true
        description: >-
            The body refers to the format of the request.
              - The body contains metadata about the request for Get Page data.
        schema:
          $ref: '#/definitions/Assemblerequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'
      - name: ts
        in: header
        required: true
        type: string
        description: 'Time Stamp at which Get Page Data request was sent.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'All User APIs require authorization for use. Specify the authorization key received from the administrator when placing the request for use of the API.'
      responses:
        '200':
          description: 'OK ! Successful operation."Get Page Data" operation was successfully executed.'
          schema:
            $ref: '#/definitions/ContentCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Get Page Data" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/ContentCreateErrorResponse'
        '500':
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong! These errors are tracked automatically, but if the problem persists feel free to contact us. In the meantime, try refreshing.'
definitions:
  CreatePagerequest:
    title: create pageRequest
    type: object
    properties:
      request:
        allOf:
         - $ref: '#/definitions/Request'
        example:
          name: Resources
          portalMap:
          - id: 01228383082462412826
            index: 1
            group: 1
          - id: 01228383384379392023
            index: 1
            group: 2
          appMap:
          - id: 01228383082462412826
            index: 1
            group: 1
          - id: 01228383384379392023
            index: 1
            group: 2
    required:
    - id
    - ts
    - params
    - request
  Request:
    title: Request
    example:
      name: Resources
      portalMap:
      - id: 01228383082462412826
        index: 1
        group: 1
      - id: 01228383384379392023
        index: 1
        group: 2
      appMap:
      - id: 01228383082462412826
        index: 1
        group: 1
      - id: 01228383384379392023
        index: 1
        group: 2
    type: object
    properties:
      name:
        description: 'name of your page'
        example: Resources
        type: string
      organisationId:
        description: 'your organisation id '
        type : string
      portalMap:
        description: ''
        example:
        - id: 012283830824655555
          index: 1
          group: 1
        - id: 01228383384372222
          index: 1
          group: 2
        type: array
        items:
          $ref: '#/definitions/PortalMap'
      appMap:
        description: ''
        example:
        - id: 0122838308244444
          index: 1
          group: 1
        - id: 01228383384374444444
          index: 1
          group: 2
        type: array
        items:
          $ref: '#/definitions/AppMap'
    required:
    - name
    - portalMap
    - appMap
  PortalMap:
    title: PortalMap
    example:
      id: 01228383082444444
      index: 1
      group: 1
    type: object
    properties:
      id:
        description: 'Section identifier'
        example: 01228380000000
        type: string
      index:
        description: 'if two section group value is same then index will decide section display order.'
        example: 1
        type: integer
        format: int32
      group:
        description: 'Position of section where you want to display.Example group 1 will come first then group 2 and so on..'
        example: 1
        type: integer
        format: int32
    required:
    - id
    - index
    - group
  AppMap:
    title: AppMap
    example:
      id: 012283830824555555
      index: 1
      group: 1
    type: object
    properties:
      id:
        description: ''
        example: 012283830824444
        type: string
      index:
        description: 'if two section group value is same then index will decide section display order.'
        example: 1
        type: integer
        format: int32
      group:
        description: 'Position of section where you want to display.Example group 1 will come first then group 2 and so on..'
        example: 1
        type: integer
        format: int32
    required:
    - id
    - index
    - group
  CreatePageSectionrequest:
    title: create page sectionRequest
    type: object
    properties:
      request:
        allOf:
         - $ref: '#/definitions/RecommendedTextBook'
    required:
    - id
    - ts
    - params
    - request
  RecommendedTextBook:
    title: RecommendedTextBook
    type: object
    properties:
      name:
        description: 'unique name of your section. it will refer to your page'
        example: Recommended TextBook
        type: string
      searchQuery:
        allOf:
         - $ref: '#/definitions/SearchQuery'
        example:
          request:
            query: ''
            filters:
              language:
              - English
              contentType:
              - TextBook
            limit: 10
            sort_by:
              lastUpdatedOn: desc
      sectionDataType:
        description: ''
        example: course
        type: string
      display:
        allOf:
         - $ref: '#/definitions/Display'
        example:
          name:
            en: popular story
            hi: लोकप्रिय कहानी
    required:
    - name
    - searchQuery
    - sectionDataType
    - display
  SearchQuery:
    title: SearchQuery
    type: object
    properties:
      request:
        allOf:
         - $ref: '#/definitions/SearchQReq'
    required:
    - request
  SearchQReq:
    title: SearchQReq
    type: object
    properties:
      query:
        description: 'Query is used for free text match.'
        type: string
      filters:
        allOf:
         - $ref: '#/definitions/Filters'
      limit:
        description: 'Data fetch limit'
        example: 10
        type: integer
        format: int32
      sort_by:
        allOf:
         - $ref: '#/definitions/SortBy'
        example:
          lastUpdatedOn: desc
    required:
    - query
    - filters
    - limit
    - sort_by
  Filters:
    title: Filters
    example:
      language:
      - English
      contentType:
      - TextBook
    type: object
    properties:
      language:
        description: ''
        example:
        - English
        type: array
        items:
          type: string
      contentType:
        description: ''
        example:
        - TextBook
        type: array
        items:
          type: string
    required:
    - language
    - contentType
  SortBy:
    title: SortBy
    example:
      lastUpdatedOn: desc
    type: object
    properties:
      lastUpdatedOn:
        description: ''
        example: desc
        type: string
    required:
    - lastUpdatedOn
  Display:
    title: Display
    example:
      name:
        en: popular story
        hi: लोकप्रिय कहानी
    type: object
    properties:
      name:
        allOf:
         - $ref: '#/definitions/Name'
    required:
    - name
  Name:
    title: Name
    type: object
    properties:
      en:
        description: 'Name of section that need to be displayed in english'
        example: popular story
        type: string
      hi:
        description: 'Name of section that need to be displayed in Hindi'
        example: लोकप्रिय कहानी
        type: string
    required:
    - en
    - hi
  UpdatePageSectionInforequest:
    title: update page section infoRequest
    example:
      id: unique API ID
      ts: 2013/10/15 16:16:39
      params: {}
      request:
        id: 0122662435116892160
        name: Popular Course
        searchQuery:
          request:
            query: ''
            filters:
              objectType:
              - Content
              mimeType:
              - application/vnd.ekstep.html-archive
              status:
              - Draft
              - Live
            offset: 0
            limit: 5
        sectionDataType: course
        display:
          name:
            en: popular Course
            hi: लोकप्रिय कोर्स
    type: object
    properties:
      id:
        description: ''
        example: unique API ID
        type: string
      ts:
        description: ''
        example: 2013/10/15 16:16:39
        type: string
      params:
        description: ''
        example: {}
        type: object
      request:
        $ref: '#/definitions/CreatePageSectionReq'
    required:
    - id
    - ts
    - params
    - request
  CreatePageSectionReq:
    title: CreatePageSectionReq
    type: object
    properties:
      id:
        description: ''
        example: 0122662435116892160
        type: string
      name:
        description: ''
        example: Popular Course
        type: string
      searchQuery:
        $ref: '#/definitions/SearchQReq'
      sectionDataType:
        description: ''
        example: course
        type: string
      display:
        allOf:
         - $ref: '#/definitions/Display'
    required:
    - id
    - name
    - searchQuery
    - sectionDataType
    - display
  UpdatePageInforequest:
    title: update page infoRequest
    type: object
    properties:
      id:
        description: ''
        example: unique API ID
        type: string
      ts:
        description: ''
        example: 2013/10/15 16:16:39
        type: string
      params:
        description: ''
        example: {}
        type: object
      request:
        $ref: '#/definitions/UpdatePageReq'
    required:
    - id
    - ts
    - params
    - request
  UpdatePageReq:
    title: Request structure for update page
    type: object
    properties:
      name:
        description: 'name of the page'
        type: string
      id:
        description: 'Page identifier,to identify the page'
        type: string
      portalMap:
        description: 'Map of list, contains all page section information, that need to be displayed inside portal'
        example:
        - id: 012283830824444444
          index: 1
          group: 1
        - id: 01228383384444444
          index: 1
          group: 2
        type: array
        items:
          $ref: '#/definitions/PortalMap'
      appMap:
        description: 'Map of list, contains all page section information, that need to be displayed inside portal'
        example:
        - id: 0122838308246444444
          index: 1
          group: 1
        - id: 0122838338437555555
          index: 1
          group: 2
        type: array
        items:
          $ref: '#/definitions/AppMap'
    required:
    - name
    - id
    - portalMap
    - appMap
  Assemblerequest:
    title: Assemble page request data
    type: object
    properties:
      id:
        description: ''
        example: unique API ID
        type: string
      ts:
        description: ''
        example: 2013/10/15 16:16:39
        type: string
      params:
        description: ''
        example: {}
        type: object
      request:
        allOf:
         - $ref: '#/definitions/AssemblePageRequest'
        example:
          source: web
          name: page
          filters:
            objectType:
            - Content
    required:
    - id
    - ts
    - params
    - request
  AssemblePageRequest:
    title: AssemblePageRequest
    example:
      source: web
      name: page
      filters:
        objectType:
        - Content
    type: object
    properties:
      source:
        description: 'possible values are app or web'
        example: web
        type: string
      name:
        description: 'name of your page'
        example: page
        type: string
      organisationId:
        description: 'if you pass the organisation id then system will try to match page name created by that organisation . if you have not created any page then don not pass organisationid key , you will get default creaetd page'
      filters:
        allOf:
         - $ref: '#/definitions/Filters'
        example:
          objectType:
          - Content
    required:
    - source
    - name
  ResultWithNodeId:
    title: Result Containing Node Id
    type: object
    properties:
      result:
        $ref: '#/definitions/EmptyResult'
  ContentCreateResponse:
    description: Create Content Response
    type: object
    allOf:
       - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
       - $ref: '#/definitions/ResultWithNodeId'
  EmptyResult:
    title: Empty Result
    type: object
    properties:
      result:
        type: object
        description: Empty Result
  ContentCreateErrorResponse:
    title: Create Content Error Response
    type: object
    allOf:
       - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
       - $ref: '#/definitions/EmptyResult'
