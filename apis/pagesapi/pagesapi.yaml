openapi: 3.0.1
info:
  title: Page API(s)
  description: |-
    - The Page resources APIs are used to set up the current page, change settings, and configure how things will be displayed to the user
    - The URL for Page API(s) is `/data/v1/page`
  version: "1.0"
servers:
- url: https://staging.open-sunbird.org/api/data/v1/page
paths:
  /create:
    post:
      tags:
      - Page APIs
      summary: Create Page
      description: |-
        This API is associated with creating a new page. To create a page first create the page section using section create api.make page name unique.
           - The endpoint for **Create Page** is `/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: CreatePost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which creating page request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for creating a page.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePagerequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreatePagerequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreatePagerequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."create page" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The "create page" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /create
          headers:
            Content-Type: application/json
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\r\n\"id\":\"unique API ID\",\r\n\"ts\":\"2013/10/15 16:16:39\"\
            ,\r\n\"params\": { },\r\n \"request\":{\r\n        \"name\":\"Resources\"\
            ,\r\n        \"portalMap\":[\r\n           {\r\n            \"id\":\"\
            01228383082462412826\",\r\n            \"index\":1,\r\n            \"\
            group\":1\r\n            \r\n          },\r\n           {\r\n        \
            \    \"id\":\"01228383384379392023\",\r\n             \"index\":1,\r\n\
            \            \"group\":2\r\n          }\r\n        ],\r\n        \"appMap\"\
            :[\r\n          {\r\n            \"id\":\"01228383082462412826\",\r\n\
            \             \"index\":1,\r\n            \"group\":1\r\n          },\r\
            \n           {\r\n            \"id\":\"01228383384379392023\",\r\n   \
            \          \"index\":1,\r\n            \"group\":2\r\n          }\r\n\
            \          ]\r\n        \r\n      }\r\n   }"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: create page
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /section/list:
    get:
      tags:
      - Page APIs
      summary: Fetch Page Settings
      description: |-
        This API is associated with fetching the settings of a page.
           - The endpoint for **Fetch Page Settings** is `/section/list`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: AllSettingsGet
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which fetch settings request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."fetch settings" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The "fetch settings" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: GET
          uri: /all/settings
          headers:
            Content-Type: application/json
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: get All Page Settings
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /read/{pageName}:
    get:
      tags:
      - Page APIs
      summary: Get Specific Page Resources
      description: |-
        This API is associated with fetching specific resources.
           - The endpoint for **Get Specific Page Resources** is `/read/{pageName}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: ResourceGet
      parameters:
      - name: pageName
        in: path
        description: Please append a valid Section Id to the request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which get specific page resources request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."get specific page resources" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The "get specific page resources" operation failed
            ! The possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: GET
          uri: /Resource
          headers:
            Content-Type: application/json
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: get particular page Settings
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /section/create:
    post:
      tags:
      - Page APIs
      summary: Create Page Section
      description: |-
        This API is associated with creating a new section on a page.
           - The endpoint for **Create Page Section** is `/section/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: SectionCreatePost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which create section request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for creating geo location.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePageSectionrequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreatePageSectionrequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreatePageSectionrequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."create section" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The "create section" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /section/create
          headers:
            Content-Type: application/json
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: |-
            {
            "id":"unique API ID",
            "ts":"2013/10/15 16:16:39",
            "params": { },
            "request":{

             "name":"Recommended TextBook",

             "searchQuery":{"request": {

                 "query":"",

                 "filters":

                 {"language":["English"],"contentType":["TextBook"]},"limit":10,"sort_by":{"lastUpdatedOn":"desc"}}},

             "sectionDataType" :"course",

             "display":{"name":{"en":"popular story","hi":"????????"}}

                    }

              }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: create page section
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /section/update:
    patch:
      tags:
      - Page APIs
      summary: Update Page Section
      description: |-
        This API is associated with updating content of a section on a page.
           - The endpoint for **Update Page Section** is `/section/update`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: SectionUpdatePatch
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which updating page section request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for creating geo location.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePageSectionInforequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdatePageSectionInforequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdatePageSectionInforequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."page section" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The "page section" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: PATCH
          uri: /section/update
          headers:
            Content-Type: application/json
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: |-
            {
            "id":"unique API ID",
            "ts":"2013/10/15 16:16:39",
            "params": { },
            "request":{

              "id":"0122662435116892160",

             "name":"Popular Course",

             "searchQuery":{"request": { "query": "","filters":{"objectType": ["Content"],"mimeType": ["application/vnd.ekstep.html-archive"],"status": ["Draft", "Live"]},"offset": 0,"limit": 5 }},

             "sectionDataType" :"course",

             "display":{

                    "name":{

                            "en":"popular Course",

                            "hi":"????????"

                              }

                      }

                    }

              }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: update page section info
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /section/read/{SectionId}:
    get:
      tags:
      - Page APIs
      summary: Fetch Section Details by Id
      description: |-
        This API is associated with fetching specific section details.
           - The endpoint for **Fetch Section Details by Id** is `/section/read/{sectionId}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Section0122771215738306560Get
      parameters:
      - name: SectionId
        in: path
        description: Please append a valid Section Id to the request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which Fetch Section Details request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."fetching section details" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The "fetching section details" operation failed
            ! The possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: GET
          uri: /section/read/0122771215738306560
          headers:
            Content-Type: application/json
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: get section details by id
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /update:
    patch:
      tags:
      - Page APIs
      summary: Update Page Information
      description: |-
        This API is associated with updating the page information
           - The endpoint for **Update Page Information** is `/update`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: UpdatePatch
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which update page information request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for updating page info.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePageInforequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdatePageInforequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdatePageInforequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."update page information" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The "update page information" operation failed
            ! The possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: PATCH
          uri: /update
          headers:
            Content-Type: application/json
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\r\n\"id\":\"unique API ID\",\r\n\"ts\":\"2013/10/15 16:16:39\"\
            ,\r\n\"params\": { },\r\n \"request\":{\r\n        \"name\":\"Resourcessss\"\
            ,\r\n        \"id\":\"01228394137835929612\",\r\n        \"portalMap\"\
            :[\r\n           {\r\n            \"id\":\"01228383082462412826\",\r\n\
            \            \"index\":1,\r\n            \"group\":1\r\n            \r\
            \n          },\r\n           {\r\n            \"id\":\"01228383384379392023\"\
            ,\r\n             \"index\":1,\r\n            \"group\":2\r\n        \
            \  }\r\n        ],\r\n        \"appMap\":[\r\n          {\r\n        \
            \    \"id\":\"01228383082462412826\",\r\n             \"index\":1,\r\n\
            \            \"group\":1\r\n          },\r\n           {\r\n         \
            \   \"id\":\"01228383384379392023\",\r\n             \"index\":1,\r\n\
            \            \"group\":2\r\n          }\r\n          ]\r\n        \r\n\
            \      }\r\n   }"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: update page info
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /assemble:
    post:
      tags:
      - Page APIs
      summary: Get Page Data
      description: |-
        This API is associated with fetching page complete data.
           - The endpoint for **Get Page Date** is `/assemble`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: AssemblePost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which Get Page Data request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for Get Page data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPageData~1Assemblerequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GetPageData~1Assemblerequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GetPageData~1Assemblerequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."Get Page Data" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The "Get Page Data" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /assemble
          headers:
            Content-Type: application/json
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\r\n\"id\":\"unique API ID\",\r\n\"ts\":\"2013/10/15 16:16:39\"\
            ,\r\n\"params\": { },\r\n \"request\":{\r\n         \"source\":\"web\"\
            ,\r\n         \"name\":\"page\",\r\n         \"filters\":{\r\n       \
            \          \"objectType\": [\"Content\"]\r\n                \r\n     \
            \    }\r\n      }\r\n   }"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: get page data / assemble
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
components:
  schemas:
    CreatePagerequest:
      title: create pageRequest
      required:
      - id
      - params
      - request
      - ts
      type: object
      properties:
        id:
          type: string
          description: ""
          example: unique API ID
        ts:
          type: string
          description: ""
          example: 2013/10/15 16:16:39
        params:
          type: object
          properties: {}
          description: ""
          example: {}
        request:
          $ref: '#/components/schemas/Request'
      example:
        id: unique API ID
        ts: 2013/10/15 16:16:39
        params: {}
        request:
          name: Resources
          organisationId: id of organisation, if you want to create page for your
            org only. if not pass then page will be created for all org.
          portalMap:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
          appMap:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
    Request:
      title: Request
      required:
      - appMap
      - name
      - portalMap
      type: object
      properties:
        name:
          type: string
          description: name of your page
          example: Resources
        organisationId:
          type: string
          description: 'your organisation id '
        portalMap:
          type: array
          description: ""
          example:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
          items:
            $ref: '#/components/schemas/PortalMap'
        appMap:
          type: array
          description: ""
          example:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
          items:
            $ref: '#/components/schemas/AppMap'
      example:
        name: Resources
        portalMap:
        - id: 1.2283830824624128E18
          index: 1
          group: 1
        - id: 1.228383384379392E18
          index: 1
          group: 2
        appMap:
        - id: 1.2283830824624128E18
          index: 1
          group: 1
        - id: 1.228383384379392E18
          index: 1
          group: 2
    PortalMap:
      title: PortalMap
      required:
      - group
      - id
      - index
      type: object
      properties:
        id:
          type: string
          description: ""
          example: 1.2283830824624128E18
        index:
          type: integer
          description: ""
          format: int32
          example: 1
        group:
          type: integer
          description: ""
          format: int32
          example: 1
      example:
        id: 1.2283830824624128E18
        index: 1
        group: 1
    AppMap:
      title: AppMap
      required:
      - group
      - id
      - index
      type: object
      properties:
        id:
          type: string
          description: ""
          example: 1.2283830824624128E18
        index:
          type: integer
          description: ""
          format: int32
          example: 1
        group:
          type: integer
          description: ""
          format: int32
          example: 1
      example:
        id: 1.2283830824624128E18
        index: 1
        group: 1
    CreatePageSectionrequest:
      title: create page sectionRequest
      required:
      - id
      - params
      - request
      - ts
      type: object
      properties:
        id:
          type: string
          description: ""
          example: unique API ID
        ts:
          type: string
          description: ""
          example: 2013/10/15 16:16:39
        params:
          type: object
          properties: {}
          description: ""
          example: {}
        request:
          $ref: '#/components/schemas/Request5'
      example:
        id: unique API ID
        ts: 2013/10/15 16:16:39
        params: {}
        request:
          name: Recommended TextBook
          searchQuery:
            request:
              query: ""
              filters:
                language:
                - English
                contentType:
                - TextBook
              limit: 10
              sort_by:
                lastUpdatedOn: desc
          sectionDataType: course
          display:
            name:
              en: popular story
              hi: ????????
    Request5:
      title: Request5
      required:
      - display
      - name
      - searchQuery
      - sectionDataType
      type: object
      properties:
        name:
          type: string
          description: unique name of your section. it will refer to your page
          example: Recommended TextBook
        searchQuery:
          $ref: '#/components/schemas/SearchQuery'
        sectionDataType:
          type: string
          description: ""
          example: course
        display:
          $ref: '#/components/schemas/Display'
      example:
        name: Recommended TextBook
        searchQuery:
          request:
            query: ""
            filters:
              language:
              - English
              contentType:
              - TextBook
            limit: 10
            sort_by:
              lastUpdatedOn: desc
        sectionDataType: course
        display:
          name:
            en: popular story
            hi: ????????
    SearchQuery:
      title: SearchQuery
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/Request7'
      example:
        request:
          query: ""
          filters:
            language:
            - English
            contentType:
            - TextBook
          limit: 10
          sort_by:
            lastUpdatedOn: desc
    Request7:
      title: Request7
      required:
      - filters
      - limit
      - query
      - sort_by
      type: object
      properties:
        query:
          type: string
          description: ""
        filters:
          $ref: '#/components/schemas/Filters'
        limit:
          type: integer
          description: ""
          format: int32
          example: 10
        sort_by:
          $ref: '#/components/schemas/SortBy'
      example:
        query: ""
        filters:
          language:
          - English
          contentType:
          - TextBook
        limit: 10
        sort_by:
          lastUpdatedOn: desc
    Filters:
      title: Filters
      required:
      - contentType
      - language
      type: object
      properties:
        language:
          type: array
          description: ""
          example:
          - English
          items:
            type: string
        contentType:
          type: array
          description: ""
          example:
          - TextBook
          items:
            type: string
      example:
        language:
        - English
        contentType:
        - TextBook
    SortBy:
      title: SortBy
      required:
      - lastUpdatedOn
      type: object
      properties:
        lastUpdatedOn:
          type: string
          description: ""
          example: desc
      example:
        lastUpdatedOn: desc
    Display:
      title: Display
      required:
      - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
      example:
        name:
          en: popular story
          hi: ????????
    Name:
      title: Name
      required:
      - en
      - hi
      type: object
      properties:
        en:
          type: string
          description: ""
          example: popular story
        hi:
          type: string
          description: ""
          example: ????????
      example:
        en: popular story
        hi: ????????
    UpdatePageSectionInforequest:
      title: update page section infoRequest
      required:
      - id
      - params
      - request
      - ts
      type: object
      properties:
        id:
          type: string
          description: ""
          example: unique API ID
        ts:
          type: string
          description: ""
          example: 2013/10/15 16:16:39
        params:
          type: object
          properties: {}
          description: ""
          example: {}
        request:
          $ref: '#/components/schemas/Request13'
      example:
        id: unique API ID
        ts: 2013/10/15 16:16:39
        params: {}
        request:
          id: 1.2266243511689216E17
          name: Popular Course
          searchQuery:
            request:
              query: ""
              filters:
                objectType:
                - Content
                mimeType:
                - application/vnd.ekstep.html-archive
                status:
                - Draft
                - Live
              offset: 0
              limit: 5
          sectionDataType: course
          display:
            name:
              en: popular Course
              hi: ????????
    Request13:
      title: Request13
      required:
      - display
      - id
      - name
      - searchQuery
      - sectionDataType
      type: object
      properties:
        id:
          type: string
          description: ""
          example: 1.2266243511689216E17
        name:
          type: string
          description: ""
          example: Popular Course
        searchQuery:
          $ref: '#/components/schemas/SearchQuery14'
        sectionDataType:
          type: string
          description: ""
          example: course
        display:
          $ref: '#/components/schemas/Display'
      example:
        id: 1.2266243511689216E17
        name: Popular Course
        searchQuery:
          request:
            query: ""
            filters:
              objectType:
              - Content
              mimeType:
              - application/vnd.ekstep.html-archive
              status:
              - Draft
              - Live
            offset: 0
            limit: 5
        sectionDataType: course
        display:
          name:
            en: popular Course
            hi: ????????
    SearchQuery14:
      title: SearchQuery14
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/Request15'
      example:
        request:
          query: ""
          filters:
            objectType:
            - Content
            mimeType:
            - application/vnd.ekstep.html-archive
            status:
            - Draft
            - Live
          offset: 0
          limit: 5
    Request15:
      title: Request15
      required:
      - filters
      - limit
      - offset
      - query
      type: object
      properties:
        query:
          type: string
          description: ""
        filters:
          $ref: '#/components/schemas/Filters16'
        offset:
          type: integer
          description: ""
          format: int32
          example: 0
        limit:
          type: integer
          description: ""
          format: int32
          example: 5
      example:
        query: ""
        filters:
          objectType:
          - Content
          mimeType:
          - application/vnd.ekstep.html-archive
          status:
          - Draft
          - Live
        offset: 0
        limit: 5
    Filters16:
      title: Filters16
      required:
      - mimeType
      - objectType
      - status
      type: object
      properties:
        objectType:
          type: array
          description: ""
          example:
          - Content
          items:
            type: string
        mimeType:
          type: array
          description: ""
          example:
          - application/vnd.ekstep.html-archive
          items:
            type: string
        status:
          type: array
          description: ""
          example:
          - Draft
          - Live
          items:
            type: string
      example:
        objectType:
        - Content
        mimeType:
        - application/vnd.ekstep.html-archive
        status:
        - Draft
        - Live
    UpdatePageInforequest:
      title: update page infoRequest
      required:
      - id
      - params
      - request
      - ts
      type: object
      properties:
        id:
          type: string
          description: ""
          example: unique API ID
        ts:
          type: string
          description: ""
          example: 2013/10/15 16:16:39
        params:
          type: object
          properties: {}
          description: ""
          example: {}
        request:
          $ref: '#/components/schemas/Request20'
      example:
        id: unique API ID
        ts: 2013/10/15 16:16:39
        params: {}
        request:
          name: Resourcessss
          id: 1.2283941378359296E18
          portalMap:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
          appMap:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
    Request20:
      title: Request20
      required:
      - appMap
      - id
      - name
      - portalMap
      type: object
      properties:
        name:
          type: string
          description: ""
          example: Resourcessss
        id:
          type: string
          description: ""
          example: 1.2283941378359296E18
        portalMap:
          type: array
          description: ""
          example:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
          items:
            $ref: '#/components/schemas/PortalMap'
        appMap:
          type: array
          description: ""
          example:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
          items:
            $ref: '#/components/schemas/AppMap'
      example:
        name: Resourcessss
        id: 1.2283941378359296E18
        portalMap:
        - id: 1.2283830824624128E18
          index: 1
          group: 1
        - id: 1.228383384379392E18
          index: 1
          group: 2
        appMap:
        - id: 1.2283830824624128E18
          index: 1
          group: 1
        - id: 1.228383384379392E18
          index: 1
          group: 2
    GetPageData/Assemblerequest:
      title: get page data / assembleRequest
      required:
      - id
      - params
      - request
      - ts
      type: object
      properties:
        id:
          type: string
          description: ""
          example: unique API ID
        ts:
          type: string
          description: ""
          example: 2013/10/15 16:16:39
        params:
          type: object
          properties: {}
          description: ""
          example: {}
        request:
          $ref: '#/components/schemas/Request24'
      example:
        id: unique API ID
        ts: 2013/10/15 16:16:39
        params: {}
        request:
          source: web
          name: page
          organisationId: id of the organisation optional
          filters:
            objectType:
            - Content
    Request24:
      title: Request24
      required:
      - name
      - source
      type: object
      properties:
        source:
          type: string
          description: possible values are app or web
          example: web
        name:
          type: string
          description: name of your page
          example: page
        organisationId:
          type: object
          description: if you pass the organisation id then system will try to match
            page name created by that organisation . if you have not created any page
            then don not pass organisationid key , you will get default creaetd page
        filters:
          $ref: '#/components/schemas/Filters25'
      example:
        source: web
        name: page
        filters:
          objectType:
          - Content
    Filters25:
      title: Filters25
      required:
      - objectType
      type: object
      properties:
        objectType:
          type: array
          description: ""
          example:
          - Content
          items:
            type: string
      example:
        objectType:
        - Content
    ResultWithNodeId:
      title: Result Containing Node Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/NodeId'
    ContentCreateResponse:
      description: Create Content Response
      allOf:
      - $ref: '#/components/schemas/ResultWithNodeId'
      - $ref: '#/components/schemas/ResponseHeader'
    ResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/ResponseParams'
        responseCode:
          type: object
          properties: {}
          description: 'API response code '
    ResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    EmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    NodeId:
      title: Node Id
      type: object
      properties:
        node_id:
          type: string
          description: Node Identifier
    ContentCreateErrorResponse:
      title: Create Content Error Response
      allOf:
      - $ref: '#/components/schemas/EmptyResult'
      - $ref: '#/components/schemas/ResponseHeader'
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
    userToken:
      type: apiKey
      name: x-authenticated-user-token
      in: header
