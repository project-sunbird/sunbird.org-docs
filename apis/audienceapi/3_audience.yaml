openapi: 3.0.1
info:
  title: Audience API(s)
  description: |-
    Audience API resources allow to get a count of users from a particular location.
    The URL for Audience API(s) is `framework/v1`
  version: "1.0"
servers:
- url: https://staging.open-sunbird.org/api/framework/v1
paths:
  /audience:
    post:
      summary: Get Audience Count for a location
      description: |-
        This API is associated with getting the user count foa specific location on the Sunbird Platform.
           - The endpoint for **Get Audience Count for a location** is `/audience`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: AudiencePost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: id
        in: header
        description: The Registered User ID to execute the API
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which **get audience count for a specific location**
          request was sent
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for getting a count of users foa a specific location.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTheAudienceCountForALocationsrequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GetTheAudienceCountForALocationsrequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GetTheAudienceCountForALocationsrequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation." get the audience count for a locations"
            operation was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The " get the audience count for a locations"
            operation failed ! The possible reason for failure is that you may have
            missed providing input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /audience
          headers:
            Content-Type: application/json
            id: id
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "\r\n{\r\n \"params\": { },\r\n    \"request\":{\r\n         \"locationIds\"\
            \ : [\"123\",\"456\"],\r\n         \"userListReq\" : false,\r\n      \
            \   \"estimatedCountReq\" : false\r\n   }\r\n}  "
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: get the audience count for a locations
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
components:
  schemas:
    GetTheAudienceCountForALocationsrequest:
      title: get the audience count for a locationsRequest
      required:
      - params
      - request
      type: object
      properties:
        params:
          type: object
          properties: {}
          description: ""
          example: {}
        request:
          $ref: '#/components/schemas/Request'
      example:
        params: {}
        request:
          locationIds:
          - 123
          - 456
          userListReq: false
          estimatedCountReq: false
    Request:
      title: Request
      required:
      - estimatedCountReq
      - locationIds
      - userListReq
      type: object
      properties:
        locationIds:
          type: array
          description: ""
          example:
          - 123
          - 456
          items:
            type: string
        userListReq:
          type: boolean
          description: ""
          example: false
        estimatedCountReq:
          type: boolean
          description: ""
          example: false
      example:
        locationIds:
        - 123
        - 456
        userListReq: false
        estimatedCountReq: false
    ResultWithNodeId:
      title: Result Containing Node Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/NodeId'
    ContentCreateResponse:
      description: Create Content Response
      allOf:
      - $ref: '#/components/schemas/ResultWithNodeId'
      - $ref: '#/components/schemas/ResponseHeader'
    ResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/ResponseParams'
        responseCode:
          type: object
          properties: {}
          description: 'API response code '
    ResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    EmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    NodeId:
      title: Node Id
      type: object
      properties:
        node_id:
          type: string
          description: Node Identifier
    ContentCreateErrorResponse:
      title: Create Content Error Response
      allOf:
      - $ref: '#/components/schemas/EmptyResult'
      - $ref: '#/components/schemas/ResponseHeader'
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
    userToken:
      type: apiKey
      name: x-authenticated-user-token
      in: header
