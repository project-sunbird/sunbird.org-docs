openapi: 3.0.1
info:
  title: User Feed  API
  description: '- The User Feed APIs  are used to store all alerts that could be presented
    to users. They also include alerts sent to users while migrating from one channel
    to another.'
  version: "1.0"
servers:
- url: https://staging.open-sunbird.org/api/
paths:
  /user/v1/feed/{User_ID}:
    get:
      tags:
      - User Feed APIs
      summary: Get user feed by User ID
      description: This API gets all pending feeds for a user as identified by the
        User ID.
      operationId: Get user by User ID
      parameters:
      - name: User_ID
        in: path
        description: Append a valid User ID To the Request URL.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request, if the same API is executed
          multiple times.
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify the authorization key (format: Bearer api-key) as received
          from the administrator while sending the  given API request.'
        required: true
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: The access token of the registered user sending the given API
          request.
        required: true
        schema:
          type: string
      responses:
        200:
          description: SUCCESS. The **Get User by User ID** operation was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserSingleResp'
        400:
          description: BAD REQUEST. The **Get User by User ID** operation failed.
            You may have missed input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
components:
  schemas:
    UnAuthorizedResponse:
      allOf:
      - $ref: '#/components/schemas/ResultWithEmptyBody'
      - $ref: '#/components/schemas/ApiResponse'
    ResultStatus:
      type: object
      properties:
        status:
          type: string
          description: Success or Failure
    EmptyResult:
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    UserErrorResponse:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - $ref: '#/components/schemas/EmptyResult'
    ResultWithEmptyBody:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ResultStatus'
    CreateUserSingleResp:
      type: object
      properties:
        request:
          type: object
          allOf:
          - $ref: '#/definitions/ApiRequest'
      description: Represents the  hold single userObject request
    ApiResponse:
      required:
      - ets
      - id
      - params
      - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since
            EPOCH
          format: int64
        params:
          required:
          - msgid
          - resmsgid
          - status
          type: object
          properties:
            msgid:
              type: string
              description: Represents the ID of the message sent
            resmsgid:
              type: string
              description: Represents the ID of the response message
            status:
              type: string
              enum:
              - success
              - error
        responseCode:
          type: string
    ApiRequest:
      type: object
      properties:
        id:
          type: string
          description: Represents an API uniquely
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since
            EPOCH
          format: int64
        params:
          type: object
          properties:
            msgid:
              type: string
              description: Represents the unique ID of the message being sent
            did:
              type: string
              description: Represents the device UUID from which API is called
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
    userToken:
      type: apiKey
      name: x-authenticated-user-token
      in: header
