swagger: '2.0'
info:
  version: '1.0'
  title: User Management  API(s)  
  description: >-
    The User Management API resources are used to manage individual users and their memberships, these resources allow you to add skills, block and unblock users, and encrypt user data. 
    <b>Note:</b> These resources can be used as a part of scripts or programs to allow authorized admininstators to manage the users.
host: staging.open-sunbird.org
basePath: /api/
securityDefinitions:
  bearer:
      type: apiKey  # arbitrary name for the security scheme
      in: header # The secrity scheme parameter is in "header"
      name: Authorization # name of the header, query parameter or cookie
  userToken:
      type: apiKey  # arbitrary name for the security scheme
      in: header # The secrity scheme parameter is in "header"
      name: x-authenticated-user-token # name of the header, query parameter or cookie
schemes:
  - https
consumes:
  - application/json
  - multipart/form-data
  - application/x-www-form-urlencoded
produces:
  - application/json
paths:
 /user/v1/create:
    post:
      description: >-
       This API is used to create a user 
          - **_/v1/create/_** endpoint executes the "Create User" request based on parameters provided as metadata in the request body
          - Mandatory fields cannot be null or empty
      summary: Create User
      tags:
      - User APIs
      operationId: Create User
      produces:
      - application/json
      parameters:
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata of the user being created     
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
             - JSON 
         
        schema:
           $ref: '#/definitions/CreateUserrequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
            Type of the request data. Set as application/json.
      - name: ts
        in: header
        required: false
        type: string
        description: 'Timestamp at which given API request is sent.'
      responses:
        '200':
          description: 'OK ! Successful operation."Create User" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Create User" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.' 
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'RESOURSE NOT FOUND. The "Create User" operation failed ! The possible reason for failure is the requested resource is not available.' 
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /user/v2/create:
    post:
      description: >-
       This API is used to create a user 
          - **_/v2/create/_** endpoint executes the "Create User" request based on parameters provided as metadata in the request body
          - Mandatory fields cannot be null or empty
      summary: Create User
      tags:
      - User APIs
      operationId: V2 Create User
      produces:
      - application/json
      parameters:
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata of the user being created     
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
         
        schema:
           $ref: '#/definitions/CreateUserRequestV2'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
            Type of the request data. Set as application/json.
      - name: ts
        in: header
        required: false
        type: string
        description: 'Timestamp at which given API request is sent.'
      responses:
        '200':
          description: 'OK ! Successful operation."Create User" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Create User" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.' 
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'RESOURSE NOT FOUND. The "Create User" operation failed ! The possible reason for failure is the requested resource is not available.' 
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false

 /user/v1/search:
    post:
      description: >-
       This API is used for searching a particular user 
          - **_/v1/search/_** endpoint executes the "Search User" request based on parameters provided as metadata in the request body.
           - Required fields cannot be left null or empty
      summary: Search User
      tags:
      - User APIs
      operationId: Search User
      produces:
      - application/json
      parameters:
      - in: query
        name: fields
        description: >-
        Additional fields can be returned in user search response using this query parameter. 
        Presently, only orgName field is supported. 
        When this field is specified, rootOrgName and orgName (for each organisation to which the user is associated) is returned in each user search result. 
        type: string
        required: false
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of metadata of the user being searched
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON  
           **Note**: You can search the user based on different user attributes
            - The attributes must be passed inside the filters of the request payload
        schema:
          $ref: '#/definitions/SearchUserRequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
            The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'To make use of any User API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It is a unique token/key to authenticate the user each time an API is called. For corresponding sessions this token is used, not your actual username/password
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the search user API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second.
      responses:
        '200':
          description: 'OK ! Successful operation."Search User" operation was successfully executed.'
          schema:
            $ref: '#/definitions/SearchUserResponse'
        '400':
          description: 'BAD REQUEST. The "Search User" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found. requested resource not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/search
          headers:
            Content-Type: application/json
            Authorization: Bearer {{api_key}}
            X-Authenticated-Userid: '{{user_id}}'
            ts: 2017-05-25 10:18:56:578+0530
          body: >-
            {
                "request": {
                    "filters":{
                      "userAttribute": ["value of user attribute , either you can pass single string or list"]
                    },
                    "limit": 500
                }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Search User
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /user/v1/profile/read:
    post:
      description: >-
        This API is used for getting information about the currently authenticated user
          - **_/v1/profile/read_** endpoint executes the "Get User By Login ID" request to fetch the user profile
          - It is mandatory to provide values for required parameters
      summary: Get User by Login ID
      tags:
      - User APIs
      operationId: Get User by Login ID
      produces:
      - application/json
      parameters:
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about the user being searched
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
          -  The body contains metadata about reading the user profile
          
           - **Note**: 
              
                - The login ID is ideally in the following format:  username@provider
               
                - While creating the user, if you haven't specified the provider name then your login ID would be same as username
        schema:
           allOf:
            - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
            - $ref: '#/definitions/GetUserByLoginIdRequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description:  >-
            The Content Type entity is the media type of the resource. Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the read user profile API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'To make use of any User API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
      responses:
        '200':
          description: 'OK ! Successful operation."Fetching User profile" operation was successfully executed.'
          schema:
            $ref: '#/definitions/CreateUserSingleResp'
        '400':
          description: 'BAD REQUEST,"Fetching User profile" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found,requested resource not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'   
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/profile/read
          headers:
            Content-Type: application/json
            x-authenticated-user-token: '{{user_id}}'
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api_key}}
          body: >-
            {
              "request": {
                "loginId": "test_apis_2@sunbird-integrator-test.org"
              }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get User by Login Id
        x-testDescription: create user
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /user/v1/read/{User_ID}:
    get:
      description: >-
        This API is used for searching a specific user, the user search is based on the unique ID of the user
          - **_/v1/read/{User_ID}_** endpoint executes the "Get User by User ID" request
          - It is mandatory to provide values for required parameters
          - User can pass an optional query parameter 'fields'. The value is a comma separated list of fields whose information is required in response. e.g. fields=completeness,missingFields,topic,organisations,roles
          - 'completeness' is to return profile completeness percentage.
          - 'missingFields' is to return fields that are missing to achieve 100% profile completeness.
          - 'topic' is to return list of topics that are used for announcements.
          - 'organisations' is to return organisation and location details.
          - 'roles' is to return list of roles with name and ID details.
      summary: Get User by User ID
      tags:
      - User APIs
      operationId: Get User by User ID
      produces:
      - application/json
      parameters:
      - in: path
        name: User_ID
        type: string
        required: true
        description: 'Please append a valid User Id To the Request URL and if user need any specific values like , profile completeness ,missingFields,topic Ex: ?Fields=completeness,missingFields,topic'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
            Type of the request data. Set as application/json.
      - name: ts
        in: header
        required: false
        type: string
        description: 'Timestamp at which given API request is sent.'
      - name: X-msgid
        in: header
        required: false
        type: string
        description: 'This ID uniquely identifies a request if the same API is executed multiple times.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'Specify authorization key (format: Bearer api-key) received from administrator when performing given API request.'
      - name: X-Authenticated-User-Token
        in: header
        required: true
        type: string
        description: >-
          Access token of registered user performing given API request.
      responses:
        '200':
          description: 'OK ! Successful operation."Get User by User ID" operation was successfully executed.'
          schema:
            $ref: '#/definitions/CreateUserSingleResp'
        '400':
          description: 'BAD REQUEST,"Get User by User ID" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: GET
          uri: /user/v1/read/{User_Id}
          headers:
            x-authenticated-user-token: '{{user_id}}'
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api_key}}
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get User by User ID
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /user/v2/read/{User_ID}:
    get:
      description: >-
        This API is used for searching a specific user, the user search is based on the unique ID of the user
          - **_/v2/read/{User_ID}_** endpoint executes the "Get User by User ID v2" request
          - It is mandatory to provide values for required parameters
          - User can pass an optional query parameter 'fields'. The value is a comma separated list of fields whose information is required in response. e.g. fields=completeness,missingFields,topic,organisations,roles
          - 'completeness' is to return profile completeness percentage.
          - 'missingFields' is to return fields that are missing to achieve 100% profile completeness.
          - 'topic' is to return list of topics that are used for announcements.
          - 'organisations' is to return organisation and location details.
          - 'roles' is to return list of roles with name and ID details.
          - Only necessary fields are returned in the response as per user profile configuration.
      summary: Get User by User ID v2
      tags:
      - User APIs
      operationId: Get User by User ID v2
      produces:
      - application/json
      parameters:
      - in: path
        name: User_ID
        type: string
        required: true
        description: 'Please append a valid User Id To the Request URI and if user need any specific values like , profile completeness ,missingFields,topic Ex: ?Fields=completeness,missingFields,topic'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
            Type of the request data. Set as application/json.
      - name: ts
        in: header
        required: false
        type: string
        description: 'Timestamp at which given API request is sent.'
      - name: X-msgid
        in: header
        required: false
        type: string
        description: 'This ID uniquely identifies a request if the same API is executed multiple times.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'Specify authorization key (format: Bearer api-key) received from administrator when performing given API request.'
      - name: X-Authenticated-User-Token
        in: header
        required: true
        type: string
        description: >-
          Access token of registered user performing given API request.
      responses:
        '200':
          description: 'OK ! Successful operation."Get User by User ID v2" operation was successfully executed.'
          schema:
            $ref: '#/definitions/GetUserResponse'
        '400':
          description: 'BAD REQUEST,"Get User by User ID v2" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'   
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: GET
          uri: /user/v1/read/{User_Id}
          headers:
            x-authenticated-user-token: '{{user_id}}'
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api_key}}
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get User by User ID v2
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false

 /user/v1/update:
    patch:
      description:  >-
        This API is use for updating the user realted details 
          - **_/v1/update/_** endpoint executes the "Update User" request
          - It is mandatory to provide values for required parameters
      summary: Update User
      tags:
      - User APIs
      operationId: Update User
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description:  >-
          - The body payload comprises of the metadata about the user to be updated.
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
        schema:
         allOf:
           - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
           - $ref: '#/definitions/UpdateUserRequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
            Type of the request data. Set as application/json.
      - name: ts
        in: header
        required: false
        type: string
        description: 'Timestamp at which given API request is sent.'
      - name: X-msgid
        in: header
        required: false
        type: string
        description: 'This ID uniquely identifies a request if the same API is executed multiple times.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'Specify authorization key (format: Bearer api-key) received from administrator when performing given API request.'
      - name: X-Authenticated-User-Token
        in: header
        required: true
        type: string
        description: >-
          Access token of registered user performing given API request.
      responses:
        '200':
          description: 'OK ! Successful operation."Update User" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Update User" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found. The "Update User" operation failed ! The possible reason for failure is that requested resource not found. here resource is user.'
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false  
 /user/v1/update/logintime:
    patch:
      description: >-
         This API is used to update user login time 
         
         - This API is executed after the user successfully logs in either from portal or the app 
         
         - On Sunbird, user login is handled by SSO(KeyCloak), you must call this API after successful login to update login time
         
          - It is mandatory to provide values for required parameters
      summary: Add Users Current Login Time
      tags:
      - User APIs
      operationId: '{{host}}/user/v1/updatelogin'
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about updating the users login time in the system
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
        schema:
          $ref: '#/definitions/UpdateLoginRequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
          The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the update user login time API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This Id Uniquely identifies a request if the same API is executed multiple times.'

      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For further sessions this token is exchanged, not the username/password of the user'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'To make use of any User API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
      responses:
        '200':
          description: 'OK ! Successful operation."Login Time" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Login Time" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'   
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
            
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: PATCH
          uri: /v1/user/update/logintime
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            X-Device-ID: X-Device-ID
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: 
          body: "{\r\n \"params\": { },\r\n    \"request\":{   \r\n      \"userId\":\"{userid}\"\r\n    }\r\n}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testDescription: Add user current login time
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /user/v1/role/read:
    get:
      description:  >-
       This API is used to list the assigned roles pertaining to a user
          - The **_/v1/role/read_** endpoint executes the "Get user role information" request based on parameters provided as metadata in the request body
          - It is mandatory to provide values for required parameters
      summary: Get User Role Information
      tags: 
      - User APIs
      operationId: V1RoleReadGet
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the read user role API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID uniquely identifies a request if the same API is executed multiple times.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'To make use of any User API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For corresponsing sessions, this token is exchanged, not the username/password of the user
      responses:
        '200':
          description: 'OK ! Successful operation."Get user roles" operation was successfully executed.'
          schema:
            $ref: '#/definitions/RolesResponse'
        '400':
          description: 'BAD REQUEST. The "Get user roles" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: GET
          uri: /v1/role/read
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/data/v1/role/read'
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /user/v1/profile/visibility:
    post:
      description:  >-
       This API is used to configure the visibility of user profile
          - The **_/profile/visibility_** endpoint executes the "user profile visibility" request based on parameters provided as metadata in the request body
          - It is mandatory to provide values for required parameters
      summary: User profile Visibility
      tags:
      - User APIs
      operationId: V1UserProfileVisibilityPost
      produces:
      - application/json
      parameters:
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about the user profile visibility request
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
     
        schema:
           allOf:
              - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
              - $ref: '#/definitions/VisibilityRequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the user profile visibility API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID uniquely identifies a request if the same API is executed multiple times.'

      - name: Authorization
        in: header
        required: true
        type: string
        description: 'To make use of any User API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It a unique token/key to authenticate the user each time an API is called. For corresponsing sessions, this token is exchanged, not the username/password of the user
      responses:
        '200':
          description: 'OK ! Successful operation."user profile visibility" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "user profile visibilty" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found, "user profile visibilty" operation failed ! The possible reason for failure is requested user id not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'  
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/profile/visibility
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\"request\":{\n  \"userId\":\"userid\",\n  \n  \"private\":[\"gender\",\"location\",\"address\"],\n  \"public\":[\"private field name which you want to make public\"]\n}}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/user/v1/profile/visibility'
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /user/v1/block:
    post:
      description:  >-
       This API is used to ban/block a user  
          - The **_/v1/block_** endpoint executes the "Block user" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for required parameters
      summary: Block user
      tags:
      - User APIs
      operationId: userBlock
      produces:
      - application/json
      parameters:
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about blocking a user request
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
     
        schema:
           allOf:
              - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest' 
              - $ref: '#/definitions/BlockUserReq'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the block user API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID uniquely identifies a request if the same API is executed multiple times.'

      - name: Authorization
        in: header
        required: true
        type: string
        description: 'To make use of any User API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It is a unique token/key to authenticate the user each time an API is called. For corresponsing sessions, this token is exchanged, not the username/password of the user
      responses:
        '200':
          description: 'OK ! Successful operation."user profile visibility" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "user profile visibilty" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found, "user profile visibilty" operation failed ! The possible reason for failure is requested user id not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'  
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/block
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\"request\":{\n  \"userId\":\"userid\"}}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /user/v1/unblock:
    post:
      description: >-
       This API is used to unban/unblock a user
          - The **_/v1/unblock_** endpoint executes the "unblock user" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for required parameters
      summary: Unblock user
      tags:
      - User APIs
      operationId: make deleted user active
      produces:
      - application/json
      parameters:
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about unblocking a user request
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
        schema:
           allOf:
              - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
              - $ref: '#/definitions/BlockUserReq'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the unblock API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID uniquely identifies a request if the same API is called multiple times.'

      - name: Authorization
        in: header
        required: true
        type: string
        description: 'To make use of any User API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It is a unique token/key to authenticate the user each time an API is called. For further sessions this token is exchanged, not the username/password of the user
      responses:
        '200':
          description: 'OK ! Successful operation."user profile visibility" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "user profile visibilty" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found, "user profile visibilty" operation failed ! The possible reason for failure is requested user id not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'  
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/unblock
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\"request\":{\n  \"userId\":\"userid\"}}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false  

 /user/v1/role/assign:
    post:
      description:  >-
       This API is used to assign roles to a user. It can also be used to replace and remove already assigned user roles. If a user should not be assigned any role in the organization, pass the role paramater as an empty array.
          - The **_/v1/role/assign_** endpoint executes the "Assign roles to a user" request based on parameters provided as metadata in the request body
          - It is mandatory to provide values for required parameters
       
      summary: Assign Role to User
      tags:
      - User APIs
      operationId: userV1RoleAssign

      produces:
      - application/json
      parameters:
      - name: request
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about assigning roles to a user.
          
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload.
             - JSON 
        schema:
           allOf:
              - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
              - $ref: '#/definitions/AssignRequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
          The Content-Type header specifies the media type of the resource. Set this to application/json.
      - name: ts
        in: header
        required: false
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the assign role API call has occurred, usually it gives date and time of the call, mostly accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID uniquely identifies a particular request of the same API which can be executed multiple times'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'To make use of any User API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received here.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It is a unique token/key to authenticate the user each time an API is called.
      responses:
        '200':
          description: 'OK ! Successful operation. "assign role" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "assign role" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'Resource not found'
          schema:
            $ref: '#/definitions/UserErrorResponse'   
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'   
 /user/v1/encrypt:
    get:
      description: >-
       This API is used for securing the user information with an encryption scheme  
          - The **_/v1/encrypt_** endpoint executes the "Encrypt User Information" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for required parameters
      summary: Encrypt User Information
      tags:
      - User APIs
      operationId: EncryptGet
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the encrypt user API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID Uniquely identifies a request if the same API is executed multiple times'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: 'The token/key used to execute the API.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'To make use of any User API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
      responses:
        '200':
          description: 'OK ! Successful operation."Encrypt User Information" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "Encrypt User Information" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
            
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
 /user/v1/skill/update:
    post:
      description: >-
       This API is used to assign/update skills to a user. It can also be used to replace and remove already assigned user skills. If a user wants to remove all skills then pass skill paramater as an empty array.
          - The **_/v1/skill/update_** endpoint executes the "Update user skills" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for required parameters.
      summary: Update User Skills
      tags:
      - User APIs
      operationId: UpdateUserSkills
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata required for updating user skills
        schema:
           allOf:
              - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
              - $ref: '#/definitions/UpdateUserSkillsRequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           Type of the request data. Set as application/json.
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp at which given API request is sent.
      - name: X-MsgId
        in: header
        required: true
        type: string
        description: 'This ID uniquely identifies a request if the same API is executed multiple times.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'Specify authorization key (format: Bearer api-key) received from administrator when performing given API request.'
      - name: X-Authenticated-User-Token
        in: header
        required: true
        type: string
        description: >- 
          It is a unique token to authenticate the user each time an API is called
      responses:
        '200':
          description: 'OK ! Successful operation. The requested operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserSuccessResponse'
        '400':
          description: 
            'CLIENT_ERROR. The Update User Skills operation failed due to bad request from client. Possible reasons for failure:
              - Mandatory parameter userId is missing.
              - Mandatory parameter skills is missing.
              - Invalid userId
              - skills data type should be of List.
            '
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '401':
          description: 
            'UNAUTHORIZED. The Update User Skills operation failed due to unauthorized request from client. Possible reasons for failure:
              - You are not authorized.
            '
          schema:
            $ref: '#/definitions/UnAuthorizedResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. The requested operation failed due to a server error.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - bearer: []
   
 /user/v1/skill/endorse/add:
    post:
      description: >-
       This API is used to endorse a skill of a user 
          - The **_/v1/skill/endorse/add_** endpoint executes the Add User Skill Endorsement request based on parameters provided as metadata in the request body
          - It is mandatory to provide values for required parameters
      summary: Add User Skill Endorsement
      tags:
      - User APIs
      operationId: AddUserSkillEndorsement
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata required for endorsing a skill of a user 
        schema:
           allOf:
              - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
              - $ref: '#/definitions/AddUserSkillEndorsementRequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           Type of the request data. Set as application/json
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp at which given API request is sent
      - name: X-MsgId
        in: header
        required: true
        type: string
        description: 'This ID uniquely identifies a request if the same API is executed multiple times.'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'Specify authorization key (format: Bearer api-key) received from administrator when performing given API request.'
      - name: X-Authenticated-User-Token
        in: header
        required: true
        type: string
        description: >- 
          It is a unique token to authenticate the user each time an API is called
      responses:
        '200':
          description: 'OK ! Successful operation. The requested operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserSuccessResponse'
        '400':
          description: 
            'CLIENT_ERROR. The requested operation failed due to bad request from client. Possible reasons for failure:
              -Can not endorse since both user belongs to different org.
              -Invalid endorsed userID.
              -Invalid skill name {skillName}.
            '
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '401':
          description: 
            'UNAUTHORIZED. The Update User Skills operation failed due to unauthorized request from client. Possible reasons for failure:
              - You are not authorized.
            '
          schema:
            $ref: '#/definitions/UnAuthorizedResponse'
        '404':
          description: >-
            'RESOURCE_NOT_FOUND. The requested operation failed as given resource is not existing on server. Possible reasons for failure:
            ...'
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. The requested operation failed due to a server error.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - bearer: []
 /user/v1/skill/add:
    post:
      description: >-
       This API is used to add a skill set to the user 
          - The **_/v1/skill/add_** endpoint executes the "add user skills" request based on parameters provided as metadata in the request body
          - It is mandatory to provide values for required parameters
      summary: Add User Skill
      tags:
      - User APIs
      operationId: UserV1SkillAddPost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
          - The body payload comprises of the metadata about adding skills to a user       
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
         
             - JSON 
        schema:
           allOf:
              - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
              - $ref: '#/definitions/AddSkillToUserRequest'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the add user skills API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID Uniquely identifies a request if the same API is executed multiple times'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'To make use of any User API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It is a unique token/key to authenticate the user each time an API is called. For further sessions this token is exchanged, not the username/password of the user
      responses:
        '200':
          description: 'OK ! Successful operation."add user skills" operation was successfully executed.'
          schema:
            $ref: '#/definitions/UserCreateResponse'
        '400':
          description: 'BAD REQUEST. The "add user skills" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/skill/add
          headers:
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: >2-
              {
            "request": {
                  "endorsedUserId":"userId",
                  "skillName":["ElasticSearch"]
            }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: add skill to user
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
        
 /user/v1/skill/read:
    post:
      description: >-
       This API is used to read user added skill.
          - The **_/user/v1/skill/read_** endpoint executes the "read user skill" request based on parameters provided as metadata in the request body
          - It is mandatory to provide values for required parameters
      summary: get user skill
      tags:
      - User APIs
      operationId: UserV1SkillRead
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
        
          - The body payload comprises of metadata on adding skills for a user  
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
            - application/json
        schema:
          allOf:
              - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
              - $ref: '#/definitions/ReadUserSkill'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the add user skills API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID Uniquely identifies a request if the same API is executed multiple times'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'To make use of any User API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It is a unique token/key to authenticate the user each time an API is called. For further sessions this token is exchanged, not the username/password of the user
      responses:
        '200':
          description: 'OK ! Successful operation."add user skills" operation was successfully executed.'
          schema:
             allOf:
              - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
              - $ref: '#/definitions/GetUserSkill'
        '400':
          description: 'BAD REQUEST. The "add user skills" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/skill/add
          headers:
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: >2-
              {
            "request": {
                  "endorsedUserId":"userId",
                  "skillName":["ElasticSearch"]
            }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: add skill to user
        x-testDescription: ''
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false 
        
 /user/v1/tnc/accept:
    post:
      description: >-
       This API is used to accept terms and condition by user.
          - The **_/user/v1/tnc/accept_** endpoint executes the "accept tnc api" request based on parameters provided as metadata in the request body
          - It is mandatory to provide values for required parameters
      summary: accept terms and condition
      tags:
      - User APIs
      operationId: AcceptTnc
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        description: >-
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
             - application/json 
        schema:
          allOf:
              - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
              - $ref: '#/definitions/AcceptTnc'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource
            Possible media types can be:- 
              - Application/json
      - name: ts
        in: header
        required: true
        type: string
        description: >-
          Timestamp is a sequence of characters or encoded information identifying when the add user skills API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID Uniquely identifies a request if the same API is executed multiple times'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'To make use of any User API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It is a unique token/key to authenticate the user each time an API is called. For further sessions this token is exchanged, not the username/password of the user
      responses:
        '200':
          description: 'OK ! Successful operation."add user skills" operation was successfully executed.'
          schema:
             allOf:
              - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
              - $ref: '#/definitions/successResponse'
        '400':
          description: 'BAD REQUEST. The "add user skills" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
 /data/v1/skills:
    get:
      description: >-
       This API is associated with listing all the skills that a user possess
          - The **_/data/v1/skills_** endpoint executes the "list all user skills" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for required parameters
      summary: List all Skills
      tags:
      - User APIs
      operationId: DataV1SkillsGet
      produces:
      - application/json
      parameters:
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
      - name: ts
        in: header
        required: true
        type: string
        description: >
          Timestamp is a sequence of characters or encoded information identifying when the list user skills API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID Uniquely identifies a request if the same API is called multiple times'
      - name: x-authenticated-user-token
        in: header
        required: true
        type: string
        description: >- 
          It is a unique token/key to authenticate the user each time an API is called. For corresponsing sessions, this token is exchanged, not the username/password of the user
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'To make use of any User API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
      responses:
        '200':
          description: 'OK ! Successful operation."list user skills" operation was successfully executed.'
          schema:
            $ref: '#/definitions/SkillsResp'
        '400':
          description: 'BAD REQUEST. The "list user skills" operation failed ! The possible reason for failure is that you may have missed providing input for a mandatory parameter.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
  
 /user/v1/get:
    get:
      description: >-
       This API will check user associated with key exist in sunbird or not.Incase user exist then it will provide user details in response. 
       - The **_/user/v1/get/idType/idTypeValue_** endpoint executes the "get user by key" request based on parameters provided as metadata in the request body.
          - It is mandatory to provide values for required parameters
      summary: Get user by key
      tags:
      - User APIs
      operationId: GetUserByKey
      produces:
      - application/json
      parameters:
      - name: idType
        in : path 
        required: true
        type: string
        description: 'allowed idType values {email,phone and loginId}'
      -  name: idTypeValue
         in: path 
         required: true
         type: string
         description: 'allowed id type value will be based on idType,Incase of email value should be emailId, for phone value should be valid phone number.'
      - name: Content-Type
        in: header
        required: true
        type: string
        description: >-
           The Content Type entity is the media type of the resource.
            Possible media types can be:- 
              - Application/json
      - name: ts
        in: header
        required: true
        type: string
        description: >
          Timestamp is a sequence of characters or encoded information identifying when the list user skills API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second.
      - name: X-msgid
        in: header
        required: true
        type: string
        description: 'This ID Uniquely identifies a request if the same API is called multiple times'
      - name: Authorization
        in: header
        required: true
        type: string
        description: 'To make use of any User API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.'
      responses:
        '200':
          description: 'OK ! Successful operation."User found with provided idtype and value" operation was successfully executed.'
          schema:
            $ref: '#/definitions/GetUserResponse'
        '400':
          description: 'BAD REQUEST. The "get user by key" operation failed ! The possible reason for failure is provided idType and idTypeValue validation failed. Ex: idType is phone but idTypeValue is not a valid phone number or provided idType is unknown.'
          schema:
            $ref: '#/definitions/UserErrorResponse'
        '404':
          description: 'RESOUCE NOT FOUND. The "get user by key" operation failed ! The possible reason for failure is, user not found with provider idType and idTypeValue'
          schema:
            $ref: '#/definitions/UserErrorResponse'    
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try to set it right at the earliest. Try refreshing the page. If the problem persists contact us at info@sunbird.org.'
          schema:
            $ref: '#/definitions/UserErrorResponse'          
definitions:
  CreateUserrequest:
    description: User object
    type: object
    allOf:
       - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
       - $ref: '#/definitions/CreateUserSingleResp'
  CreateUserRequestV2:
    description: User object
    type: object
    allOf:
       - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiRequest'
       - $ref: '#/definitions/CreateUserSingleRespV2'

  CreateUserSingleResp:
   description: Represents the  hold single userObject request
   type: object
   properties:
      request:
       type: object
       allOf:
         - $ref: '#/definitions/UserReq'

  CreateUserSingleRespV2:
   description: Request body for user v2 creation
   type: object
   properties:
      request:
       type: object
       allOf:
         - $ref: '#/definitions/UserReqV2'

  RolesResponse:
   description: Represents the hold roles response
   type: array
   items:
    type: object
    properties:
     roles:
       type: object
       allOf:
       - $ref: '#/definitions/Role'
  
  Role:
    description: Represents the request body for role

    type: array
    items:
     type: object
     properties:
      actionGroups:
        type: object
        properties:
         name:
          type: string
         id:
          type: string
         actions:
          type: array
          items:
           type: object
           properties:
            urls:
             type: array
             items:
              type: string
  
  BlockUserReq:
    description: request body for block user
    type: object
    properties:
     request:
      type: object
      properties:
       userId:
        type: string  
        description: userId 
    
  
  SkillsResp:
   description: contains list of skills
   type: object
   properties:
     skills:
      type: object
      allOf:
       - $ref: '#/definitions/Skills' 
     
     
  Skills:
    description: contains skills details
    type: array
    items:
      type: string
  UserReq:
    title: User Object
    type: object
    properties:
          firstName:
            type: string
          lastName:
            type: string
          password:
            type: string
          email:
            type: string
            description: Represents email of user. Either email or phone is mandatory for user creation. If email is provided then emailVerified attribute should be set to true. Likewise, if phone is provided then phoneVerified attribute should be set to true.
          emailVerified:
            type: boolean
            description: Indicates verification status of user email. Only verified email is accepted.
          phone:
            type: string
            description: Represents phone of user. Either email or phone is mandatory for user creation. If email is provided then emailVerified attribute should be set to true. Likewise, if phone is provided then phoneVerified attribute should be set to true.
          phoneVerified:
            type: boolean
            description: Indicates verification status of user phone. Only verified phone is accepted.
          avatar:
            type: string
          language:
            type: array
            items:
             type: string
             description: 'Represents the langauage that user is known to'
          gender:
            type: string
          subject:
            type: array
            items:
             type: string
          channel:
            type: string
            description: >-      
              'Represents the channel value received while creating a rootOrg
              - if you provide channel value, then you will get associated with that particular root organization  
              - if the channel is not provided in request body, the system reads the custodian channel from the system setting else reads it from the environment variable and uses it to associate the user with that root organization
              - if the channel value is not provided in either the request or the envronment variables, then user creation will fail.'
          externalIds:
            type: array
            items:
              type: object
              allOf:
                - $ref: "#/definitions/ExternalId" 
          profileSummary:
            type: string
          userName:
            type: string
          dob:
            type: string
            format: YYYY-MM-DD
            example: '2001-02-27'
          grade:
            type: string
          location:
            type: string
            description: 'Represents the current location of the  user'
          education:
            type: array
            items:
             type : object
             allOf:
              - $ref: "#/definitions/Education"
          profileVisibility:
            type: object
            description: 'Represents the profile visibility, it is a map having key as any user attribute and the value can be public or private'
          address: 
            type: array
            items:
              type: object
              allOf:
               - $ref: "#/definitions/Address"
            description: 'Represents the address, it contains list of address object'
          jobProfile:
            type: array
            items:
              type: object
              allOf:
               - $ref: "#/definitions/JobProfile"
          webPages:
            type: object
            properties:
              type:
                type: string
              url:
                type: string
          promptTnC:
            type: boolean
            description: 'Allow caller to decide terms and condition need to be displayed or not. if value is true means user need to accept terms and condition.'
          tncAcceptedVersion:
            type: string
            description: 'Which Tnc verison user has accepted it.'
          tncAcceptedOn:
            type: string
            description: 'Date and time on whcih user has accepted tnc'
          tncLatestVersion:
            type: string
            description: 'Available latest version of tnc'
          tncLatestVersionUrl:
            type: string
            description: 'Web url of tnc latest version'
    required:
      - firstName
      - userName

  GetUserResponse:
    title: Get User by User ID response
    type: object
    properties:
          email:
            type: string
            description: User Email ID
          firstName:
            type: string
            description: User's first name
          lastName:
            type: string
            description: User's last name
          gender:
            type: string
            description: User's gender
          phone:
            type: string
            description: User's phone number
          phoneVerified:
            type: boolean
            description: >-
              Either email or phone is required for user creation. This attribute is required with value as true in case phone is specified during user creation.
          framework:
            type: object
            allOf:
             - $ref: "#/definitions/frameworkData"
          channel:
            type: string
            description: >-
              'Represents the channel value received while creating a root organisation
              - if you provide channel value, then you will get associated with that particular root organisation  
              - if the channel is not provided in request body, the system reads the custodian channel from the system setting else reads it from the environment variable and uses it to associate the user with that root organisation
              - if the channel value is not provided in either the request or the envronment variable, then user creation will fail.'
          externalIds:
            type: array
            items:
              type: object
              allOf:
                - $ref: "#/definitions/ExternalId"
          profileSummary:
            type: string
          education:
            type: array
            items:
             type : object
             allOf:
             - $ref: "#/definitions/Education"
          profileVisibility:
            type: object
            description: 'Represents the profile visibility, it is a map having key as any user attribute and the value can be public or private'
          address:
            type: array
            items:
              type: object
              allOf:
              - $ref: "#/definitions/Address"
            description: 'Represents the address, it contains list of address object'
          jobProfile:
            type: array
            items:
              type: object
              allOf:
              - $ref: "#/definitions/JobProfile"
          webPages:
            type: object
            properties:
              type:
                type: string
              url:
                type: string
          organisations:
            type: array
            items:
              type: object
              allOf:
              - $ref: "#/definitions/organisation"
          roleList:
            type: array
            items:
              type: object
              allOf:
              - $ref: "#/definitions/roleList"
    required:
      - firstName
      - password
      - email
      - userName
      - phone

  organisation:
    title: Organisation details
    type: object
    properties:
     organisationId:
      type: string
      description: Organisation ID
     updatedBy:
      type: string
      description : Identifier of user who updated user and org mapping
     addedBy:
      type: string
      description : Identifier of user who added user and org mapping
     roles:
      type: array
      items:
       type: string
       description : List of assigned roles
     userId:
        type: string
        description: User ID
     isDeleted:
        type: boolean
        description : User status (active or inactive) within given organisation
     hashTagId:
        type: string
        description : Same as organisation ID
     id:
        type: string
        description: Same as organisation ID
     orgjoindate:
        type: string
        description : Date and time when user joined the organisation
     orgName:
        type : string
        description : Organisation name
     description:
        type: string
        description : Organisation description
     channel:
        type: string
        description: 'rootOrg channel value'
     locationIds :
        type: array
        items:
         type: string
     locations:
        type: array
        items:
         type: object
         properties:
          code:
            type: string
            description : Location code
          name:
            type: string
            description: Name of location
          id:
            type: string
            description : Location ID
          type:
            type: string
            description : Location type. Supported location types are - state, district, block and cluster
          parentId:
            type: string
            description: Parent location ID in case of district and block location types.
  roleList:
        type: object
        properties:
         id:
          type: string
          description : Role ID
         name:
          type: string
          description : Name of role

  UserReqV2:
    title: User Object
    type: object
    properties:
          firstName:
            type: string
          lastName:
            type: string
          password:
            type: string
          email:
            type: string
            description: Represents email of user. Either email or phone is mandatory for user creation. If email is provided then emailVerified attribute should be set to true. Likewise, if phone is provided then phoneVerified attribute should be set to true.
          emailVerified:
            type: boolean
            description: Indicates verification status of user email. Only verified email is accepted.
          phone:
            type: string
            description: Represents phone of user. Either email or phone is mandatory for user creation. If email is provided then emailVerified attribute should be set to true. Likewise, if phone is provided then phoneVerified attribute should be set to true.
          phoneVerified:
            type: boolean
            description: Indicates verification status of user phone. Only verified phone is accepted.
          language:
            type: array
            items:
             type: string
             description: 'Represents the language that is known to user'
          organisationId:
            type: string
          channel:
            type: string
            description: >-      
              'Represents the channel value received while creating a rootOrg'
          externalIds:
            type: array
            items:
              type: object
              allOf:
                - $ref: "#/definitions/ExternalId" 
          profileSummary:
            type: string
          userName:
            type: string
          dob:
            type: string
            format: YYYY-MM-DD
            example: '2001-02-27'
          grade:
            type: string
          location:
            type: string
            description: 'Represents the current location of the  user'
          education:
            type: array
            items:
             type : object
             allOf:
             - $ref: "#/definitions/Education"
          address: 
            type: array
            items:
              type: object
              allOf:
              - $ref: "#/definitions/Address"
            description: 'Represents the address, it contains list of address object'
          jobProfile:
            type: array
            items:
              type: object
              allOf:
              - $ref: "#/definitions/JobProfile"
          webPages:
            type: object
            properties:
              type:
                type: string
              url:
                type: string
    required:
      - firstName
    
  User:
    type: object
    properties:
          id:
            type: string
          email:
            type: string
            description: 'Represents the email of the user'
          firstName:
            type: string
          lastName:
            type: string
          password:
            type: string
          avatar:
            type: string
          language:
            type: array
            items:
             type: string
             description: Represents any known language of the user
          gender:
            type: string
          phone:
            type: string
          phoneVerified:
            type: boolean
            description: >- 
              Represents that a key is required with value 
              - True, if you pass both phone number and provider values
              - Alternatively false , as Create User if you have provided either email or phone 
          status:
            type: integer
            format: int32
            description: user status 
          subject:
            type: array
            items:
             type: string
          roles:
            type: array
            items: 
             type: string
             description: >- 
              Represents the user roles that are independent to any org. 
               **Note:** This API does not access the roles parameters, even if user passes the roles API(create or update ), these parameters are ignored  
          provider:
            type: string
            description: 'Represents the value of provider, this can just be the name of an organisation or code of an organisation, it is used to identify an organisation'
          externalId:
            type: string
            description: 'Represents a user identifier in some other system'
          channel:
            type : string
            description : >-
              Represents the unique identifier for a rootOrg 
              - A channel is not a primaryKey but a unique value inside sunbird 
              - This key is applicable for root organization only
          profileSummary:
            type: string
          userName:
            type: string
          rootOrgId:
            type: string
            description: 'Represents the ID of the root organozation'
          dob:
            type: string
            format: YYYY-MM-DD 
            example: '2001-02-27'
          grade:
            type: string
          location:
            type: string
            description: 'Represents the current location of the  user'
          education:
            type: object
            allOf:
             - $ref: "#/definitions/Education"
          profileVisibility:
            type: object
            description: >-
              Represents the value for profile visibility, the values can be a map having key as any user attribute also the value can be either public or private 
          address: 
            type: object
            allOf:
             - $ref: "#/definitions/Address"
            description: it will contains list of address object.
          jobProfile:
              type: object
              allOf:
               - $ref: "#/definitions/JobProfile"
          webPages:
            type: object
            properties:
              type:
                type: string
              url:
                type: string
    required:
      - firstName
      - lastName
      - password
      - email
      - userName
      - phone

  Address:
    title: Address
    type: object
    properties:
      addType:
        description: ''
        type: string
      addressLine1:
        description: ''
        type: string
      addressLine2:
        description: ''
        type: string
      city:
        description: ''
        type: string
      state:
        description: ''
        type: string
      zipCode:
        description: ''
        type: string
    required:
      - addType
      - addressLine1
      - city
      - state
  Education:
    title: Education
    type: object
    properties:
      degree:
        description: 'Represents the name of degree'
        type: string
      yearOfPassing:
        description: 'Represents the year of passing in format YYYY'
        type: integer
        format: int32
      courseName:
        description: 'Represents the name of the course enrolled in' 
        type: string
      boardOrUniversity:
        description: 'Represents the name of board or university'
        type: string
      address:
        $ref: '#/definitions/Address'
      percentage:
        description: ''
        type: number
        format: double
      grade:
        description: 'grade name'
        type: string
    required:
      - degree
      - name
      - boardOrUniversity

  JobProfile:
    title: JobProfile
    type: object
    properties:
      jobName:
        description: 'Represents the job of the user'
        type: string
      role:
        description: 'Represents the hierarchial position of a user within an organization'
        type: string
      joiningDate:
        description: 'Represents the joining date in format YYYY-MM-DD'
        type: string
      endDate:
        description: 'Represents the Release date from the job in format YYYY-MM-DD'
        type: string
      orgId:
        description: ''
        type: string
      orgName:
        description: ''
        type: string
      subject:
        description: ''
        type: array
        items:
          type: string
      address:
        $ref: '#/definitions/Address'
    required:
      - jobName
      - role
      - joiningDate
      - orgName
      
  GetUserByLoginIdRequest:
    type: object
    properties:
     request:
         $ref: '#/definitions/UserLoginIdRequest'
    required:
      - request
  UserLoginIdRequest:
    type: object
    properties:
      loginId:
        description: >-
          - Represents the user login ID, if the user is created by providing username and channel, then login ID would be username@channel 

          - If the user is created without channel then loginID would be same as username@{sunbird_default_channel}.
        type: string
    required:
      - loginId
  SearchUserRequest:
    example:
      request:
        query: >- 
          Represents text search, if you want to enable free text search then pass the query as string
        filters:
          userAttribute:
          - Represents the value of user attribute, it can be either a string or an array
          - Ex: firstName:test  or firstName:["test","test1"] 
        limit: 500
    type: object
    properties:
      request:
       allOf:
        - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
        - $ref: '#/definitions/userSearch'
    required:
    - request
  userSearch:
    description: Search user request
    type: object
    properties:
      filters:
        $ref: '#/definitions/Filters'
      limit:
        description: ''
        type: integer
        format: int32
    required:
    - filters

  Filters:
    title: Filters
    type: object
    properties:
      userAttribute:
        description: >-
          Represents the user attributes. It can be any attribute of the user
            - For single attribute, pass only the string 
            - To get response based on same key multiple value then pass values as an array that can be done inside the filter, you can pass multiple attributes with multiple values'
        type: array
        items:
          type: string
    required:
    - userAttribute
    
  UpdateUserRequest:
    type: object
    properties:
      request:
        $ref: '#/definitions/UserUpdate'
    required:
    - request
  UserUpdate:
    type: object
    properties:
      userId:
        description: 'Represents the ID of the authenticated User'
        type: string
      firstName:
        description: 'Represents the First name of the user'
        type: string
      dob:
        description: 'Represents the Data of Birth of the user'
        type: string
        format: YYYY-MM-DD
        example: '2001-02-27'
      language:
        description: 'Represents the language of the user'
        type: array
        items:
          type: string
      externalId:
        description: 'externalId,externalIdType,externalIdProvider are the keys required if the user does not pass the userId'
        type: string
      externalIdType:
        description: 'externalId,externalIdType,externalIdProvider are the keys required if the user does not pass the userId'
        type: string
      externalIdProvider:
        description: 'externalId,externalIdType,externalIdProvider are the keys required if the user does not pass the userId'
        type: string
      externalIds:
        description: 'details of external IDs and provider'
        type: array
        items:
          type: object
          allOf:
          - $ref: '#/definitions/ExternalIdUpdate'
      framework:
        description: Framework details
        type: object
        allOf:
        - $ref: '#/definitions/frameworkData'
    required:
    - userId
  ResultStatus:
    type: object
    properties:
      status:
       type: string
       description: Success or Failure
  ResultWithEmptyBody:
    type: object
    properties:
      result:
        $ref: '#/definitions/ResultStatus'
  SearchUserResponse:
     description: The response body of Search User
     type: object
     properties:
       response:
        type: object
        properties:
         count:
          type: integer
         content:  
           type: array
           items:
            type: object
            allOf:
            - $ref: '#/definitions/User'
  UserCreateResponse:
    description: The response body of create user
    type: object
    allOf:
      - $ref: '#/definitions/ResultWithEmptyBody'
      - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
  EmptyResult:
    type: object
    properties:
      result:
        type: object
        description: Empty Result
  UserErrorResponse:
    type: object
    allOf:
      - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
      - $ref: '#/definitions/EmptyResult'
      
  UpdateLoginRequest:
    example:
      params: {}
      request:
        userId: {userId}
    type: object
    properties:
      params:
        description: ''
        type: object
      request:
        $ref: '#/definitions/LoginRequestUpdate'
    required:
    - params
    - request
  LoginRequestUpdate:
    description: request body to update user login time
    type: object
    properties:
      userId:
        description: 'The unique ID of the user' 
        type: string
    required:
    - userId
  VisibilityRequest:
    example:
      request:
        userId: {userid}
        private:
        - gender
        - location
        - address
        public:
        - private field name which you want to make public
    type: object
    properties:
      request:
        allOf:
        - $ref: '#/definitions/ProfileVisibility'
        example:
          userId: userid
          private:
          - gender
          - location
          - address
          public:
          - private field name which you want to make public
    required:
    - request
  ProfileVisibility:
    description: profile visibility request data
    example:
      userId: userid
      private:
      - gender
      - location
      - address
      public:
      - private field name which you want to make public
    type: object
    properties:
      userId:
        description: 'The unique ID of the user'
        example: userid
        type: string
      private:
        description: ''
        example:
        - gender
        - location
        - address
        type: array
        items:
          type: string
      public:
        description: ''
        example:
        - private field name that you want to make public
        type: array
        items:
          type: string
    required:
    - userId
    - private
    - public
 
  AssignRequest:
    title: 'AssignRequest'
    type: object
    properties:
      request:
        $ref: '#/definitions/AssignRole'
    required:
    - request

  AssignRole:
    type: object
    properties:
      userId:
        description: 'The unique ID of the user'
        type: string
      organisationId:
        description: 'The unique ID of the organisation'
        type: string
      roles:
        description:
          The role assigned to a user. The role is directly replaced with saved roles, if any. Ensure that the request has a list of all the user roles. To remove all roles assigned to a user, pass an empty array
        example:
        - CONTENT_CREATION
        - PUBLIC
        - CONTENT_CREATOR
        - ANNOUNCEMENT_SENDER

        type: array
        items:
          type: string
    required:
    - userId
    - organisationId
    - roles
    
  AddSkillToUserRequest:
    title: AddSkillToUserRequest
    type: object
    properties:
      request:
       type: object
       properties:
         endorsedUserId:
          type: string
         skillName:
          type: array
          items:
           type: string
    required:
    - request
  ExternalId:
    title: ExternalId
    type: object
    properties:
      id:
        type : string
        description: 'Identity of the user in an external system. The externalId helps Sunbird identify and associate the user with another external organization. The combination of the externalId and provider must be unique. If the user passes the value for the externalId, then it is mandatory to pass a value for the provider.'
      provider:
        type: string
        description : 'A Provider is the orgainsation that provides an (external) ID to a user on sunbird. That organisation, may or maynot be part of Sunbird. If the user passes the value for the externalId, then it is mandatory to pass a value for the provider.'
      idType:
        type :  string
        description : 'The type of identity proof. For example, PAN card is an ID type whose provider is the central government.'
  ExternalIdUpdate:
    description : The user request to update the external ID in the profile
    type: object
    properties:
      id:
        type : string
        description: 'Identity of user in an external system. The externalId helps Sunbird identify and associate the user with another external organization. The combination of the externalId and provider must be unique. If the user passes the value for the externalId, then it is mandatory to pass a value for the provider.'
      provider:
        type: string
        description : 'A Provider is the orgainsation that provides an (external) ID to a user on sunbird. That organisation, may or maynot be part of Sunbird. If the user passes the value for the externalId, then it is mandatory to pass a value for the provider.'
      idType:
        type :  string
        description : 'The type of identity proof. For example, PAN card is an ID type whose provider is the central government' 
      operation:
        type: string
        description : 'possible values are {ADD,EDIT,REMOVE}'
  
  AcceptTnc:
    title: AcceptTnc
    type: object
    properties:
      request:
       type: object
       properties:
         version:
          type: string
    required:
    - version
  ReadUserSkill:
    title: ReadUserSkill
    type: object
    properties:
      request:
       type: object
       properties:
         endorsedUserId:
          type: string
    required:
    - endorsedUserId
  
  GetUserSkill:
    title: GetUserSkill
    type: object
    properties:
      result:
       type: object
       properties:
         skills:
          type: array
          items:
           type: object
           properties:
            skillName:
             type: string
             description: 'name of the skill'
            addedAt:
             type: string
             description: 'Date of skill endorsement in YYYY-MM-DD'
            endorsersList:
             type: array
             items:
              type: object
              properties:
               endorseDate:
                type: string
                description : 'Date of skill endorsement in YYYY-MM-DD'
               userId:
                type: string
                description: 'who did endorsement'
            addedBy:
             type: string
            endorsementcount:
             type: integer
            id:
             type: string
            skillNameToLowercase:
             type: string
             description : 'skill name in lower case'
            userId :
             type: string
    required:
    - endorsedUserId
  UpdateUserSkillsRequest:
    title: UpdateUserSkillsRequest
    type: object
    properties:
      request:
       type: object
       properties:
         userId:
          type: string
         skills:
          type: array
          items:
           type: string
       required:
       - skills
       - userId
  
  UserSuccessResponse:
    description: Common success response for a User API
    type: object
    allOf:
      - $ref: '#/definitions/ResultWithEmptyBody'
      - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse' 
  UnAuthorizedResponse:
    allOf:
      - $ref: '#/definitions/ResultWithEmptyBody'
      - $ref: 'https://raw.githubusercontent.com/project-sunbird/project-sunbird.github.io/dev/apis/definitions/envelope.yaml#/ApiResponse'
  AddUserSkillEndorsementRequest:
    title: AddUserSkillEndorsementRequest
    type: object
    properties:
      request:
       type: object
       properties:
         userId:
          type: string
         endorsedUserId:
          type: string
         skillName:
          type: string
    required:
    - request

  frameworkData:
    title: Framework details
    type: object
    properties:
      id:
       type: string
       description : framework identifier
      gradeLevel:
       type: array
       description: List of grades whose content is of interest to user
       items:
        type: string
      subject:
       type: array
       description: List of subjects whose content is of interest to user
       items:
        type: string
      medium:
       type: array
       description: List of mediums whose content is of interest to user
       items:
        type: string
      board:
       type: array
       description: List of boards whose content is of interest to user
       items:
        type: string

    required:
    - id
    - gradeLevel
    - medium
    - board
  successResponse:
   title: Success Response
   type: object
   properties:
    result:
     type: object
     properties:
      response:
       type: string
