openapi: 3.0.1
info:
  title: User Management  API(s)
  description: "- The User Management API resources are used to manage individual\
    \ users and their memberships, these resources allow you to add skills, block\
    \ and unblock users, and encrypt user data.  \n<b>Note:</b> These resources can\
    \ be used as a part of scripts or programs to allow authorized administrators\
    \ to manage the users."
  termsOfService: https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE
  contact:
    email: info@sunbird.org
  version: "1.0"
servers:
- url: https://staging.open-sunbird.org/api/
paths:
  /user/v1/create:
    post:
      tags:
      - User APIs
      summary: Create User
      description: "This API is used to create a user\n   - The endpoint for **Create\
        \ User** is `/user/v1/create`  \n   - The fields marked with an asterisk (*)\
        \ are mandatory. They cannot be null or empty."
      operationId: Create User
      parameters:
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: It is a unique token/key to authenticate the user each time an
          API is called. For corresponding sessions this token is used, not your actual
          username/password
        schema:
          type: string
      requestBody:
        description: |-
          - The body payload comprises of the metadata of the user being created - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserrequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."Create User" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        400:
          description: BAD REQUEST. The "Create User" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: RESOURSE NOT FOUND. The "Create User" operation failed ! The
            possible reason for failure is the requested resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: request
  /user/v2/create:
    post:
      tags:
      - User APIs
      summary: Create User
      description: |-
        This API is used to create a user
           - The endpoint for **Create User** is `/user/v2/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: V2 Create User
      parameters:
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: It is a unique token/key to authenticate the user each time an
          API is called. For corresponding sessions this token is used, not your actual
          username/password
        schema:
          type: string
      requestBody:
        description: |-
          - The body payload comprises of the metadata of the user being created - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:

             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestV2'
        required: true
      responses:
        200:
          description: OK ! Successful operation."Create User" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        400:
          description: BAD REQUEST. The "Create User" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: RESOURSE NOT FOUND. The "Create User" operation failed ! The
            possible reason for failure is the requested resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: request
  /user/v1/signup:
    post:
      tags:
      - User APIs
      summary: Create User
      description: |-
        This api is lightweight of v2. This api will create user with very minimum attribute (firstName, email/phone, password, emailVerified/phoneVerified). All user created by this endpoint will be linked with custodian org.
           - The endpoint for **Create User** is `/user/v1/signup`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: User SignUp
      parameters:
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: It is a unique token/key to authenticate the user each time an
          API is called. For corresponding sessions this token is used, not your actual
          username/password
        schema:
          type: string
      requestBody:
        description: |-
          - The body payload comprises of the metadata of the user being created - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:

             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestV3'
        required: true
      responses:
        200:
          description: OK ! Successful operation."Create User" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        400:
          description: BAD REQUEST. The "Create User" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: RESOURSE NOT FOUND. The "Create User" operation failed ! The
            possible reason for failure is the requested resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: request
  /user/v1/search:
    post:
      tags:
      - User APIs
      summary: Search User
      description: |-
        This API is used for searching a particular user
          - The endpoint for **Search User** is `/user/v1/search`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Search User
      parameters:
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: It is a unique token/key to authenticate the user each time an
          API is called. For corresponding sessions this token is used, not your actual
          username/password
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp is a sequence of characters or encoded information
          identifying when the search user API call occurred, usually it gives date
          and time of day, mostly accurate to a small fraction of a second.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      requestBody:
        description: |-
          - The body payload comprises of metadata of the user being searched - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:

             - JSON
           **Note**: You can search the user based on different user attributes
            - The attributes must be passed inside the filters of the request payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchUserRequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."Search User" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchUserResponse'
        400:
          description: BAD REQUEST. The "Search User" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: Resource not found. requested resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/search
          headers:
            Content-Type: application/json
            Authorization: Bearer {{api_key}}
            X-Authenticated-Userid: '{{user_id}}'
            ts: 2017-05-25 10:18:56:578+0530
          body: |-
            {
                "request": {
                    "filters":{
                      "userAttribute": ["value of user attribute , either you can pass single string or list"]
                    },
                    "limit": 500
                }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Search User
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: request
  /user/v1/profile/read:
    post:
      tags:
      - User APIs
      summary: Get User by Login ID
      description: |-
        This API is used for getting information about the currently authenticated user
          - The endpoint for **Get User by Login ID** is `/user/v1/profile/read`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Get User by Login ID
      parameters:
      - name: ts
        in: header
        description: Timestamp is a sequence of characters or encoded information
          identifying when the read user profile API call occurred, usually it gives
          date and time of day, mostly accurate to a small fraction of a second
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          - The body payload comprises of the metadata about the user being searched - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:

             - JSON
          -  The body contains metadata about reading the user profile

           - **Note**:

                - The login ID is ideally in the following format:  username@provider

                - While creating the user, if you haven't specified the provider name then your login ID would be same as username
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/GetUserByLoginIdRequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."Fetching User profile" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserSingleResp'
        400:
          description: BAD REQUEST,"Fetching User profile" operation failed ! The
            possible reason for failure is that you may have missed providing input
            for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: Resource not found,requested resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/profile/read
          headers:
            Content-Type: application/json
            x-authenticated-user-token: '{{user_id}}'
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api_key}}
          body: |-
            {
              "request": {
                "loginId": "test_apis_2@sunbird-integrator-test.org"
              }
            }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get User by Login Id
        x-testDescription: create user
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: request
  /user/v1/read/{User_ID}:
    get:
      tags:
      - User APIs
      summary: Get User by User ID
      description: |-
        This API is used for searching a specific user, the user search is based on the unique ID of the user
          - The endpoint for **Get User by User ID** is `/user/v1/read/{User_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - User can pass an optional query parameter 'fields'. The value is a comma separated list of fields whose information is required in response. e.g. fields=completeness,missingFields,topic,organisations,roles
          - 'completeness' is to return profile completeness percentage.
          - 'missingFields' is to return fields that are missing to achieve 100% profile completeness.
          - 'topic' is to return list of topics that are used for announcements.
          - 'organisations' is to return organisation and location details.
          - 'roles' is to return list of roles with name and ID details.
      operationId: Get User by User ID
      parameters:
      - name: User_ID
        in: path
        description: 'Please append a valid User Id To the Request URL and if user
          need any specific values like , profile completeness ,missingFields,topic
          Ex: ?Fields=completeness,missingFields,topic'
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: Access token of registered user performing given API request.
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."Get User by User ID" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserSingleResp'
        400:
          description: BAD REQUEST,"Get User by User ID" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: GET
          uri: /user/v1/read/{User_Id}
          headers:
            x-authenticated-user-token: '{{user_id}}'
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api_key}}
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get User by User ID
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /user/v2/read/{User_ID}:
    get:
      tags:
      - User APIs
      summary: Get User by User ID v2
      description: |-
        This API is used for searching a specific user, the user search is based on the unique ID of the user
          - The endpoint for **Get User by User ID v2** is `/user/v2/read/{User_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - User can pass an optional query parameter 'fields'. The value is a comma separated list of fields whose information is required in response. e.g. fields=completeness,missingFields,topic,organisations,roles
          - 'completeness' is to return profile completeness percentage.
          - 'missingFields' is to return fields that are missing to achieve 100% profile completeness.
          - 'topic' is to return list of topics that are used for announcements.
          - 'organisations' is to return organisation and location details.
          - 'roles' is to return list of roles with name and ID details.
          - Only necessary fields are returned in the response as per user profile configuration.
      operationId: Get User by User ID v2
      parameters:
      - name: User_ID
        in: path
        description: 'Please append a valid User Id To the Request URI and if user
          need any specific values like , profile completeness ,missingFields,topic
          Ex: ?Fields=completeness,missingFields,topic'
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: Access token of registered user performing given API request.
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."Get User by User ID v2" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        400:
          description: BAD REQUEST,"Get User by User ID v2" operation failed ! The
            possible reason for failure is that you may have missed providing input
            for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: GET
          uri: /user/v1/read/{User_Id}
          headers:
            x-authenticated-user-token: '{{user_id}}'
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            Authorization: Bearer {{api_key}}
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get User by User ID v2
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /user/v1/update:
    patch:
      tags:
      - User APIs
      summary: Update User
      description: |-
        This API is use for updating the user realted details
          - The endpoint for **Update User** is `/user/v1/update`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Update User
      parameters:
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: Access token of registered user performing given API request.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          - The body payload comprises of the metadata about the user to be updated.
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:

             - JSON
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."Update User" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        400:
          description: BAD REQUEST. The "Update User" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: Resource not found. The "Update User" operation failed ! The
            possible reason for failure is that requested resource not found. here
            resource is user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /user/v1/update/logintime:
    patch:
      tags:
      - User APIs
      summary: Add Users Current Login Time
      description: |-
        This API is used to update user login time
          - This API is executed after the user successfully logs in either from portal or the app
          - On Sunbird, user login is handled by SSO(KeyCloak), you must call this API after successful login to update login time
          - The endpoint for **Add Useres Current Login Time** is `/user/v1/update/logintime`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: '{{host}}/user/v1/updatelogin'
      parameters:
      - name: ts
        in: header
        description: Timestamp is a sequence of characters or encoded information
          identifying when the update user login time API call occurred, usually it
          gives date and time of day, mostly accurate to a small fraction of a second.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: It a unique token/key to authenticate the user each time an API
          is called. For further sessions this token is exchanged, not the username/password
          of the user'
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          - The body payload comprises of the metadata about updating the users login time in the system - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLoginRequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."Login Time" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        400:
          description: BAD REQUEST. The "Login Time" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: PATCH
          uri: /v1/user/update/logintime
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            X-Device-ID: X-Device-ID
            Authorization: Bearer {{api-key}}
          body: "{\r\n \"params\": { },\r\n    \"request\":{   \r\n      \"userId\"\
            :\"{userid}\"\r\n    }\r\n}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testDescription: Add user current login time
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /data/v1/role/read:
    get:
      tags:
      - User APIs
      summary: Get User Role Information
      description: |-
        This API is used to list the assigned roles pertaining to a user
           - The endpoint for **Get User Role Information** is `/data/v1/role/read`
           - It is mandatory to provide values for required parameters
      operationId: V1RoleReadGet
      parameters:
      - name: Content-Type
        in: header
        description: |-
          The Content Type entity is the media type of the resource
           Possible media types can be:-
             - Application/json
             - Multipart/form-data
             - Application/x-www-form-urlencoded
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp is a sequence of characters or encoded information
          identifying when the read user role API call occurred, usually it gives
          date and time of day, mostly accurate to a small fraction of a second
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: It a unique token/key to authenticate the user each time an API
          is called. For corresponsing sessions, this token is exchanged, not the
          username/password of the user
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."Get user roles" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesResponse'
        400:
          description: BAD REQUEST. The "Get user roles" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: GET
          uri: /v1/role/read
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/data/v1/role/read'
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /user/v1/profile/visibility:
    post:
      tags:
      - User APIs
      summary: User Profile Visibility
      description: |-
        This API is used to configure the visibility of user profile
           - The endpoint for **User Profile Visibility** is `/user/v1/profile/visibility`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: V1UserProfileVisibilityPost
      parameters:
      - name: Content-Type
        in: header
        description: |-
          The Content Type entity is the media type of the resource.
           Possible media types can be:-
             - Application/json
             - Multipart/form-data
             - Application/x-www-form-urlencoded
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp is a sequence of characters or encoded information
          identifying when the user profile visibility API call occurred, usually
          it gives date and time of day, mostly accurate to a small fraction of a
          second
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: It a unique token/key to authenticate the user each time an API
          is called. For corresponsing sessions, this token is exchanged, not the
          username/password of the user
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          - The body payload comprises of the metadata about the user profile visibility request
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:

             - JSON
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ApiRequest'
              - $ref: '#/components/schemas/VisibilityRequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."user profile visibility" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        400:
          description: BAD REQUEST. The "user profile visibilty" operation failed
            ! The possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: Resource not found, "user profile visibilty" operation failed
            ! The possible reason for failure is requested user id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/profile/visibility
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\"request\":{\n  \"userId\":\"userid\",\n  \n  \"private\":[\"gender\"\
            ,\"location\",\"address\"],\n  \"public\":[\"private field name which\
            \ you want to make public\"]\n}}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: '{{host}}/user/v1/profile/visibility'
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: request
  /user/v1/block:
    post:
      tags:
      - User APIs
      summary: Block user
      description: |-
        This API is used to ban/block a user
           - The endpoint for **Block User** is `/user/v1/block`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: userBlock
      parameters:
      - name: Content-Type
        in: header
        description: |-
          The Content Type entity is the media type of the resource.
           Possible media types can be:-
             - Application/json
             - Multipart/form-data
             - Application/x-www-form-urlencoded
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp is a sequence of characters or encoded information
          identifying when the block user API call occurred, usually it gives date
          and time of day, mostly accurate to a small fraction of a second
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: It is a unique token/key to authenticate the user each time an
          API is called. For corresponsing sessions, this token is exchanged, not
          the username/password of the user
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          - The body payload comprises of the metadata about blocking a user request
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:

             - JSON
        content:
          '*/*':
            schema:
              allOf:
              - $ref: '#/components/schemas/ApiRequest'
              - $ref: '#/components/schemas/BlockUserReq'
        required: true
      responses:
        200:
          description: OK ! Successful operation."user profile visibility" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        400:
          description: BAD REQUEST. The "user profile visibilty" operation failed
            ! The possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: Resource not found, "user profile visibilty" operation failed
            ! The possible reason for failure is requested user id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/block
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: |-
            {"request":{
              "userId":"userid"}}
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: request
  /user/v1/unblock:
    post:
      tags:
      - User APIs
      summary: Unblock user
      description: |-
        This API is used to unban/unblock a user
           - The endpoint for **Unblock user** is `/user/v1/unblock`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: make deleted user active
      parameters:
      - name: Content-Type
        in: header
        description: |-
          The Content Type entity is the media type of the resource.
           Possible media types can be:-
             - Application/json
             - Multipart/form-data
             - Application/x-www-form-urlencoded
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp is a sequence of characters or encoded information
          identifying when the unblock API call occurred, usually it gives date and
          time of day, mostly accurate to a small fraction of a second
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is called
          multiple times.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: It is a unique token/key to authenticate the user each time an
          API is called. For further sessions this token is exchanged, not the username/password
          of the user
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          - The body payload comprises of the metadata about unblocking a user request
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:

             - JSON
        content:
          '*/*':
            schema:
              allOf:
              - $ref: '#/components/schemas/ApiRequest'
              - $ref: '#/components/schemas/BlockUserReq'
        required: true
      responses:
        200:
          description: OK ! Successful operation."user profile visibility" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        400:
          description: BAD REQUEST. The "user profile visibilty" operation failed
            ! The possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: Resource not found, "user profile visibilty" operation failed
            ! The possible reason for failure is requested user id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/unblock
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: |-
            {"request":{
              "userId":"userid"}}
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: request
  /user/v1/role/assign:
    post:
      tags:
      - User APIs
      summary: Assign Role to User
      description: |-
        This API is used to assign roles to a user. It can also be used to replace and remove already assigned user roles. If a user should not be assigned any role in the organization, pass the role paramater as an empty array.
           - The endpoint for **Assign Role to User** is `/user/v1/role/assign`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: userV1RoleAssign
      parameters:
      - name: Content-Type
        in: header
        description: The Content-Type header specifies the media type of the resource.
          Set this to application/json.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp is a sequence of characters or encoded information
          identifying when the assign role API call has occurred, usually it gives
          date and time of the call, mostly accurate to a small fraction of a second.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a particular request of the same
          API which can be executed multiple times
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received here.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: It is a unique token/key to authenticate the user each time an
          API is called.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          - The body payload comprises of the metadata about assigning roles to a user.
          - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload.
             - JSON
        content:
          '*/*':
            schema:
              allOf:
              - $ref: '#/components/schemas/ApiRequest'
              - $ref: '#/components/schemas/AssignRequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation. "assign role" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        400:
          description: BAD REQUEST. The "assign role" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      x-codegen-request-body-name: request
  /user/v1/encrypt:
    get:
      tags:
      - User APIs
      summary: Encrypt User Information
      description: |-
        This API is used for securing the user information with an encryption scheme
           - The endpoint for **Encrypt User Information** is `/user/v1/encrypt`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: EncryptGet
      parameters:
      - name: Content-Type
        in: header
        description: |-
          The Content Type entity is the media type of the resource
           Possible media types can be:-
             - Application/json
             - Multipart/form-data
             - Application/x-www-form-urlencoded
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp is a sequence of characters or encoded information
          identifying when the encrypt user API call occurred, usually it gives date
          and time of day, mostly accurate to a small fraction of a second.
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID Uniquely identifies a request if the same API is executed
          multiple times
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."Encrypt User Information" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        400:
          description: BAD REQUEST. The "Encrypt User Information" operation failed
            ! The possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /user/v1/skill/update:
    post:
      tags:
      - User APIs
      summary: Update User Skills
      description: |-
        This API is used to assign/update skills to a user. It can also be used to replace and remove already assigned user skills. If a user wants to remove all skills then pass skill paramater as an empty array.
           - The endpoint for **Update User Skills** is `/user/v1/skill/update`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: UpdateUserSkills
      parameters:
      - name: Content-Type
        in: header
        description: Type of the request data. Set as application/json.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        required: true
        schema:
          type: string
      - name: X-MsgId
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: It is a unique token to authenticate the user each time an API
          is called
        required: true
        schema:
          type: string
      requestBody:
        description: '- The body payload comprises of the metadata required for updating
          user skills'
        content:
          '*/*':
            schema:
              allOf:
              - $ref: '#/components/schemas/ApiRequest'
              - $ref: '#/components/schemas/UpdateUserSkillsRequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation. The requested operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSuccessResponse'
        400:
          description: 'CLIENT_ERROR. The Update User Skills operation failed due
            to bad request from client. Possible reasons for failure: - Mandatory
            parameter userId is missing. - Mandatory parameter skills is missing.
            - Invalid userId - skills data type should be of List. '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        401:
          description: 'UNAUTHORIZED. The Update User Skills operation failed due
            to unauthorized request from client. Possible reasons for failure: - You
            are not authorized. '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedResponse'
        500:
          description: '''INTERNAL SERVER ERROR. The requested operation failed due
            to a server error.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-codegen-request-body-name: Body
  /user/v1/skill/endorse/add:
    post:
      tags:
      - User APIs
      summary: Add User Skill Endorsement
      description: |-
        This API is used to endorse a skill of a user
           - The endpoint for **Add User Skill Endorsement** is `/user/v1/skill/endorse/add`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: AddUserSkillEndorsement
      parameters:
      - name: Content-Type
        in: header
        description: Type of the request data. Set as application/json
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp at which given API request is sent
        required: true
        schema:
          type: string
      - name: X-MsgId
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: It is a unique token to authenticate the user each time an API
          is called
        required: true
        schema:
          type: string
      requestBody:
        description: '- The body payload comprises of the metadata required for endorsing
          a skill of a user'
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ApiRequest'
              - $ref: '#/components/schemas/AddUserSkillEndorsementRequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation. The requested operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSuccessResponse'
        400:
          description: 'CLIENT_ERROR. The requested operation failed due to bad request
            from client. Possible reasons for failure: -Can not endorse since both
            user belongs to different org. -Invalid endorsed userID. -Invalid skill
            name {skillName}. '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        401:
          description: 'UNAUTHORIZED. The Update User Skills operation failed due
            to unauthorized request from client. Possible reasons for failure: - You
            are not authorized. '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedResponse'
        404:
          description: '''RESOURCE_NOT_FOUND. The requested operation failed as given
            resource is not existing on server. Possible reasons for failure: ...'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. The requested operation failed due
            to a server error.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-codegen-request-body-name: Body
  /user/v1/skill/add:
    post:
      tags:
      - User APIs
      summary: Add User Skill
      description: |-
        This API is used to add a skill set to the user
           - The endpoint for **Add User Skill** is `/user/v1/skill/add`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: UserV1SkillAddPost
      parameters:
      - name: Content-Type
        in: header
        description: |-
          The Content Type entity is the media type of the resource
           Possible media types can be:-
             - Application/json
             - Multipart/form-data
             - Application/x-www-form-urlencoded
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp is a sequence of characters or encoded information
          identifying when the add user skills API call occurred, usually it gives
          date and time of day, mostly accurate to a small fraction of a second
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID Uniquely identifies a request if the same API is executed
          multiple times
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: It is a unique token/key to authenticate the user each time an
          API is called. For further sessions this token is exchanged, not the username/password
          of the user
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          - The body payload comprises of the metadata about adding skills to a user - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:

             - JSON
        content:
          '*/*':
            schema:
              allOf:
              - $ref: '#/components/schemas/ApiRequest'
              - $ref: '#/components/schemas/AddSkillToUserRequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."add user skills" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        400:
          description: BAD REQUEST. The "add user skills" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/skill/add
          headers:
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: |2-
              {
            "request": {
                  "endorsedUserId":"userId",
                  "skillName":["ElasticSearch"]
            } }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: add skill to user
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /user/v1/skill/read:
    post:
      tags:
      - User APIs
      summary: Get user skill
      description: |-
        This API is used to read user added skill.
           - The endpoint for **Get user skill** is `/user/v1/skill/read`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: UserV1SkillRead
      parameters:
      - name: Content-Type
        in: header
        description: |-
          The Content Type entity is the media type of the resource
           Possible media types can be:-
             - Application/json
             - Multipart/form-data
             - Application/x-www-form-urlencoded
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp is a sequence of characters or encoded information
          identifying when the add user skills API call occurred, usually it gives
          date and time of day, mostly accurate to a small fraction of a second.
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID Uniquely identifies a request if the same API is executed
          multiple times
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: It is a unique token/key to authenticate the user each time an
          API is called. For further sessions this token is exchanged, not the username/password
          of the user
        required: true
        schema:
          type: string
      requestBody:
        description: |2-

          - The body payload comprises of metadata on adding skills for a user - The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:

             - JSON
        content:
          '*/*':
            schema:
              allOf:
              - $ref: '#/components/schemas/ApiRequest'
              - $ref: '#/components/schemas/ReadUserSkill'
        required: true
      responses:
        200:
          description: OK ! Successful operation."add user skills" operation was successfully
            executed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  GetUserSkill:
                    $ref: '#/components/schemas/GetUserSkill'
        400:
          description: BAD REQUEST. The "add user skills" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/skill/add
          headers:
            Content-Type: application/json
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: |2-
              {
            "request": {
                  "endorsedUserId":"userId",
                  "skillName":["ElasticSearch"]
            } }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: add skill to user
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /data/v1/skills:
    get:
      tags:
      - User APIs
      summary: List all Skills
      description: |-
        This API is associated with listing all the skills that a user possess
           - The endpoint for **List all Skills** is `/data/v1/skills`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: DataV1SkillsGet
      parameters:
      - name: Content-Type
        in: header
        description: |-
          The Content Type entity is the media type of the resource.
           Possible media types can be:-
             - Application/json
             - Multipart/form-data
             - Application/x-www-form-urlencoded
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: |
          Timestamp is a sequence of characters or encoded information identifying when the list user skills API call occurred, usually it gives date and time of day, mostly accurate to a small fraction of a second.
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID Uniquely identifies a request if the same API is called
          multiple times
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: It is a unique token/key to authenticate the user each time an
          API is called. For corresponsing sessions, this token is exchanged, not
          the username/password of the user
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any User API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."list user skills" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillsResp'
        400:
          description: BAD REQUEST. The "list user skills" operation failed ! The
            possible reason for failure is that you may have missed providing input
            for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
  /user/v1/get/{idType}/{id}:
    get:
      tags:
      - User APIs
      summary: Get User by  ID Type
      description: |-
        This API is used for searching a specific user, the user search is based on the unique ID type of the user
          - The endpoint for **Get User by User ID** is `/user/v1/get/{idType}/{id}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Get User by ID type
      parameters:
      - name: idType
        in: path
        description: idType can only be either email, phone or loginId
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: id can only be values of email, phone or loginId
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."Get User by ID Type" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserSingleResp'
        400:
          description: BAD REQUEST,"Get User by User ID Type" operation failed ! The
            possible reason for failure is that you may have missed providing input
            for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
  /user/v1/migrate:
    post:
      tags:
      - User APIs
      summary: Migrate user
      description: This API is used to migrate users from a custodian channel to a
        non-custodian channel
      operationId: migrateUser
      parameters:
      - name: ts
        in: header
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: It is a unique token/key to authenticate the user each time an
          API is called. For corresponsing sessions, this token is exchanged, not
          the username/password of the user. it is mandatory to pass the auth token
          of same user whom we  want to migrate
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          - The body payload comprises of the metadata to migrate a user request - The body parameter refers to the format of the request, the request body takes the following media types to make the payload:
             - JSON
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/MigrateUserReq'
        required: true
      responses:
        200:
          description: OK ! Successful operation."user profile visibility" operation
            was successfully executed. either you have provided wrong userExtId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        400:
          description: BAD REQUEST. The "user migration" operation failed ! The possible
            reason for failure is that you may provided incorect userId for migration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /user/v1/migrate
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: '{"request": {"userId": "0371b2e0-b5ee-42bb-86c3-0a2e2a52c2e9","userExtId":
            "bt402","action": "accept","channel": "s1", "feedId":"any_feed_id"}}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: request
  /user/v1/exists/{idType}/{id}:
    get:
      tags:
      - User APIs
      summary: Check User Exists by ID Type
      description: |-
        This API is used for searching a specific user, the user search is based on the unique ID type of the user
          - The endpoint for **Get User by User ID** is `/user/v1/exists/{idType}/{id}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: check user exists
      parameters:
      - name: idType
        in: path
        description: idType can only be either email, or phone
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: id can only be values of email or phone
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."will return true or false on the
            basis of user existence in system" operation was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExistsUserResp'
        400:
          description: BAD REQUEST. The "list user skills" operation failed ! The
            possible reason for failure is that you may have missed providing input
            for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
      security:
      - bearer: []
components:
  schemas:
    CreateUserrequest:
      description: User object
      allOf:
      - $ref: '#/components/schemas/ApiRequest'
      - $ref: '#/components/schemas/CreateUserSingleResp'
    CreateUserRequestV2:
      description: User object
      allOf:
      - $ref: '#/components/schemas/ApiRequest'
      - $ref: '#/components/schemas/CreateUserSingleRespV2'
    CreateUserRequestV3:
      description: User object
      allOf:
      - $ref: '#/components/schemas/ApiRequest'
      - $ref: '#/components/schemas/CreateUserSingleRespV3'
    CreateUserSingleResp:
      type: object
      properties:
        request:
          type: object
          allOf:
          - $ref: '#/components/schemas/UserReq'
      description: Represents the  hold single userObject request
    ExistsUserResp:
      type: object
      properties:
        request:
          type: object
          allOf:
          - $ref: '#/components/schemas/UserExistsResp'
      description: Represents the  hold single userObject request
    CreateUserSingleRespV2:
      type: object
      properties:
        request:
          type: object
          allOf:
          - $ref: '#/components/schemas/UserReqV2'
      description: Represents the  hold single userObject request
    CreateUserSingleRespV3:
      type: object
      properties:
        request:
          type: object
          allOf:
          - $ref: '#/components/schemas/UserReqV3'
      description: Represents the  hold single userObject request
    RolesResponse:
      type: array
      description: Represents the hold roles response
      items:
        type: object
        properties:
          roles:
            $ref: '#/components/schemas/Role'
    Role:
      type: array
      description: Represents the request body for role
      items:
        type: object
        properties:
          actionGroups:
            type: object
            properties:
              name:
                type: string
              id:
                type: string
              actions:
                type: array
                items:
                  type: object
                  properties:
                    urls:
                      type: array
                      items:
                        type: string
    BlockUserReq:
      type: object
      properties:
        request:
          type: object
          properties:
            userId:
              type: string
              description: userId
      description: request body for block user
    UserExistsResp:
      type: object
      description: request body for block user
    MigrateUserReq:
      type: object
      properties:
        request:
          type: object
          properties:
            isExists:
              type: boolean
              description: true or false
            userId:
              type: string
              description: The identifier for the user that needs to be migrated to
                a new tenant.
            action:
              type: string
              description: Reflects the user action. It can be either accept or reject.
                Accept reflects the intention of the user to be migrated. Reject reflects
                intention of the user to reject the migration offer.
            feedId:
              type: string
              description: Pass the feed identifier using which the user is migrated.
                Empty feed identifiers are accepted, but this may result in the same
                feed shown twice.
            channel:
              type: string
              description: The channel to which the user wants to migrate
            userExtId:
              type: string
              description: The user's external identifier. This value should match
                the value provided at the time of bulk user upload.
      description: The request body to migrate a user.
    SkillsResp:
      type: object
      properties:
        skills:
          $ref: '#/components/schemas/Skills'
      description: The skill list
    Skills:
      type: array
      description: The skill details
      items:
        type: string
    UserReq:
      title: User Object
      required:
      - email
      - firstName
      - password
      - phone
      - userName
      type: object
      properties:
        email:
          type: string
          description: The email of the user
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        avatar:
          type: string
        language:
          type: array
          items:
            type: string
            description: 'The langauages known to the user '
        gender:
          type: string
        phone:
          type: string
        phoneVerified:
          type: boolean
          description: This key is required with value as true, if you pass both the
            values for phone and provider - But incases of create user either email
            or phone is required
        subject:
          type: array
          items:
            type: string
        channel:
          type: string
          description: '''Represents the channel value received while creating a rootOrg.
            - if a channel value is provided, then the user is associated with that
            particular root organization - if the channel is not provided in the request
            body, the system reads the value of the custodian channel from the system
            setting, else reads it from the environment variable and uses it to associate
            the user with that root organization. - if the channel value is not provided
            in either the request or the envronment variables, then user creation
            fails.'''
        externalIds:
          type: array
          items:
            type: object
            allOf:
            - $ref: '#/components/schemas/ExternalId'
        profileSummary:
          type: string
        userName:
          type: string
        dob:
          type: string
          format: date
          example: 2001-02-27
        grade:
          type: string
        location:
          type: string
          description: Represents the current location of the  user
        education:
          type: array
          items:
            $ref: '#/components/schemas/Education'
        profileVisibility:
          type: object
          properties: {}
          description: Represents the user's profile visibility. It is a map that
            uses any user attribute as the key. The value of the field can be either
            public or private
        address:
          type: array
          description: The user's address. It contains a list of address objects
          items:
            $ref: '#/components/schemas/Address'
        jobProfile:
          type: array
          items:
            $ref: '#/components/schemas/JobProfile'
        webPages:
          type: object
          properties:
            type:
              type: string
            url:
              type: string
    GetUserResponse:
      title: Get User by User ID response
      required:
      - email
      - firstName
      - phone
      type: object
      properties:
        email:
          type: string
          description: User email ID
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        gender:
          type: string
          description: User's gender
        phone:
          type: string
          description: User's phone number
        phoneVerified:
          type: boolean
          description: Either email or phone is required for user creation. This attribute
            is required with value as true in case phone is specified during user
            creation.
        framework:
          type: object
          allOf:
          - $ref: '#/components/schemas/frameworkData'
        channel:
          type: string
          description: '''Represents the channel value received while creating a root
            organisation - if you provide channel value, then you will get associated
            with that particular root organisation - if the channel is not provided
            in the request body, the system reads the custodian channel from the system
            setting else, reads it from the environment variable and uses it to associate
            the user with that root organisation - if the channel value is not provided
            in either the request or the envronment variable, then user creation fail.'''
        externalIds:
          type: array
          items:
            type: object
            allOf:
            - $ref: '#/components/schemas/ExternalId'
        profileSummary:
          type: string
        education:
          type: array
          items:
            type: object
            allOf:
            - $ref: '#/components/schemas/Education'
        profileVisibility:
          type: object
          properties: {}
          description: Represents the user's profile visibility. It is a map that
            uses any user attribute as the key. The value of the field can be either
            public or private
        address:
          type: array
          description: Represents the address. It contains a list of address object
          items:
            type: object
            allOf:
            - $ref: '#/components/schemas/Address'
        jobProfile:
          type: array
          items:
            type: object
            allOf:
            - $ref: '#/components/schemas/JobProfile'
        webPages:
          type: object
          properties:
            type:
              type: string
            url:
              type: string
        organisations:
          type: array
          items:
            type: object
            allOf:
            - $ref: '#/components/schemas/organisation'
        roleList:
          type: array
          items:
            type: object
            allOf:
            - $ref: '#/components/schemas/roleList'
    organisation:
      title: Organisation details
      type: object
      properties:
        organisationId:
          type: string
          description: Organisation ID
        updatedBy:
          type: string
          description: Identifier for the user who updated the user and org mapping.
        addedBy:
          type: string
          description: Identifier for the user who added the user and org mapping.
        roles:
          type: array
          items:
            type: string
            description: A list of assigned roles
        userId:
          type: string
          description: The identifier for the user.
        isDeleted:
          type: boolean
          description: Indicates the user's status within the given organisation.
            It can be either active or inactive.
        hashTagId:
          type: string
          description: Same as organisation ID
        id:
          type: string
          description: Same as organisation ID
        orgjoindate:
          type: string
          description: The date and time when the user joined the organisation
        orgName:
          type: string
          description: The organisation name
        description:
          type: string
          description: A description for the organisation.
        channel:
          type: string
          description: 'The value of the rootOrg channel '
        locationIds:
          type: array
          items:
            type: string
        locations:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                description: Location code
              name:
                type: string
                description: Name of location
              id:
                type: string
                description: Location ID
              type:
                type: string
                description: Location type. Supported location types are - state,
                  district, block and cluster
              parentId:
                type: string
                description: Parent location ID in case of district and block location
                  types.
    roleList:
      type: object
      properties:
        id:
          type: string
          description: Role ID
        name:
          type: string
          description: Name of role
    UserReqV2:
      title: User Object
      required:
      - channel
      - email
      - firstName
      - password
      - phone
      - userName
      type: object
      properties:
        email:
          type: string
          description: ' The email address of the user'
        emailVerified:
          type: boolean
          description: This key is required with value as true, if you pass the values
            for email - But incase of create user either email or phone is required
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        organisationId:
          type: string
        avatar:
          type: string
        language:
          type: array
          items:
            type: string
            description: Represents the langauages known to the user
        gender:
          type: string
        phone:
          type: string
        phoneVerified:
          type: boolean
          description: This key is required with value as true, if you pass the values
            for both phone and provider But while creating a user, either the email
            or phone is required
        subject:
          type: array
          items:
            type: string
        channel:
          type: string
          description: '''Represents the channel value received while creating a rootOrg'''
        externalIds:
          type: array
          items:
            type: object
            allOf:
            - $ref: '#/components/schemas/ExternalId'
        profileSummary:
          type: string
        userName:
          type: string
        dob:
          type: string
          format: YYYY-MM-DD
          example: 2001-02-27
        grade:
          type: string
        location:
          type: string
          description: Represents the current location of the  user
        education:
          type: array
          items:
            type: object
            allOf:
            - $ref: '#/components/schemas/Education'
        profileVisibility:
          type: object
          properties: {}
          description: Represents the user's profile visibility. It is a map that
            uses any user attribute as the key. The value of the field can be either
            public or private
        address:
          type: array
          description: Represents the address, it contains list of address object
          items:
            type: object
            allOf:
            - $ref: '#/components/schemas/Address'
        jobProfile:
          type: array
          items:
            type: object
            allOf:
            - $ref: '#/components/schemas/JobProfile'
        webPages:
          type: object
          properties:
            type:
              type: string
            url:
              type: string
    UserReqV3:
      title: User Object
      required:
      - email
      - firstName
      - password
      - phone
      type: object
      properties:
        email:
          type: string
          description: Represents the email of the user
        emailVerified:
          type: boolean
          description: This key is required with value as true, if you pass the values
            for email - But incases of create user either email or phone is required
        firstName:
          type: string
        password:
          type: string
        phone:
          type: string
        phoneVerified:
          type: boolean
          description: This key is required with value as true, if you pass the values
            for both phone and provider But while creating a user, either the email
            or phone is required
    User:
      required:
      - email
      - firstName
      - lastName
      - password
      - phone
      - userName
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          description: Represents the email of the user
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        avatar:
          type: string
        language:
          type: array
          items:
            type: string
            description: Represents languages known by the user
        gender:
          type: string
        phone:
          type: string
        phoneVerified:
          type: boolean
          description: Represents that a key is required with value - True, if you
            pass both phone number and provider values - Alternatively false , as
            Create User if you have provided either email or phone
        status:
          type: integer
          description: user status
          format: int32
        subject:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
            description: |-
              Represents the user roles that are independent to any org.
               **Note:** This API does not access the roles parameters, even if user passes the roles API(create or update), these parameters are ignored
        provider:
          type: string
          description: Represents the value of provider, this can just be the name
            of an organisation or code of an organisation, it is used to identify
            an organisation
        externalId:
          type: string
          description: Represents a user identifier in another system
        channel:
          type: string
          description: Represents the unique identifier for a rootOrg - A channel
            is not a primary key but a unique value in Sunbird - This key is applicable
            for the root organization only
        profileSummary:
          type: string
        userName:
          type: string
        rootOrgId:
          type: string
          description: Represents the ID of the root organozation
        dob:
          type: string
          format: YYYY-MM-DD
          example: 2001-02-27
        grade:
          type: string
        location:
          type: string
          description: Represents the current location of the  user
        education:
          $ref: '#/components/schemas/Education'
        profileVisibility:
          type: object
          properties: {}
          description: Represents the user's profile visibility. It is a map that
            uses any user attribute as the key. The value of the field can be either
            public or private
        address:
          $ref: '#/components/schemas/Address'
        jobProfile:
          $ref: '#/components/schemas/JobProfile'
        webPages:
          type: object
          properties:
            type:
              type: string
            url:
              type: string
    Address:
      title: Address
      required:
      - addType
      - addressLine1
      - city
      - state
      type: object
      properties:
        addType:
          type: string
          description: Represents the address type and its value must be either permanent,current,office
            ,home
        addressLine1:
          type: string
          description: ""
        addressLine2:
          type: string
          description: ""
        city:
          type: string
          description: ""
        state:
          type: string
          description: ""
        zipCode:
          type: string
          description: ""
    Education:
      title: Education
      required:
      - boardOrUniversity
      - degree
      - name
      type: object
      properties:
        name:
          type: string
          description: ' The name of educational institution'
        degree:
          type: string
          description: The name of user's highest qualification
        yearOfPassing:
          type: integer
          description: ' The year in which the user obtained the qualification in
            format YYYY'
          format: int32
        courseName:
          type: string
          description: Represents the name of the course for which the user is enrolled.
        boardOrUniversity:
          type: string
          description: ' The name of board or university'
        address:
          $ref: '#/components/schemas/Address'
        percentage:
          type: number
          description: ""
          format: double
        grade:
          type: string
          description: The name of the user's grade
    JobProfile:
      title: JobProfile
      required:
      - jobName
      - joiningDate
      - orgName
      - role
      type: object
      properties:
        jobName:
          type: string
          description: ' The job of the user'
        role:
          type: string
          description: ' The hierarchial position of a user within an organization'
        joiningDate:
          type: string
          description: ' The date on which the user joined the organization in format
            YYYY-MM-DD'
        endDate:
          type: string
          description: ' The date on which the user was relieved from the job in format
            YYYY-MM-DD'
        orgId:
          type: string
          description: The identifier for the organization.
        orgName:
          type: string
          description: The name of the organization.
        subject:
          type: array
          description: ""
          items:
            type: string
        address:
          $ref: '#/components/schemas/Address'
    GetUserByLoginIdRequest:
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/UserLoginIdRequest'
    UserLoginIdRequest:
      required:
      - loginId
      type: object
      properties:
        loginId:
          type: string
          description: |-
            - Represents the user's login ID. If the user is created by providing the username and channel, then the login ID would be username@channel
            - If the user is created without channel then loginID would be same as username@{sunbird_default_channel}.
    SearchUserRequest:
      required:
      - request
      type: object
      properties:
        request:
          type: object
          allOf:
          - $ref: '#/components/schemas/ApiResponse'
          - $ref: '#/components/schemas/userSearch'
      example:
        request:
          query: Represents text search, if you want to enable free text search then
            pass the query as string
          filters:
            userAttribute:
            - Represents the value of user attribute, it can be either a string or
              an array
            - Ex: firstName:test  or firstName:["test","test1"]
          limit: 500
    userSearch:
      required:
      - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/Filters'
        limit:
          type: integer
          description: ""
          format: int32
      description: Search user request
    Filters:
      title: Filters
      required:
      - userAttribute
      type: object
      properties:
        userAttribute:
          type: array
          description: |-
            Represents the user attributes. It can be any attribute of the user.
              - For a single attribute, pass only the string
              - To get response based on same key multiple values, pass the values as an array that can be done inside the filter. You can pass multiple attributes with multiple values'
          items:
            type: string
        $or:
          type: object
          properties: {}
          description: This new attribute will support user search with an 'or' condition.
    UpdateUserRequest:
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/UserUpdate'
    UserUpdate:
      required:
      - userId
      type: object
      properties:
        userId:
          type: string
          description: ' The identifier for the authenticated user'
        firstName:
          type: string
          description: ' The first name of the user'
        dob:
          type: string
          description: The user's Date of Birth
          format: YYYY-MM-DD
          example: 2001-02-27
        language:
          type: array
          description: The user's preferred language
          items:
            type: string
        externalId:
          type: string
          description: The user identifier provided by another organization. externalId,externalIdType,externalIdProvider
            are the keys required if the user does not pass the userId
        externalIdType:
          type: string
          description: The external ID type. externalId,externalIdType,externalIdProvider
            are the keys required if the user does not pass the userId
        externalIdProvider:
          type: string
          description: The name of the organization providing the user's external
            ID. externalId,externalIdType,externalIdProvider are the keys required
            if the user does not pass the userId
        externalIds:
          type: array
          description: The details of external IDs and provider
          items:
            type: object
            allOf:
            - $ref: '#/components/schemas/ExternalIdUpdate'
        framework:
          type: object
          description: Framework details
          allOf:
          - $ref: '#/components/schemas/frameworkData'
    ResultStatus:
      type: object
      properties:
        status:
          type: string
          description: The status of the result. It can be either Success or Failure.
    ResultWithEmptyBody:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ResultStatus'
    SearchUserResponse:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
            content:
              type: array
              items:
                type: object
                allOf:
                - $ref: '#/components/schemas/User'
      description: The response body for the Search User request.
    UserCreateResponse:
      description: The response body for the Create User
      allOf:
      - $ref: '#/components/schemas/ResultWithEmptyBody'
      - $ref: '#/components/schemas/ApiResponse'
    EmptyResult:
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    UserErrorResponse:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - $ref: '#/components/schemas/EmptyResult'
    UpdateLoginRequest:
      required:
      - params
      - request
      type: object
      properties:
        params:
          type: object
          properties: {}
          description: ""
        request:
          $ref: '#/components/schemas/LoginRequestUpdate'
      example:
        params: {}
        request:
          userId: {}
    LoginRequestUpdate:
      required:
      - userId
      type: object
      properties:
        userId:
          type: string
          description: The unique ID of the user
      description: request body to update user login time
    VisibilityRequest:
      required:
      - request
      type: object
      properties:
        request:
          type: object
          example:
            userId: userid
            private:
            - gender
            - location
            - address
            public:
            - private field name which you want to make public
          allOf:
          - $ref: '#/components/schemas/ProfileVisibility'
      example:
        request:
          userId: {}
          private:
          - gender
          - location
          - address
          public:
          - private field name which you want to make public
    ProfileVisibility:
      required:
      - private
      - public
      - userId
      type: object
      properties:
        userId:
          type: string
          description: The unique ID of the user
          example: userid
        private:
          type: array
          description: ""
          example:
          - gender
          - location
          - address
          items:
            type: string
        public:
          type: array
          description: ""
          example:
          - private field name that you want to make public
          items:
            type: string
      description: profile visibility request data
      example:
        userId: userid
        private:
        - gender
        - location
        - address
        public:
        - private field name which you want to make public
    AssignRequest:
      title: AssignRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/AssignRole'
    AssignRole:
      required:
      - organisationId
      - roles
      - userId
      type: object
      properties:
        userId:
          type: string
          description: The unique ID of the user
        organisationId:
          type: string
          description: The unique ID of the organisation
        roles:
          type: array
          description: The role assigned to a user. The role is directly replaced
            with saved roles, if any. Ensure that the request has a list of all the
            user roles. To remove all roles assigned to a user, pass an empty array
          example:
          - CONTENT_CREATION
          - PUBLIC
          - CONTENT_CREATOR
          - ANNOUNCEMENT_SENDER
          items:
            type: string
    AddSkillToUserRequest:
      title: AddSkillToUserRequest
      required:
      - request
      type: object
      properties:
        request:
          type: object
          properties:
            endorsedUserId:
              type: string
            skillName:
              type: array
              items:
                type: string
    ExternalId:
      title: ExternalId
      type: object
      properties:
        id:
          type: string
          description: Identity of the user in an external system. The externalId
            helps Sunbird identify and associate the user with another external organization.
            The combination of the externalId and provider must be unique. If the
            user passes the value for the externalId, then it is mandatory to pass
            a value for the provider.
        provider:
          type: string
          description: A Provider is the orgainsation that provides an (external)
            ID to a user on sunbird. That organisation, may or maynot be part of Sunbird.
            If the user passes the value for the externalId, then it is mandatory
            to pass a value for the provider.
        idType:
          type: string
          description: The type of identity proof. For example, PAN card is an ID
            type whose provider is the central government.
    ExternalIdUpdate:
      type: object
      properties:
        id:
          type: string
          description: Identity of user in an external system. The externalId helps
            Sunbird identify and associate the user with another external organization.
            The combination of the externalId and provider must be unique. If the
            user passes the value for the externalId, then it is mandatory to pass
            a value for the provider.
        provider:
          type: string
          description: A provider is the orgainsation that provides an (external)
            ID to a user on Sunbird. That organisation, may or maynot be part of Sunbird.
            If the user passes the value for the externalId, then it is mandatory
            to pass a value for the provider.
        idType:
          type: string
          description: The type of identity proof. For example, PAN card is an ID
            type whose provider is the central government
        operation:
          type: string
          description: The value for the operation. Possible values are ADD,EDIT,REMOVE
      description: The user request to update the external ID in the profile
    ReadUserSkill:
      title: ReadUserSkill
      type: object
      properties:
        request:
          type: object
          properties:
            endorsedUserId:
              type: string
    GetUserSkill:
      title: GetUserSkill
      type: object
      properties:
        result:
          type: object
          properties:
            skills:
              type: array
              items:
                type: object
                properties:
                  skillName:
                    type: string
                    description: name of the skill
                  addedAt:
                    type: string
                    description: Date of skill endorsement in YYYY-MM-DD
                  endorsersList:
                    type: array
                    items:
                      type: object
                      properties:
                        endorseDate:
                          type: string
                          description: Date of skill endorsement in YYYY-MM-DD
                        userId:
                          type: string
                          description: who did endorsement
                  addedBy:
                    type: string
                  endorsementcount:
                    type: integer
                  id:
                    type: string
                  skillNameToLowercase:
                    type: string
                    description: skill name in lower case
                  userId:
                    type: string
    UpdateUserSkillsRequest:
      title: UpdateUserSkillsRequest
      type: object
      properties:
        request:
          required:
          - skills
          - userId
          type: object
          properties:
            userId:
              type: string
            skills:
              type: array
              items:
                type: string
    UserSuccessResponse:
      description: Common success response for a User API
      allOf:
      - $ref: '#/components/schemas/ResultWithEmptyBody'
      - $ref: '#/components/schemas/ApiResponse'
    UnAuthorizedResponse:
      allOf:
      - $ref: '#/components/schemas/ResultWithEmptyBody'
      - $ref: '#/components/schemas/ApiResponse'
    AddUserSkillEndorsementRequest:
      title: AddUserSkillEndorsementRequest
      required:
      - request
      type: object
      properties:
        request:
          type: object
          properties:
            userId:
              type: string
            endorsedUserId:
              type: string
            skillName:
              type: string
    frameworkData:
      title: Framework details
      required:
      - board
      - gradeLevel
      - medium
      type: object
      properties:
        gradeLevel:
          type: array
          description: List of grades whose content is of interest to user
          items:
            type: string
        subject:
          type: array
          description: List of subjects whose content is of interest to user
          items:
            type: string
        medium:
          type: array
          description: List of mediums whose content is of interest to user
          items:
            type: string
        board:
          type: array
          description: List of boards whose content is of interest to user
          items:
            type: string
    ApiRequest:
      type: object
      properties:
        id:
          type: string
          description: Represents an API uniquely
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since
            EPOCH
          format: int64
        params:
          type: object
          properties:
            msgid:
              type: string
              description: Represents the unique ID of the message being sent
            did:
              type: string
              description: Represents the device UUID from which API is called
    ApiResponse:
      required:
      - ets
      - id
      - params
      - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since
            EPOCH
          format: int64
        params:
          required:
          - msgid
          - resmsgid
          - status
          type: object
          properties:
            msgid:
              type: string
              description: Represents the ID of the message sent
            resmsgid:
              type: string
              description: Represents the ID of the response message
            status:
              type: string
              enum:
              - success
              - error
        responseCode:
          type: string
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
    userToken:
      type: apiKey
      name: x-authenticated-user-token
      in: header
