openapi: 3.0.1
info:
  title: Org API(s)
  description: "- The Organisation Management API resources perform operations related\
    \ to management of an Organisation on the Sunbird Platform.  \n- The URL for Org\
    \ API(s) is `/org/v1`."
  termsOfService: https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE
  contact:
    email: info@sunbird.org
  version: "1.0"
servers:
- url: https://staging.open-sunbird.org/api/org/v1
paths:
  /create:
    post:
      tags:
      - Org APIs
      summary: Create a new Organisation
      description: |-
        This API is for creation of a new Organisation on the Sunbird Platform.
          - The endpoint for **Create a new Organisation** is `/create`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Create
      parameters:
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: Access token of registered user performing given API request.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      requestBody:
        description: The body contains metadata about the new Organisation to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgCreateRequest'
        required: true
      responses:
        200:
          description: OK. Successful operation. The Organisation Create operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgCreateResponse'
        400:
          description: 'CLIENT_ERROR. The Organisation Create operation failed due
            to bad request from client. Possible reasons for failure: Organisation
            name is mandatory. Invalid property <name>. Channel is mandatory for root
            organisation. Either "organisationId" or "provider" and "externalId" values
            are required for the operation. Channel value already used by another
            organisation. Provide different value for channel.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. The Organisation Create operation
            failed due to a server error. Possible reasons for failure: Channel registration
            failed.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
      security:
      - bearer: []
      x-codegen-request-body-name: Body
  /read:
    post:
      tags:
      - Org APIs
      summary: Read Organisation details
      description: |-
        This API is for viewing details of an existing Organisation on the Sunbird Platform.
          - The endpoint for **Read Organisation details** is `/read`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Get
      parameters:
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      requestBody:
        description: The body contains metadata about the Organisation whose details
          are required to be viewed.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgGetRequest'
        required: true
      responses:
        200:
          description: OK. Successful operation. The requested operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgGetResponse'
        400:
          description: '''CLIENT_ERROR. The requested operation failed due to bad
            request from client. Possible reasons for failure: Either "organisationId"
            or "provider" and "externalId" values are required for the operation.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
        404:
          description: '''RESOURCE_NOT_FOUND. The requested operation failed as given
            resource is not existing on server. Possible reasons for failure: organisationId
            is mandatory.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. The requested operation failed due
            to a server error.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
      security:
      - bearer: []
      x-codegen-request-body-name: Body
  /search:
    post:
      tags:
      - Org APIs
      summary: Search for an Organisation
      description: |-
        This API is for searching for Organisations on the Sunbird Platform.
          - The endpoint for **Search for an Organisation** is `/search`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Search
      parameters:
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: Access token of registered user performing given API request.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      requestBody:
        description: The body contains metadata about filters that can be used in
          Organisation search.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgSearchRequest'
        required: true
      responses:
        200:
          description: OK. Successful operation. The requested operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSearchResponse'
        400:
          description: '''CLIENT_ERROR. The requested operation failed due to bad
            request from client. Possible reasons for failure: Either "organisationId"
            or "provider" and "externalId" values are required for the operation.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
        404:
          description: '''RESOURCE_NOT_FOUND. The requested operation failed as given
            resource is not existing on server. Possible reasons for failure: organisationId
            is mandatory.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. The requested operation failed due
            to a server error.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
      security:
      - bearer: []
      x-codegen-request-body-name: Body
  /update:
    patch:
      tags:
      - Org APIs
      summary: Update particulars of an existing Organisation
      description: |-
        This API is for updating details of an existing Organisation on the Sunbird Platform.
          - The endpoint for **Update particulars of an existing Organisation** is `/update`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Update
      parameters:
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: Access token of registered user performing given API request.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      requestBody:
        description: The body contains metadata about an existing Organisation to
          be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgUpdateRequest'
        required: true
      responses:
        200:
          description: OK. Successful operation. The requested operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgUpdateResponse'
        400:
          description: '''CLIENT_ERROR. The requested operation failed due to bad
            request from client. Possible reasons for failure: Either "organisationId"
            or "provider" and "externalId" values are required for the operation.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. The requested operation failed due
            to a server error. Possible reasons for failure: Channel registration
            failed.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
      security:
      - bearer: []
      x-codegen-request-body-name: Body
  /status/update:
    patch:
      tags:
      - Org APIs
      summary: Organisation update status
      description: |-
        This API is for updating status of an existing Organisation on the Sunbird Platform.
          - The endpoint for **Organisation update status** is `/status/update`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Status Update
      parameters:
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: Access token of registered user performing given API request.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      requestBody:
        description: The body contains metadata about an existing Organisation whose
          status is required to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgStatusUpdateRequest'
        required: true
      responses:
        200:
          description: OK. Successful operation. The requested operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgStatusUpdateResponse'
        400:
          description: '''CLIENT_ERROR. The requested operation failed due to bad
            request from client. Possible reasons for failure: Either "organisationId"
            or "provider" and "externalId" values are required for the operation.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. The requested operation failed due
            to a server error. Possible reasons for failure: Channel registration
            failed.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
      x-codegen-request-body-name: Body
  /type/create:
    post:
      tags:
      - Org APIs
      summary: Create New Organisation Type
      description: |-
        This API is for creation of a new Organisation Type on the Sunbird Platform.
          - The endpoint for **Create new Organisation Type** is `/type/create`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Type Create
      parameters:
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: Access token of registered user performing given API request.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      requestBody:
        description: The body contains metadata about the new Organisation Type to
          be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgTypeCreateRequest'
        required: true
      responses:
        200:
          description: OK. Successful operation. The Organisation Create operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSuccessResponse'
        400:
          description: '''CLIENT_ERROR. The requested operation failed due to bad
            request from client. Possible reasons for failure: Organisation type name
            is mandatory.'''
          content: {}
        500:
          description: '''INTERNAL SERVER ERROR. The requested operation failed due
            to a server error.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
      security:
      - bearer: []
      x-codegen-request-body-name: Body
  /type/list:
    get:
      tags:
      - Org APIs
      summary: List all Organisation Types
      description: |-
        This API is for listing all Organisation Types on the Sunbird Platform.
          - The endpoint for **List all Organisation Types** is `/type/list`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Type List
      parameters:
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: Access token of registered user performing given API request.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK. Successful operation. The Organisation Create operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgTypeListResponse'
        500:
          description: '''INTERNAL SERVER ERROR. The requested operation failed due
            to a server error.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
      security:
      - bearer: []
  /type/update:
    patch:
      tags:
      - Org APIs
      summary: Update particulars of an existing Organisation Type
      description: |-
        This API is for updating details of an existing Organisation Type on the Sunbird Platform.
          - The endpoint for **Update particulars of an existing Organisation Type** is `/type/update`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Type Update
      parameters:
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: Access token of registered user performing given API request.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      requestBody:
        description: The body contains metadata about an existing Organisation Type
          to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgTypeUpdateRequest'
        required: true
      responses:
        200:
          description: OK. Successful operation. The Organisation Create operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSuccessResponse'
        400:
          description: '''CLIENT_ERROR. The requested operation failed due to bad
            request from client. Possible reasons for failure: Organisation type name
            is mandatory.'''
          content: {}
        500:
          description: '''INTERNAL SERVER ERROR. The requested operation failed due
            to a server error.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
      security:
      - bearer: []
      x-codegen-request-body-name: Body
  /member/add:
    post:
      tags:
      - Org APIs
      summary: Add a User to Organisation
      description: |-
        This API is for adding a user to an existing organisation on the Sunbird Platform.
          - The endpoint for **Add a User to Organisation** is `/member/add`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Add User
      parameters:
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: Access token of registered user performing given API request.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      requestBody:
        description: The body contains metadata about adding a member to an existing
          Organisation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgAddUserRequest'
        required: true
      responses:
        200:
          description: OK. Successful operation. The requested operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSuccessResponse'
        400:
          description: '''CLIENT_ERROR. The requested operation failed due to bad
            request from client. Possible reasons for failure: Organisation Id or
            Provider with External Id values are required for the operation Role of
            the user is required Please provide valid userId or userName and provider
            Given Organisation Data doesn''t exist in our records. Please provide
            a valid one Given User Data doesn''t exist in our records. Please provide
            a valid one'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. The requested operation failed due
            to a server error.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
      security:
      - bearer: []
      x-codegen-request-body-name: Body
  /member/remove:
    post:
      tags:
      - Org APIs
      summary: Remove a User from Organisation
      description: |-
        This API is for removal of a user who is currently a member of an existing organisation on the Sunbird Platform.
          - The endpoint for **Remove a User from Organisation** is `/member/remove`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Remove User
      parameters:
      - name: ts
        in: header
        description: Timestamp at which given API request is sent.
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This ID uniquely identifies a request if the same API is executed
          multiple times.
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: Access token of registered user performing given API request.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: 'Specify authorization key (format: Bearer api-key) received
          from administrator when performing given API request.'
        required: true
        schema:
          type: string
      requestBody:
        description: The body contains metadata about removing a user from an existing
          Organisation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgRemoveUserRequest'
        required: true
      responses:
        200:
          description: OK. Successful operation. The requested operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSuccessResponse'
        400:
          description: '''CLIENT_ERROR. The requested operation failed due to bad
            request from client. Possible reasons for failure: Organisation Id or
            Provider with External Id values are required for the operation Please
            provide valid userId or userName and provider Given Organisation Data
            doesn''t exist in our records. Please provide a valid one Given User Data
            doesn''t exist in our records. Please provide a valid one'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
        500:
          description: '''INTERNAL SERVER ERROR. The requested operation failed due
            to a server error.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgErrorResponse'
      x-codegen-request-body-name: Body
components:
  schemas:
    AddressCreateRequest:
      type: object
      properties:
        addType:
          type: string
          description: Type of address. E.g. Present, Permanent etc.
        addressLine1:
          type: string
          description: First line of address
        addressLine2:
          type: string
          description: Second line of address
        city:
          type: string
          description: City
        state:
          type: string
          description: State
        zipcode:
          type: string
          description: Zip code
        country:
          type: string
          description: Country
      description: Request of Sunbird API containing an address
    OrgCreateRequest:
      title: Organisation Create API request format
      allOf:
      - type: object
        properties:
          request:
            required:
            - channel
            - orgName
            type: object
            properties:
              channel:
                type: string
                description: Name identifying a tenant (e.g. APEKX). Channel is mandatory
                  for a root organisation if channel is not passed it will take custodian
                  channel.
              description:
                type: string
                description: Organisation description
              externalId:
                type: string
                description: Organisation specific ID. This parameter is required
                  if provider is given.
              isRootOrg:
                type: boolean
                description: Set to true for root organisation only
              locationIds:
                type: array
                description: ID of location returned using Location Create API , you
                  can either pass locationIds or locationCode
                items:
                  type: string
              locationCode:
                type: array
                description: Code of created state,district,block etc, you can either
                  pass locationIds or locationCode.
                items:
                  type: string
                  description: '["BH"]'
              provider:
                type: string
                description: Specified by sub-organisations to identify channel of
                  root organisation.  This parameter is required if externalId is
                  given.
              orgName:
                type: string
                description: Organisation name
              orgType:
                type: string
                description: Organisation type
              orgTypeId:
                type: string
                description: ID of organisation type returned using Organisation Type
                  Create API
              rootOrgId:
                type: string
                description: Root organisation ID
              email:
                type: string
                description: Contact email of organisation
              license:
                type: string
                description: This attribute will be used for rootOrg create/update
                  time only. License attribute will be used for content creation time.
                  User will be always part of one rootOrg, so during content creation
                  time he/she can see what license value set by his/her rootOrg.
              isSSOEnabled:
                type: boolean
                description: This attribute is applicable for rootOrg only. If for
                  any root org SSO is enabled then pass this attribute with value
                  true. incase of disable pass this as false
              address:
                $ref: '#/components/schemas/AddressCreateRequest'
    OrgCreateResponse:
      title: Organisation Create API response format
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          result:
            type: object
            properties:
              organisationId:
                type: string
                description: ID of the newly created organisation
              response:
                type: string
                description: Response message for successfully created organisation
    OrgGetRequest:
      title: Organisation Get API request format
      allOf:
      - type: object
        properties:
          request:
            type: object
            properties:
              organisationId:
                type: string
                description: ID of the organisation whose details to be viewed
    Organisation:
      type: object
      properties:
        addressId:
          type: string
          description: ID of the organisation address
        channel:
          type: string
          description: Name identifying a tenant (e.g. APEKX).
        contactDetail:
          type: array
          description: Organisation contact details
          items:
            type: object
            properties:
              phone:
                type: string
                description: Organisation phone contact
              email:
                type: string
                description: Organisation email contact
        createdBy:
          type: string
          description: Identifier of user who created organisation
        createdDate:
          type: string
          description: Date and time when organisation is created
        description:
          type: string
          description: Organisation description
        externalId:
          type: string
          description: Organisation specific ID
        hashTagId:
          type: string
          description: Same as organisation ID
        homeUrl:
          type: string
          description: Organisation homepage URL
        id:
          type: string
          description: Same as organisation ID
        identifier:
          type: string
          description: Same as organisation ID
        imgUrl:
          type: string
          description: Organisation image URL
        isRootOrg:
          type: boolean
          description: Set to true for root organisation
        locationId:
          type: string
          description: ID of location
        noOfMembers:
          type: integer
          description: Number of users in root organisatio
        orgName:
          type: string
          description: Organisation name
        orgType:
          type: string
          description: Organisation type
        orgTypeId:
          type: string
          description: ID of organisation type
        parentOrgId:
          type: string
          description: Parent organisation ID
        preferredLanguage:
          type: string
          description: Preferred language
        provider:
          type: string
          description: Specified by sub-organisations to identify channel of root
            organisation
        rootOrgId:
          type: string
          description: Root organisation ID
        slug:
          type: string
          description: Used to create URL for a root organisation
        status:
          type: integer
          description: 'Organisation status (0: inactive, 1: active, 2: blocked, 3:
            retired)'
        thumbnail:
          type: string
          description: Organisation thumbnail URL
        updatedBy:
          type: string
          description: Identifier of user who updated organisation
        updatedDate:
          type: string
          description: Date and time when organisation is updated
        email:
          type: string
          description: Contact email of organisation
        isSSOEnabled:
          type: boolean
          description: This is optional attribute and applicable for root org only.
            if attribute is present with value true then only it's indicate this rootOrg
            is using SSO, for all other cases SSO is disabled.
    OrgGetResponse:
      title: Organisation Get API response format
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          result:
            type: object
            properties:
              response:
                $ref: '#/components/schemas/Organisation'
    OrgUpdateRequest:
      title: Organisation Update API request format
      allOf:
      - type: object
        properties:
          request:
            required:
            - organisationId
            type: object
            properties:
              organisationId:
                type: string
                description: ID of organisation(mandatory) whose details are required
                  to be updated
              address:
                type: object
                properties: {}
                description: Address of organisation
              description:
                type: string
                description: Organisation description
              externalId:
                type: string
                description: Organisation specific ID. This parameter is required
                  if provider is given.
              isRootOrg:
                type: boolean
                description: Set to true for root organisation
              locationIds:
                type: array
                description: ID of location returned using Location Create API , you
                  can either pass locationIds or locationCode.During update you need
                  to pass complete data, it will directly replace with stored locations
                items:
                  type: string
              locationCode:
                type: array
                description: Code of created state,district,block etc, you can either
                  pass locationIds or locationCode.During update you need to pass
                  complete data, it will directly replace with stored locations
                items:
                  type: string
                  description: '["BH"]'
              provider:
                type: string
                description: Specified by sub-organisations to identify channel of
                  root organisation.  This parameter is required if externalId is
                  given.
              orgName:
                type: string
                description: Organisation name
              orgType:
                type: string
                description: Organisation type
              orgTypeId:
                type: string
                description: ID of organisation type returned using Organisation Type
                  Create API
              email:
                type: string
                description: Contact email of organisation
              license:
                type: string
                description: This attribute will be used for rootOrg create/update
                  time only. License attribute will be used for content creation time.
                  User will be always part of one rootOrg, so during content creation
                  time he/she can see what license value set by his/her rootOrg.
              isSSOEnabled:
                type: boolean
                description: This attribute is used for root org only. if any rootOrg
                  is suing sso then they can update this attribute value as true
    OrgUpdateResponse:
      title: Organisation Update API response format
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          result:
            type: object
            properties:
              organisationId:
                type: string
                description: ID of the updated organisation
              response:
                type: string
                description: Response message for successfully updated organisation
    OrgStatusUpdateRequest:
      title: Organisation Status Update API request format
      allOf:
      - type: object
        properties:
          request:
            type: object
            properties:
              organisationId:
                type: string
                description: ID of organisation whose details are required to be updated
              status:
                type: integer
                description: 'Organisation status (0: inactive, 1: active, 2: blocked,
                  3: retired)'
    OrgStatusUpdateResponse:
      title: Organisation Status Update API response format
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          result:
            type: object
            properties:
              organisationId:
                type: string
                description: ID of the updated organisation
              response:
                type: string
                description: Response message for successfully updated organisation
                  status
    OrgTypeCreateRequest:
      title: Organisation Type Create API request format
      allOf:
      - type: object
        properties:
          request:
            required:
            - name
            type: object
            properties:
              name:
                type: string
                description: Organisation type name
    OrgTypeListResponse:
      title: Organisation Type List API response format
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          result:
            type: object
            properties:
              response:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Organisation type ID
                    name:
                      type: string
                      description: Organisation type name
    OrgTypeUpdateRequest:
      title: Organisation Type Update API request format
      allOf:
      - type: object
        properties:
          request:
            required:
            - id
            - name
            type: object
            properties:
              id:
                type: string
                description: ID of organisation type whose name is required to be
                  updated
              name:
                type: string
                description: Organisation type name
    OrgAddUserRequest:
      title: Organisation Add User API request format
      allOf:
      - type: object
        properties:
          request:
            required:
            - organisationId
            - roles
            - userId
            type: object
            properties:
              organisationId:
                type: string
                description: ID of organisation to which user is required to be added
              provider:
                type: string
                description: ?. This parameter is mandatory if userId is not provided.
              roles:
                type: array
                description: List of roles. in capital letters EX.PUBLIC list of roles
                  availaible at http://docs.sunbird.org/latest/features-documentation/admin_assigning_users/index.html
                items:
                  type: string
              userId:
                type: string
                description: ID of user who is required to be added if we are not
                  providing the userId then we need to provide userExternalId,userProvider,userIdType
    OrgRemoveUserRequest:
      title: Organisation Remove User API request format
      allOf:
      - type: object
        properties:
          request:
            required:
            - organisationId
            - userId
            type: object
            properties:
              organisationId:
                type: string
                description: ID of organisation from which user is required to be
                  removed
              userId:
                type: string
                description: ID of user who is required to be removed
    OrgSuccessResponse:
      title: Common success response for an Organisation Management API
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          result:
            type: object
            properties:
              response:
                type: string
                description: Response message for successfully performed request
    OrgErrorResponse:
      title: Common error response for any Organisation Management API
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          result:
            type: object
            properties: {}
    OrgSearchRequest:
      title: Organisation Search API request format
      allOf:
      - type: object
        properties:
          request:
            type: object
            properties:
              filters:
                type: object
                properties:
                  $or:
                    type: object
                    properties: {}
                    description: this is additional param which support or condition
                      for search
                description: Organisation search filters inside filters map you can
                  put the attributes, required for your search it also supports the
                  $or attributes
              limit:
                type: integer
                description: 'Limit on the number of results '
              offset:
                type: integer
                description: this is used get the result starting from the offset
                  value
    OrgSearchResponse:
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
            content:
              type: array
              items:
                $ref: '#/components/schemas/Organisation'
      description: Organisation Search API response format
    ApiResponse:
      required:
      - ets
      - id
      - params
      - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since
            EPOCH
          format: int64
        params:
          required:
          - msgid
          - resmsgid
          - status
          type: object
          properties:
            msgid:
              type: string
              description: Represents the ID of the message sent
            resmsgid:
              type: string
              description: Represents the ID of the response message
            status:
              type: string
              enum:
              - success
              - error
        responseCode:
          type: string
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
    userToken:
      type: apiKey
      name: x-authenticated-user-token
      in: header
