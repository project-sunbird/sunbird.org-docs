openapi: 3.0.1
info:
  title: Badging Framework API(s)
  description: "A Badge is a virtual representation of: \n\n  - Award, Certificate,\
    \ Endorsement or Authorization. The Badging Framework API resources are used to\
    \ accord badges to: \n  - recognize user skills and accomplishments\n  - rate\
    \ or authorize content for its quality and effectiveness\n  - The URL for Badging\
    \ Framework is `/badging/v1/issuer`\n  "
  version: "1.0"
servers:
- url: https://staging.open-sunbird.org/api/badging/v1/issuer
paths:
  /create:
    post:
      tags:
      - Badging Framework API(s)
      summary: Create Issuer
      description: "This API is used to create a badge issuer entity. \n   \n   -\
        \ To accord badges\n      \n      - Create the Issuer entity\n      - Create\
        \ the Badge Class entity \n      - and the Assertion\n\n   - The endpoint\
        \ for **Create Issuer** is `/create`\n   - The fields marked with an asterisk\
        \ (*) are mandatory. They cannot be null or empty.\n     \n   "
      operationId: CreatePost
      parameters:
      - name: Authorization
        in: header
        description: To make use of any Badging API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - description
              - email
              - name
              - url
              properties:
                name:
                  type: string
                  description: The unique name of the badge issuing entity or organisation
                description:
                  type: string
                  description: A short description of the badge issuing entity or
                    organization
                url:
                  type: string
                  description: The valid homepage URL of the badge issuing entity
                    or organisation
                email:
                  type: string
                  description: The valid contact E-mail address of the issuing entity
                    or organisation
                image:
                  type: string
                  description: An image/logo representing the badge issuer
                  format: binary
        required: true
      responses:
        200:
          description: '''SUCCESS. The **Create Badge Issuer** operation was successful!'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  singleIssuerResp:
                    $ref: '#/components/schemas/singleIssuerResp'
        400:
          description: BAD REQUEST,**Create Badge Issuer** operation failed !The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        404:
          description: Resource not found,**Create Badge Issuer** operation failed
            !The possible reason for failure is that requested resource not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /badge/search:
    post:
      tags:
      - Badging Framework API(s)
      summary: List Badge Classes
      description: "This API is associated with searching badge issuing entities or\
        \ organizations. \n   - The endpoint for **List Badge Classes** is `/badge/search`\n\
        \   - The fields marked with an asterisk (*) are mandatory. They cannot be\
        \ null or empty."
      operationId: BadgeSearchPost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any Badging API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the badge issuer to be searched
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ApiRequest'
              - $ref: '#/components/schemas/ListBadgeClassesrequest'
        required: true
      responses:
        200:
          description: '''SUCCESS. The **Search Badge Issuing Entities or Organizations**
            operation was successful!'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgeClassListResp:
                    $ref: '#/components/schemas/BadgeClassListResp'
        400:
          description: 'BAD REQUEST,**Search Badge Issuing Entities or Organizations**
            operation failed !The possible reason for failure is that you may have
            missed providing input for a mandatory parameter. '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /list:
    get:
      tags:
      - Badging Framework API(s)
      summary: List Issuers
      description: "This API is associated with listing issuer entities or organizations.\
        \ \n   - The endpoint for **List Issuers** is  `/list`\n   - The fields marked\
        \ with an asterisk (*) are mandatory. They cannot be null or empty."
      operationId: ListGet
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any Badging API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      responses:
        200:
          description: '''SUCCESS. The **List Issuers** operation was successful!'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  issuerList:
                    $ref: '#/components/schemas/issuerList'
        400:
          description: 'BAD REQUEST,**List Issuers*** operation failed !The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter. '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /read/{issuerId}:
    get:
      tags:
      - Badging Framework API(s)
      summary: Get Issuer by ID
      description: "This API is associated with fetching a badge issuer entity or\
        \ organization by a specific ID\n   - The endpoint for **Get Issuer by ID**\
        \ is `/read/{issuerId}`\n   - The fields marked with an asterisk (*) are mandatory.\
        \ They cannot be null or empty.\n     "
      operationId: ReadByIssuerIdGet
      parameters:
      - name: issuerId
        in: path
        description: Please append a valid Issuer ID to the request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All the APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      responses:
        200:
          description: '''SUCCESS. The **Get Issuer ID** operation was successful!'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  singleIssuerResp:
                    $ref: '#/components/schemas/singleIssuerResp'
        400:
          description: 'BAD REQUEST,**Get Issuer by ID*** operation failed !The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter. '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        404:
          description: Resource not found,**Get Issuer ID** operation failed !The
            possible reason for failure is that the requested is resource not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /badge/read/{badgeId}:
    get:
      tags:
      - Badging Framework API(s)
      summary: Get Badge Class by ID
      description: "This API is associated with fetching the details of badge class\
        \ for a specific issuer entity or organization by a specific ID\n   - The\
        \ endpoint for **Get Badge Class by ID** is `/badge/read/{badgeId}`\n   -\
        \ The fields marked with an asterisk (*) are mandatory. They cannot be null\
        \ or empty.\n     "
      operationId: BadgeReadByBadgeIdGet
      parameters:
      - name: badgeId
        in: path
        description: Please append a valid Badge ID to the request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All the APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      responses:
        200:
          description: '''SUCCESS. The **Get Badge Class by ID** operation was successful!'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgeClassResp:
                    $ref: '#/components/schemas/BadgeClassResp'
        400:
          description: 'BAD REQUEST,**Get Badge Class by ID*** operation failed !The
            possible reason for failure is that you may have missed providing input
            for a mandatory parameter. '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        404:
          description: Resource not found,**Get Badge Class by ID** operation failed
            !The possible reason for failure is that the requested is resource not
            found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /badge/assertion/search:
    post:
      tags:
      - Badging Framework API(s)
      summary: List Badge Assertions
      description: "This API is associated with fetching and listing the assertions\
        \ of a badge.\n   - The endpoint for **List Badge Assertions** is `/badge/assertion/search`\n\
        \   - The fields marked with an asterisk (*) are mandatory. They cannot be\
        \ null or empty.\n     "
      operationId: BadgeAssertionSearchPost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any Badging API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the fetching and listing assertions
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ApiRequest'
              - $ref: '#/components/schemas/ListBadgeAssertionsrequest'
        required: true
      responses:
        200:
          description: '''SUCCESS. The **List Badge Assertions** operation was successful!'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  AssertionListResponse:
                    $ref: '#/components/schemas/AssertionListResponse'
        400:
          description: 'BAD REQUEST,**List Badge Assertions** operation failed !The
            possible reason for failure is that you may have missed providing input
            for a mandatory parameter. '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /badge/assertion/create:
    post:
      tags:
      - Badging Framework API(s)
      summary: Create Badge Assertion
      description: "This API is associated with creation of badge assertion.\n   -\
        \ The for **Create Badge Assertion** is `/badge/assertion/create`\n   - The\
        \ fields marked with an asterisk (*) are mandatory. They cannot be null or\
        \ empty.\n     "
      operationId: BadgeAssertionCreatePost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All the APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the creation of badge assertions
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/ApiRequest'
              - $ref: '#/components/schemas/CreateBadgeAssertionrequest'
        required: true
      responses:
        200:
          description: '''SUCCESS. The **Create Badge Assertions** operation was successful!'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  AssertionResponse:
                    $ref: '#/components/schemas/AssertionResponse'
        400:
          description: 'BAD REQUEST,**Create Badge Assertion** operation failed !The
            possible reason for failure is that you may have missed providing input
            for a mandatory parameter. '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /delete/{issuerId}:
    delete:
      tags:
      - Badging Framework API(s)
      summary: Delete Issuer by ID
      description: "This API is associated with deleting an issuer by a specific ID.\n\
        \   - The endpoint for **Delete Issuer by ID** is `/delete/{issuerId}`\n \
        \  - The fields marked with an asterisk (*) are mandatory. They cannot be\
        \ null or empty.\n     "
      operationId: DeleteByIssuerIdDelete
      parameters:
      - name: issuerId
        in: path
        description: Please append a valid Issuer ID To the Request URL
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any Badging API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      responses:
        200:
          description: '''SUCCESS. The **Delete Issuer by ID** operation was successful!'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgeResponse:
                    $ref: '#/components/schemas/BadgeResponse'
        400:
          description: 'BAD REQUEST,**Delete Issuer by ID** operation failed !The
            possible reason for failure is that you may have missed providing input
            for a mandatory parameter. '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        404:
          description: Resource not found,**Delete Issuer by ID** operation failed
            !The possible reason for failure is that the requested is resource not
            found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /badge/assertion/delete:
    delete:
      tags:
      - Badging Framework API(s)
      summary: Revoke Badge Assertion by ID
      description: "This API is associated with revoking a badge assertion by a specific\
        \ ID.\n   - The endpoint for **Revoke Badge Assertion by ID** is `/badge/assertion/delete`\n\
        \   - The fields marked with an asterisk (*) are mandatory. They cannot be\
        \ null or empty.\n     "
      operationId: BadgeAssertionDeleteDelete
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any Badging API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the revoking the badge assertions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeBadgeAssertionByIdrequest'
        required: true
      responses:
        200:
          description: '''SUCCESS. The **Revoke Badge Assertion by ID** operation
            was successful!'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgeResponse:
                    $ref: '#/components/schemas/BadgeResponse'
        400:
          description: 'BAD REQUEST,**Revoke Badge Assertion by ID** operation failed
            !The possible reason for failure is that you may have missed providing
            input for a mandatory parameter. '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        404:
          description: Resource not found,**Revoke Badge Assertion by ID** operation
            failed !The possible reason for failure is that the requested is resource
            not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /badge/delete/{badgeId}:
    delete:
      tags:
      - Badging Framework API(s)
      summary: Delete Badge Class
      description: "This API is associated with deleting a badge by a specific ID.\n\
        \   - The endpoint for **Delete Badge Class** is `/badge/delete/{badgeId}`\n\
        \   - The fields marked with an asterisk (*) are mandatory. They cannot be\
        \ null or empty.\n     "
      operationId: BadgeDeleteByBadgeIdDelete
      parameters:
      - name: badgeId
        in: path
        description: An ID which uniquely identifies a Badge
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any Badging API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      responses:
        200:
          description: '''SUCCESS. The **Delete Badge Class** operation was successful!'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgeResponse:
                    $ref: '#/components/schemas/BadgeResponse'
        400:
          description: 'BAD REQUEST,**Delete Badge Class** operation failed ! Possible
            reasons for request failure: The Badge class could not be deleted. It
            has been issued at least once.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        404:
          description: Resource not found,**Delete Badge Class By Id** operation failed
            !The possible reason for failure is that the requested is resource not
            found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /badge/create:
    post:
      tags:
      - Badging Framework API(s)
      summary: Create Badge Class
      description: "This API is associated with creating a badge class.\n   - The\
        \ endpoint for **Create Badge Class** is `/badge/create`\n   - The fields\
        \ marked with an asterisk (*) are mandatory. They cannot be null or empty.\n\
        \     "
      operationId: BadgeCreatePost
      parameters:
      - name: Authorization
        in: header
        description: To make use of any Badging API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - criteria
              - description
              - image
              - issuerId
              - name
              - roles
              - rootOrgId
              - type
              properties:
                issuerId:
                  type: string
                  description: Please append a valid Issuer ID To the Request URL
                name:
                  type: string
                  description: The name of the badge/achievement
                description:
                  type: string
                  description: ' A short description of the badge/achievement.'
                criteria:
                  type: string
                  description: Its either a text string or a URL of a remotely hosted
                    page describing the criteria for achievement
                rootOrgId:
                  type: string
                  description: An ID which uniquly identifies the Root Organisation
                type:
                  type: string
                  description: The Badge class type It can possibly be either of two
                    (user | content)
                subtype:
                  type: string
                  description: 'It represents the Badge Subtype (possible values:
                    award,certificate,endorsement,authorization)'
                roles:
                  type: string
                  description: Represents Single or multiple roles, possibly a JSON
                    array of roles (e.g. "roleId1" or [ "roleId1", "roleId2" ], any
                    valid role inside system)
                image:
                  type: string
                  description: It is a graphic which represents the Badge
                  format: binary
        required: true
      responses:
        200:
          description: '''SUCCESS. The **Create Badge Class** operation was successful!'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgeClassResp:
                    $ref: '#/components/schemas/BadgeClassResp'
        400:
          description: 'BAD REQUEST,**Create Badge Class** operation failed !The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter. '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /badge/assertion/read/{assertionId}:
    get:
      tags:
      - Badging Framework API(s)
      summary: Get Badge Assertion by ID
      description: "This API is associated with fetching and reading the badge assertions\
        \ by specific assertion ID.\n   - The endpoint for **Get Badge Asertion by\
        \ ID** is `/badge/assertion/read/{assertionId}`\n   - The fields marked with\
        \ an asterisk (*) are mandatory. They cannot be null or empty.\n     "
      operationId: BadgeAssertionReadByAssertionIdGet
      parameters:
      - name: assertionId
        in: path
        description: Please append a valid Assertion ID to the Request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.Possible\
          \ media types can be:- \n  - Application/json\n  - Multipart/form-data\n\
          \  - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of any Badging API, you require authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      responses:
        200:
          description: '''SUCCESS. The **Get Badge Assertion by ID** operation was
            successful!'''
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  AssertionResponse:
                    $ref: '#/components/schemas/AssertionResponse'
        400:
          description: 'BAD REQUEST,**Get Badge Assertion by ID** operation failed
            !The possible reason for failure is that you may have missed providing
            input for a mandatory parameter. '
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        404:
          description: Resource not found,**Get Badge Assertion by ID** operation
            failed !The possible reason for failure is that the requested is resource
            not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
                  BadgingErrorResponse:
                    $ref: '#/components/schemas/BadgingErrorResponse'
      security:
      - bearer: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
components:
  schemas:
    ListBadgeClassesrequest:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/Request'
    Request:
      required:
      - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/Filters'
    Filters:
      required:
      - rootOrgId
      - type
      type: object
      properties:
        issuerList:
          type: array
          description: pass the list of issuer
          example: []
          items:
            type: string
        rootOrgId:
          type: string
          description: pass rootOrg id
          example: something
        type:
          type: string
          description: to whom you want to create or assign badge (user or content)
          example: user
        subtype:
          type: string
          description: ""
          example: award
        roles:
          type: array
          description: ""
          example: []
          items:
            type: string
    ListBadgeAssertionsrequest:
      title: List Badge AssertionsRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ListBadgeAssertions'
    ListBadgeAssertions:
      title: ListBadgeAssertions
      required:
      - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/FiltersReqModel'
      example:
        filters:
          assertions:
          - assertionIds
    FiltersReqModel:
      title: FiltersReqModel
      required:
      - assertions
      type: object
      properties:
        assertions:
          type: array
          description: ""
          example:
          - assertionIds
          items:
            type: string
      example:
        assertions:
        - assertionIds
    CreateBadgeAssertionrequest:
      title: Create Badge AssertionRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/CreateBadgeAssertion'
    CreateBadgeAssertion:
      title: CreateBadgeAssertion
      required:
      - badgeId
      - issuerId
      - recipientId
      - recipientType
      type: object
      properties:
        recipientId:
          type: string
          description: ""
          example: 6fbd1dd5-418c-4cc5-834b-7e7413192f10
        recipientType:
          type: string
          description: ""
          example: user
        evidence:
          type: string
          description: ""
          example: https://sunbirddev.blob.core.windows.net/user/uploads/badges/bfd203a3c494170dd7de199a97e05486.png
        issuerId:
          type: string
          description: ""
          example: swarn
        badgeId:
          type: string
          description: An ID which uniquely identifies a Badge
          example: something
      example:
        recipientId: 6fbd1dd5-418c-4cc5-834b-7e7413192f10
        recipientType: user
        evidence: https://sunbirddev.blob.core.windows.net/user/uploads/badges/bfd203a3c494170dd7de199a97e05486.png
        issuerId: swarn
        badgeId: something
    RevokeBadgeAssertionByIdrequest:
      title: Revoke Badge Assertion by IDRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/RevokeBadgeAssertion'
      example:
        request:
          assertionId: assertion id
          recipientId: recipient id
          recipientType: user or contnet
          revocationReason: some reason
    RevokeBadgeAssertion:
      title: RevokeBadgeAssertion
      required:
      - assertionId
      - recipientId
      - recipientType
      - revocationReason
      type: object
      properties:
        assertionId:
          type: string
          description: ""
          example: assertion id
        recipientId:
          type: string
          description: ""
          example: recipient id
        recipientType:
          type: string
          description: ""
          example: user
        revocationReason:
          type: string
          description: ""
          example: some reason
      example:
        assertionId: assertion id
        recipientId: recipient id
        recipientType: user
        revocationReason: some reason
    Result:
      title: Result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/deleteResp'
    BadgeResponse:
      description: Create Content Response
      allOf:
      - $ref: '#/components/schemas/Result'
      - $ref: '#/components/schemas/ResponseHeader'
    ResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/ResponseParams'
        responseCode:
          type: string
          description: ok
    ResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    EmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    deleteResp:
      title: response on deleting issuer,badge class or assertions
      type: object
      properties:
        status:
          type: string
          description: success or failure
    BadgingErrorResponse:
      title: Create Content Error Response
      allOf:
      - $ref: '#/components/schemas/EmptyResult'
      - $ref: '#/components/schemas/ResponseHeader'
    issuerList:
      title: list of issuer
      type: object
      properties:
        result:
          $ref: '#/components/schemas/issResp'
    issResp:
      title: list of issuer
      type: object
      properties:
        issuers:
          $ref: '#/components/schemas/ListIssuerResponse'
    ListIssuerResponse:
      title: ListIssuerResponse
      type: array
      items:
        $ref: '#/components/schemas/Issuer'
    singleIssuerResp:
      title: single issuer response
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Issuer'
    Issuer:
      title: this contains response for issuer object
      type: object
      properties:
        issuerId:
          type: string
          description: ID of an issuer
        image:
          type: string
          description: Image of an issuer
        createdDate:
          type: string
          format: yyyy-MM-dd HH:mm:ss:SSSZZZZ
        issuerUrl:
          type: string
          description: url of the issuer
        issuerIdUrl:
          type: string
          description: issuer url with ID
        name:
          type: string
          description: Name of the Issuer
        description:
          type: string
          description: details of the issuer
        email:
          type: string
          description: Valid email ID of the issuer
    BadgeClassResp:
      title: response of a single badge class
      type: object
      properties:
        result:
          $ref: '#/components/schemas/BadgeClass'
    BadgeClassListResp:
      title: response for badge class list
      type: object
      properties:
        result:
          $ref: '#/components/schemas/BadgeClassList'
    BadgeClassList:
      title: this will contains list of badge class
      type: object
      properties:
        badges:
          type: array
          items:
            $ref: '#/components/schemas/BadgeClass'
    BadgeClass:
      title: this contains response for badgeClass object
      type: object
      properties:
        issuerId:
          type: string
          description: ID of an issuer
        image:
          type: string
          description: Image of a badge class
        criteria:
          type: string
          description: criteria in a sample language that will explain the badge achivement
        roles:
          type: array
          items:
            type: string
            description: which roles can access this badge class
        description:
          type: string
          description: short description about badge class
        type:
          type: string
          description: on which Object this badge class can be used,possible values
            {user or content}
        subtype:
          type: string
          description: possible values award,certificate,endorsement,authorization
        rootOrgId:
          type: string
          description: contains creator rootOrg, so that later we can show all the
            badges for a root Org.
        createdDate:
          type: string
          format: yyyy-MM-dd HH:mm:ss:SSSZZZZ
        recipientCount:
          type: integer
          description: how many user or content got this badge class
        issuerIdUrl:
          type: string
          description: issuer url with ID
        name:
          type: string
          description: Name of the badge class
        badgeIdUrl:
          type: string
          description: url of the badge class
    AssertionListResponse:
      title: this will contains response object of assertion list
      type: object
      properties:
        result:
          $ref: '#/components/schemas/AssertionList'
    AssertionList:
      title: contains list of assertions
      type: object
      properties:
        assertions:
          type: array
          items:
            $ref: '#/components/schemas/AssertionResponse'
    AssertionResponse:
      title: contains response of single assertion object
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Assertion'
    Assertion:
      title: Data model for assertion object.
      type: object
      properties:
        assertionDate:
          type: string
          format: yyyy-MM-dd HH:mm:ss:SSSZZZZ
        assertionImageUrl:
          type: string
          description: public access url of assertion image
        assertionIdUrl:
          type: string
          description: public access url of assertion
        revoked:
          type: boolean
        issuerId:
          type: string
          description: ID of an issuer
        assertionId:
          type: string
          description: id of the assertions
        recipient:
          type: object
          properties:
            type:
              type: string
              description: this will indicate recipient identity type.
            salt:
              type: string
            hashed:
              type: boolean
            identity:
              type: string
              description: contains salt value
        verify:
          type: object
          properties:
            url:
              type: string
              description: public url of assertion by which it can be verifiable
            type:
              type: string
              description: it will be badge is hosted or sign
        revocationReason:
          type: string
          description: reason to revoke the badge class
        recipientEmail:
          type: string
          description: email of badge reciver
        createdDate:
          type: string
          format: yyyy-MM-dd HH:mm:ss:SSSZZZZ
        issuerIdUrl:
          type: string
          description: issuer url with ID
        badgeIdUrl:
          type: string
          description: url of the badge class
    ApiResponse:
      required:
      - ets
      - id
      - params
      - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since
            EPOCH
          format: int64
        params:
          required:
          - msgid
          - resmsgid
          - status
          type: object
          properties:
            msgid:
              type: string
              description: Represents the ID of the message sent
            resmsgid:
              type: string
              description: Represents the ID of the response message
            status:
              type: string
              enum:
              - success
              - error
        responseCode:
          type: string
    ApiRequest:
      type: object
      properties:
        id:
          type: string
          description: Represents an API uniquely
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since
            EPOCH
          format: int64
        params:
          type: object
          properties:
            msgid:
              type: string
              description: Represents the unique ID of the message being sent
            did:
              type: string
              description: Represents the device UUID from which API is called
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
    userToken:
      type: apiKey
      name: x-authenticated-user-token
      in: header
