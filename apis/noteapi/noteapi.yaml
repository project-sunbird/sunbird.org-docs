openapi: 3.0.1
info:
  title: User Notes API(s)
  description: "- The User Notes API resources enables users to take notes on the\
    \ Sunbird Platform. The basic operations include Creation, Updation,Reading &\
    \ deleting. \n- The URL for User Notes API(s) is `/notes/v1`."
  version: "1.0"
servers:
- url: https://staging.open-sunbird.org/api/notes/v1
paths:
  /create:
    post:
      tags:
      - Note APIs
      summary: Create Note
      description: |-
        This API is associated with creating user note on Sunbird platform.
           - The endpoint for **Create Note** is `/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: NotesV1CreatePost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which creating user notes request was sent.
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for creating user notes.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNoteForUserrequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateNoteForUserrequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateNoteForUserrequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."create user note" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The "create user note" operation failed ! The
            possible reason for failure is that you may have missed providing input
            for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /notes/v1/create
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            X-Device-ID: X-Device-ID
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: "{\n    \"request\":{\n             \"userId\" : \"userid\", \n  \
            \    \"title\" : \"title 2\",\n      \"note\" : \"This is a test Note\"\
            , \n      \"courseId\" : \"alpha01crs\",  \n      \"contentId\" : \"alpha01crs\"\
            ,\n      \"tags\": [\"test\",\"note1\"] \n      } \n   }"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Create Note for user
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /read/{noteId}:
    get:
      tags:
      - Note APIs
      summary: Get Existing Notes
      description: |-
        This API is associated with fetching a user note on Sunbird platform.
           - The endpoint for **Get Existing Notes** is `/read/{noteId}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: NotesV1Read0123349258019635200Get
      parameters:
      - name: noteId
        in: path
        description: Please append a valid note Id To the request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which fetching user note request was sent.
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."fetch user note" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The "fetch user note" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: GET
          uri: /notes/v1/read/{noteid}
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get created notes
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /update/{noteId}:
    patch:
      tags:
      - Note APIs
      summary: Update Note
      description: |-
        This API is associated with  updating user note on Sunbird platform.
           - The endpoint for **Update Note** is `/update/{noteId}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: V1NotesUpdate0123329248758743040Patch
      parameters:
      - name: noteId
        in: path
        description: Please append a valid note Id To the request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which updating user note request was sent.
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for updating user notes.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNoterequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateNoterequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UpdateNoterequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."update user note" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The "update user note" operation failed ! The
            possible reason for failure is that you may have missed providing input
            for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: PATCH
          uri: /v1/notes/update/{noteid}
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: |-
            {
                "id":"unique API ID",
                    "ts":"2013/10/15 16:16:39",
                     "params": { },
                  "request" : {
                  "note" : "My notes1 update 1",
                  "title" : "updated title",
                  "tags": ["tag1"]
                  }
                }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update Note
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
  /delete/{noteId}:
    delete:
      tags:
      - Note APIs
      summary: Delete Note
      description: |-
        This API is associated with deleting a user note on Sunbird platform.
           - The endpoint for **Delete Note** is `/delete/{noteId}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: NotesV1Delete0123329248758743040Delete
      parameters:
      - name: noteId
        in: path
        description: Please append a valid note Id To the request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which delete note request was sent.
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."delete note" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The "delete note" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: DELETE
          uri: /notes/v1/delete/{noteid}
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Delete Note
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /search:
    post:
      tags:
      - Note APIs
      summary: Search User Note
      description: |-
        This API is associated with Searching for a user note on Sunbird platform.
           - The endpoint for **Search User Note** is `/search`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: NotesV1SearchPost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which search user note request was sent.
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for Searching for a user note
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchNoterequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SearchNoterequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SearchNoterequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."search user note request" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateResponse'
        400:
          description: BAD REQUEST. The "search user note request" operation failed
            ! The possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentCreateErrorResponse'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      security:
      - bearer: []
      x-unitTests:
      - request:
          method: POST
          uri: /notes/v1/search
          headers:
            Content-Type: application/json
            X-Consumer-ID: X-Consumer-ID
            ts: 2017-05-25 10:18:56:578+0530
            X-msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
            Authorization: Bearer {{api-key}}
            x-authenticated-user-token: '{{user-token}}'
          body: |-
            {
              "request" : {
                "query" : "note",
                "filters" : {
                  "userId" : "userid"
                },
                "offset" : 0,
                "limit" : 2,
                "sort_by" : {"updatedDate" : "asc"}
              }
              }
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Search Note
        x-testDescription: ""
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: Body
components:
  schemas:
    ResultWithNodeId:
      title: Result Containing Node Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/NodeId'
    ContentCreateResponse:
      description: Create Content Response
      allOf:
      - $ref: '#/components/schemas/ResultWithNodeId'
      - $ref: '#/components/schemas/ResponseHeader'
    ResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/ResponseParams'
        responseCode:
          type: object
          properties: {}
          description: 'API response code '
    ResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    EmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    NodeId:
      title: Node Id
      type: object
      properties:
        node_id:
          type: string
          description: Node Identifier
    ContentCreateErrorResponse:
      title: Create Content Error Response
      allOf:
      - $ref: '#/components/schemas/EmptyResult'
      - $ref: '#/components/schemas/ResponseHeader'
    '{{host}}/v1/user/forgotpasswordrequest':
      title: '{{host}}/v1/user/forgotpasswordRequest'
      required:
      - id
      - params
      - request
      - ts
      type: object
      properties:
        id:
          type: string
          description: ""
        ts:
          type: string
          description: ""
        params:
          type: object
          properties: {}
          description: ""
        request:
          $ref: '#/components/schemas/Request100'
      example:
        id: unique API ID
        ts: 2013/10/15 16:16:39
        params: {}
        request:
          userName: amit127.kumar17
    Request100:
      title: Request100
      required:
      - userName
      type: object
      properties:
        userName:
          type: string
          description: ""
    UpdateNoterequest:
      title: Update NoteRequest
      required:
      - id
      - params
      - request
      - ts
      type: object
      properties:
        id:
          type: string
          description: ""
          example: unique API ID
        ts:
          type: string
          description: ""
          example: 2013/10/15 16:16:39
        params:
          type: object
          properties: {}
          description: ""
          example: {}
        request:
          $ref: '#/components/schemas/Request'
      example:
        id: unique API ID
        ts: 2013/10/15 16:16:39
        params: {}
        request:
          note: My notes1 update 1
          title: updated title
          tags:
          - tag1
    Request:
      title: Request
      required:
      - note
      - tags
      - title
      type: object
      properties:
        note:
          type: string
          description: ""
          example: My notes1 update 1
        title:
          type: string
          description: ""
          example: updated title
        tags:
          type: array
          description: ""
          example:
          - tag1
          items:
            type: string
      example:
        note: My notes1 update 1
        title: updated title
        tags:
        - tag1
    CreateNoteForUserrequest:
      title: Create Note for userRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/Request3'
      example:
        request:
          userId: userid
          title: title 2
          note: This is a test Note
          courseId: alpha01crs
          contentId: alpha01crs
          tags:
          - test
          - note1
    Request3:
      title: Request3
      required:
      - contentId
      - courseId
      - note
      - tags
      - title
      - userId
      type: object
      properties:
        userId:
          type: string
          description: ""
          example: userid
        title:
          type: string
          description: ""
          example: title 2
        note:
          type: string
          description: ""
          example: This is a test Note
        courseId:
          type: string
          description: ""
          example: alpha01crs
        contentId:
          type: string
          description: ""
          example: alpha01crs
        tags:
          type: array
          description: ""
          example:
          - test
          - note1
          items:
            type: string
      example:
        userId: userid
        title: title 2
        note: This is a test Note
        courseId: alpha01crs
        contentId: alpha01crs
        tags:
        - test
        - note1
    SearchNoterequest:
      title: Search NoteRequest
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/Request5'
      example:
        request:
          query: note
          filters:
            userId: userid
          offset: 0
          limit: 2
          sort_by:
            updatedDate: asc
    Request5:
      title: Request5
      required:
      - filters
      - limit
      - offset
      - query
      - sort_by
      type: object
      properties:
        query:
          type: string
          description: ""
          example: note
        filters:
          $ref: '#/components/schemas/Filters'
        offset:
          type: integer
          description: ""
          format: int32
          example: 0
        limit:
          type: integer
          description: ""
          format: int32
          example: 2
        sort_by:
          $ref: '#/components/schemas/SortBy'
      example:
        query: note
        filters:
          userId: userid
        offset: 0
        limit: 2
        sort_by:
          updatedDate: asc
    Filters:
      title: Filters
      required:
      - userId
      type: object
      properties:
        userId:
          type: string
          description: ""
          example: userid
      example:
        userId: userid
    SortBy:
      title: SortBy
      required:
      - updatedDate
      type: object
      properties:
        updatedDate:
          type: string
          description: ""
          example: asc
      example:
        updatedDate: asc
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
    userToken:
      type: apiKey
      name: x-authenticated-user-token
      in: header
