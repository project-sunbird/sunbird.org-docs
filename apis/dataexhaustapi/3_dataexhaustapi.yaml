openapi: 3.0.1
info:
  title: Data Exhaust API(s)
  description: "Data exhaust API resource refers to the data generated as trails or\
    \ information byproducts resulting from all user activities.\n  - These resources\
    \ are used to improve online processes based on\n  the behaviors of users \n \
    \ - Also these resources are used to minimize required actions and find areas\
    \ to optimize, improve or change outright \n  - Data exhaust also helps in data\
    \ mining analytics\n  - The URL for Data Exhaust API(s) is `/data/v1/dataset/request`"
  termsOfService: https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE
  contact:
    email: info@sunbird.org
  version: "1.0"
servers:
- url: https://staging.open-sunbird.org/api/data/v1/dataset/request/
paths:
  /submit:
    post:
      tags:
      - Data Exhaust API(s)
      description: "This API is used to submit the data request to get the exhaust\
        \ data \n  - The response of the request initiates with the creation of a\
        \ data file\n  - This data file can be downloaded and used for analytics etc.\n\
        \  - The endpoint for **Submit Data Request** is `/submit`\n  - The fields\
        \ marked with an asterisk (*) are mandatory. They cannot be null or empty."
      operationId: Submit Data Request
      parameters:
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the data request to be sent
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/dataRequestBody'
        required: true
      responses:
        200:
          description: SUCCESS. The **Submit Data Request** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataExhaustResponse'
        400:
          description: BAD REQUEST,**Submit Data Request** operation failed !The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
        500:
          description: INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content: {}
      x-codegen-request-body-name: Body
  /list/{client_key}:
    get:
      tags:
      - Data Exhaust API(s)
      description: "This API is used to list the status messages and other data  related\
        \ activities that are specific to a channel\n  - The endpoint for **List Requests**\
        \ is `/list/{client_key}`\n  - {...} represents a variable value which is\
        \ your channel ID, append a valid channel ID to the request URL \n  - The\
        \ fields marked with an asterisk (*) are mandatory. They cannot be null or\
        \ empty."
      operationId: List Requests
      parameters:
      - name: client_key
        in: path
        description: Unique key/ID of the requester. In case of partners, the value
          can be partner_key
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: Represents the limit of result entries, default limit is set
          to 100
        schema:
          type: string
      responses:
        200:
          description: SUCCESS. The **list status** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListResponse'
        400:
          description: BAD REQUEST,**list status** operation failed !The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
        500:
          description: INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content: {}
  /read/{client_key}/{request_ID}:
    get:
      tags:
      - Data Exhaust API(s)
      description: "This API is used to fetch and view the current status of the data\
        \ that gets generated by user interaction and activities. \n  - The endpoint\
        \ for **Get Request Details** is `/read/{channel_key}/{request_ID}`\n  - {...}\
        \ represents a variable value which is your channel ID and the request ID,\
        \ append a valid channel ID, Request ID to the request URL \n  - The fields\
        \ marked with an asterisk (*) are mandatory. They cannot be null or empty."
      operationId: Get Request Details
      parameters:
      - name: client_key
        in: path
        description: Unique key/ID of the requester. In case of partners, the value
          can be partner_key
        required: true
        schema:
          type: string
      - name: request_ID
        in: path
        description: Request ID provided in the response when the job execution request
          is made.
        required: true
        schema:
          type: string
      responses:
        200:
          description: SUCCESS. The **fetch current status** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobInfoResponse'
        400:
          description: BAD REQUEST,**fetch current status** operation failed !The
            possible reason for failure is that you may have missed providing input
            for a mandatory parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  ApiResponse:
                    $ref: '#/components/schemas/ApiResponse'
        500:
          description: INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content: {}
components:
  schemas:
    dataRequestBody:
      title: DataExhaust - Data Request
      required:
      - id
      - params
      - request
      - ts
      - ver
      type: object
      properties:
        id:
          type: string
          description: unique API ID=data_exhaust_dataset_service
          x-go-name: ID
        ver:
          type: string
          description: API version=1.0
          x-go-name: Ver
        ts:
          type: string
          description: 'request timestamp in format: YYYY-MM-DDThh:mm:ss+/-nn:nn'
          x-go-name: Ts
        params:
          $ref: '#/components/schemas/RequestParams'
        request:
          $ref: '#/components/schemas/DataExhaustRequest'
    DataExhaustJobStats:
      title: JobState
      type: object
      properties:
        dt_job_submitted:
          type: integer
          description: DateTime when the job is submitted
        dt_job_processing:
          type: integer
          description: DateTime when the job is picked up for processing
        dt_job_completed:
          type: integer
          description: DateTime when the job is complete
        input_events:
          type: integer
          description: Total input events processed
        output_events:
          type: integer
          description: Total output events produced
        latency:
          type: integer
          description: Latency in seconds from the time the job is submitted before
            picked up for processing
        execution_time:
          type: integer
          description: Total time taken for processing excluding latency
    dataExhaustResponse:
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/ResponseParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/dataExhaustResult'
    RequestParams:
      title: Params
      required:
      - client_key
      type: object
      properties:
        msgid:
          type: string
          description: unique request message id, UUID, for handling API idempotency
          x-go-name: MsgID
        client_key:
          type: string
          description: Unique ID of the requestor. In partner case the partner id
          x-go-name: Client_Key
    DataExhaustRequest:
      title: Request
      required:
      - dataset_id
      - filter
      type: object
      properties:
        dataset_id:
          type: string
          description: To identify the dataset to fetch the data.
          x-go-name: dataset_id
        filter:
          $ref: '#/components/schemas/DataExhaustFilter'
        output_format:
          type: string
          description: Output format should be either json or csv. Default value is
            json
    DataExhaustFilter:
      title: Filter
      required:
      - end_date
      - start_date
      type: object
      properties:
        start_date:
          type: string
          description: Start date of the data exhaust in YYYY-MM-DD format
        end_date:
          type: string
          description: End date of the data exhaust in YYYY-MM-DD format
        app_id:
          type: string
          description: Filter by app_id. (Optional)
        channel:
          type: string
          description: Filter by channel_id.(Optional)
        events:
          type: array
          items:
            type: string
            description: List of events to filter and return. Event name should be
              in all upper case. Any event from the telemetry event specification
              as on Sunbird.org website.(Optional)
        tags:
          type: array
          items:
            type: string
            description: Filter by tag. (Optional)
    JobListResponse:
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/ResponseParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/JobListResult'
    JobInfoResponse:
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/ResponseParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/JobResult'
    ResponseParams:
      title: Params
      type: object
      properties:
        resmsgid:
          type: string
        status:
          type: string
    dataExhaustResult:
      type: object
      properties:
        job_stats:
          $ref: '#/components/schemas/DataExhaustJobStats'
        last_updated:
          type: integer
        status:
          type: string
        request_id:
          type: string
        output:
          $ref: '#/components/schemas/DataExhaustOutputResult'
        request_data:
          $ref: '#/components/schemas/DataExhaustRequest'
    associateResponse:
      type: object
      properties:
        id:
          type: string
          description: unique API ID=ekstep.data_exhaust_resource_associate
        ts:
          type: string
          description: response timestamp YYYY-MM-DDThh:mm:ss+/-nn:nn
        ver:
          type: string
          description: API version=1.0
        params:
          $ref: '#/components/schemas/responseParams'
      description: The response when license key is successfully associated with a
        resource
    responseParams:
      type: object
      properties:
        resmsgid:
          type: string
          description: unique response message id (UUID)
          x-go-name: ResMsgId
        msgid:
          type: string
          description: message id of the request
          x-go-name: MsgId
        status:
          type: string
          description: 'status of request e.g: successful, failed etc'
          x-go-name: Status
        err:
          type: string
          description: error code if any
          x-go-name: ErrorCode
        errmsg:
          type: string
          description: default English error message
          x-go-name: ErrorMessage
      x-go-package: ecosystem-platform-api/api
    registerErrorResponse:
      type: object
      properties:
        resmsgid:
          type: string
          description: unique response message id (UUID)
          x-go-name: ResMsgId
        msgid:
          type: string
          description: message id of the request
          x-go-name: MsgId
        status:
          type: string
          description: failed
          x-go-name: Key
        err:
          type: string
          description: one of the following error codes
          enum:
          - INVALID_DATA_ERROR - Request JSON is not parsable
          - INTERNAL_ERROR - Technical error in the API
          x-go-name: ErrorCode
        errmsg:
          type: string
          description: default English error message
          x-go-name: ErrorMessage
    authenticateErrorResponse:
      type: object
      properties:
        resmsgid:
          type: string
          description: unique response message id (UUID)
          x-go-name: ResMsgId
        msgid:
          type: string
          description: message id of the request
          x-go-name: MsgId
        status:
          type: string
          description: failed
          x-go-name: Key
        err:
          type: string
          description: one of the following error codes
          enum:
          - INVALID_DATA_ERROR - Request JSON is not parsable
          - LOGIN_FAILED - License key is invalid
          - INTERNAL_ERROR - Technical error in the API
          x-go-name: ErrorCode
        errmsg:
          type: string
          description: default English error message
          x-go-name: ErrorMessage
    DataExhaustOutputResult:
      title: Output
      type: object
      properties:
        dt_file_created:
          type: string
        dt_first_event:
          type: integer
        dt_last_event:
          type: integer
    authorizeErrorResponse:
      type: object
      properties:
        resmsgid:
          type: string
          description: unique response message id (UUID)
          x-go-name: ResMsgId
        msgid:
          type: string
          description: message id of the request
          x-go-name: MsgId
        status:
          type: string
          description: failed
          x-go-name: Key
        err:
          type: string
          description: one of the following error codes
          enum:
          - INVALID_DATA_ERROR - Request JSON is not parsable
          - AUTHORIZATION_FAILED - User does not have access to the given dataset
            or resource
          - LOGIN_FAILED - License key is invalid
          - INTERNAL_ERROR - Technical error in the API
          x-go-name: ErrorCode
        errmsg:
          type: string
          description: default English error message
          x-go-name: ErrorMessage
    JobResult:
      type: array
      items:
        type: object
        properties:
          request_id:
            type: string
          status:
            type: string
          last_updated:
            type: integer
          request_data:
            $ref: '#/components/schemas/DataExhaustRequest'
          output:
            type: array
            items:
              $ref: '#/components/schemas/DataExhaustOutputResult'
          job_stats:
            $ref: '#/components/schemas/DataExhaustJobStats'
    JobListResult:
      type: object
      properties:
        count:
          type: integer
        jobs:
          $ref: '#/components/schemas/JobResult'
    associateErrorResponse:
      type: object
      properties:
        resmsgid:
          type: string
          description: unique response message id (UUID)
          x-go-name: ResMsgId
        msgid:
          type: string
          description: message id of the request
          x-go-name: MsgId
        status:
          type: string
          description: failed
          x-go-name: Key
        err:
          type: string
          description: one of the following error codes
          enum:
          - INVALID_DATA_ERROR - Request JSON is not parsable
          - LOGIN_FAILED - License key is invalid
          - INTERNAL_ERROR - Technical error in the API
          x-go-name: ErrorCode
        errmsg:
          type: string
          description: default English error message
          x-go-name: ErrorMessage
    ApiResponse:
      required:
      - ets
      - id
      - params
      - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since
            EPOCH
          format: int64
        params:
          required:
          - msgid
          - resmsgid
          - status
          type: object
          properties:
            msgid:
              type: string
              description: Represents the ID of the message sent
            resmsgid:
              type: string
              description: Represents the ID of the response message
            status:
              type: string
              enum:
              - success
              - error
        responseCode:
          type: string
  responses:
    AssociateErrorResponse:
      description: Error responses when data exhaust apis fail
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/associateErrorResponse'
    AssociateResponse:
      description: Success response associating resource with license key
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/associateResponse'
    AuthenticateErrorResponse:
      description: Error responses when data exhaust apis fail
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/authenticateErrorResponse'
    AuthorizeErrorResponse:
      description: Error responses when data exhaust apis fail
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/authorizeErrorResponse'
    RegisterErrorResponse:
      description: Error responses when data exhaust apis fail
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/registerErrorResponse'
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
    userToken:
      type: apiKey
      name: x-authenticated-user-token
      in: header
