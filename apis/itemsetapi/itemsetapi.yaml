openapi: 3.0.1
info:
  title: Sunbird ItemSet API(s)
  description: |-
    The ItemSet API allows you to manage itemsets over the sunbird platform which are collection of assessment over the sunbird platform. Each endpoint serves a different purpose, so based on your requirement you can do the following: 
    - The operations include CRUD (Create, Update, Read and Delete) operations
    - The URL for Sunbird ItemSet API(s) is `/itemset/v1` 
    - [TestCases](https://www.getpostman.com/collections/09c13e67588cecafeae0)
  termsOfService: https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE
  contact:
    email: info@sunbird.org
  version: "1.0"
servers:
- url: https://staging.sunbirded.org/api
paths:
  /itemset/v1/create:
    post:
      tags:
      - ItemSet APIs
      summary: Create ItemSet
      description: |-
        This API is associated with creating ItemSet on the Sunbird Platform.
          - The endpoint for **Create ItemSet** is `/itemset/v1/create`
          - It points to knowledge-mw-service - `/itemset/v1/create`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      operationId: Create ItemSet
      parameters:
      - name: Content-Type
        in: header
        description: |-
          The Content Type entity is the media type of the resource.Possible media types can be:
          - application/json
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: |-
          To make use of the API, you require authorization. Raise a request to the administrator for the use of the API. You will receive the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: X-Authenticated-User-Token
        in: header
        description: Represents the authorized User ID to execute the API.
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body parameter refers to the format of the request, the request body (payload) takes the following media types to make the payload:
          - JSON
          The body is the representation of the resource object for creating item set (an array of parameters which describes the item set)
          - Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/itemset/1.0/schema.json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemSetRequest'
            example:
              request:
                itemset:
                  code: question
                  name: Question Paper
                  maxScore: 10
                  type: materialised
                  items:
                    - identifier: do_1129421168366960641473
                    - identifier: do_1129421334282158081474
                    - identifier: do_1129421394417582081475
        required: true
      responses:
        200:
          description: SUCCESS. The **Create ItemSet** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSetCreateSuccessResponse'
              example:
                id: api.itemset.create
                ver: '3.0'
                ts: '2020-12-20T20:41:25ZZ'
                params:
                  resmsgid: 67b67284-432f-422c-92a4-28a5d1a015b3
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_113176806487105536147
        400:
          description: |-
            BAD REQUEST. The **Create ItemSet** operation failed. You may have missed input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSetCreateErrorResponse'
              example:
                id: api.itemset.create
                ver: '3.0'
                ts: '2020-12-20T20:42:04ZZ'
                params:
                  resmsgid: c8592808-3944-4e65-9fd6-a026f9234da4
                  msgid: null
                  err: CLIENT_ERROR
                  status: failed
                  errmsg: Validation Errors
                responseCode: CLIENT_ERROR
                result:
                  messages:
                    - Required Metadata code not set
                    - Required Metadata name not set
        404:
          description: |-
            RESOURCE NOT FOUND. The **Create ItemSet** operation failed. You may have passed some invalid item for relationship.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSetCreateErrorResponse'
              example:
                id: api.itemset.create
                ver: '3.0'
                ts: '2020-12-20T20:43:34ZZ'
                params:
                  resmsgid: 53d03e4f-0fc0-4725-bb92-07cb73bf5ad9
                  msgid: null
                  err: ERR_INVALID_NODE
                  status: failed
                  errmsg: Node Not Found With Identifier List(do_11294211683669606414731)
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        500:
          description: '''INTERNAL SERVER ERROR. We track these errors automatically
            and try to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSetCreateErrorResponse'
              example:
                id: api.itemset.create
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: 
        - bearer: []
  /itemset/v1/update/{ItemSet_Id}:
    patch:
      description: |-
        This API is associated with updating item set on the Sunbird Platform .
          - **_/Update/_** endpoint executes the "Update ItemSet" request based on parameters provided as metadata in the request body.
          - The endpoint for **Update ItemSet** is `/itemset/v1/update`
          - It points to knowledge-mw-service - `/itemset/v1/update`
          - {...}refers to a section of update endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Update ItemSet
      tags:
        - ItemSet APIs
      operationId: Update ItemSet
      parameters:
        - in: path
          name: ItemSet_Id
          required: true
          description: Please append a valid ItemSet Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All itemset APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItemSetrequest'
            example:
              request:
                itemset:
                  name: Test Item Set - Updated
                  items:
                    - identifier: do_1127064227270164481211
                    - identifier: do_11243460107708006418
                    - identifier: do_1126944481253457921112
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the item set to be updated.
            - Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/itemset/1.0/schema.json)
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation. ItemSet  update operation was successfuly
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSetCreateSuccessResponse'
              example:
                id: api.itemset.update
                ver: '3.0'
                ts: '2020-12-20T20:46:05ZZ'
                params:
                  resmsgid: 00ee76c9-0a7c-46e7-9bae-7b7735f1b49d
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_113176806487105536147
        '404':
          description: >-
            RESOURCE NOT FOUND,** ItemSet  Update** operation failed !The possible reason for failure is that you may have provided wrong itemset id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSetCreateErrorResponse'
              example:
                id: api.itemset.update
                ver: '3.0'
                ts: '2020-12-18T10:13:10ZZ'
                params:
                  resmsgid: 502a4246-5223-49cd-9d30-7c3626961bc2
                  msgid: null
                  err: ERR_INVALID_NODE
                  status: failed
                  errmsg: Node Not Found With Identifier List(do_1126944481253457921112)
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '400':
          description: >-
            BAD REQUEST. The 'Update  ItemSet ' operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSetCreateErrorResponse'
              example:
                id: api.itemset.update
                ver: '3.0'
                ts: '2020-12-18T10:14:06ZZ'
                params:
                  resmsgid: 579248bc-037d-47f2-9cbe-c38b39f7d4d9
                  msgid: null
                  err: CLIENT_ERROR
                  status: failed
                  errmsg: Validation Errors
                responseCode: CLIENT_ERROR
                result:
                  messages:
                    - Metadata name should be a/an String value
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSetCreateErrorResponse'
              example:
                id: api.itemset.update
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: 
        - bearer: []
  /itemset/v1/read/{ItemSet_Id}:
    get:
      description: >-
        This API is associated with viewing and reading out the master item set on the
        Sunbird Platform .
          - The **_/read/{ItemSet_Id}_** endpoint executes request for fetching the itemsets to be viewed and read.
          - The endpoint for **Read ItemSet** is `/itemset/v1/read`
          - It points to knowledge-mw-service - `/itemset/v1/read`
          - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate id.
          - You need to provide a valid item set id value in {ItemSet_Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Read ItemSet
      tags:
        - ItemSet APIs
      operationId: Read ItemSet
      parameters:
        - in: path
          name: ItemSet_Id
          required: true
          description: Please append a valid ItemSet_Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All itemset APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Read ItemSet" operation was successfully executed. For all possible metadata, please [refer](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/itemset/1.0/schema.json)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSetGetSuccessResponse'
              example:
                id: api.itemset.read
                ver: '3.0'
                ts: '2020-12-18T11:16:27ZZ'
                params:
                  resmsgid: 897eebfc-c3cc-4562-a562-d24d81c0c72f
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  itemset:
                    owner: KP
                    identifier: do_113175113186975744146
                    lastStatusChangedOn: '2020-12-18T11:16:24.001+0000'
                    code: dev.test.itemset
                    consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                    description: Test ItemSet Description
                    language:
                      - English
                    maxScore: 10
                    type: materialised
                    languageCode:
                      - en
                    createdOn: '2020-12-18T11:16:24.001+0000'
                    version: 2
                    objectType: ItemSet
                    name: Test ItemSet
                    lastUpdatedOn: '2020-12-18T11:16:24.001+0000'
                    items:
                      - identifier: do_11243460107708006418
                        name: '"version":1 - test'
                        description: ''
                        objectType: AssessmentItem
                        relation: hasSequenceMember
                        status: Live
                    status: Draft
        '404':
          description: >-
            RESOURCE NOT FOUND,**ItemSet Read** operation failed !The possible reason
            for failure is that you may have provided wrong itemset id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSetCreateErrorResponse'
              example:
                id: api.itemset.read
                ver: '3.0'
                ts: '2020-12-18T11:17:13ZZ'
                params:
                  resmsgid: e2dfcfc9-3c63-41f2-9911-38d78addb013
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: 'Error! Node(s) doesn''t Exists. | [Invalid Node Id.]: do_1131751131869757441460'
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSetCreateErrorResponse'
              example:
                id: api.itemset.read
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: 
        - bearer: []
  /itemset/v1/review/{ItemSet_Id}:
    post:
      description: >-
        >- This API is associated with Submission of itemset for Review  on the
        Sunbird Platform .
          - The**_/review/{ItemSet_Id}_** endpoint executes "Submit for Review" request based on parameters provided as metadata in the request body.
          - The endpoint for **Review ItemSet** is `/itemset/v1/review`
          - It points to knowledge-mw-service - `/itemset/v1/review`
          - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - You need to provide a valid ItemSet_Id value in {ItemSet Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Submit for Review
      tags:
        - ItemSet APIs
      operationId: Submit for Review
      parameters:
        - in: path
          name: ItemSet_Id
          required: true
          description: Please append a valid ItemSet_Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-User-token
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the content to be sent for review.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation.ItemSet sent for review operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSetCreateSuccessResponse'
              example:
                id: api.itemset.review
                ver: '3.0'
                ts: '2020-12-20T20:51:23ZZ'
                params:
                  resmsgid: c016bcbc-99c7-4e0d-9ec1-51ece1948548
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_113176806487105536147
        '404':
          description: >-
            RESOURCE NOT FOUND,**ItemSet Send for Review** operation failed !The possible reason
            for failure is that you may have provided wrong content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSetCreateErrorResponse'
              example:
                id: api.itemset.review
                ver: '3.0'
                ts: '2020-12-20T20:50:46ZZ'
                params:
                  resmsgid: 846b81fe-6756-4ab5-8573-e5e9c442b414
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: 'Error! Node(s) doesn''t Exists. | [Invalid Node Id.]: do_123'
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! We track
            these errors automatically, but if the problem persists feel free to
            contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemSetCreateErrorResponse'
              example:
                id: api.itemset.read
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: 
        - bearer: []
components:
  schemas:
    CreateItemSetRequest:
      title: Request Object
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ItemSetCreateRequestItemSet'
    ItemSetCreateRequestItemSet:
      title: Request
      required:
      - itemSet
      type: object
      properties:
        itemSet:
          $ref: '#/components/schemas/ItemSetCreateRequestItemSetObject'
    ItemSetCreateRequestItemSetObject:
      title:  ItemSet 
      required:
      - name
      - code
      type: object
      properties:
        name:
          type: string
          description: Represents the name of the item set
        code:
          type: string
          description: Represents the unique code of the item set
    UpdateItemSetrequest:
      title: Update ItemSet Request
      type: object
      properties:
        request:
          type: object
      required:
        - request
    ItemSetCreateSuccessResponse:
      description: Create ItemSet Response
      type: object
      allOf:
        - $ref: '#/components/schemas/ResultWithItemSetId'
        - $ref: '#/components/schemas/ResponseHeader'
    ResultWithItemSetId:
      title: Result Containing ItemSet Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ItemSetId'
    ItemSetId:
      title: ItemSet Id
      type: object
      properties:
        identifier:
          type: string
          description: ItemSet Identifier
    ItemSetCreateErrorResponse:
      description: Create ItemSet Error Response
      type: object
      allOf:
        - $ref: '#/components/schemas/ErrorCreateResult'
        - $ref: '#/components/schemas/ResponseHeader'
    ErrorCreateResult:
      title: Error Create Result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ErrorCreateResultMessage'
    ErrorCreateResultMessage:
      title: Error Create Result Message
      type: object
      properties:
        message:
          type: array
          description: List of message
          items:
            type: string
    ResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/ResponseParams'
        responseCode:
          type: string
          description: 'API response code '
    ResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    ItemSetGetSuccessResponse:
      description: Get ItemSet Response
      type: object
      allOf:
        - $ref: '#/components/schemas/ResultWithItemSetMetadata'
        - $ref: '#/components/schemas/ResponseHeader'
    ResultWithItemSetMetadata:
      title: Result Containing ItemSet Id and other metadata
      type: object
      properties:
        result:
          $ref: '#/components/schemas/ItemSetIdWithMetadata'
    ItemSetIdWithMetadata:
      title: ItemSet Metadata
      type: object
      properties:
        identifier:
          type: string
          description: ItemSet Identifier
        name:
          type: string
          description: ItemSet name
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header