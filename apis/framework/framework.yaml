openapi: 3.0.1
info:
  title: Framework API(s)
  description: "The Framework API resources is basically a supporting data structure\
    \ which serves as a template \n- It can be used in places where the structure\
    \ remains the same but only the usage changes as per the requirement.\n- These resources are used to create, update, read, search, the objects like channels, frameworks, catergories, terms\n- The Hierarchy is as: Framework-->Category-->Terms\n     - Category: An abstract\
    \ classification of the terms partitioned according to requirement\n     - Terms:\
    \ Refers to a keyword or a phrase to descibe a Concept\n- [TestCases](https://www.getpostman.com/collections/10a84f4c27c0b45f690b)"
  version: "1.0"
servers:
- url: https://staging.open-sunbird.org/api
paths:
  /channel/v1/create:
    post:
      tags:
      - Channel APIs
      summary: Create Channel
      description: |-
        This API is used for creating a channel    
          - The endpoint for **Create Channel** is `/channel/v1/create`
          - It points to knowledge-mw-service - `/v1/channel/create`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: ChannelV1CreatePost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource\n\
          \ Possible media types can be:- \n   - application/json"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require bearer authorization. Raise
          a request to the administrator for the use of the API. You will receive
          the authorization key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: "'The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:'\n\
          \   \n   - JSON \n   - XML data\n \n The body is the representation of the\
          \ resource object for creating a channel.\n Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/channel/1.0/schema.json)"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkChannelCreateRequest'
            example:
              request:
                channel:
                  name: Channel Name
                  code: channel-id
        required: true
      responses:
        200:
          description: OK ! Successful operation."Create channel" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkChannelCreate200Response'
              example:
                id: api.channel.create
                ver: '1.0'
                ts: '2020-12-14T08:27:27.810Z'
                params:
                  resmsgid: 3357da20-3de6-11eb-9ff3-67c41480f6aa
                  msgid: 3353bb70-3de6-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  identifier: channel-id
                  node_id: channel-id
        400:
          description: BAD REQUEST. The "Create Channel" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter or providing some wrong request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkChannelCreate400Response'
              example:
                id: api.channel.create
                ver: '1.0'
                ts: '2020-12-14T08:26:15.914Z'
                params:
                  resmsgid: 087d64a0-3de6-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: CONSTRAINT_VALIDATION_FAILED
                  errmsg: 'Object already exists with identifier: channel-id'
                responseCode: CLIENT_ERROR
                result:
                  messages: null
                
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /channel/v1/read/{ID}:
    get:
      tags:
      - Channel APIs
      summary: Get a Channel
      description: |-
        This API is associated with fetching a channel by a specific channel ID
           - The endpoint for **Get a Channel** is `/channel/v1/read/{ID}`
           - It points to knowledge-mw-service - `/v1/channel/read/{ID}` 
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: ChannelV1ReadGet
      parameters:
      - name: ID
        in: path
        description: Unique identifier of the channel to get
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource\n\
          \ Possible media types can be:- \n   \n   - application/json\n   - multipart/form-data\n\
          \   - application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation. **Channel Read** operation
            was successfully executed. \n Please refer for different additional [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/content/1.0/schema.json)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkChannelGet200Response'
              example:
                id: api.channel.read
                ver: '3.0'
                ts: '2020-12-14T08:33:50ZZ'
                params:
                  resmsgid: 02c742d2-57e1-4441-aa31-0ce339c3917b
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  channel:
                    identifier: channel-405
                    lastStatusChangedOn: '2020-12-14T08:27:49.490+0000'
                    code: channel-405
                    consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                    assetAdditionalCategories: []
                    autoCreateBatch: Enabled
                    languageCode: []
                    suggested_frameworks:
                      - identifier: NCF
                        code: NCF
                        name: NCF
                        objectType: Framework
                    createdOn: '2020-12-14T08:27:49.490+0000'
                    objectType: Channel
                    versionKey: '1607934825088'
                    collectionPrimaryCategories:
                      - Content Playlist
                      - Course
                      - Digital Textbook
                      - Explanation Content
                    contentPrimaryCategories:
                      - Course Assessment
                      - eTextbook
                      - Explanation Content
                      - Learning Resource
                      - Practice Question Set
                      - Teacher Resource
                    name: Channel without Default License
                    lastUpdatedOn: '2020-12-14T08:33:45.088+0000'
                    defaultCourseFramework: TPD
                    collectionAdditionalCategories:
                      - Textbook
                      - Lesson Plan
                      - TV Lesson
                    assetPrimaryCategories:
                      - Asset
                      - CertAsset
                      - Certificate Template
                    contentAdditionalCategories:
                      - Classroom Teaching Video
                      - Concept Map
                      - Curiosity Question Set
                      - Experiential Resource
                      - Explanation Video
                      - Focus Spot
                      - Learning Outcome Definition
                      - Lesson Plan
                      - Marking Scheme Rubric
                      - Pedagogy Flow
                      - Previous Board Exam Papers
                      - TV Lesson
                      - Textbook
                    status: Live
                    defaultFramework: NCF
        404:
          description: RESOURCE NOT FOUND. The **Channel Read** operation failed ! The
            possible reason for failure is that you may have passed invalid channel id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkChannelGet400Response'
              example:
                id: api.channel.read
                ver: '3.0'
                ts: '2020-12-14T08:36:08ZZ'
                params:
                  resmsgid: e54ff3af-4026-420e-9412-0fcd3eba1674
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: 'Error! Node(s) doesn''t Exists. | [Invalid Node Id.]: channel-407'
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /channel/v1/update/{ID}:
    patch:
      tags:
      - Channel APIs
      summary: Update Channel
      description: |-
        This API is associated with updating a specific channel
          - The endpoint for **Update Channel** is `/channel/v1/update/{ID}`
          - It points to knowledge-mw-service - `/v1/channel/update/{ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: ChannelV1UpdatePatch
      parameters:
      - name: ID
        in: path
        description: Unique identifier of the channel to be updated
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - application/json\n   - multipart/form-data\n\
          \   - application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: "'The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:\n\
          \   \n   - JSON \n   - XML data\n \n The body is the representation of the\
          \ resource object for updating a channel.\n Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/channel/1.0/schema.json))"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkChannelUpdateRequest'
            example:
              request:
                channel:
                  description: Updated channel description
        required: true
      responses:
        200:
          description: OK ! Successful operation."Update channel by ID" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkChannelCreate200Response'
              example:
                id: api.channel.update
                ver: '1.0'
                ts: '2020-12-14T08:29:24.724Z'
                params:
                  resmsgid: 79078340-3de6-11eb-9ff3-67c41480f6aa
                  msgid: 78fef7c0-3de6-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  identifier: channel-405
                  node_id: channel-405
        404:
          description: RESOURCE NOT FOUND. The "update channel by ID" operation failed !
            The possible reason for failure is that you may have passed invalid channel id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkChannelCreate400Response'
              example:
                id: api.channel.update
                ver: '1.0'
                ts: '2020-12-14T08:30:44.219Z'
                params:
                  resmsgid: a8697cb0-3de6-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: 'Error! Node(s) doesn''t Exists. | [Invalid Node Id.]: channel-406'
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        400:
          description: BAD REQUEST. The **Update Channel" operation failed !
            The possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkChannelCreate400Response'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /framework/v1/create:
    post:
      tags:
      - Framework - Core APIs
      summary: Create a Framework
      description: |-
        This API is associated with creating a new framework on the Sunbird Platform.
           - The endpoint for **Create a Framework** is `/framework/v1/create`
           - It points to knowledge-mw-service - `/v1/framework/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1CreatePost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource\n\
          \ Possible media types can be:- \n   - application/json"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: X-Channel-Id
        in: header
        description: It is the Unique Id to identify the root organisation to which
          the user belongs
        required: true
        schema:
          type: string
      requestBody:
        description: "'The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:'\n\
          \  \n   - JSON \n  The body is the representation of the resource object for updating a framework. \n Please refer for supported [metadata](https://github.com/project-sunbird/sunbird-learning-platform/blob/release-3.5.0/docs/domain_model_v2/definitions/framework_definition.json)"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkCreateFrameworkRequest'
            example:
              request:
                framework:
                  name: Framework Name
                  code: dummy_framework
                  channels:
                    - identifier: in.ekstep
        required: true
      responses:
        200:
          description: OK ! Successful operation."create framework" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkCreate200Response'
              example:
                id: api.framework.create
                ver: '1.0'
                ts: '2020-12-14T09:49:06.794Z'
                params:
                  resmsgid: 9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa
                  msgid: 9b4a90e0-3df1-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id: dummy_framework
                  versionKey: '1607939346678'
        400:
          description: BAD REQUEST. The "create framework" operation failed ! The
            possible reason for failure is that you may have missed providing input
            for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkGet400Response'
              example:
                id: api.framework.create
                ver: '1.0'
                ts: '2020-12-14T09:50:45.249Z'
                params:
                  resmsgid: d60c8710-3df1-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: CONSTRAINT_VALIDATION_FAILED
                  errmsg: 'Object already exists with identifier: dummy_framework'
                responseCode: CLIENT_ERROR
                result: {}
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /framework/v1/read/{ID}:
    get:
      tags:
      - Framework - Core APIs
      summary: Get a Framework
      description: |-
        This API is associated with fetching a specific framework
          - The endpoint for **Get a Framework** is `/framework/v1/read/{ID}`
          - It points to knowledge-mw-service - `/v1/framework/read/{ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1ReadGet
      parameters:
      - name: ID
        in: path
        description: The identifier of the framework to be fetched
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."read framework" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkGet200Response'
              example:
                id: api.framework.read
                ver: '1.0'
                ts: '2020-12-14T19:51:24ZZ'
                params:
                  resmsgid: 28f10a2a-ce6c-4dbe-a733-4c193013e84b
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  framework:
                    identifier: dummy_framework
                    code: Dumy framework updated
                    name: Framework Name
                    description: Dumy framework updated
                    categories:
                      - identifier: dummy_framework_subject
                        code: subject
                        terms:
                          - identifier: dummy_framework_subject_english
                            code: english
                            translations: null
                            name: English
                            description: English
                            index: 1
                            category: subject
                            status: Live
                        translations: null
                        name: Subject
                        description: Updated description
                        index: 1
                        status: Live
                      - identifier: dummy_framework_medium
                        code: medium
                        translations: null
                        name: Medium
                        description: Medium
                        index: 2
                        status: Live
                    type: K-12
                    objectType: Framework
                
        404:
          description: RESOURCE NOT FOUND. The "read framework" operation failed ! The possible reason for failure is that you may have passed invalid framework id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkGet400Response'
              example:
                id: api.framework.read
                ver: '1.0'
                ts: '2020-12-14T10:00:12.540Z'
                params:
                  resmsgid: 282e43c0-3df3-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_DATA_NOT_FOUND
                  errmsg: 'Data not found with id : dummy_framework1'
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        400:
          description: BAD REQUEST. The "read framework" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkGet400Response'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /framework/v1/update/{ID}:
    patch:
      tags:
      - Framework - Core APIs
      summary: Update Framework
      description: |-
        This API is associated with updating a framework
          - The endpoint for **Update Framework** is `/framework/v1/update/{ID}`
          - It points to knowledge-mw-service - `/v1/framework/update/{ID}`
          - The fieldsmarked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1UpdatePatch
      parameters:
      - name: ID
        in: path
        description: The identifier of the framework to be updated
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource\n\
          \ Possible media types can be:- \n   - application/json\n   - multipart/form-data\n\
          \   - application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: X-Channel-Id
        in: header
        description: It is the Unique Id to identify the root organisation to which
          the user belongs
        required: true
        schema:
          type: string
      requestBody:
        description: "'The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:'\n\
          \   \n   - JSON \n   - XML data\n \n The body is the representation of the\
          \ resource object for updating a framework. \n Please refer for supported [metadata](https://github.com/project-sunbird/sunbird-learning-platform/blob/release-3.5.0/docs/domain_model_v2/definitions/framework_definition.json)"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkUpdateFrameworkRequest'
            example:
              request:
                framework:
                  description: Dumy framework updated
        required: true
      responses:
        200:
          description: OK ! Successful operation."update framework" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkUpdate200Response'
              example:
                id: api.framework.update
                ver: '1.0'
                ts: '2020-12-14T09:57:20.317Z'
                params:
                  resmsgid: c1871ed0-3df2-11eb-9ff3-67c41480f6aa
                  msgid: c17ff2e0-3df2-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id: dummy_framework
                  versionKey: '1607939840281'
        404:
          description: RESOURCE NOT FOUND. The "update framework" operation failed ! The
            possible reason for failure is that you may have passed invalid framework id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkUpdate400Response'
              example:
                id: api.framework.update
                ver: '1.0'
                ts: '2020-12-14T09:57:50.352Z'
                params:
                  resmsgid: d36e1900-3df2-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_FRAMEWORK_NOT_FOUND
                  errmsg: 'Framework Not Found With Id : dummy_framework1'
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        400:
          description: BAD REQUEST. The "update framework" operation failed ! The
            possible reason for failure is that you may have missed providing input
            for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkUpdate400Response'
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /framework/v1/list:
    post:
      tags:
      - Framework - Core APIs
      summary: List Existing Frameworks
      description: |-
        This API is associated with listing of all existing frameworks
           - The endpoint for **List Existing Frameworks** is `/framework/v1/list`
           - It points to knowledge-mw-service - `/v1/framework/list`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1ListPost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource\n\
          \ Possible media types can be:- \n   - application/json"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: "The body is the representation of the resource object \n  -\
          \ The body contains metadata for listing the existing frameworks"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkFrameworkListRequest'
            example:
              request:
                search:
                  status: Live
        required: true
      responses:
        200:
          description: OK ! Successful operation."list framework" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkList200Response'
              example:
                id: api.framework.list
                ver: '1.0'
                ts: '2020-12-14T10:02:06.928Z'
                params:
                  resmsgid: 6c5c7d00-3df3-11eb-9ff3-67c41480f6aa
                  msgid: 6c38ef70-3df3-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  frameworks:
                    - owner: in.ekstep
                      identifier: NCERT
                      code: NCERT
                      apoc_json: '{"batch": true}'
                      consumerId: a6654129-b58d-4dd8-9cf2-f8f3c2f458bc
                      channel: in.ekstep
                      description: 'NCERT '
                      type: K-12
                      createdOn: '2018-01-18T17:24:50.850+0000'
                      apoc_text: APOC
                      versionKey: '1525253065583'
                      channels:
                        - identifier: in.ekstep
                          name: Ekstep
                          objectType: Channel
                          relation: hasSequenceMember
                          description: Channel for in.ekstep
                          status: Live
                      appId: ekstep_portal
                      name: NCERT
                      lastUpdatedOn: '2018-05-02T09:24:25.583+0000'
                      categories:
                        - identifier: ncert_board
                          name: Boards
                          objectType: CategoryInstance
                          relation: hasSequenceMember
                          description: ''
                          index: 5
                          status: Retired
                      status: Live
                      apoc_num: 1
                  count: 1
        400:
          description: BAD REQUEST. The "list framework" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkList400Response'
              example:
                id: api.framework.list
                ver: '1.0'
                ts: '2020-12-14T18:07:11.141Z'
                params:
                  resmsgid: 2fd2f550-3e37-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_INVALID_SEARCH_REQUEST
                  errmsg: Invalid Search Request
                responseCode: CLIENT_ERROR
                result: {}
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /framework/v1/publish/{ID}:
    post:
      tags:
      - Framework - Core APIs
      summary: Publish Framework
      description: |-
        This API is associated with publishing a framework
          - The endpoint for **Publish Framework** is `/framework/v1/publish/{ID}`
          - It points to knowledge-mw-service - `/v1/framework/publish/{ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: publishFramework
      parameters:
      - name: ID
        in: path
        description: The identifier of the framework to be published
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \  Possible media types can be:- \n   - application/json"
        required: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: X-Channel-Id
        in: header
        description: It is the Unique Id to identify the root organisation to which
          the user belongs
        required: true
        schema:
          type: string
      requestBody:
        description: "'The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:\n\
          \   \n   - JSON \n   \n The body is the representation of the\
          \ resource object for publishing a framework"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkPublishFrameworkRequest'
            example:
              {}
        required: true
      responses:
        200:
          description: OK ! Successful operation."Publish framework" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkPublish200Response'
              example:
                id: api.framework.publish
                ver: '1.0'
                ts: '2020-12-14T10:07:54.648Z'
                params:
                  resmsgid: 3b9e5980-3df4-11eb-9ff3-67c41480f6aa
                  msgid: 3b9cabd0-3df4-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  publishStatus: Publish Operation for Framework Id 'dummy_framework' Started Successfully!
        400:
          description: BAD REQUEST. The "Publish Framework" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkCopy400Response'
              example:
                id: api.framework.publish
                ver: '1.0'
                ts: '2020-12-14T10:08:19.872Z'
                params:
                  resmsgid: 4aa73a00-3df4-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_INVALID_FRAMEOWRK_ID
                  errmsg: Invalid Framework Id. Framework doesn't exist.
                responseCode: CLIENT_ERROR
                result: {}
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /framework/v1/copy/{ID}:
    post:
      tags:
      - Framework - Core APIs
      summary: Copy Framework
      description: |-
        This API is associated with copying a framework
          - The endpoint for **Copy Framework** is `/framework/v1/copy/{ID}`
          - It points to knowledge-mw-service - `v1/framework/copy/{ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: NCERTPost
      parameters:
      - name: ID
        in: path
        description: The identifier of the framework to be copied
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \  Possible media types can be:- \n   - application/json"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      - name: X-Channel-Id
        in: header
        description: It is the Unique Id to identify the root organisation to which
          the user belongs
        required: true
        schema:
          type: string
      requestBody:
        description: "'The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:\n\
          \   \n   - JSON \n   The body is the representation of the resource object for creating a new framework while copying old one."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkCopyFrameworkRequest'
            example:
              request:
                framework:
                  code: NCERTCOPY11
        required: true
      responses:
        200:
          description: OK ! Successful operation."Copy framework" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkCopy200Response'
              example:
                id: api.framework.copy
                ver: '1.0'
                ts: '2020-12-14T10:46:44.287Z'
                params:
                  resmsgid: a8310cf0-3df9-11eb-9ff3-67c41480f6aa
                  msgid: a6b2aa50-3df9-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id: NCERTCOPY11
        404:
          description: RESOURCE NOT FOUND. The "Copy fFramework" operation failed ! The possible reason for failure is that you may have missed invlalid framework id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkCopy400Response'
              example:
                id: api.framework.copy
                ver: '1.0'
                ts: '2020-12-14T10:47:47.865Z'
                params:
                  resmsgid: ce164890-3df9-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_DATA_NOT_FOUND
                  errmsg: 'Data not found with id : NCERT101100'
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        400:
          description: BAD REQUEST. The "Copy fFramework" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkCopy400Response'
              example:
                id: api.framework.copy
                ver: '1.0'
                ts: '2020-12-14T10:47:22.578Z'
                params:
                  resmsgid: bf03cb20-3df9-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_FRAMEWORK_EXISTS
                  errmsg: 'Framework with code: NCERTCOPY11, already exists.'
                responseCode: CLIENT_ERROR
                result: {}
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /framework/v1/category/create:
    post:
      tags:
      - Framework - Category APIs
      summary: Create Category
      description: |-
        This API is associated with creating a category under a framework
           - The endpoint for **Create Category** is `/framework/v1/category/create`
           - It points to knowledge-mw-service - `/v1/framework/category/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1CategoryCreatePost
      parameters:
      - name: framework
        in: query
        description: The code of the framework under which category has to be created
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource\n\
          \ Possible media types can be:- \n   - application/json"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: "'The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:\n\
          \   \n   - JSON  \n   The body is the representation\
          \ of the resource object for creating a category.\n Please refer for supported [metadata](https://github.com/project-sunbird/sunbird-learning-platform/blob/release-3.5.0/docs/domain_model_v2/definitions/categoryInstance_definition.json)"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkCreateCategoryInstanceRequest'
            example:
              request:
                category:
                  name: Subject
                  code: subject
        required: true
      responses:
        200:
          description: OK ! Successful operation."create category" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkCategoryInstanceCreate200Response'
              example:
                id: api.category.create
                ver: '1.0'
                ts: '2020-12-14T19:32:01.754Z'
                params:
                  resmsgid: 0a10dba0-3e43-11eb-9ff3-67c41480f6aa
                  msgid: 0a05df20-3e43-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id: dummy_framework_medium
                  versionKey: '1607974321700'
        400:
          description: BAD REQUEST. The "create category" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkCategoryInstanceCreate400Response'
              example:
                id: api.category.create
                ver: '1.0'
                ts: '2020-12-14T19:30:50.114Z'
                params:
                  resmsgid: df5d7620-3e42-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: CONSTRAINT_VALIDATION_FAILED
                  errmsg: 'Object already exists with identifier: dummy_framework_subject'
                responseCode: CLIENT_ERROR
                result: {}
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /framework/v1/category/read/{code}:
    get:
      tags:
      - Framework - Category APIs
      summary: Fetch Category
      description: |-
        This API is associated with fetching a category on Sunbird Platform
           - The endpoint for **Fetch Category** is `/framework/v1/category/read/{code}`
           - It points to knowledge-mw-service - `/v1/framework/category/read/{code}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1CategoryReadClassGet
      parameters:
      - name: code
        in: path
        description: The name/code of the category to be fetched
        required: true
        schema:
          type: string
      - name: framework
        in: query
        description: Name of the framework under which category exists. Its an abstract data structure which serves as a template for
          categories and terms
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource\n\
          \ Possible media types can be:- \n   - application/json"
        required: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."fetch category" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkCategoryInstanceGet200Response'
              example:
                id: api.category.read
                ver: '1.0'
                ts: '2020-12-14T19:34:41.261Z'
                params:
                  resmsgid: 6923b1d0-3e43-11eb-9ff3-67c41480f6aa
                  msgid: 691e3390-3e43-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  category:
                    identifier: dummy_framework_subject
                    lastStatusChangedOn: '2020-12-14T19:30:32.392+0000'
                    code: subject
                    frameworks:
                      - identifier: dummy_framework
                        name: Framework Name
                        objectType: Framework
                        relation: hasSequenceMember
                        description: Dumy framework updated
                        status: Live
                    consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                    channel: in.ekstep
                    description: Subject
                    domains: []
                    createdOn: '2020-12-14T19:30:32.392+0000'
                    versionKey: '1607974232392'
                    terms: []
                    appId: '@ignore@'
                    name: Subject
                    lastUpdatedOn: '2020-12-14T19:30:32.392+0000'
                    status: Live
        400:
          description: BAD REQUEST. The "fetch category" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkCategoryInstanceGet400Response'
              example:
                id: api.category.read
                ver: '1.0'
                ts: '2020-12-14T19:35:21.540Z'
                params:
                  resmsgid: 8125c840-3e43-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_INVALID_FRAMEWORK_ID
                  errmsg: 'Invalid FrameworkId: dummy_framework1 for Categoryinstance '
                responseCode: CLIENT_ERROR
                result: {}
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /framework/v1/category/update/{code}:
    patch:
      tags:
      - Framework - Category APIs
      summary: Update Category
      description: |-
        This API is associated with updating a category in an  existing framework
           - The endpoint for **Update Category** is `/framework/v1/category/update/{code}`
           - It points to knowledge-mw-service - `/v1/framework/category/update/{code}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1CategoryUpdatePatch
      parameters:
      - name: code
        in: path
        description: The name/code of the category to be updated
        required: true
        schema:
          type: string
      - name: framework
        in: query
        description: Represents the framework to which the category belongs
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - application/json"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: "'The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:\n\
          \   \n   - JSON \n   The body is the representation of the resource object for updating a category in a framework. \n Please refer for supported [metadata](https://github.com/project-sunbird/sunbird-learning-platform/blob/release-3.5.0/docs/domain_model_v2/definitions/categoryInstance_definition.json)"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkUpdateCategoryInstanceRequest'
            example:
              request:
                category:
                  description: Updated description
        required: true
      responses:
        200:
          description: OK ! Successful operation."update category" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkCategoryInstanceUpdate200Response'
              example:
                id: api.category.update
                ver: '1.0'
                ts: '2020-12-14T19:37:49.082Z'
                params:
                  resmsgid: d916e7a0-3e43-11eb-9ff3-67c41480f6aa
                  msgid: d90f4680-3e43-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id: dummy_framework_subject
                  versionKey: '1607974669043'
        400:
          description: BAD REQUEST. The "update category" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkCategoryInstanceUpdate400Response'
              example:
                id: api.category.update
                ver: '1.0'
                ts: '2020-12-14T19:38:29.662Z'
                params:
                  resmsgid: f146ebe0-3e43-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_INVALID_FRAMEWORK_ID
                  errmsg: 'Invalid FrameworkId: dummy_framework1 for Categoryinstance '
                responseCode: CLIENT_ERROR
                result: {}
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /framework/v1/category/search:
    post:
      tags:
      - Framework - Category APIs
      summary: Search Categories
      description: |-
        This API is associated with searching a category
          - The endpoint for **Search Categories** is `/framework/v1/category/search`
          - It points to knowledge-mw-service - `/v1/framework/category/search`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1CategorySearchPost
      parameters:
      - name: framework
        in: query
        description: Represents the framework in which category can be searched
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource\n\
          \ Possible media types can be:- \n   - application/json"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: "'The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:\n\
          \   \n   - JSON \n   The body is the representation of\
          \ the resource object for searching a category in a framework"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkCategoryInstanceSearchRequest'
            example:
              request:
                search: {}
        required: true
      responses:
        200:
          description: OK ! Successful operation."search category" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkCategoryInstanceSearch200Response'
              example:
                id: api.category.search
                ver: '1.0'
                ts: '2020-12-14T19:40:23.864Z'
                params:
                  resmsgid: 3558c380-3e44-11eb-9ff3-67c41480f6aa
                  msgid: 3555b640-3e44-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  count: 2
                  categories:
                    - identifier: dummy_framework_subject
                      lastStatusChangedOn: '2020-12-14T19:30:32.392+0000'
                      code: subject
                      frameworks:
                        - identifier: dummy_framework
                          name: Framework Name
                          objectType: Framework
                          relation: hasSequenceMember
                          description: Dumy framework updated
                          status: Live
                      consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                      channel: in.ekstep
                      description: Updated description
                      domains: []
                      createdOn: '2020-12-14T19:30:32.392+0000'
                      versionKey: '1607974669043'
                      terms: []
                      appId: dev.sunbird.portal
                      name: Subject
                      lastUpdatedOn: '2020-12-14T19:37:49.043+0000'
                      status: Live
                    - identifier: dummy_framework_medium
                      lastStatusChangedOn: '2020-12-14T19:32:01.700+0000'
                      code: medium
                      frameworks:
                        - identifier: dummy_framework
                          name: Framework Name
                          objectType: Framework
                          relation: hasSequenceMember
                          description: Dumy framework updated
                          status: Live
                      consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                      channel: in.ekstep
                      description: Medium
                      domains: []
                      createdOn: '2020-12-14T19:32:01.700+0000'
                      versionKey: '1607974321700'
                      terms: []
                      appId: '@ignore@'
                      name: Medium
                      lastUpdatedOn: '2020-12-14T19:32:01.700+0000'
                      status: Live
        400:
          description: BAD REQUEST. The "search category" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkCategoryInstanceSearch400Response'
              example:
                id: api.category.search
                ver: '1.0'
                ts: '2020-12-14T19:41:28.846Z'
                params:
                  resmsgid: 5c143ae0-3e44-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_INVALID_FRAMEWORK_ID
                  errmsg: 'Invalid FrameworkId: dummy_framework1 for Categoryinstance '
                responseCode: CLIENT_ERROR
                result: {}
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /framework/v1/term/create:
    post:
      tags:
      - Framework - Term APIs
      summary: Create Term
      description: |-
        This API is associated with creating a term under a framework category
          - The endpoint for **Create Term** is `/framework/v1/term/create`
          - It points to knowledge-mw-service - `/v1/framework/term/create`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
      operationId: FrameworkV1TermCreatePost
      parameters:
      - name: framework
        in: query
        description: Represents the framework in which the term is to be created
        required: true
        schema:
          type: string
      - name: category
        in: query
        description: Represents the category in which the term is to be created
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - application/json"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: "'The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:\n\
          \   \n   - JSON \n   The body is the representation of\
          \ the resource object for creating a term. \n Please refer for supported [metadata](https://github.com/project-sunbird/sunbird-learning-platform/blob/release-3.5.0/docs/domain_model_v2/definitions/term_definition.json)"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkCreateFrameworkTermRequest'
            example:
              request:
                term:
                  code: english
                  name: English
        required: true
      responses:
        200:
          description: OK ! Successful operation."create term" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermCreate200Response'
              example:
                id: api.term.create
                ver: '1.0'
                ts: '2020-12-14T19:44:02.348Z'
                params:
                  resmsgid: b792c6c0-3e44-11eb-9ff3-67c41480f6aa
                  msgid: b783f9b0-3e44-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id:
                    - dummy_framework_subject_english
        400:
          description: BAD REQUEST. The "create term" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermCreate400Response'
              example:
                id: api.term.create
                ver: '1.0'
                ts: '2020-12-14T19:44:49.263Z'
                params:
                  resmsgid: d3896ff0-3e44-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_INVALID_CATEGORY_ID
                  errmsg: Please provide valid category.
                responseCode: CLIENT_ERROR
                result: {}
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /framework/v1/term/read/{code}:
    get:
      tags:
      - Framework - Term APIs
      summary: Fetch Term
      description: |-
        This API is associated with fetching the available terms under a specific category and a framework on Sunbird Platform.
           - The endpoint for **Fetch Term** is `/framework/v1/term/read/{code}`
           - It points to knowledge-mw-service - `/v1/framework/term/read/{code}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1TermReadClass2Get
      parameters:
      - name: code
        in: path
        description: The name/code of the term to be fetched
        required: true
        schema:
          type: string
      - name: framework
        in: query
        description: Represents the framework id in which the term can be fetched
        required: true
        schema:
          type: string
      - name: category
        in: query
        description: Represents the category in which the term can be fetched
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - application/json"
        required: false
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."Fetch term" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermGet200Response'
              example:
                id: api.term.read
                ver: '1.0'
                ts: '2020-12-17T07:24:51.258Z'
                params:
                  resmsgid: f380c1a0-4038-11eb-9b0c-abcfbdf41bc3
                  msgid: f358c740-4038-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  term:
                    associations: []
                    identifier: dummy_framework_subject_english
                    lastStatusChangedOn: '2020-12-14T19:44:02.260+0000'
                    code: english
                    consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                    channel: in.ekstep
                    description: English
                    createdOn: '2020-12-14T19:44:02.260+0000'
                    versionKey: '1607975299669'
                    children: []
                    appId: dev.sunbird.portal
                    name: English
                    lastUpdatedOn: '2020-12-14T19:48:19.669+0000'
                    categories:
                      - identifier: dummy_framework_subject
                        name: Subject
                        objectType: CategoryInstance
                        relation: hasSequenceMember
                        description: Updated description
                        status: Live
                    category: subject
                    status: Live
        400:
          description: BAD REQUEST. The "Fetch term" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermGet400Response'
              example:
                id: api.term.read
                ver: '1.0'
                ts: '2020-12-17T07:54:24.246Z'
                params:
                  resmsgid: 14494160-403d-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_INVALID_CATEGORY_ID
                  errmsg: Please provide valid category.
                responseCode: CLIENT_ERROR
                result: {}
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /framework/v1/term/update{code}:
    patch:
      tags:
      - Framework - Term APIs
      summary: Update Term
      description: |-
        This API is associated with updating a term under a category in a framework on Sunbird Platform
           - The endpoint for **Update Term** is `/framework/v1/term/update{code}`
           - It points to knowledge-mw-service - `/v1/framework/term/update/{code}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1TermUpdateClass2Patch
      parameters:
      - name: code
        in: path
        description: The name/code of the term to be update
        required: true
        schema:
          type: string
      - name: framework
        in: query
        description: Represents the framework in which the terms is to be updated
        required: true
        schema:
          type: string
      - name: category
        in: query
        description: Represents the category in which the term is to be updated
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource\n\
          \ Possible media types can be:- \n   - application/json"
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.'
        required: true
        schema:
          type: string
      requestBody:
        description: "'The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:\n\
          \   \n   - JSON \n   The body is the representation of\
          \ the resource object for updating a term. Please refer for supported [metadata](https://github.com/project-sunbird/sunbird-learning-platform/blob/release-3.5.0/docs/domain_model_v2/definitions/term_definition.json)"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkUpdateFrameworkTermRequest'
            example:
              request:
                term:
                  name: English
                  description: English
        required: true
      responses:
        200:
          description: OK ! Successful operation."update term" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermUpdate200Response'
              example:
                id: api.term.update
                ver: '1.0'
                ts: '2020-12-14T19:48:19.754Z'
                params:
                  resmsgid: 50ffd0a0-3e45-11eb-9ff3-67c41480f6aa
                  msgid: 50f04040-3e45-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id: dummy_framework_subject_english
                  versionKey: '1607975299669'
        400:
          description: BAD REQUEST. The "update term" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermUpdate400Response'
              example:
                id: api.term.update
                ver: '1.0'
                ts: '2020-12-14T19:49:03.927Z'
                params:
                  resmsgid: 6b541470-3e45-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_INVALID_CATEGORY_ID
                  errmsg: Please provide valid category.
                responseCode: CLIENT_ERROR
                result: {}
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
  /framework/v1/term/search:
    post:
      tags:
      - Framework - Term APIs
      summary: Search Term
      description: |-
        This API is associated with searching the existing terms under a category in a framework on Sunbird Platform
           - The endpoint for **Search Term** is `/framework/v1/term/search`
           - It points to knowledge-mw-service - `/v1/framework/term/search`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1TermSearchPost
      parameters:
      - name: framework
        in: query
        description: Represents the framework in which the term is to be searched
        required: true
        schema:
          type: string
      - name: category
        in: query
        description: Represents the category in which the term is to be searched
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: To make use of the API, you require authorization. Raise a request
          to the administrator for the use of the API. You will receive the authorization
          key. Specify the key received, here.
        required: true
        schema:
          type: string
      requestBody:
        description: "'The body parameter refers to the format of the request, the\
          \ request body (payload) takes the following media types to make the payload:\n\
          \   \n   - JSON \n   The body is the representation of\
          \ the resource object for searching a term"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkFrameworkTermSearchRequest'
            example:
              request: {}
        required: false
      responses:
        200:
          description: OK ! Successful operation."Search term operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermSearch200Response'
              example:
                id: api.term.search
                ver: '1.0'
                ts: '2020-12-17T08:12:44.816Z'
                params:
                  resmsgid: a446e900-403f-11eb-9b0c-abcfbdf41bc3
                  msgid: a4447800-403f-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  terms:
                    - associations: []
                      identifier: dummy_framework_subject_english
                      lastStatusChangedOn: '2020-12-14T19:44:02.260+0000'
                      code: english
                      consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                      channel: in.ekstep
                      description: English
                      createdOn: '2020-12-14T19:44:02.260+0000'
                      versionKey: '1607975299669'
                      children: []
                      appId: dev.sunbird.portal
                      name: English
                      lastUpdatedOn: '2020-12-14T19:48:19.669+0000'
                      categories:
                        - identifier: dummy_framework_subject
                          name: Subject
                          objectType: CategoryInstance
                          relation: hasSequenceMember
                          description: Updated description
                          status: Live
                      category: subject
                      status: Live
                  count: 1
        400:
          description: BAD REQUEST. The "search term" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermSearch400Response'
              example:
                id: api.term.search
                ver: '1.0'
                ts: '2020-12-17T08:13:50.811Z'
                params:
                  resmsgid: cb9cf2b0-403f-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_INVALID_CATEGORY_ID
                  errmsg: Please provide valid category.
                responseCode: CLIENT_ERROR
                result: {}
        500:
          description: INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel free
            to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security: 
        - bearer: []
components:
  schemas:
    frameworkCreateFrameworkRequest:
      description: This is the create framework request body
      allOf:
      - $ref: '#/components/schemas/frameworkRequestFrameworkCreate'
    frameworkRequestFrameworkCreate:
      type: object
      properties:
        request:
          type: object
          properties:
            framework:
              type: object
              properties:
                name:
                  type: string
                  description: Represents the name of the framework
                code:
                  type: string
                  description: Represents the unique code of the framework
                description:
                  type: string
                  description: It is the description of the framework
                type:
                  type: string
                  description: Represents the type of framework
                channels:
                  type: array
                  description: Represents the channels associated with the framework
                  items:
                    type: object
                    properties: {}
                translations:
                  type: object
                  properties: {}
                  description: Represents the translation of framework name in different
                    language
      description: Request body for create framework
    frameworkUpdateFrameworkRequest:
      description: Request body for update Framework
      allOf:
      - $ref: '#/components/schemas/frameworkRequestFrameworkUpdate'
    frameworkRequestFrameworkUpdate:
      type: object
      properties:
        request:
          type: object
          properties:
            framework:
              type: object
              properties:
                name:
                  type: string
                  description: Represents the name of the framework
                description:
                  type: string
                  description: It is the description of the framework
                type:
                  type: string
                  description: Represents the type of framework
                channels:
                  type: array
                  description: Represents the channels associated with the framework
                  items:
                    type: object
                    properties: {}
                categories:
                  type: array
                  description: Represents the categories associated with the framework
                  items:
                    type: object
                    properties: {}
                translations:
                  type: object
                  properties: {}
                  description: Represents the translation of framework name in different
                    language
      description: Request body of update framework
    frameworkRequestChannelCreate:
      type: object
      properties:
        request:
          type: object
          properties:
            channel:
              type: object
              properties:
                name:
                  type: string
                  description: Represents the name of the channel
                code:
                  type: string
                  description: Represents the unique code of the channel
      description: Request body of create channel
    frameworkRequestChannelUpdate:
      type: object
      properties:
        request:
          type: object
          properties:
            channel:
              type: object
              properties:
                name:
                  type: string
                  description: Represents the name of the channel
                description:
                  type: string
                  description: It is the description of the channel
      description: Request body of update channel
    frameworkChannelCreateRequest:
      description: Request body of the create channel
      allOf:
      - $ref: '#/components/schemas/frameworkRequestChannelCreate'
    frameworkChannelUpdateRequest:
      description: Request body of the create channel
      allOf:
      - $ref: '#/components/schemas/frameworkRequestChannelUpdate'
    frameworkResponseChannelCreate200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: string
              description: Represents the identifier of the channel created
            identifier:
              type: string
              description: Represents the identifier of the channel created
    frameworkResponseChannelCreate400:
      type: object
      properties:
        responseCode:
          type: string
          description: Represents the Error code of the api response.
        result:
          type: object
          properties: {}
          description: Represents the empty response code.
      description: Response of the create channel on client error.
    frameworkChannelCreate200Response:
      description: Request body of the  create response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseChannelCreate200'
    frameworkChannelCreate400Response:
      description: Channel create response for 400.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseChannelCreate400'
    frameworkChannelObj:
      type: object
      properties:
        identifier:
          type: string
          description: Represents the Unique ID of the channel across sunbird installations
        code:
          type: string
          description: The code is same as the unique ID of the channel
        description:
          type: string
          description: Description of the channel
        defaultFramework:
          type: string
          description: A framework identifier which can be used fetch categories for
            create/update/search other objects
        frameworks:
          type: object
          properties: {}
          description: List of frameworks subscribed by this channel
        suggested_frameworks:
          type: array
          description: List of frameworks available in platform to subscribe
          items:
            type: object
            properties: {}
    frameworkResponseChannelGet200:
      type: object
      properties:
        result:
          type: object
          properties:
            channel:
              $ref: '#/components/schemas/frameworkChannelObj'
      description: Response of the channel get
    frameworkChannelGet200Response:
      description: Channel get response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseChannelGet200'
    frameworkChannelGet400Response:
      description: Channel get response for 400.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseChannelCreate400'
    frameworkFrameworkGet400Response:
      description: Framework get response for 400.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkCreate400'
    frameworkResponseFrameworkCreate400:
      type: object
      properties:
        responseCode:
          type: string
          description: Represents the error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the framework create on client error
    frameworkFrameworkCreate200Response:
      description: Framework create response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkCreate200'
    frameworkResponseFrameworkCreate200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: string
              description: Unique identifier of the framework created
            versionKey:
              type: string
              description: Represents the version key of the current framework object
      description: Response body of create framework
    frameworkFrameworkObj:
      type: object
      properties:
        identifier:
          type: string
          description: Represents the unique ID of the framework across sunbird installations
        name:
          type: string
          description: Represents the name of the framework
        code:
          type: string
          description: This is same as identifier
        description:
          type: string
          description: Description of the framework
        consumerId:
          type: string
          description: Represents the consumerId
        channel:
          type: string
          description: Channel by which the framework was created
        type:
          type: string
          description: Type of the framework
        createdOn:
          type: string
          description: Creation date of the framework
        versionKey:
          type: string
          description: Version key of the framework
        channels:
          type: array
          description: Creation date of the framework
          items:
            type: object
            properties: {}
        appId:
          type: string
          description: Represents the AppId of the framework
        lastUpdatedOn:
          type: string
          description: Represents the last Updation date of the framework
        status:
          type: string
          description: Represents the status of the framework
        categories:
          type: array
          description: Represents the categories in a framework
          items:
            type: object
            properties: {}
        translations:
          type: object
          properties: {}
          description: Represents the translation of framework name in different language.
    frameworkResponseFrameworkGet200:
      type: object
      properties:
        result:
          type: object
          properties:
            framework:
              $ref: '#/components/schemas/frameworkFrameworkObj'
      description: Response of the Framework get.
    frameworkFrameworkGet200Response:
      description: Framework get response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkGet200'
    frameworkFrameworkUpdate400Response:
      description: Framework Update response for 400.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkUpdate400'
    frameworkResponseFrameworkUpdate400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the framewrk update on client error.
    frameworkFrameworkUpdate200Response:
      description: Framework update response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkUpdate200'
    frameworkResponseFrameworkUpdate200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: string
              description: Identifier of the framework update.
            versionKey:
              type: string
              description: Version key of the current framework object. This is used
                for all update calls of the same object
      description: Response of the framework update.
    frameworkRequestFrameworkList:
      type: object
      properties:
        request:
          type: object
          properties:
            search:
              type: object
              properties: {}
      description: Request map of framework list api
    frameworkFrameworkListRequest:
      description: Framework List request.
      allOf:
      - $ref: '#/components/schemas/frameworkRequestFrameworkList'
    frameworkFrameworkList400Response:
      description: Framework List response for 400.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkList400'
    frameworkResponseFrameworkList400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the framewrk list on client error
    frameworkFrameworkList200Response:
      description: Framework list response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkList200'
    frameworkResponseFrameworkList200:
      type: object
      properties:
        result:
          type: object
          properties:
            frameworks:
              type: array
              description: List of frameworks
              items:
                type: object
                properties: {}
            count:
              type: number
              description: Number of frameworks searched
      description: Response of the framework list.
    frameworkCopyFrameworkRequest:
      description: Framework copy request
      allOf:
      - $ref: '#/components/schemas/frameworkRequestFrameworkCopy'
    frameworkRequestFrameworkCopy:
      type: object
      properties:
        request:
          type: object
          properties:
            framework:
              type: object
              properties:
                code:
                  type: string
                  description: Unique code of the framework
      description: Request map of framework copy api
    frameworkFrameworkCopy400Response:
      description: Framework Copy response for 400.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkCopy400'
    frameworkResponseFrameworkCopy400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the framework copy on client error
    frameworkFrameworkCopy200Response:
      description: Framework copy response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkCopy200'
    frameworkResponseFrameworkCopy200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: string
              description: Identifier of the Framework update.
      description: Response of the framework copy
    frameworkCreateCategoryInstanceRequest:
      description: Category Instance create Request
      allOf:
      - $ref: '#/components/schemas/frameworkRequestCategoryInstanceCreate'
    frameworkRequestCategoryInstanceCreate:
      type: object
      properties:
        request:
          type: object
          properties:
            category:
              type: object
              properties:
                code:
                  type: string
                  description: "Unique code of the category"
                name:
                  type: string
                  description: "Name of the category"
      description: Request map of CategoryInstance Create api.
    frameworkCategoryInstanceCreate400Response:
      description: CategoryInstance Create response for 400.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseCategoryInstanceCreate400'
    frameworkResponseCategoryInstanceCreate400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the CategoryInstance Create on client error.
    frameworkCategoryInstanceCreate200Response:
      description: CategoryInstance Create response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseCategoryInstanceCreate200'
    frameworkResponseCategoryInstanceCreate200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: string
              description: Identifier of the category instance
            versionKey:
              type: string
              description: versionKey of the category instance
      description: Response of the CategoryInstance Create.
    frameworkCategoryInstanceObj:
      type: object
      properties:
        identifier:
          type: string
          description: Unique id of the category instance across sunbird installations
        name:
          type: string
          description: Name of the category instance
        code:
          type: string
          description: This is same as identifier
        description:
          type: string
          description: Description of the category instance
        consumerId:
          type: string
          description: consumerId.
        channel:
          type: string
          description: Channel who created this category instance
        createdOn:
          type: string
          description: Creation date of the category instance
        versionKey:
          type: string
          description: Version key of the category instance
        appId:
          type: string
          description: AppId of the category instance
        lastUpdatedOn:
          type: string
          description: Last Updation date of the category instance
        status:
          type: string
          description: Status of the category instance
        frameworks:
          type: array
          description: Frameworks with which category instance is associated
          items:
            type: object
            properties: {}
        channels:
          type: array
          description: Channels with which category instance is associated
          items:
            type: object
            properties: {}
        terms:
          type: array
          description: Terms associated with category.
          items:
            type: object
            properties: {}
        translations:
          type: object
          properties: {}
          description: Represents the translation of category name in different language
    frameworkResponseCategoryInstanceGet200:
      type: object
      properties:
        result:
          type: object
          properties:
            category:
              $ref: '#/components/schemas/frameworkCategoryInstanceObj'
      description: Response of the CategoryInstance get
    frameworkCategoryInstanceGet200Response:
      description: CategoryInstance get response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseCategoryInstanceGet200'
    frameworkCategoryInstanceGet400Response:
      description: CategoryInstance Get response for 400.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseCategoryInstanceGet400'
    frameworkResponseCategoryInstanceGet400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the CategoryInstance Get on client error
    frameworkUpdateCategoryInstanceRequest:
      description: CategoryInstance update request
      allOf:
      - $ref: '#/components/schemas/frameworkRequestCategoryInstanceUpdate'
    frameworkRequestCategoryInstanceUpdate:
      type: object
      properties:
        request:
          type: object
          properties:
            framework:
              type: object
              properties:
                description:
                  type: string
                  description: Description of the Category Instance
                translations:
                  type: object
                  properties: {}
                  description: Represents the translation of category name in different
                    language.
      description: Request map of CategoryInstance update API
    frameworkCategoryInstanceUpdate400Response:
      description: CategoryInstance Update response for 400.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseCategoryInstanceUpdate400'
    frameworkResponseCategoryInstanceUpdate400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the CategoryInstance Update on client error.
    frameworkCategoryInstanceUpdate200Response:
      description: CategoryInstance Update response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseCategoryInstanceUpdate200'
    frameworkResponseCategoryInstanceUpdate200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: string
              description: Identifier of the CategoryInstance.
            versionKey:
              type: string
              description: versionKey of the Category Instance
      description: Response of the CategoryInstance Update.
    frameworkRequestCategoryInstanceSearch:
      type: object
      properties:
        request:
          type: object
          properties:
            search:
              type: object
              properties: {}
      description: Request map of CategoryInstance search api.
    frameworkCategoryInstanceSearchRequest:
      description: CategoryInstance Search request.
      allOf:
      - $ref: '#/components/schemas/frameworkRequestCategoryInstanceSearch'
    frameworkCategoryInstanceSearch400Response:
      description: CategoryInstance Search response for 400.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseCategoryInstanceSearch400'
    frameworkResponseCategoryInstanceSearch400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the CategoryInstance Search on client error.
    frameworkCategoryInstanceSearch200Response:
      description: CategoryInstance Search response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseCategoryInstanceSearch200'
    frameworkResponseCategoryInstanceSearch200:
      type: object
      properties:
        result:
          type: object
          properties:
            categories:
              type: array
              description: List of CategoryInstance
              items:
                type: object
                properties: {}
            count:
              type: number
              description: Number of CategoryInstance searched
      description: Response of the CategoryInstance Search.
    frameworkCreateFrameworkTermRequest:
      description: Framework Term create Request
      allOf:
      - $ref: '#/components/schemas/frameworkRequestFrameworkTermCreate'
    frameworkRequestFrameworkTermCreate:
      type: object
      properties:
        request:
          type: object
          properties:
            term:
              type: object
              properties:
                code:
                  type: string
                  description: "Unique code of the term"
                name:
                  type: string
                  description: "Name of the term."
      description: Request map of FrameworkTerm Create API
    frameworkFrameworkTermCreate400Response:
      description: Framework Term Create response for 400.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkTermCreate400'
    frameworkResponseFrameworkTermCreate400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the FrameworkTerm Create on client error.
    frameworkFrameworkTermCreate200Response:
      description: Framework Term Create response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkTermCreate200'
    frameworkResponseFrameworkTermCreate200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: array
              description: List of Identifiers of the Framework Term
              items:
                type: string
      description: Response of the FrameworkTerm Create.
    frameworkFrameworkTermObj:
      type: object
      properties:
        identifier:
          type: string
          description: Unique ID of the Framework Term
        name:
          type: string
          description: Represents the name of the Framework Term
        code:
          type: string
          description: Unique ID of the Framework Term
        description:
          type: string
          description: Description of the Framework Term
        consumerId:
          type: string
          description: Represents the consumerId
        channel:
          type: string
          description: Represents the channel that created the Framework Term
        createdOn:
          type: string
          description: Represents the creation date of the Framework Term
        versionKey:
          type: string
          description: Represents the version key of the Framework Term
        appId:
          type: string
          description: Represents the AppId of the Framework Term
        lastUpdatedOn:
          type: string
          description: Represents the last updated date of the Framework Term
        status:
          type: string
          description: Represents the status of the Framework Term
        categories:
          type: array
          description: Represents the category instances with which Framework Term
            is associated
          items:
            type: object
            properties: {}
        parents:
          type: array
          description: Parent terms
          items:
            type: object
            properties: {}
        associationswith:
          type: array
          description: Represents the Terms to which the current term is associated
          items:
            type: object
            properties: {}
        children:
          type: array
          description: Child terms of the current term
          items:
            type: object
            properties: {}
        associations:
          type: array
          description: Represents other terms associated with the current term
          items:
            type: object
            properties: {}
        translations:
          type: object
          properties: {}
          description: Represents the translation of term name in different language
    frameworkResponseFrameworkTermGet200:
      type: object
      properties:
        result:
          type: object
          properties:
            term:
              $ref: '#/components/schemas/frameworkFrameworkTermObj'
      description: Response body of the get Framework Term
    frameworkFrameworkTermGet200Response:
      description: FrameworkTerm get response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkTermGet200'
    frameworkFrameworkTermGet400Response:
      description: FrameworkTerm Get response for 400.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkTermGet400'
    frameworkResponseFrameworkTermGet400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the FrameworkTerm Get on client error.
    frameworkUpdateFrameworkTermRequest:
      description: Framework Term update request
      allOf:
      - $ref: '#/components/schemas/frameworkRequestFrameworkTermUpdate'
    frameworkRequestFrameworkTermUpdate:
      type: object
      properties:
        request:
          type: object
          properties:
            term:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the framework term
                description:
                  type: string
                  description: Description of the framework term
                categories:
                  type: array
                  description: Category instances with which framework term is associated
                  items:
                    type: object
                    properties: {}
                parents:
                  type: array
                  description: Parent terms
                  items:
                    type: object
                    properties: {}
                associationswith:
                  type: array
                  description: Terms to which the current term is associated
                  items:
                    type: object
                    properties: {}
                children:
                  type: array
                  description: Represents the child terms associated to current term
                  items:
                    type: object
                    properties: {}
                associations:
                  type: array
                  description: Represents the terms associated with the current term
                  items:
                    type: object
                    properties: {}
                translations:
                  type: object
                  properties: {}
                  description: Represents the translation of term name in different
                    language
      description: Request map of framework term update api.
    frameworkFrameworkTermUpdate400Response:
      description: FrameworkTerm Update response for 400.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkTermUpdate400'
    frameworkResponseFrameworkTermUpdate400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the Framework Term Update (error)
    frameworkFrameworkTermUpdate200Response:
      description: CategoryInstance Update response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkTermUpdate200'
    frameworkResponseFrameworkTermUpdate200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: string
              description: Represents the Identifier of the Framework Term
            versionKey:
              type: string
              description: Represents the versionKey of the Framework Term
      description: Response of the update Framework Term
    frameworkRequestFrameworkTermSearch:
      type: object
      properties:
        request:
          type: object
          properties:
            search:
              type: object
              properties: {}
      description: Request map of FrameworkTerm search api.
    frameworkFrameworkTermSearchRequest:
      description: FrameworkTerm Search request.
      allOf:
      - $ref: '#/components/schemas/frameworkRequestFrameworkTermSearch'
    frameworkFrameworkTermSearch400Response:
      description: FrameworkTerm Search response for 400.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkTermSearch400'
    frameworkResponseFrameworkTermSearch400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the FrameworkTerm Search on client error.
    frameworkFrameworkTermSearch200Response:
      description: FrameworkTerm Search response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkTermSearch200'
    frameworkResponseFrameworkTermSearch200:
      type: object
      properties:
        result:
          type: object
          properties:
            terms:
              type: array
              description: Represents the list of Framework Terms
              items:
                type: object
                properties: {}
            count:
              type: number
              description: Represents the number of Framework Term searched
      description: Response of the FrameworkTerm Search.
    frameworkPublishFrameworkRequest:
      description: Request body of Copy Framework
      allOf:
      - $ref: '#/components/schemas/frameworkRequestFrameworkPublish'
    frameworkRequestFrameworkPublish:
      type: object
      properties:
        request:
          type: object
          properties: {}
      description: Request body of publish framework
    frameworkFrameworkPublish200Response:
      description: Framework copy response on success.
      allOf:
      - $ref: '#/components/schemas/frameworkframeworkApiResponse'
      - $ref: '#/components/schemas/frameworkResponseFrameworkPublish200'
    frameworkResponseFrameworkPublish200:
      type: object
      properties:
        result:
          type: object
          properties:
            publishStatus:
              type: string
              description: response status of the publish operation
              example: Publish Operation for Content Id 'test_300_framework' Started
                Successfully!
      description: Response body of copy framework
    frameworkframeworkApiResponse:
      required:
      - ts
      - id
      - params
      - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ts:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since
            EPOCH
          format: int64
        params:
          required:
          - msgid
          - resmsgid
          - status
          - err
          - errmsg
          type: object
          properties:
            msgid:
              type: string
              description: Represents the ID of the message sent
            resmsgid:
              type: string
              description: Represents the ID of the response message
            status:
              type: string
              enum:
              - successful
              - failed
            err:
              type: string
              description: Represents the response error code
            errmsg:
              type: string
              description: Represents the response error message
        responseCode:
          type: string
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
