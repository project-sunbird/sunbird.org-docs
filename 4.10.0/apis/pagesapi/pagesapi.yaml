openapi: 3.0.1
info:
  title: Page API(s)
  description: |-
    - The Page resources APIs are used to set up the current page, change settings, and configure how things will be displayed to the user
  version: "1.0"
servers:
- url: https://staging.open-sunbird.org/api
paths:
  /data/v1/page/create:
    post:
      tags:
      - Page APIs
      summary: Create Page
      description: |-
        This API is associated with creating a new page. To create a page first create the page section using section create api.make page name unique.
           - The endpoint for **Create Page** is `/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: CreatePost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which creating page request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for creating a page.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pagesapiCreatePagerequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/pagesapiCreatePagerequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/pagesapiCreatePagerequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."create page" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateResponse'
              example:
                id: api.page.create
                ver: v1
                ts: '1606196636922'
                params: 
                  resmsgid: null,
                  msgid: a4b7041c-2d42-43e8-81d2-d3f3b6fbeccf
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
                  pageId: 0131699903041208327
        400:
          description: BAD REQUEST. The "create page" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateErrorResponse'
              example:
                id: api.page.create
                ver: v1
                ts: '1606196636922'
                params: 
                  resmsgid: null,
                  msgid: 34b7041c-2d42-43e8-81d2-d3f3b6fbeccf
                  err: PAGE_ALREADY_EXIST
                  status: PAGE_ALREADY_EXIST
                  errmsg: page already exist with this Page Name and Org Code.
                responseCode: CLIENT_ERROR
                result: {}
        500:
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the problem
            persists, contact info@sunbird.org. '
          content: 
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/pagesapi500ServerError'
              example:
                id: api.page.create
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
      - bearer: []
  /data/v1/page/update:
    patch:
      tags:
      - Page APIs
      summary: Update Page Information
      description: |-
        This API is associated with updating the page information
           - The endpoint for **Update Page Information** is `/update`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: UpdatePatch
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which update page information request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for updating page info.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pagesapiUpdatePageInforequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/pagesapiUpdatePageInforequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/pagesapiUpdatePageInforequest'
        required: true
      responses:
        200:
          description: OK ! Successful operation."update page information" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateResponse'
              example:
                id: api.page.update
                ver: v1
                ts: '1606196636922'
                params: {
                  resmsgid: null,
                  msgid: "34b7041c-2d42-43e8-81d2-d3f3b6fbeccf",
                  err: null,
                  status: "success",
                  errmsg: null
                }
                responseCode: OK
                result:
                  response: SUCCESS
        400:
          description: BAD REQUEST. The "update page" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateErrorResponse'
              example:
                id: api.page.update
                ver: v1
                ts: '1606196636922'
                params: 
                  resmsgid: null,
                  msgid: 34b7041c-2d42-43e8-81d2-d3f3b6fbeccf
                  err: PAGE_ALREADY_EXIST
                  status: PAGE_ALREADY_EXIST
                  errmsg: page already exist with this Page Name and Org Code.
                responseCode: CLIENT_ERROR
                result: {}
        500:
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the problem
            persists, contact info@sunbird.org. '
          content: 
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/pagesapi500ServerError'
              example:
                id: api.page.update
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
      - bearer: []
  /data/v1/page/read/{pageName}:
    get:
      tags:
      - Page APIs
      summary: Get Specific Page Resources
      description: |-
        This API is associated with fetching specific resources.
           - The endpoint for **Get Specific Page Resources** is `/read/{pageName}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: ResourceGet
      parameters:
      - name: pageName
        in: path
        description: Please append a valid Section Id to the request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which get specific page resources request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."get specific page resources" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiPageReadResponse'
              example:
                id: "api.page.read.Course"
                ver: v1
                ts: "2020-12-14 10:30:12:868+0000"
                params: 
                  resmsgid: null
                  msgid: 829f92fa-ef96-4250-a9b2-1a169e8ff59d
                  err: null
                  status: success
                  errmsg: null
                  responseCode: OK
                result: 
                  page: 
                    name: Course
                    id: 01228382478150860822
                    portalSections: 
                      display: "{\"name\":{\"en\":\"Latest Courses\"}}"
                      alt: null
                      description: null
                      index: 1
                      sectionDataType: course
                      imgUrl: null
                      searchQuery: "{\"request\":{\"filters\":{\"contentType\":[\"Course\"],\"objectType\":[\"Content\"],\"status\":[\"Live\"]},\"sort_by\":{\"lastPublishedOn\":\"desc\"},\"limit\":10}}"
                      name: "Latest Courses"
                      id: 01228382278062080019
                      dynamicFilters: null
                      dataSource: null
                      status: 1
                      group: 1
                    appSections: 
                      display: "{\"name\":{\"en\":\"Latest Courses\",\"hi\":\"????????\"}}"
                      alt: null
                      description: null
                      index: 1
                      sectionDataType: course
                      imgUrl: null
                      searchQuery: "{\"request\":{\"filters\":{\"contentType\":[\"Course\"],\"objectType\":[\"Content\"],\"status\":[\"Live\"]},\"sort_by\":{\"lastPublishedOn\":\"desc\"},\"limit\":10}}"
                      name: "Latest Courses"
                      id: 01228382278062080019
                      dynamicFilters: null
                      dataSource: null
                      status: 1
                      group: 1
        500:
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the problem
            persists, contact info@sunbird.org. '
          content: 
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/pagesapi500ServerError'
              example:
                id: api.page.update
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
      - bearer: []
  /data/v1/page/section/create:
    post:
      tags:
      - Page APIs
      summary: Create Page Section
      description: |-
        This API is associated with creating a new section on a page.
           - The endpoint for **Create Page Section** is `/section/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: SectionCreatePost
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which create section request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for creating geo location.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pagesapiCreatePageSectionrequest'
              examples:
                a:
                  summary: "Create page section Request"
                  value:
                    request:
                      name: Page - prad - Section - 1
                      searchQuery:
                        request:
                          facets:
                            - language
                            - grade
                            - domain
                            - contentType
                            - subject
                            - medium
                          filters:
                            contentType:
                              - TextBook
                            objectType:
                              - Content
                            status:
                              - Live
                            compatibilityLevel:
                               max: 4
                               min: 1
                          mode: collection
                          limit: 10
                          sort_by:
                            lastUpdatedOn: desc
                      sectionDataType: Content
                      display:
                        name:
                          en: Page - 1 - Section - 1
                b:
                  summary: "Create page section Bad Request "
                  value:
                    request: 
                      name: "Page - prad - Section - 1"
                      limit: 10
                      sort_by: 
                      lastUpdatedOn: desc
                      sectionDataType: Content
                      display: 
                        name: 
                          en: "Page - 1 - Section - 1"
        required: true
      responses:
        200:
          description: OK ! Successful operation."create section" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateResponse'
              example:
                id: api.page.section.create
                ver: v1
                ts: '1606196636922'
                params: 
                  resmsgid: null,
                  msgid: a4b7041c-2d42-43e8-81d2-d3f3b6fbeccf
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
                  pageId: 0131735539027230726
        400:
          description: BAD REQUEST. The "create section" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateErrorResponse'
              example:
                id: api.page.section.create
                ver: v1
                ts: 2020-12-16 07:58:41:739+0000
                params: 
                  resmsgid: null
                  msgid: "637888ae-16c5-48d0-997f-3662149646f0"
                  err: SECTION_DATA_TYPE_MISSING
                  status: SECTION_DATA_TYPE_MISSING
                  errmsg: Section data type missing.
                responseCode: CLIENT_ERROR
                result: 
        500:
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the problem
            persists, contact info@sunbird.org. '
          content: 
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/pagesapi500ServerError'
              example:
                id: api.page.section.create
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
      - bearer: []
  /data/v1/page/section/update:
    patch:
      tags:
      - Page APIs
      summary: Update Page Section
      description: |-
        This API is associated with updating content of a section on a page.
           - The endpoint for **Update Page Section** is `/section/update`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: SectionUpdatePatch
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which updating page section request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for creating geo location.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pagesapiUpdatePageSectionInforequest'
            examples:
              a:
                summary: Update Page Request
                value:
                  example:
                    request: 
                      id: 01269259447543398412
                      name: "Linked Content"
                      searchQuery: 
                        request: 
                          facets: 
                            - medium
                          filters: 
                            primaryCategory: 
                              - Course
                            mimeType: 
                              - "application/vnd.ekstep.content-collection"
                            status: 
                              - Live
                            compatibilityLevel: 
                              max: 4
                              min: 1
                          mode: collection
                          limit: 10
                          sort_by: 
                            lastUpdatedOn: desc
                      display: 
                        name: 
                        en: "Linked Content"      
        required: true
      responses:
        200:
          description: OK ! Successful operation."create section" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateResponse'
              example:
                id: api.page.section.update
                ver: v1
                ts: '1606196636922'
                params: 
                  resmsgid: null,
                  msgid: a4b7041c-2d42-43e8-81d2-d3f3b6fbeccf
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
                  pageId: 0131735539027230726
        400:
          description: BAD REQUEST. The "create section" operation failed ! The possible
            reason for failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateErrorResponse'
              example:
                id: api.page.section.update
                ver: v1
                ts: 2020-12-16 07:58:41:739+0000
                params: 
                  resmsgid: null
                  msgid: "637888ae-16c5-48d0-997f-3662149646f0"
                  err: SECTION_DATA_TYPE_MISSING
                  status: SECTION_DATA_TYPE_MISSING
                  errmsg: Section data type missing.
                responseCode: CLIENT_ERROR
                result: 
        500:
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the problem
            persists, contact info@sunbird.org. '
          content: 
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/pagesapi500ServerError'
              example:
                id: api.page.section.update
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
      - bearer: []
  /data/v1/page/section/read/{SectionId}:
    get:
      tags:
      - Page APIs
      summary: Fetch Section Details by Id
      description: |-
        This API is associated with fetching specific section details.
           - The endpoint for **Fetch Section Details by Id** is `/section/read/{sectionId}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Section0122771215738306560Get
      parameters:
      - name: SectionId
        in: path
        description: Please append a valid Section Id to the request URL
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which Fetch Section Details request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."fetching section details" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateResponse'
              example:
                id: "api.page.section.read"
                ver: v1
                ts: "2020-12-16 08:33:54:060+0000"
                params: 
                  resmsgid: null
                  msgid: 5d809eaf-525b-4f96-b3f1-798636b55ecf
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result: 
                  section: 
                    updatedBy: null
                    display: "{\"name\":{\"en\":\"Ongoing Courses\"}}"
                    alt: null 
                    description: null
                    updatedDate: null
                    sectionDataType: coursebatch
                    imgUrl: null
                    createdDate: null
                    createdBy: null
                    searchQuery: "{\"request\":{\"query\":\"\",\"filters\":{\"status\":\"1\"},\"limit\":10,\"sort_by\":{\"createdDate\":\"desc\"}}}"
                    name: "Ongoing Course"
                    id: 0127029938411765763
                    dynamicFilters: null
                    dataSource: batch
                    status: 1
        500:
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the problem
            persists, contact info@sunbird.org. '
          content: 
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/pagesapi500ServerError'
              example:
                id: api.page.section.read
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
      - bearer: []
  /data/v1/page/section/list:
    get:
      tags:
      - Page APIs
      summary: Fetch Page Settings
      description: |-
        This API is associated with fetching the settings of a page.
           - The endpoint for **Fetch Page Settings** is `/section/list`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: AllSettingsGet
      parameters:
      - name: Content-Type
        in: header
        description: "The Content Type entity is the media type of the resource.\n\
          \ Possible media types can be:- \n   - Application/json\n   - Multipart/form-data\n\
          \   - Application/x-www-form-urlencoded"
        required: true
        schema:
          type: string
      - name: X-msgid
        in: header
        description: This Id Uniquely identifies a request if the same API is executed
          multiple times.
        required: true
        schema:
          type: string
      - name: ts
        in: header
        description: Time Stamp at which fetch settings request was sent.
        required: true
        schema:
          type: string
      - name: Authorization
        in: header
        description: All User APIs require authorization for use. Specify the authorization
          key received from the administrator when placing the request for use of
          the API.
        required: true
        schema:
          type: string
      - name: x-authenticated-user-token
        in: header
        description: The token/key used to execute the API
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK ! Successful operation."fetch settings" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateResponse'
              example:
                id: "api.page.section.list"
                ver: v1
                ts: "2020-12-16 08:45:22:994+0000"
                params: 
                  resmsgid: null
                  msgid: "04c00561-c3af-46a9-924d-ab891e1b62a8"
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result: 
                  response: 
                    - 
                      display: "{\"name\":{\"en\":\"Latest Courses\"}}"
                      alt: null
                      description: null
                      sectionDataType: ContentBrowser
                      imgUrl: null
                      searchQuery: "{\"request\":{\"filters\":{\"contentType\":[\"Course\"],\"objectType\":[\"Content\"],\"status\":[\"Live\"]},\"sort_by\":{\"lastPublishedOn\":\"desc\"},\"limit\":10}}"
                      name: "Latest Courses"
                      id: 0131191751772733441
                      dynamicFilters: null
                      dataSource: null
                      status: 1
                    - 
                      display: "{\"name\":{\"en\":\"NCC\"}}"
                      alt: null
                      description: null
                      sectionDataType: Content
                      imgUrl: null
                      searchQuery: "{\"request\":{\"filters\":{\"contentType\":[\"Course\"],\"status\":[\"Live\"],\"objectType\":[\"Content\"],\"createdFor\":[\"0129902071599595522\"],\"subject\":[\"NCC\"]},\"sort_by\":{\"lastPublishedOn\":\"desc\"},\"limit\":10}}"
                      name: NCC
                      id: 0129916933832212480
                      dynamicFilters: null
                      dataSource: null
                      status: 1
        500:
          description: 'INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the problem
            persists, contact info@sunbird.org. '
          content: 
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/pagesapi500ServerError'
              example:
                id: api.page.section.list
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
      - bearer: []
components:
  schemas:
    pagesapiCreatePagerequest:
      title: create pageRequest
      required:
      - id
      - params
      - request
      - ts
      type: object
      properties:
        id:
          type: string
          description: ""
          example: unique API ID
        ts:
          type: string
          description: ""
          example: 2013/10/15 16:16:39
        params:
          type: object
          properties: {}
          description: ""
          example: {}
        request:
          $ref: '#/components/schemas/pagesapiRequest'
      example:
        id: api.page.create
        ts: 2020/12/11 16:16:39
        params: {}
        request:
          name: Resources
          organisationId: id of organisation, if you want to create page for your
            org only. if not pass then page will be created for all org.
          portalMap:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
          appMap:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
    pagesapiRequest:
      title: Request
      required:
      - appMap
      - name
      - portalMap
      type: object
      properties:
        name:
          type: string
          description: name of your page
          example: Resources
        organisationId:
          type: string
          description: 'your organisation id '
        portalMap:
          type: array
          description: ""
          example:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
          items:
            $ref: '#/components/schemas/pagesapiPortalMap'
        appMap:
          type: array
          description: ""
          example:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
          items:
            $ref: '#/components/schemas/pagesapiAppMap'
      example:
        name: Resources
        portalMap:
        - id: 1.2283830824624128E18
          index: 1
          group: 1
        - id: 1.228383384379392E18
          index: 1
          group: 2
        appMap:
        - id: 1.2283830824624128E18
          index: 1
          group: 1
        - id: 1.228383384379392E18
          index: 1
          group: 2
    pagesapiPortalMap:
      title: PortalMap
      required:
      - group
      - id
      - index
      type: object
      properties:
        id:
          type: string
          description: ""
          example: 1.2283830824624128E18
        index:
          type: integer
          description: ""
          format: int32
          example: 1
        group:
          type: integer
          description: ""
          format: int32
          example: 1
      example:
        id: 1.2283830824624128E18
        index: 1
        group: 1
    pagesapiAppMap:
      title: AppMap
      required:
      - group
      - id
      - index
      type: object
      properties:
        id:
          type: string
          description: ""
          example: 1.2283830824624128E18
        index:
          type: integer
          description: ""
          format: int32
          example: 1
        group:
          type: integer
          description: ""
          format: int32
          example: 1
      example:
        id: 1.2283830824624128E18
        index: 1
        group: 1
    pagesapiCreatePageSectionrequest:
      title: create page sectionRequest
      required:
      - id
      - params
      - request
      - ts
      type: object
      properties:
        id:
          type: string
          description: ""
          example: unique API ID
        ts:
          type: string
          description: ""
          example: 2013/10/15 16:16:39
        params:
          type: object
          properties: {}
          description: ""
          example: {}
        request:
          $ref: '#/components/schemas/pagesapiRequest5'
      example:
        id: unique API ID
        ts: 2013/10/15 16:16:39
        params: {}
        request:
          name: Recommended TextBook
          searchQuery:
            request:
              query: ""
              filters:
                language:
                - English
                contentType:
                - TextBook
              limit: 10
              sort_by:
                lastUpdatedOn: desc
          sectionDataType: course
          display:
            name:
              en: popular story
              hi: ????????
    pagesapiRequest5:
      title: Request5
      required:
      - display
      - name
      - searchQuery
      - sectionDataType
      type: object
      properties:
        name:
          type: string
          description: unique name of your section. it will refer to your page
          example: Recommended TextBook
        searchQuery:
          $ref: '#/components/schemas/pagesapiSearchQuery'
        sectionDataType:
          type: string
          description: ""
          example: course
        display:
          $ref: '#/components/schemas/pagesapiDisplay'
      example:
        name: Recommended TextBook
        searchQuery:
          request:
            query: ""
            filters:
              language:
              - English
              contentType:
              - TextBook
            limit: 10
            sort_by:
              lastUpdatedOn: desc
        sectionDataType: course
        display:
          name:
            en: popular story
            hi: ????????
    pagesapiSearchQuery:
      title: SearchQuery
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/pagesapiRequest7'
      example:
        request:
          query: ""
          filters:
            language:
            - English
            contentType:
            - TextBook
          limit: 10
          sort_by:
            lastUpdatedOn: desc
    pagesapiRequest7:
      title: Request7
      required:
      - filters
      - limit
      - query
      - sort_by
      type: object
      properties:
        query:
          type: string
          description: ""
        filters:
          $ref: '#/components/schemas/pagesapiFilters'
        limit:
          type: integer
          description: ""
          format: int32
          example: 10
        sort_by:
          $ref: '#/components/schemas/pagesapiSortBy'
      example:
        query: ""
        filters:
          language:
          - English
          contentType:
          - TextBook
        limit: 10
        sort_by:
          lastUpdatedOn: desc
    pagesapiFilters:
      title: Filters
      required:
      - contentType
      - language
      type: object
      properties:
        language:
          type: array
          description: ""
          example:
          - English
          items:
            type: string
        contentType:
          type: array
          description: ""
          example:
          - TextBook
          items:
            type: string
      example:
        language:
        - English
        contentType:
        - TextBook
    pagesapiSortBy:
      title: SortBy
      required:
      - lastUpdatedOn
      type: object
      properties:
        lastUpdatedOn:
          type: string
          description: ""
          example: desc
      example:
        lastUpdatedOn: desc
    pagesapiDisplay:
      title: Display
      required:
      - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/pagesapiName'
      example:
        name:
          en: popular story
          hi: ????????
    pagesapiName:
      title: Name
      required:
      - en
      - hi
      type: object
      properties:
        en:
          type: string
          description: ""
          example: popular story
        hi:
          type: string
          description: ""
          example: ????????
      example:
        en: popular story
        hi: ????????
    pagesapiUpdatePageSectionInforequest:
      title: update page section infoRequest
      required:
      - id
      - params
      - request
      - ts
      type: object
      properties:
        id:
          type: string
          description: ""
          example: unique API ID
        ts:
          type: string
          description: ""
          example: 2013/10/15 16:16:39
        params:
          type: object
          properties: {}
          description: ""
          example: {}
        request:
          $ref: '#/components/schemas/pagesapiRequest13'
      example:
        id: unique API ID
        ts: 2013/10/15 16:16:39
        params: {}
        request:
          id: 1.2266243511689216E17
          name: Popular Course
          searchQuery:
            request:
              query: ""
              filters:
                objectType:
                - Content
                mimeType:
                - application/vnd.ekstep.html-archive
                status:
                - Draft
                - Live
              offset: 0
              limit: 5
          sectionDataType: course
          display:
            name:
              en: popular Course
              hi: ????????
    pagesapiRequest13:
      title: Request13
      required:
      - display
      - id
      - name
      - searchQuery
      - sectionDataType
      type: object
      properties:
        id:
          type: string
          description: ""
          example: 1.2266243511689216E17
        name:
          type: string
          description: ""
          example: Popular Course
        searchQuery:
          $ref: '#/components/schemas/pagesapiSearchQuery14'
        sectionDataType:
          type: string
          description: ""
          example: course
        display:
          $ref: '#/components/schemas/pagesapiDisplay'
      example:
        id: 1.2266243511689216E17
        name: Popular Course
        searchQuery:
          request:
            query: ""
            filters:
              objectType:
              - Content
              mimeType:
              - application/vnd.ekstep.html-archive
              status:
              - Draft
              - Live
            offset: 0
            limit: 5
        sectionDataType: course
        display:
          name:
            en: popular Course
            hi: ????????
    pagesapiSearchQuery14:
      title: SearchQuery14
      required:
      - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/pagesapiRequest15'
      example:
        request:
          query: ""
          filters:
            objectType:
            - Content
            mimeType:
            - application/vnd.ekstep.html-archive
            status:
            - Draft
            - Live
          offset: 0
          limit: 5
    pagesapiRequest15:
      title: Request15
      required:
      - filters
      - limit
      - offset
      - query
      type: object
      properties:
        query:
          type: string
          description: ""
        filters:
          $ref: '#/components/schemas/pagesapiFilters16'
        offset:
          type: integer
          description: ""
          format: int32
          example: 0
        limit:
          type: integer
          description: ""
          format: int32
          example: 5
      example:
        query: ""
        filters:
          objectType:
          - Content
          mimeType:
          - application/vnd.ekstep.html-archive
          status:
          - Draft
          - Live
        offset: 0
        limit: 5
    pagesapiFilters16:
      title: Filters16
      required:
      - mimeType
      - objectType
      - status
      type: object
      properties:
        objectType:
          type: array
          description: ""
          example:
          - Content
          items:
            type: string
        mimeType:
          type: array
          description: ""
          example:
          - application/vnd.ekstep.html-archive
          items:
            type: string
        status:
          type: array
          description: ""
          example:
          - Draft
          - Live
          items:
            type: string
      example:
        objectType:
        - Content
        mimeType:
        - application/vnd.ekstep.html-archive
        status:
        - Draft
        - Live
    pagesapiUpdatePageInforequest:
      title: update page infoRequest
      required:
      - id
      - params
      - request
      - ts
      type: object
      properties:
        id:
          type: string
          description: ""
          example: unique API ID
        ts:
          type: string
          description: ""
          example: 2013/10/15 16:16:39
        params:
          type: object
          properties: {}
          description: ""
          example: {}
        request:
          $ref: '#/components/schemas/pagesapiRequest20'
      example:
        id: unique API ID
        ts: 2013/10/15 16:16:39
        params: {}
        request:
          name: Resourcessss
          id: 1.2283941378359296E18
          portalMap:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
          appMap:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
    pagesapiRequest20:
      title: Request20
      required:
      - appMap
      - id
      - name
      - portalMap
      type: object
      properties:
        name:
          type: string
          description: ""
          example: Resourcessss
        id:
          type: string
          description: ""
          example: 1.2283941378359296E18
        portalMap:
          type: array
          description: ""
          example:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
          items:
            $ref: '#/components/schemas/pagesapiPortalMap'
        appMap:
          type: array
          description: ""
          example:
          - id: 1.2283830824624128E18
            index: 1
            group: 1
          - id: 1.228383384379392E18
            index: 1
            group: 2
          items:
            $ref: '#/components/schemas/pagesapiAppMap'
      example:
        name: Resourcessss
        id: 1.2283941378359296E18
        portalMap:
        - id: 1.2283830824624128E18
          index: 1
          group: 1
        - id: 1.228383384379392E18
          index: 1
          group: 2
        appMap:
        - id: 1.2283830824624128E18
          index: 1
          group: 1
        - id: 1.228383384379392E18
          index: 1
          group: 2
    pagesapiGetPageAssemblerequest:
      title: get page assembleRequest
      required:
      - id
      - params
      - request
      - ts
      type: object
      properties:
        id:
          type: string
          description: ""
          example: unique API ID
        ts:
          type: string
          description: ""
          example: 2013/10/15 16:16:39
        params:
          type: object
          properties: {}
          description: ""
          example: {}
        request:
          $ref: '#/components/schemas/pagesapiRequest24'
      example:
        id: unique API ID
        ts: 2013/10/15 16:16:39
        params: {}
        request:
          source: web
          name: page
          organisationId: id of the organisation optional
          filters:
            objectType:
            - Content
    pagesapiRequest24:
      title: Request24
      required:
      - name
      - source
      type: object
      properties:
        source:
          type: string
          description: possible values are app or web
          example: web
        name:
          type: string
          description: name of your page
          example: page
        organisationId:
          type: object
          description: if you pass the organisation id then system will try to match
            page name created by that organisation . if you have not created any page
            then don not pass organisationid key , you will get default creaetd page
        filters:
          $ref: '#/components/schemas/pagesapiFilters25'
      example:
        source: web
        name: page
        filters:
          objectType:
          - Content
    pagesapiFilters25:
      title: Filters25
      required:
      - objectType
      type: object
      properties:
        objectType:
          type: array
          description: ""
          example:
          - Content
          items:
            type: string
      example:
        objectType:
        - Content
    pagesapiResultWithNodeId:
      title: Result Containing Node Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/pagesapiNodeId'
    pagesapiContentCreateResponse:
      description: Create Content Response
      allOf:
      - $ref: '#/components/schemas/pagesapiResultWithNodeId'
      - $ref: '#/components/schemas/pagesapiResponseHeader'
    pagesapiPageReadResponse:
      description: Page Read Response
      allOf:
      - $ref: '#/components/schemas/pagesapiResponseHeader'
      - $ref: '#/components/schemas/pagesapiEmptyResult'
    pagesapiResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/pagesapiResponseParams'
        responseCode:
          type: object
          properties: {}
          description: 'API response code '
    pagesapiResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    pagesapiEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    pagesapiNodeId:
      title: Node Id
      type: object
      properties:
        node_id:
          type: string
          description: Node Identifier
    pagesapiContentCreateErrorResponse:
      title: Create Content Error Response
      allOf:
      - $ref: '#/components/schemas/pagesapiResponseHeader'
      - $ref: '#/components/schemas/pagesapiEmptyResult'
    pagesapi500ServerError:
      title: 500ServerError
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          type: string
        responseCode:
          type: string
        result:
          type: object
          properties:
           message:
            type: string
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
    userToken:
      type: apiKey
      name: x-authenticated-user-token
      in: header
