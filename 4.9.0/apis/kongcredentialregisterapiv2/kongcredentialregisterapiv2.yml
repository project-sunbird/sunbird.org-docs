openapi: 3.0.1
info:
  version: '1.0'
  title: Kong Credential Register API V2
  termsOfService: 'https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE'
  description: |
    - The kong credential register API V2 is used obtain a credential for an user or device from kong. The pre-requisite is that the consumer along with the a fre credentials needs to be already present in the kong's database. This API will respond back with a credentail usually called the bearer token. The bearer token will have the same permissions as the consumer. This API is generally used by the mobile app to register the mobile device. By doing so the mobile device will receive a bearer token which can used to access the API's. This API can be used for creating credentials for user's and is not restricted to mobile devices.
    
    <b>Please not the differences between the v1 and v2 api below</b>
    - v1 uses HS256 as the token encoding algorithm, v2 uses RS256 as the encoding algorithm
    - v2 inserts the data into the kong database, v2 does not insert the data into the database
    - v1 does not request a pre-defined set of credentails for the consumer, v2 requires a pre-defined set of credentials for the consumer
    - v1 generates the credential when a request is received, v2 issues the token randomly from the predefined set of credentials
    - The credentials generated in both v1 and v2 version are based on the key. As long as the key is unique, the credential will be unique
    - Both v1 and v2 work with the existing api rate limits since the limits are based on credentials

paths:
  /api-manager/v2/consumer/{consumer}/credential/register:
    post:
      description: |-
        This API is used to obtain a bearer token
           - Required fields cannot be left null or empty
      summary: Get a new bearer token
      tags:
        - Kong Credential Register API V2
      operationId: KongCredentialRegisterV2 
      parameters:
        - in: path
          name: consumer
          required: true
          description: Append any text to the request URL
          example: mobile_device
          schema:
            type: string
      requestBody:
        required: true
        description: A unique value which helps in identifying the token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UniqueKey'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialRegisterV2Response'
              example:
                id: "ekstep.api.am.adminutil.consumer.create"
                ver: "1.0"
                ts: 1606915336200
                params:
                  status: "successful"
                  err: null
                  errmsg: null
                  msgid: ""
                  resmsgid: "3c6fdb62-1dcd-49b1-a404-bcd7e2e5a0d1"
                result:
                  key: "SunbirdUser"
                  secret: ""
                  token: "eyJhbGciOiJSUzI1NiIsImtpZCI6Im1vYmlsZSJ9.eyJpc3MiOiJTdW5iaXJkVXNlciIsImlhdCI6MTYwNjkxNTMzNn0.FEZfy-Q-ljIxQRE-JYRu-9qlezDtgPcPGcbFU8mnWQGsHowxNGcYvKvkwVUnTE7BmpPeM4vbfv4d0cRL261daqZWj9nE4zXRglWFDn96Ll2rvi3Kb-AChKlANDhzh4MTqPigIOABX7ZPLMKlxiQx74Ezl5NYhyrbfgRK3_nt4kipyNahvhU1TIaD0DnVrnUPdosk1jtl3wP9tL7E3oKBHfN3BUiGKzYtfWcYrNtXkx5VXsn4EhIOE79GIn72cYqGIUK4cRftfntqKo4FMUk4sX-rbEOZNLQRk3WIl8XwhP3iZv2saZZSEq_EMrLW4aN0vPH9RgoL4QZqi96O7tBypg"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialRegisterV2Response'
              examples:
                Missing Request:
                  value:
                    id: "ekstep.api.am.adminutil.consumer.create"
                    ver: "1.0"
                    ts: 1606903294596
                    params:
                      status: "failed"
                      err: "BAD_REQUEST"
                      errmsg: "REQUEST IS MANDATORY"
                      msgid: null
                      resmsgid: "6208cc43-bc0a-41d4-80b3-e35f79d7af23"
                    result:
                      key: ""
                      secret: ""
                      token: ""
                Missing Key:
                  value:
                    id: "ekstep.api.am.adminutil.consumer.create"
                    ver: "1.0"
                    ts: 1606913532853
                    params:
                      status: "failed"
                      err: "BAD_REQUEST"
                      errmsg: "KEY IS MANDATORY"
                      msgid: null
                      resmsgid: "2a618770-f0e2-409d-9488-8b0ff10b4701"
                    result:
                      key: ""
                      secret: ""
                      token: ""
        '415':
          description: Unsupported media type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialRegisterV2UnsupportedMediaType'
              example:
                timestamp: 1606906723764
                status: 415
                error: "Unsupported Media Type"
                exception: "org.springframework.web.HttpMediaTypeNotSupportedException"
                message: "Unsupported Media Type"
                path: "/v2/consumer/mobile_device/credential/register"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialRegisterV2Response'
              example:
                id: "ekstep.api.am.adminutil.consumer.create"
                ver: "1.0"
                ts: 1606913643653
                params:
                  status: "failed"
                  err: "INTERNAL_ERROR"
                  errmsg: "UNABLE TO REGISTER CREDENTIAL DUE TO INTERNAL ERROR"
                  msgid: ""
                  resmsgid: "d23d2bf5-558a-4adb-9333-ba734cd6b185"
                result:
                  key: "SunbirdUser"
                  secret: ""
                  token: ""
security:
  - bearerAuth: []
servers:
  - url: 'https://staging.open-sunbird.org/api/'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UniqueKey:
      description: A unique key which helps in identifying the token
      type: object
      properties:
        request:
          type: object
          properties:
           key:
              type: string
          required:
          - key
      required:
      - request
    CredentialRegisterV2Response:
      description: Kong credential register v2 response structure
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          type: object
          properties:
            status:
              description: Represents the status of the request
              type: string
              enum:
                - success
                - failed
            err:
              description: Represents the error
              type: string
              nullable: true
            errmsg:
              description: Represents the error message
              type: string
              nullable: true
            msgid:
              description: Represents the message id of the request
              type: string
              
            resmsgid:
              description: Represents the message id of the response
              type: string
        result:
          type: object
          properties:
            key:
              description: Represents the access token
              type: string
            secret:
              type: string
            token:
              type: string
    CredentialRegisterV2UnsupportedMediaType:
      description: Refresh token error response for unsupported media type
      type: object
      properties:
        timestamp:
          description: Represents the EPOCH (UTC) timestamp in milliseconds since EPOCH
          type: integer
          format: int64
        status:
          description: Represents the status of the request
          type: integer
        error:
          description: Represents the error type
          type: string
        exception:
          description: Represents the exception message
          type: string
        message:
          description: Represents the error message
          type: string
        path:
          description: Represents the API path the request
          type: string