openapi: 3.0.1
info:
  title: Group Management  API(s)
  description: >-
    - The Group Management API resources are used to manage individual groups,
    their members and activities, these resources allow you to create new group,
    fetch/update group details, add/edit/remove memebers to a group, add/delete
    activities in a group and fetch all groups of a user. 

    <b>Note:</b> These resources can be used as a part of scripts or programs to
    allow authorized administrators to manage the groups.
  version: '1.0'
  termsOfService: 'https://github.com/project-sunbird/sunbird-commons/blob/master/LICENSE'
  contact:
    email: info@sunbird.org
servers:
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.sunbirded.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.sunbirded.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.sunbirded.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.sunbirded.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.sunbirded.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.sunbirded.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.sunbirded.org/api'
  - url: 'https://dock.sunbirded.org/api'
  - url: 'https://dock.sunbirded.org/api'
  - url: 'https://staging.sunbirded.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.sunbirded.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.sunbirded.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'http://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'https://staging.open-sunbird.org/api'
  - url: 'http://staging.open-sunbird.org/api'
  - url: 'https://dev.sunbirded.org/api'
  - url: 'https://staging.sunbirded.org/api'
paths:
  /course/batch/cert/v1/issue:
    post:
      tags:
        - Issue Certificate Api
      summary: issuance of certificate
      description: |-
        This API is associated with issuing digitally generated certificates.
           - The **_ /issue_** endpoint executes the "Certificate issue" request based on parameters provided as filter in the request body.
           - All fields marked with an * are mandatory
           - Required fields cannot be null or empty
      operationId: GeneratePost for certificate
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be Application/json
          required: true
          schema:
            type: string
        - name: ts
          in: header
          description: 'The timestamp at which the **issue certificate** request was sent. '
          required: true
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            A unique ID that identifies the request in case the same API is
            executed multiple times.
          required: true
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          description: The alphanumeric string to access the API
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body refers to the format of the request. The body contains
          metadata about the request to issue the certificate.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/issuecertificateapiApiRequest'
                - $ref: >-
                    #/components/schemas/issuecertificateapiIssueCertificateRequests
        required: true
      responses:
        '200':
          description: >-
            OK ! Operation successful."Certificate generation" operation was
            executed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuecertificateapiissuecertificateapiApiResponse:
                    $ref: >-
                      #/components/schemas/issuecertificateapiissuecertificateapiApiResponse
                  issuecertificateapiIssueCertificateResponse:
                    $ref: >-
                      #/components/schemas/issuecertificateapiIssueCertificateResponse
        '400':
          description: >-
            BAD REQUEST. The "Certificate generation" operation failed. You may
            have missed providing input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/issuecertificateapiIssueCertificateErrorResponse
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically, but if the problem persists,
            contact us. In the meantime, try refreshing.
          content: {}
      x-codegen-request-body-name: Body
  /otp/v1/generate:
    post:
      tags:
        - OTP APIs
      summary: Generate OTP
      description: |-
        This API is associated with sending OTP to user on the Sunbird Platform.
           - The endpoint for **Generate OTP** is `otp/v1/generate`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: '{{host}}/otp/v1/generate'
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the notification to be sent.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/otpapigenerateOtpRequest'
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Generate OTP" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/otpapiContentCreateResponse'
              example:
                id: api.otp.generate
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: null
                  status: success
                  errmsg: null.
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            BAD REQUEST. The "Generate OTP" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/otpapiContentCreateErrorResponse'
              example:
                id: api.otp.generate
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: MANDATORY_PARAMETER_MISSING
                  status: MANDATORY_PARAMETER_MISSING
                  errmsg: Mandatory parameter key is missing.
                responseCode: SERVER_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/otpapiContentCreateErrorResponse'
              example:
                id: api.otp.generate
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: INTERNAL_ERROR
                  status: INTERNAL_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
  /otp/v1/verify:
    post:
      tags:
        - OTP APIs
      summary: Verify OTP
      description: >-
        This API is associated with verifying the OTP of the user on the Sunbird
        Platform.
           - The endpoint for **Verifiy OTP** is `otp/v1/verify`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
           - The Otp provided in the request is verified with the available otp generated for the user within the sunbird system.
      operationId: '{{host}}/otp/v1/verify'
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the notification to be sent.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/otpapiverifyOtpRequest'
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Verify Otp" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/otpapiContentCreateResponse'
              example:
                id: api.otp.generate
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: null
                  status: success
                  errmsg: null.
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            BAD REQUEST. The "Verify Otp" operation failed! The possible reason
            for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/otpapiContentCreateErrorResponse'
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/otpapiContentCreateErrorResponse'
              example:
                id: api.otp.verify
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: INTERNAL_ERROR
                  status: INTERNAL_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
  /data/v1/group/activity/agg:
    post:
      tags:
        - Group Activity Apis
      summary: Group Activity Aggregator
      description: >-
        This API is used for reading the current progress of the course
        (content) consumed by group members. For example, the mentor/user can
        view and check the progress of a specific activity.


        - The endpoint for **Group Activity Aggregator** is `/agg`


        - The fields marked with an asterisk (*) are mandatory.

        They cannot be null or empty.
      operationId: GroupActivityAgg
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible\
            \ media types can be:- \n  - application/json
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: x-authenticated-user-token
          in: header
          description: >-
            The registered user token/key to authenticate user and execute the
            API.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authToken}}'
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{api-key}}'
      requestBody:
        description: >-
          Represents the body and formdata parameters of the Group Activity
          Aggregator API
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupactivityapiGroupActivityAggRequest'
            example:
              request:
                groupId: '{{group-id}}'
                activityId: '{{activity-id}}'
                activityType: Course
        required: true
      responses:
        '200':
          description: SUCCESS. The "Group Activity Aggregator" operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/groupactivityapiGroupActivityAgg-withinvalidactivity-d
              example:
                id: api.group.activity.agg
                ver: v1
                ts: '2020-11-27 16:29:46:161+0000'
                params:
                  resmsgid: null
                  msgid: 849f418c-7f6e-4a10-9c5c-16b15f8ea86e
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  activity:
                    id: '{{activity-id-invalid}}'
                    type: Course
                    agg:
                      - metric: enrolmentCount
                        lastUpdatedOn: 1606494586160
                        value: 0
                  groupId: b0c4a645-807e-41c7-972e-5c48c5b5e5e7
                  members: []
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/groupactivityapiGroupActivityAgg-Errorwhilefetchinggroupmembersrecord
              example:
                id: api.group.activity.agg
                ver: v1
                ts: '2020-11-27 16:28:59:243+0000'
                params:
                  resmsgid: null
                  msgid: 28d26091-d6ee-44da-8ea0-01dd71c9dba3
                  err: null
                  status: SERVER_ERROR
                  errmsg: Error while fetching group members record.
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /data/v1/system/settings/set:
    post:
      tags:
        - System Settings Api's
      summary: set
      operationId: set
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            To make use of any System API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          required: true
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          schema:
            type: string
        - name: x-authenticated-for
          in: header
          required: false
          description: >-
            Managed User token of registered MUA user performing given API
            request.
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/systemsettingssetrequest'
            example:
              request:
                id: userTnc
                field: userTnc
                value: '{"latestVersion":"3.5.0"}'
        required: true
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemsettingsSuccessResponse'
              example:
                id: api.system.settings.set
                ver: v1
                ts: '2020-12-01 10:47:16:629+0000'
                params:
                  resmsgid: null
                  msgid: 340d4ef3f113f5db5e81859e18663214
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
                  id: userTnc
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemsettingsResourceDoesnotExist'
              example:
                id: api.system.settings.set
                ver: v1
                ts: '2020-12-01 10:49:34:336+0000'
                params:
                  resmsgid: null
                  msgid: d68cb65b27ce91530705b18c0ddbe20f
                  err: MANDATORY_PARAMETER_MISSING
                  status: MANDATORY_PARAMETER_MISSING
                  errmsg: Mandatory parameter field is missing.
                responseCode: CLIENT_ERROR
                result: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemsettingsUserNotAuthorized'
              example:
                id: api.system.settings.set
                ver: v1
                ts: '2020-12-01 10:47:49:724+0000'
                params:
                  resmsgid: null
                  msgid: d94a07319efbfe76cf139a0702d5a83a
                  err: UNAUTHORIZED_USER
                  status: SERVER_ERROR
                  errmsg: You are not authorized.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemsettingsResourceDoesnotExist'
              example:
                id: api.system.settings.set
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: INTERNAL_ERROR
                  status: INTERNAL_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
  '/data/v1/system/settings/get/{configName}':
    get:
      tags:
        - System Settings Api's
      summary: get
      operationId: get
      parameters:
        - in: path
          name: configName
          schema:
            type: string
          required: true
          description: Field config Name
          example: userTnc
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            To make use of any System API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          required: false
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          schema:
            type: string
        - name: x-authenticated-for
          in: header
          required: false
          description: >-
            Managed User token of registered MUA user performing given API
            request.
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemsettingsSuccessResponse1'
              example:
                id: api.system.settings.get.userTnc
                ver: v1
                ts: '2020-12-01 17:46:36:645+0530'
                params:
                  resmsgid: null
                  msgid: 62c78ba7-b0e1-408d-8dfe-7cc3c4e652cc
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response:
                    id: userTnc
                    field: userTnc
                    value: '{"latestVersion":"3.4.0"}'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemsettingsm401'
              example:
                message: Unauthorized
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemsettingsResourceDoesnotExist'
              example:
                id: api.system.settings.get.orgc
                ver: v1
                ts: '2020-12-01 10:59:25:693+0000'
                params:
                  resmsgid: null
                  msgid: 285ccd358d2e1a244919f4c5a1d8a2f7
                  err: RESOURCE_NOT_FOUND
                  status: RESOURCE_NOT_FOUND
                  errmsg: Requested resource not found
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemsettingsResourceDoesnotExist'
              example:
                id: api.system.settings.userTnc
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: INTERNAL_ERROR
                  status: INTERNAL_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
  /data/v1/system/settings/list:
    get:
      tags:
        - System Settings Api's
      summary: list
      operationId: list
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            To make use of any System API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          required: false
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          schema:
            type: string
        - name: x-authenticated-for
          in: header
          required: false
          description: >-
            Managed User token of registered MUA user performing given API
            request.
          schema:
            type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemsettingsm200'
              example:
                id: api.system.settings.list
                ver: v1
                ts: '2020-12-01 12:21:46:829+0000'
                params:
                  resmsgid: null
                  msgid: f11acda288889cf47ecdf8812e623387
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response:
                    - id: uniqueField
                      field: uniqueField
                      value: false
                    - id: custodianRootOrgId
                      field: custodianRootOrgId
                      value: 01285019302823526477
                    - id: tncConfigtest
                      field: tncConfigtest
                      value: test
                    - id: userTnc
                      field: userTnc
                      value: '{"latestVersion":"3.5.0"}'
                    - id: test
                      field: test
                      value: '@test'
                    - id: userTnc
                      field: userTnc
                      value: '{"latestVersion":"3.5.0"}'
                    - id: channelRegStatus
                      field: channelRegStatus
                      value: false
                    - id: phoneUnique
                      field: phoneUnique
                      value: true
                    - id: systemInitialisationStatus
                      field: systemInitialisationStatus
                      value: CUSTODIAN_ORG_CREATED
                    - id: courseFrameworkId
                      field: courseFrameworkId
                      value: tpd
                    - id: consumptionFaqs
                      field: consumptionFaqs
                      value: 'https://dev.sunbirded.org/faq.html'
                    - id: ssoCourseSection
                      field: ssoCourseSection
                      value: 0129795520637419527
                    - id: emailUnique
                      field: emailUnique
                      value: true
                    - id: tn
                      field: tn
                      value: >-
                        {'helpdeskEmail':'abc@abc.com','playstoreLink':'play.google.com/appid=123'}
                    - id: emailUniqueAndPhone
                      field: emailUniqueAndPhone
                      value: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemsettingsm401'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/systemsettingsm500'
      deprecated: false
  /data/v1/index/sync:
    post:
      tags:
        - Data Sync API(s)
      summary: Syncs data
      description: >-
        This API is associated with synchnorization of data on the Sunbird
        Platform.
           - The endpoint for **Syncs data** is `/sync`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: dataSync
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
        - name: ts
          in: header
          description: 'Time Stamp at which **data sync** request was sent. '
          required: true
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This Id Uniquely identifies a request if the same API is executed
            multiple times.
          required: true
          schema:
            type: string
        - name: X-Device-ID
          in: header
          description: >-
            This Id Uniquely identifies the type of device (Mobile)(desktop)
            used to access Sunbird. 'The Registered User ID to execute the API.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about synchronization of data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/datasyncapisyncrequest'
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Data sync" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasyncapiContentCreateResponse'
        '400':
          description: >-
            BAD REQUEST,"Data sync" operation failed ! The possible reason for
            failure is that you may have missed providing input for a mandatory
            parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datasyncapiContentCreateErrorResponse'
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! We track
            these errors automatically, but if the problem persists feel free to
            contact us. In the meantime, try refreshing.
          content: {}
      x-codegen-request-body-name: Body
  /question/v1/create:
    post:
      tags:
        - Question APIs
      summary: Create Question
      description: |-
        This API is used to create Questions on the Sunbird Platform.
          - The endpoint for **Create Question** is `/question/v1/create`
          - It points to the assessment-service - `question/v4/create`
          - All parameters marked with * are mandatory. You must provide values for these parameters. 
          - Mandatory fields cannot be null or empty.
      operationId: Create Question
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. The
            possible media types can be:- 
              - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            You require authorization to make use of the API. Raise a request to
            the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload
           - JSON 
          The body is the representation of the resource object for creating
          questions, which is an array of parameters that describes the
          question  - Click the link to refer the supported
          [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.7.0/schemas/question/1.0/schema.json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionCreateQuestionRequest'
            example:
              request:
                question:
                  name: question_1
                  visibility: Default
                  code: question.code
                  editorState: Random stuff
                  mimeType: application/vnd.sunbird.question
                  primaryCategory: Multiple Choice Question
        required: true
      responses:
        '200':
          description: SUCCESS. The **Create Question** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionCreateSuccessResponse'
              example:
                id: api.question.create
                ver: '3.0'
                ts: '2021-02-02T19:28:24ZZ'
                params:
                  resmsgid: 8b75d237-1028-4e38-a94a-9ff4ca784d76
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_11320791330308096015
                  versionKey: '1612294104382'
        '400':
          description: >-
            'BAD REQUEST. The **Create Question** operation failed. You may have
            missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
              examples:
                a:
                  summary: Error Response - Invalid MimeType
                  value:
                    id: api.question.create
                    ver: '3.0'
                    ts: '2021-02-02T19:41:56ZZ'
                    params:
                      resmsgid: 86481a2f-513e-4fd4-a1dd-46a7ebcb1e65
                      msgid: null
                      err: CLIENT_ERROR
                      status: failed
                      errmsg: Validation Errors
                    responseCode: CLIENT_ERROR
                    result:
                      messages:
                        - >-
                          Metadata mimeType should be one of:
                          [application/vnd.sunbird.question]
                b:
                  summary: Error Response - Primary Category Not Set
                  value:
                    id: api.question.create
                    ver: '3.0'
                    ts: '2021-02-02T19:42:26ZZ'
                    params:
                      resmsgid: bad9792a-0551-4eac-be9c-0e1b79e06581
                      msgid: null
                      err: CLIENT_ERROR
                      status: failed
                      errmsg: Validation Errors
                    responseCode: CLIENT_ERROR
                    result:
                      messages:
                        - Required Metadata primaryCategory not set
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
              example:
                id: api.question.create
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/question/v1/update/{Question_Id}':
    patch:
      description: |-
        This API is associated with updating Questions on the Sunbird Platform .
          - **_/Update/_** endpoint executes the "Update Question" request based on parameters provided as metadata in the request body.
          - The endpoint for **Update Question** is `/question/v1/update`
          - It points to assessment-service - `/question/v4/update`
          - {...}refers to a section of review endpoint URL path that needs to be replaced with the appropriate ID.
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Update Question
      tags:
        - Question APIs
      operationId: Update Question
      parameters:
        - in: path
          name: Question_Id
          required: true
          description: Append a valid Question ID To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All question APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionUpdateQuestionRequest'
            example:
              request:
                question:
                  description: Updated description
                  versionKey: '1612295414767'
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the question to be updated.
            - Click link to refer to the supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/question/1.0/schema.json)
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation. The 'Update Question' operation was
            successfuly executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionCreateSuccessResponse'
              example:
                id: api.question.update
                ver: '3.0'
                ts: '2021-02-02T19:55:07ZZ'
                params:
                  resmsgid: 9d9d4824-cc40-4ac7-a3d6-6da61c0240e9
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_113207924037746688110
                  versionKey: '1612295707004'
        '400':
          description: >-
            BAD REQUEST. The 'Update Question' operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
              example:
                id: api.question.update
                ver: '3.0'
                ts: '2021-02-02T19:56:20ZZ'
                params:
                  resmsgid: fcfcf6d6-84f1-43f5-b573-c3b6cf69ef53
                  msgid: null
                  err: CLIENT_ERROR
                  status: failed
                  errmsg: Invalid version Key
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,The **UpdateQuestion** operation failed!The
            possible reason for failure is that you may have provided wrong
            question ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
              example:
                id: api.question.update
                ver: '3.0'
                ts: '2021-02-02T19:57:35ZZ'
                params:
                  resmsgid: 2b139ee9-f091-4cca-b466-32af45f49a65
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_1132079240377466881101
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact info@sunbird.org. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/question/v1/read/{Question_Id}':
    get:
      description: >-
        This API is associated with viewing and reading the question on the
        Sunbird Platform .
          - The **_/read/{Question_Id}_** endpoint executes the request to fetch the question to be viewed and read based on parameters provided as metadata in the request body.
          - The endpoint for **Read Question** is `/question/v1/read`
          - It points to assessment-service - `/question/v4/read`
          - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.
          - You need to provide a valid Question Id value in {Question_Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Read Question
      tags:
        - Question APIs
      operationId: Read Question
      parameters:
        - in: path
          name: Question_Id
          required: true
          description: Append a valid Question ID To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation.The "Read Question" operation was
            successfully executed. Click link to refer to the supported
            [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/question/1.0/schema.json)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionReadSuccessResponse'
              example:
                id: api.question.read
                ver: '3.0'
                ts: '2021-02-02T20:00:17ZZ'
                params:
                  resmsgid: 6d95dd1b-09d3-457a-8f60-f0c234bc7991
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  question:
                    allowAnonymousAccess: 'Yes'
                    identifier: do_113207924037746688110
                    lastStatusChangedOn: '2021-02-02T19:50:14.767+0000'
                    code: question.code
                    visibility: Default
                    showTimer: 'No'
                    consumerId: fa13b438-8a3d-41b1-8278-33b0c50210e4
                    language:
                      - English
                    mimeType: application/vnd.sunbird.question
                    languageCode:
                      - en
                    createdOn: '2021-02-02T19:50:14.767+0000'
                    version: 1
                    objectType: Question
                    versionKey: '1612295828197'
                    showFeedback: 'No'
                    license: CC BY 4.0
                    primaryCategory: Multiple Choice Question
                    compatibilityLevel: 4
                    name: Updated value
                    contentDisposition: inline
                    lastUpdatedOn: '2021-02-02T19:57:08.197+0000'
                    contentEncoding: gzip
                    status: Draft
                    showSolutions: 'No'
        '404':
          description: >-
            RESOURCE NOT FOUND,**Question Read** operation failed !The possible
            reason for failure is that you may have provided the wrong question
            ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
              example:
                id: api.question.read
                ver: '3.0'
                ts: '2021-02-02T20:01:13ZZ'
                params:
                  resmsgid: 815b341a-7984-45a1-b1f9-4335da18985e
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_1132079240377466881101
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact info@sunbird.org. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/question/v1/review/{Question_Id}':
    post:
      description: >-
        >- This API is associated with Submitting questions for Review  on the
        Sunbird Platform .
          - The**_/review/{Question_Id}_** endpoint executes "Submit for Review" request based on parameters provided as metadata in the request body.
          - The endpoint for **Review Question** is `/question/v1/review`
          - It points to assessment-service - `/question/v4/review`
          - {...}refers to a section of the review endpoint URL path that needs to be replaced with the appropriate ID.
          - You need to provide a valid content ID value in {Question_Id} field of the API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Submit for Review
      tags:
        - Question APIs
      operationId: Submit Questions for Review
      parameters:
        - in: path
          name: Question_Id
          required: true
          description: Please append a valid Question ID To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the question to be sent for review.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation. Question sent for review operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionCreateSuccessResponse'
              example:
                id: api.question.review
                ver: '3.0'
                ts: '2021-02-02T20:06:22ZZ'
                params:
                  resmsgid: 6a00ef94-b63d-4fb6-818a-8dfc66680577
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_113207931921555456111
                  versionKey: '1612296382041'
        '400':
          description: >-
            BAD REQUEST. The 'Review Question' operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
              example:
                id: api.question.review
                ver: '3.0'
                ts: '2021-02-02T20:09:24ZZ'
                params:
                  resmsgid: db7fd0f9-4aa5-4f06-b43b-1b89bec45c50
                  msgid: null
                  err: ERR_QUESTION_REVIEW
                  status: failed
                  errmsg: >-
                    Question with status other than Draft can't be sent for
                    review.
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**Question Send for Review** operation failed
            !The possible reason for failure is that you may have provided wrong
            question ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
              example:
                id: api.question.review
                ver: '3.0'
                ts: '2021-02-02T20:07:24ZZ'
                params:
                  resmsgid: 852b878c-a607-4d72-9458-6239e36adb9e
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) does not Exist. | [Invalid Node Id.]:
                    do_1132079319215554561111
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! We track
            these errors automatically, but if the problem persists feel free to
            contact info@sunbird.org. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/question/v1/publish/{Question_Id}':
    post:
      description: >-
        This API is associated with publishing questions on the Sunbird Platform
        .
          - **_/publish/_** endpoint executes the "Publish Question" request based on parameters provided as metadata in the request body.
          - The endpoint for **Publish Question** is `/question/v1/publish`
          - It points to assessment-service - `/question/v4/publish`
          -  {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Publish Question
      tags:
        - Question APIs
      operationId: Publish Question
      parameters:
        - in: path
          name: Question_Id
          required: true
          description: The Question ID to be published
          schema:
            type: string
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the question to be published.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation.The **Publish Question** operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionPublishSuccessResponse'
              example:
                id: api.question.publish
                ver: '3.0'
                ts: '2021-02-02T20:15:02ZZ'
                params:
                  resmsgid: 9c64cc9c-bed5-44c7-85bf-4918c3a42f58
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  message: Question is successfully sent for Publish
                  identifier: do_113207931921555456111
        '404':
          description: >-
            RESOURCE NOT FOUND,**Publish Question** operation failed! The
            possible reason for failure is that you may have provided wrong
            question ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
              example:
                id: api.question.publish
                ver: '3.0'
                ts: '2021-02-02T20:15:32ZZ'
                params:
                  resmsgid: b084af8b-706b-4079-8ec2-0beb0753931c
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_1132079319215554561111
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! We track
            these errors automatically, but if the problem persists feel free to
            contact info@sunbird.org. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/question/v1/retire/{Question_Id}':
    delete:
      description: |-
        This API is associated with retiring Questions on the Sunbird Platform .
          - The **_/retire/{Question_Id}_** endpoint executes the "Retire Question" request based on the Question_Id. It deletes the specific question.
          - The endpoint for **Retire Content** is `/question/v1/retire`
          - It points to assessment-service - `/question/v4/retire`
          - {...}refers to a section of retire endpoint URL path that needs to be replaced by appropriate ID.
          - It is mandatory to provide values for parameters.
          - Mandatory fields cannot be null or empty.
      summary: Retire Question
      tags:
        - Question APIs
      operationId: Retire Question
      parameters:
        - in: path
          name: Question_Id
          required: true
          description: Please append a valid Question ID To the request URL
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All question APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation.The **Delete Question** operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionCreateSuccessResponse'
              example:
                id: api.question.retire
                ver: '3.0'
                ts: '2021-02-02T20:20:56ZZ'
                params:
                  resmsgid: 98c9f97d-f9d6-4da9-be88-2852294c2aaa
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_113207939069968384112
                  versionKey: '1612297249754'
        '400':
          description: ERROR RETIRE QUESTION! Question is already retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
              example:
                id: api.question.retire
                ver: '3.0'
                ts: '2021-02-02T20:21:26ZZ'
                params:
                  resmsgid: 0608b59d-dfb9-4c0e-807f-1a19c9a163fe
                  msgid: null
                  err: ERR_QUESTION_RETIRE
                  status: failed
                  errmsg: >-
                    Question with identifier : do_113207939069968384112 is
                    already Retired.
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND. The **Retire Question** operation failed! The
            possible reason for failure is that you may have provided the wrong
            question ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
              example:
                id: api.question.retire
                ver: '3.0'
                ts: '2021-02-02T20:22:03ZZ'
                params:
                  resmsgid: da7af22e-bdce-48f0-8743-f50fa6c2cd21
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) does not Exist. | [Invalid Node Id.]:
                    do_1132079390699683841121
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact . In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /question/v1/list:
    post:
      tags:
        - Question APIs
      summary: Question List
      description: |-
        This API is used to get the list of Questions on the Sunbird Platform.
          - The endpoint for **Questions List** is `/question/v1/list`
          - All parameters marked with * are mandatory. You must provide values for these parameters. 
          - Mandatory fields cannot be null or empty.
      operationId: Question List
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. The
            possible media types can be:- 
              - Application/json
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload
           - JSON 
          The body is the used to get the list of questions with help of 
          identifers of the questions
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionListQuestionRequest'
            example:
              request:
                search:
                  identifier:
                    - do_1131687689003827201864
                    - do_09876
        required: true
      responses:
        '200':
          description: SUCCESS. The **Question List** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionListSuccessResponse'
              example:
                id: api.question.list
                ver: '1.0'
                ts: '2021-02-02T19:28:24ZZ'
                params:
                  resmsgid: 8b75d237-1028-4e38-a94a-9ff4ca784d76
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  questions:
                    - ownershipType:
                        - createdBy
                      code: org.sunbird.ccG6ru
                      credentials:
                        enabled: 'No'
                      channel: in.ekstep
                      language:
                        - English
                      mimeType: application/pdf
                      idealScreenSize: normal
                      createdOn: '2020-12-09T12:08:54.913+0000'
                      objectType: Content
                      primaryCategory: Explanation Content
                      contentDisposition: inline
                      lastUpdatedOn: '2020-12-09T12:08:54.913+0000'
                      contentEncoding: identity
                      contentType: Resource
                      dialcodeRequired: 'No'
                      identifier: do_1131687689003827201864
                      lastStatusChangedOn: '2020-12-09T12:08:54.913+0000'
                      audience:
                        - Student
                      os:
                        - All
                      visibility: Default
                      consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                      mediaType: content
                      osId: org.ekstep.quiz.app
                      languageCode:
                        - en
                      version: 2
                      versionKey: '1607515734913'
                      license: CC BY 4.0
                      idealScreenDensity: hdpi
                      framework: NCF
                      createdBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
                      compatibilityLevel: 1
                      name: API DOCUMENTATION CONTENT
                      status: Draft
                    - ownershipType:
                        - createdBy
                      code: org.sunbird.ccG6ru
                      credentials:
                        enabled: 'No'
                      channel: in.ekstep
                      language:
                        - English
                      mimeType: application/pdf
                      idealScreenSize: normal
                      createdOn: '2020-12-09T12:08:54.913+0000'
                      objectType: Content
                      primaryCategory: Explanation Content
                      contentDisposition: inline
                      lastUpdatedOn: '2020-12-09T12:08:54.913+0000'
                      contentEncoding: identity
                      contentType: Resource
                      dialcodeRequired: 'No'
                      identifier: do_1131687689003827201864
                      lastStatusChangedOn: '2020-12-09T12:08:54.913+0000'
                      audience:
                        - Student
                      os:
                        - All
                      visibility: Default
                      consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                      mediaType: content
                      osId: org.ekstep.quiz.app
                      languageCode:
                        - en
                      version: 2
                      versionKey: '1607515734913'
                      license: CC BY 4.0
                      idealScreenDensity: hdpi
                      framework: NCF
                      createdBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
                      compatibilityLevel: 1
                      name: API DOCUMENTATION CONTENT
                      status: Draft
                    - ownershipType:
                        - createdBy
                      code: org.sunbird.ccG6ru
                      credentials:
                        enabled: 'No'
                      channel: in.ekstep
                      language:
                        - English
                      mimeType: application/pdf
                      idealScreenSize: normal
                      createdOn: '2020-12-09T12:08:54.913+0000'
                      objectType: Content
                      primaryCategory: Explanation Content
                      contentDisposition: inline
                      lastUpdatedOn: '2020-12-09T12:08:54.913+0000'
                      contentEncoding: identity
                      contentType: Resource
                      dialcodeRequired: 'No'
                      identifier: do_1131687689003827201864
                      lastStatusChangedOn: '2020-12-09T12:08:54.913+0000'
                      audience:
                        - Student
                      os:
                        - All
                      visibility: Default
                      consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                      mediaType: content
                      osId: org.ekstep.quiz.app
                      languageCode:
                        - en
                      version: 2
                      versionKey: '1607515734913'
                      license: CC BY 4.0
                      idealScreenDensity: hdpi
                      framework: NCF
                      createdBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
                      compatibilityLevel: 1
                      name: API DOCUMENTATION CONTENT
                      status: Draft
                count: 3
        '400':
          description: >-
            'BAD REQUEST. The **Question List** operation failed. You may have
            missed providing input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
              examples:
                a:
                  summary: Error Response - Missing identifer
                  value:
                    id: api.question.list
                    ver: '1.0'
                    ts: '2021-02-02T19:41:56ZZ'
                    params:
                      resmsgid: 86481a2f-513e-4fd4-a1dd-46a7ebcb1e65
                      msgid: null
                      err: CLIENT_ERROR
                      status: failed
                      errmsg: Either identifier is missing or it is not list type
                    responseCode: CLIENT_ERROR
                    result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionErrorResponse'
              example:
                id: api.question.list
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /questionset/v1/create:
    post:
      tags:
        - QuestionSet APIs
      summary: Create QuestionSet
      description: >-
        This API is associated with creating QuestionSet on the Sunbird
        Platform.
          - The endpoint for **Create QuestionSet** is `/questionset/v1/create`
          - It points to assessment-service - `questionset/v4/create`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      operationId: Create QuestionSet
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload
           - JSON 
          The body is the representation of the resource object for creating
          questionset (an array of parameters which describes the question)  -
          Click the link to refer to supported
          [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.7.0/schemas/questionset/1.0/schema.json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionCreateQuestionsetRequest'
            example:
              request:
                questionset:
                  code: finemanfine
                  navigationMode: linear
                  allowSkip: 'Yes'
                  requiresSubmit: 'Yes'
                  shuffle: 'Yes'
                  showFeedback: 'Yes'
                  showSolutions: 'Yes'
                  summaryType: Complete
                  mimeType: application/vnd.sunbird.questionset
                  primaryCategory: Practice Question Set
                  name: Test Question Set
                  visibility: Default
                  description: Questionset description
        required: true
      responses:
        '200':
          description: SUCCESS. The **Create QuestionSet** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetCreateSuccessResponse'
              example:
                id: api.questionset.create
                ver: '3.0'
                ts: '2021-02-03T08:17:28ZZ'
                params:
                  resmsgid: 4c45a5e2-c3b4-47c1-95a2-3a31f7e7c1ca
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_113208291312132096114
                  versionKey: '1612340248069'
        '400':
          description: >-
            'BAD REQUEST. The **Create QuestionSet** operation failed. You may
            have missed input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              examples:
                a:
                  summary: Error Response - Invalid MimeType
                  value:
                    id: api.questionset.create
                    ver: '3.0'
                    ts: '2021-02-03T08:22:49ZZ'
                    params:
                      resmsgid: 6cc7bb1c-330e-4da5-9075-1ac69cddf225
                      msgid: null
                      err: CLIENT_ERROR
                      status: failed
                      errmsg: Validation Errors
                    responseCode: CLIENT_ERROR
                    result:
                      messages:
                        - >-
                          Metadata mimeType should be one of:
                          [application/vnd.sunbird.questionset]
                b:
                  summary: Error Response - Primary Category Not Set
                  value:
                    id: api.questionset.create
                    ver: '3.0'
                    ts: '2021-02-03T08:23:40ZZ'
                    params:
                      resmsgid: d25ad9ab-5863-4e1b-95f3-2ef6645642de
                      msgid: null
                      err: CLIENT_ERROR
                      status: failed
                      errmsg: Validation Errors
                    responseCode: CLIENT_ERROR
                    result:
                      messages:
                        - Required Metadata primaryCategory not set
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              example:
                id: api.questionset.create
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/questionset/v1/update/{QuestionSet_Id}':
    patch:
      description: >-
        This API is associated with updating questionset on the Sunbird Platform
        .
          - **_/Update/_** endpoint executes the "Update QuestionSet" request based on parameters provided as metadata in the request body.
          - The endpoint for **Update QuestionSet** is `/questionset/v1/update`
          - It points to assessment-service - `/questionset/v4/update`
          - {...}refers to a section of update endpoint URL path that needs to be replaced with the appropriate ID.
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Update QuestionSet
      tags:
        - QuestionSet APIs
      operationId: Update QuestionSet
      parameters:
        - in: path
          name: QuestionSet_Id
          required: true
          description: Append a valid QuestionSet Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All question APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionUpdateQuestionsetRequest'
            example:
              request:
                questionset:
                  description: Updated description
                  versionKey: '1612295414767'
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the questionset to be updated.
            - Click the link to refer to the supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/questionset/1.0/schema.json)
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation. The **Update Question Set** operation was
            successfuly executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetCreateSuccessResponse'
              example:
                id: api.questionset.update
                ver: '3.0'
                ts: '2021-02-02T19:55:07ZZ'
                params:
                  resmsgid: 9d9d4824-cc40-4ac7-a3d6-6da61c0240e9
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_113207924037746688110
                  versionKey: '1612295707004'
        '400':
          description: >-
            BAD REQUEST. The 'Update QuestionSet' operation failed ! The
            possible reason for failure is that you may have missed providing
            input for a mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              example:
                id: api.questionset.update
                ver: '3.0'
                ts: '2021-02-02T19:56:20ZZ'
                params:
                  resmsgid: fcfcf6d6-84f1-43f5-b573-c3b6cf69ef53
                  msgid: null
                  err: CLIENT_ERROR
                  status: failed
                  errmsg: Invalid version Key
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,The **Update Question Set** operation failed !The
            possible reason for failure is that you may have provided wrong
            question ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              example:
                id: api.questionset.update
                ver: '3.0'
                ts: '2021-02-02T19:57:35ZZ'
                params:
                  resmsgid: 2b139ee9-f091-4cca-b466-32af45f49a65
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) does not exist. | [Invalid Node Id.]:
                    do_1132079240377466881101
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact info@sunbird.org. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/questionset/v1/read/{QuestionSet_Id}':
    get:
      description: >-
        This API is associated with viewing and reading out the questionset on
        the Sunbird Platform .
          - The **_/read/{QuestionSet_Id}_** endpoint executes request for fetching the question to be viewed and read.
          - The endpoint for **Read QuestionSet** is `/questionset/v1/read`
          - It points to assessment-service - `/questionset/v4/read`
          - {...}refers to a section of read endpoint URL path that needs to be replaced by appropriate Id.
          - You need to provide a valid QuestionSet Id value in {QuestionSet_Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Read QuestionSet
      tags:
        - QuestionSet APIs
      operationId: Read QuestionSet
      parameters:
        - in: path
          name: QuestionSet_Id
          required: true
          description: Append a valid Question Set Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation.The "Read Question Set" operation was
            successfully executed. Click link to refer to the
            [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/questionset/1.0/schema.json)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetReadSuccessResponse'
              example:
                id: api.questionset.read
                ver: '3.0'
                ts: '2021-02-03T09:23:51ZZ'
                params:
                  resmsgid: e9e05900-793b-4231-af75-ffa1a7a0b4c6
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  questionset:
                    code: finemanfine
                    allowSkip: 'Yes'
                    containsUserData: 'No'
                    description: hey
                    language:
                      - English
                    mimeType: application/vnd.sunbird.questionset
                    showHints: 'No'
                    createdOn: '2021-02-03T09:23:34.060+0000'
                    objectType: QuestionSet
                    primaryCategory: Practice Question Set
                    contentDisposition: inline
                    lastUpdatedOn: '2021-02-03T09:23:34.060+0000'
                    contentEncoding: gzip
                    showSolutions: 'Yes'
                    allowAnonymousAccess: 'Yes'
                    identifier: do_113208323801554944120
                    lastStatusChangedOn: '2021-02-03T09:23:34.060+0000'
                    requiresSubmit: 'Yes'
                    visibility: Default
                    showTimer: 'No'
                    summaryType: Complete
                    consumerId: fa13b438-8a3d-41b1-8278-33b0c50210e4
                    setType: materialised
                    languageCode:
                      - en
                    version: 1
                    versionKey: '1612344214060'
                    showFeedback: 'Yes'
                    license: CC BY 4.0
                    compatibilityLevel: 4
                    name: Test Question Set
                    navigationMode: linear
                    shuffle: 'Yes'
                    status: Draft
        '404':
          description: >-
            RESOURCE NOT FOUND,The **Read Question Set** operation failed! The
            possible reason for failure is that you may have provided wrong
            question set ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              example:
                id: api.questionset.read
                ver: '3.0'
                ts: '2021-02-02T20:01:13ZZ'
                params:
                  resmsgid: 815b341a-7984-45a1-b1f9-4335da18985e
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) does not exist. | [Invalid Node Id.]:
                    do_1132083238015549441201
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact info@sunbird.org. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/questionset/v1/review/{QuestionSet_Id}':
    post:
      description: >-
        This API is associated with submitting the question set for review  on
        the Sunbird Platform .
          - The**_/review/{QuestionSet_Id}_** endpoint executes "Submit for Review" request based on parameters provided as metadata in the request body.
          - The endpoint for **Review QuestionSet** is `/questionset/v1/review`
          - It points to assessment-service - `/questionset/v4/review`
          - {...}refers to a section of the review endpoint URL path that needs to be replaced by appropriate ID.
          - You need to provide a valid QuestionSet Id value in {QuestionSet_Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Review QuestionSet
      tags:
        - QuestionSet APIs
      operationId: Review QuestionSet
      parameters:
        - in: path
          name: QuestionSet_Id
          required: true
          description: Append a valid QuestionSet ID To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the question set to be sent for review.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation. The ** Review Question Set** operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetCreateSuccessResponse'
              example:
                id: api.questionset.review
                ver: '3.0'
                ts: '2021-02-03T09:30:21ZZ'
                params:
                  resmsgid: 679a458f-cd12-4dee-a6b4-5aea11fbe426
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_113208323801554944120
                  versionKey: '1612344214060'
        '400':
          description: >-
            BAD REQUEST. The 'Review Question Set' operation failed ! The
            possible reason for failure is that you may have missed providing
            input for a mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              example:
                id: api.questionset.review
                ver: '3.0'
                ts: '2021-02-03T09:33:32ZZ'
                params:
                  resmsgid: 95670d2a-764c-489f-bf27-b4acedc4b465
                  msgid: null
                  err: ERR_QUESTION_SET_REVIEW
                  status: failed
                  errmsg: >-
                    A question set with status other than Draft can't be sent
                    for review.
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,The **Send Question Set for Review** operation
            failed! The possible reason for failure is that you may have
            provided wrong question set ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              example:
                id: api.questionset.review
                ver: '3.0'
                ts: '2021-02-02T20:07:24ZZ'
                params:
                  resmsgid: 852b878c-a607-4d72-9458-6239e36adb9e
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) does not exist. | [Invalid Node Id.]:
                    do_1132079319215554561111
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! We track
            these errors automatically, but if the problem persists feel free to
            contact info@sunbird.org. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/questionset/v1/reject/{QuestionSet_Id}':
    post:
      description: >-
        This API is associated with rejecting the Question Set Review  on the
        Sunbird Platform .
          - The**_/reject/{QuestionSet_Id}_** endpoint executes "Rejecting QuestionSet for Review" request based on parameters provided as metadata in the request body.
          - The endpoint for **Reject QuestionSet Review** is `/questionset/v1/reject`
          - It points to assessment-service - `/questionset/v4/reject`
          - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.
          - You need to provide a valid QuestionSet Id value in {QuestionSet_Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Reject QuestionSet
      tags:
        - QuestionSet APIs
      operationId: Reject QuestionSet
      parameters:
        - in: path
          name: QuestionSet_Id
          required: true
          description: ppend a valid QuestionSet Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify
            theauthorization key received from the administrator when placing
            the request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the questionset to be sent for review.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation. Reject QuestionSet review operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetCreateSuccessResponse'
              example:
                id: api.questionset.reject
                ver: '3.0'
                ts: '2021-02-03T12:11:35ZZ'
                params:
                  resmsgid: a505a723-616f-4e3f-9a52-2f0d9924f732
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_113208406116417536122
                  versionKey: '1612354279918'
        '400':
          description: >-
            BAD REQUEST. The 'Review Reject QuestionSet' operation failed ! The
            possible reason for failure is that you may have missed providing
            input for a mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              example:
                id: api.questionset.reject
                ver: '3.0'
                ts: '2021-02-03T12:16:59ZZ'
                params:
                  resmsgid: cbcaa290-e132-47e6-b4d9-94212037195d
                  msgid: null
                  err: ERR_QUESTION_SET_REJECT
                  status: failed
                  errmsg: >-
                    QuestionSet is not in 'Review' state for identifier:
                    do_113208406116417536122
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**QuestionSet Send for Review Reject** operation
            failed !The possible reason for failure is that you may have
            provided wrong questionset id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              example:
                id: api.questionset.reject
                ver: '3.0'
                ts: '2021-02-03T12:15:36ZZ'
                params:
                  resmsgid: 6fc0bd55-e99e-4ae1-80e2-7275458258ab
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_1132084061164175361221
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! We track
            these errors automatically, but if the problem persists feel free to
            contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/questionset/v1/publish/{QuestionSet_Id}':
    post:
      description: >-
        This API is associated with publishing questionset on the Sunbird
        Platform .
          - **_/publish/_** endpoint executes the "Publish QuestionSet" request based on parameters provided as metadata in the request body.
          - The endpoint for **Publish QuestionSet** is `/questionset/v1/publish`
          - It points to assessment-service - `/questionset/v4/publish`
          -  {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Publish QuestionSet
      tags:
        - QuestionSet APIs
      operationId: Publish QuestionSet
      parameters:
        - in: path
          name: QuestionSet_Id
          required: true
          description: QuestionSet Id to be published
          schema:
            type: string
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: Authorizing user in order to grant access.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the questionset to be published.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation.**QuestionSet publish** operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetPublishSuccessResponse'
              example:
                id: api.questionset.publish
                ver: '3.0'
                ts: '2021-02-03T09:39:14ZZ'
                params:
                  resmsgid: 62f7e310-39e1-4287-bc9f-f8e6ac5f5bd3
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  message: Question is successfully sent for Publish
                  identifier: do_113208323801554944120
        '404':
          description: >-
            RESOURCE NOT FOUND,**QuestionSet Send for publish** operation failed
            !The possible reason for failure is that you may have provided wrong
            questionset id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              example:
                id: api.questionset.publish
                ver: '3.0'
                ts: '2021-02-03T09:40:03ZZ'
                params:
                  resmsgid: 5973c551-857e-40a4-8ebf-c70af953aeba
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_1132083238015549441201
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! We track
            these errors automatically, but if the problem persists feel free to
            contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/questionset/v1/retire/{QuestionSet_Id}':
    delete:
      description: >-
        This API is associated with retiring QuestionSet on the Sunbird Platform
        .
          - The **_/retire/{QuestionSet_Id}_** endpoint executes  "Retire QuestionSet" request based on QuestionSet_Id to delete the specific QuestionSet.'
          - The endpoint for **Retire QuestionSet** is `/questionset/v1/retire`
          - It points to assessment-service - `/questionset/v4/retire`
          - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters.
          - Mandatory fields cannot be null or empty.
      summary: Retire QuestionSet
      tags:
        - QuestionSet APIs
      operationId: Retire QuestionSet
      parameters:
        - in: path
          name: QuestionSet_Id
          required: true
          description: Please append a valid QuestionSet Id To the Request URL
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All questionset APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation.**QuestionSet deletion** operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetCreateSuccessResponse'
              example:
                id: api.questionset.retire
                ver: '3.0'
                ts: '2021-02-02T20:20:56ZZ'
                params:
                  resmsgid: 98c9f97d-f9d6-4da9-be88-2852294c2aaa
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_113207939069968384112
                  versionKey: '1612297249754'
        '400':
          description: ERR QUESTIONSET RETIRE! QuestionSet is already retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              example:
                id: api.questionset.retire
                ver: '3.0'
                ts: '2021-02-02T20:21:26ZZ'
                params:
                  resmsgid: 0608b59d-dfb9-4c0e-807f-1a19c9a163fe
                  msgid: null
                  err: ERR_QUESTION_RETIRE
                  status: failed
                  errmsg: >-
                    QuestionSet with identifier : do_113207939069968384112 is
                    already Retired.
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**QuestionSet Send for Retire** operation failed!
            The possible reason for failure is that you may have provided wrong
            questionset id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              example:
                id: api.questionset.retire
                ver: '3.0'
                ts: '2021-02-02T20:22:03ZZ'
                params:
                  resmsgid: da7af22e-bdce-48f0-8743-f50fa6c2cd21
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_1132079390699683841121
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /questionset/v1/hierarchy/update:
    patch:
      description: >-
        This API is associated with updating questionset hierarchy on the
        Sunbird Platform .
          - **_/Hierarchy Update/_** endpoint executes the "Update Hierarchy QuestionSet" request based on parameters provided as metadata in the request body.
          - The endpoint for **Update Hierarchy QuestionSet** is `questionset/v1/hierarchy/update`
          - It points to assessment-service - `questionset/v4/hierarchy/update`
          - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Update Hierarchy QuestionSet
      tags:
        - QuestionSet APIs
      operationId: Update Hierarchy QuestionSet
      parameters:
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All question APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/questionUpdateHierarchyQuestionsetRequest'
            example:
              request:
                data:
                  nodesModified:
                    do_113208431570984960123:
                      metadata:
                        description: updated_code_of_root
                      root: true
                      isNew: false
                    QS_Visibility_Parent:
                      metadata:
                        mimeType: application/vnd.sunbird.questionset
                        name: QS_Visibility_Parent
                        description: QS_Visibility_Parent
                        primaryCategory: Practice Question Set
                      root: false
                      objectType: QuestionSet
                      isNew: true
                    Q_Visibility_Parent:
                      metadata:
                        name: MCQ
                        body: >-
                          <div class="question-body"><div
                          class="mcq-title"><p>color of sky is?</p></div><div
                          data-choice-interaction="response1"
                          class="mcq-vertical"></div></div>
                        qType: MCQ
                        mimeType: application/vnd.sunbird.question
                        primaryCategory: Multiple Choice Question
                      root: false
                      objectType: Question
                      isNew: true
                  hierarchy:
                    do_113208431570984960123:
                      children:
                        - QS_Visibility_Parent
                      root: true
                    QS_Visibility_Parent:
                      children:
                        - Q_Visibility_Parent
                      root: false
        description: |-
          The body refers to the format of the request.
            - The body contains metadata and hierarchy about the questionset to be updated.
            - Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/questionset/1.0/schema.json)
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation.QuestionSet update hierarchy operation was
            successfuly executed.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/questionQuestionsetUpdateHierarchySuccessResponse
              example:
                id: api.questionset.hierarchy.update
                ver: '3.0'
                ts: '2021-02-03T13:06:12ZZ'
                params:
                  resmsgid: 221f9cdb-c220-4d3f-a579-4e7b82facf89
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_113208431570984960123
                  identifiers:
                    QS_Visibility_Parent: do_113208433229889536126
                    Q_Visibility_Parent: do_113208433229873152124
        '400':
          description: >-
            BAD REQUEST. The 'Update Hierarchy QuestionSet' operation failed !
            The possible reason for failure is that you may have missed
            providing input for a mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              examples:
                a:
                  summary: Error Response - Invalid ObjectType in Hierarchy
                  value:
                    id: api.questionset.hierarchy.update
                    ver: '3.0'
                    ts: '2021-02-03T13:11:14ZZ'
                    params:
                      resmsgid: 04e218fc-76bc-4fd3-b98d-5ed947a30b8b
                      msgid: null
                      err: ERR_QS_UPDATE_HIERARCHY
                      status: failed
                      errmsg: Question cannot have children in hierarchy
                    responseCode: CLIENT_ERROR
                    result:
                      messages: null
                b:
                  summary: >-
                    Error Response - ObjectType mandatory field in nodesModified
                    objects
                  value:
                    id: api.questionset.hierarchy.update
                    ver: '3.0'
                    ts: '2021-02-03T13:25:27ZZ'
                    params:
                      resmsgid: 69f90d05-30f5-427b-8e7f-c44cbbc337d0
                      msgid: null
                      err: ERR_UPDATE_QS_HIERARCHY
                      status: failed
                      errmsg: >-
                        Object Type is mandatory for creation of node with id:
                        QS_Visibility_Parent
                    responseCode: CLIENT_ERROR
                    result:
                      messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**QuestionSet Update Hierarchy** operation failed
            !The possible reason for failure is that you may have provided wrong
            questionset id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              example:
                id: api.questionset.hierarchy.update
                ver: '3.0'
                ts: '2021-02-03T13:27:12ZZ'
                params:
                  resmsgid: 0fbe77de-a612-4406-bcd2-a63de5b29b6d
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_1132084315709849601231
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/questionset/v1/hierarchy/{QuestionSet_Id}':
    get:
      description: >-
        This API is associated with viewing and reading out the questionset
        hierarchy on the Sunbird Platform .
          - The **_/hierarchy/{QuestionSet_Id}_** endpoint executes request for fetching the questionset to be viewed and read hierarchy.
          - The endpoint for **Read QuestionSet Hierarchy** is `/questionset/v1/hierarchy`
          - It points to assessment-service - `/questionset/v4/hierarchy`
          - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.
          - You need to provide a valid QuestionSet Id value in {QuestionSet_Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Read QuestionSet Hierarchy
      tags:
        - QuestionSet APIs
      operationId: Read QuestionSet Hierarchy
      parameters:
        - in: path
          name: QuestionSet_Id
          required: true
          description: Please append a valid QuestionSet Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Read QuestionSet Hierarchy" operation was
            successfully executed. For all possible metadata, please
              [refer](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/questionset/1.0/schema.json)
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/questionQuestionsetReadHierarchySuccessResponse
              examples:
                a:
                  summary: Read Success Response - Draft Version of Hierarchy
                  value:
                    id: api.questionset.hierarchy.get
                    ver: '3.0'
                    ts: '2021-02-03T13:55:21ZZ'
                    params:
                      resmsgid: b810c4fd-231e-4b26-9be6-6345c49bde14
                      msgid: null
                      err: null
                      status: successful
                      errmsg: null
                    responseCode: OK
                    result:
                      questionSet:
                        code: finemanfine
                        allowSkip: 'Yes'
                        containsUserData: 'No'
                        description: updated_code_of_root
                        language:
                          - English
                        mimeType: application/vnd.sunbird.questionset
                        showHints: 'No'
                        createdOn: '2021-02-03T13:02:49.507+0000'
                        objectType: QuestionSet
                        primaryCategory: Practice Question Set
                        children:
                          - parent: do_113208431570984960123
                            code: QS_Visibility_Parent
                            allowSkip: 'Yes'
                            containsUserData: 'No'
                            description: QS_Visibility_Parent
                            language:
                              - English
                            mimeType: application/vnd.sunbird.questionset
                            showHints: 'No'
                            createdOn: '2021-02-03T13:47:27.074+0000'
                            objectType: QuestionSet
                            primaryCategory: Practice Question Set
                            children:
                              - parent: do_113208453505630208144
                                code: Q_Visibility_Parent
                                language:
                                  - English
                                mimeType: application/vnd.sunbird.question
                                createdOn: '2021-02-03T13:47:27.072+0000'
                                objectType: Question
                                primaryCategory: Multiple Choice Question
                                contentDisposition: inline
                                lastUpdatedOn: '2021-02-03T13:47:27.072+0000'
                                contentEncoding: gzip
                                showSolutions: 'No'
                                allowAnonymousAccess: 'Yes'
                                identifier: do_113208453505613824142
                                lastStatusChangedOn: '2021-02-03T13:47:27.072+0000'
                                visibility: Parent
                                showTimer: 'No'
                                index: 1
                                qType: MCQ
                                languageCode:
                                  - en
                                version: 1
                                versionKey: '1612360047074'
                                showFeedback: 'No'
                                license: CC BY 4.0
                                depth: 2
                                compatibilityLevel: 4
                                name: MCQ
                                status: Draft
                            contentDisposition: inline
                            lastUpdatedOn: '2021-02-03T13:47:27.074+0000'
                            contentEncoding: gzip
                            showSolutions: 'No'
                            allowAnonymousAccess: 'Yes'
                            identifier: do_113208453505630208144
                            lastStatusChangedOn: '2021-02-03T13:47:27.074+0000'
                            requiresSubmit: 'No'
                            visibility: Parent
                            showTimer: 'No'
                            index: 1
                            setType: materialised
                            languageCode:
                              - en
                            version: 1
                            versionKey: '1612360047074'
                            showFeedback: 'No'
                            license: CC BY 4.0
                            depth: 1
                            compatibilityLevel: 4
                            name: QS_Visibility_Parent
                            navigationMode: non-linear
                            shuffle: 'Yes'
                            status: Draft
                        contentDisposition: inline
                        lastUpdatedOn: '2021-02-03T13:47:27.108+0000'
                        contentEncoding: gzip
                        showSolutions: 'Yes'
                        allowAnonymousAccess: 'Yes'
                        identifier: do_113208431570984960123
                        lastStatusChangedOn: '2021-02-03T13:02:49.507+0000'
                        requiresSubmit: 'Yes'
                        visibility: Default
                        showTimer: 'No'
                        summaryType: Complete
                        consumerId: fa13b438-8a3d-41b1-8278-33b0c50210e4
                        childNodes:
                          - do_113208453505613824142
                          - do_113208453505630208144
                        setType: materialised
                        languageCode:
                          - en
                        version: 1
                        versionKey: '1612360047108'
                        showFeedback: 'Yes'
                        license: CC BY 4.0
                        depth: 0
                        compatibilityLevel: 4
                        name: Test Question Set
                        navigationMode: linear
                        shuffle: 'Yes'
                        status: Draft
                b:
                  summary: Read Success Response - Live Version of Hierarchy
                  value:
                    id: api.questionset.hierarchy.get
                    ver: '3.0'
                    ts: '2021-02-03T14:04:59ZZ'
                    params:
                      resmsgid: 721f2a8d-1d2e-4e0c-b297-42f3944b4d34
                      msgid: null
                      err: null
                      status: successful
                      errmsg: null
                    responseCode: OK
                    result:
                      questionSet:
                        lastStatusChangedOn: '2021-01-28T09:42:55.557+0000'
                        children:
                          - lastStatusChangedOn: '2021-01-28T09:47:40.311+0000'
                            parent: do_113204086583754752115
                            name: Multiple Choice
                            createdOn: '2021-01-28T09:47:40.311+0000'
                            lastUpdatedOn: '2021-01-28T09:47:40.313+0000'
                            showTimer: 'No'
                            IL_FUNC_OBJECT_TYPE: Question
                            compatibilityLevel: 4
                            primaryCategory: Multiple Choice Question
                            IL_SYS_NODE_TYPE: DATA_NODE
                            interactionTypes:
                              - choice
                            versionKey: '1611827260313'
                            mimeType: application/vnd.sunbird.question
                            code: UUID
                            license: CC BY 4.0
                            version: 1
                            templateId: mcq-vertical
                            language:
                              - English
                            showFeedback: 'No'
                            objectType: Question
                            status: Draft
                            contentEncoding: gzip
                            depth: 1
                            IL_UNIQUE_ID: do_113204088916467712116
                            allowAnonymousAccess: 'Yes'
                            contentDisposition: inline
                            visibility: Parent
                            qType: MCQ
                            showSolutions: 'No'
                            index: 1
                          - lastStatusChangedOn: '2021-01-28T09:48:50.745+0000'
                            parent: do_113204086583754752115
                            name: Subjective
                            createdOn: '2021-01-28T09:48:50.745+0000'
                            lastUpdatedOn: '2021-01-28T09:48:50.747+0000'
                            showTimer: 'No'
                            IL_FUNC_OBJECT_TYPE: Question
                            compatibilityLevel: 4
                            primaryCategory: Subjective Question
                            IL_SYS_NODE_TYPE: DATA_NODE
                            versionKey: '1611827330747'
                            mimeType: application/vnd.sunbird.question
                            code: UUID
                            license: CC BY 4.0
                            version: 1
                            language:
                              - English
                            showFeedback: 'No'
                            objectType: Question
                            status: Draft
                            contentEncoding: gzip
                            depth: 1
                            IL_UNIQUE_ID: do_113204089493463040118
                            allowAnonymousAccess: 'Yes'
                            contentDisposition: inline
                            visibility: Parent
                            qType: SA
                            showSolutions: 'No'
                            index: 2
                        name: Test Question Set
                        navigationMode: linear
                        createdOn: '2021-01-28T09:42:55.557+0000'
                        pdfUrl: >-
                          https://dockstorage.blob.core.windows.net/sunbird-content-dock/questionset/do_113204086583754752115/do_113204086583754752115_pdf_1612191619805.pdf
                        lastUpdatedOn: '2021-01-28T09:48:50.815+0000'
                        showTimer: 'No'
                        IL_FUNC_OBJECT_TYPE: QuestionSet
                        publishError: null
                        identifier: do_113204086583754752115
                        description: hey
                        containsUserData: 'No'
                        allowSkip: 'Yes'
                        compatibilityLevel: 5
                        primaryCategory: Practice Question Set
                        setType: materialised
                        IL_SYS_NODE_TYPE: DATA_NODE
                        downloadUrl: >-
                          https://dockstorage.blob.core.windows.net/sunbird-content-dock/questionset/do_113204086583754752115/test-question-set_1612191618716_do_113204086583754752115_1_SPINE.ecar
                        versionKey: '1611827330815'
                        mimeType: application/vnd.sunbird.questionset
                        code: finemanfine
                        license: CC BY 4.0
                        version: 1
                        showHints: 'No'
                        summaryType: Complete
                        language:
                          - English
                        showFeedback: 'Yes'
                        lastPublishedOn: '2021-02-01T15:00:18.706+0000'
                        objectType: QuestionSet
                        status: Live
                        requiresSubmit: 'Yes'
                        shuffle: 'Yes'
                        contentEncoding: gzip
                        depth: 0
                        consumerId: fa13b438-8a3d-41b1-8278-33b0c50210e4
                        IL_UNIQUE_ID: do_113204086583754752115
                        allowAnonymousAccess: 'Yes'
                        contentDisposition: inline
                        previewUrl: >-
                          https://dockstorage.blob.core.windows.net/sunbird-content-dock/questionset/do_113204086583754752115/do_113204086583754752115_html_1612191618801.html
                        childNodes:
                          - do_113204088916467712116
                          - do_113204089493463040118
                        visibility: Default
                        showSolutions: 'Yes'
                        variants:
                          spine: >-
                            https://dockstorage.blob.core.windows.net/sunbird-content-dock/questionset/do_113204086583754752115/test-question-set_1612191618716_do_113204086583754752115_1_SPINE.ecar
                          online: >-
                            https://dockstorage.blob.core.windows.net/sunbird-content-dock/questionset/do_113204086583754752115/test-question-set_1612191618770_do_113204086583754752115_1_ONLINE.ecar
                        pkgVersion: 1
        '404':
          description: >-
            RESOURCE NOT FOUND,**QuestionSet Read Hierarchy** operation failed
            !The possible reason for failure is that you may have provided wrong
            question id or the questionset is not published.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
              example:
                id: api.questionset.hierarchy.get
                ver: '3.0'
                ts: '2021-02-03T13:56:54ZZ'
                params:
                  resmsgid: db5bcf74-d151-46f5-85b1-8512053923cb
                  msgid: null
                  err: RESOURCE_NOT_FOUND
                  status: failed
                  errmsg: rootId do_113208431570984960123 does not exist
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/questionQuestionsetErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /license/v3/create:
    post:
      tags:
        - License APIs
      summary: Create License
      description: |-
        This API is associated with creating License on the Sunbird Platform.
          - The endpoint for **Create License** is `/license/v3/create`
          - It points to content-service - `/license/v3/create`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      operationId: Create License
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:

            - application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body is the representation of the resource object for creating
          license (an array of parameters which describes the license). The body
          parameter refers to the format of the request, the request body
          (payload) takes the following media types to make the payload:

          - JSON

          - Please refer for supported
          [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/license/1.0/schema.json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/licenseCreateLicenseRequest'
            example:
              request:
                license:
                  name: CC BY 4.0
                  url: www.url.com
        required: true
      responses:
        '200':
          description: SUCCESS. The **Create License** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licenseLicenseCreateSuccessResponse'
              example:
                id: api.license.create
                ver: '3.0'
                ts: '2020-12-18T06:48:10ZZ'
                params:
                  resmsgid: 5eb2e0f9-e27c-4d38-8353-e1720b0ed78a
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: cc-by-4.0
                  node_id: cc-by-4.0
        '400':
          description: >-
            BAD REQUEST. The **Create License** operation failed. You may have
            missed input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licenseLicenseCreateErrorResponse'
              example:
                id: api.license.create
                ver: '3.0'
                ts: '2020-12-18T08:41:21ZZ'
                params:
                  resmsgid: 0ea93a27-b70d-4587-b280-29564175af86
                  msgid: null
                  err: CLIENT_ERROR
                  status: failed
                  errmsg: Validation Errors
                responseCode: CLIENT_ERROR
                result:
                  messages:
                    - Required Metadata name not set
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licenseLicenseCreateErrorResponse'
              example:
                id: api.license.create
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/license/v3/update/{License_Id}':
    patch:
      description: |-
        This API is associated with updating license on the Sunbird Platform .
          - **_/Update/_** endpoint executes the "Update License" request based on parameters provided as metadata in the request body.
          - The endpoint for **Create License** is `/license/v3/update/{License_Id}`
          - It points to content-service - `/license/v3/update/{License_Id}`
          - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Update License
      tags:
        - License APIs
      operationId: Update License
      parameters:
        - in: path
          name: License_Id
          required: true
          description: Please append a valid License Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All license APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/licenseUpdateLicenserequest'
            example:
              request:
                license:
                  description: Updated description
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the object category to be updated.
            - Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/license/1.0/schema.json)
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation. License  update operation was successfuly
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licenseLicenseCreateSuccessResponse'
              example:
                id: api.license.update
                ver: '3.0'
                ts: '2020-12-18T12:10:36ZZ'
                params:
                  resmsgid: 18fa41bd-7b8e-4f8b-9028-d17879f60cc6
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: standard-youtube-license
                  node_id: standard-youtube-license
        '400':
          description: >-
            BAD REQUEST. The 'Update  License ' operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licenseLicenseCreateErrorResponse'
              example:
                id: api.license.update
                ver: '4.0'
                ts: '2020-12-10T20:27:01ZZ'
                params:
                  resmsgid: 87eb99c6-bc10-406a-a6fe-13651f546ce1
                  msgid: null
                  err: ERROR_RESTRICTED_PROP
                  status: failed
                  errmsg: >-
                    Properties in list [identifier, name, status] are not
                    allowed in request
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**License  Update** operation failed !The
            possible reason for failure is that you may have provided wrong
            license id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licenseLicenseCreateErrorResponse'
              example:
                id: api.license.update
                ver: '3.0'
                ts: '2020-12-18T12:13:57ZZ'
                params:
                  resmsgid: d30ba7f5-916e-422f-8fcc-6a67b80acaea
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    standard-youtube-license1
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licenseLicenseCreateErrorResponse'
              example:
                id: api.license.update
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/license/v3/read/{License_Id}':
    get:
      description: >-
        This API is associated with viewing and reading out the master object
        category on the Sunbird Platform .
          - The **_/read/{License_Id}_** endpoint executes request for fetching the licenses to be viewed and read.
          - The endpoint for **Read License** is `/license/v3/read/{License_Id}`
          - It points to content-service - `/license/v3/read/{License_Id}`
          - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate id.
          - You need to provide a valid object category id value in {License_Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Read License
      tags:
        - License APIs
      operationId: Read License
      parameters:
        - in: path
          name: License_Id
          required: true
          description: Please append a valid License_Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All license APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Read License" operation was successfully
            executed. For all possible metadata, please
            [refer](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/license/1.0/schema.json)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licenseLicenseGetSuccessResponse'
              example:
                id: api.license.read
                ver: '3.0'
                ts: '2020-12-18T12:10:18ZZ'
                params:
                  resmsgid: f7b3b400-cf43-49a3-ab14-a6d1a74e70b7
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  license:
                    identifier: standard-youtube-license
                    lastStatusChangedOn: '2019-11-25T13:34:45.334+0000'
                    apoc_json: '{"batch": true}'
                    url: www.url.com
                    description: This is the standard license of any Youtube content
                    languageCode: []
                    createdOn: '2019-11-25T13:34:45.334+0000'
                    objectType: License
                    apoc_text: APOC
                    versionKey: '1582725030824'
                    name: Standard YouTube License
                    lastUpdatedOn: '2020-02-26T13:50:30.824+0000'
                    apoc_num: 1
                    status: Live
        '404':
          description: >-
            RESOURCE NOT FOUND,**License Read** operation failed !The possible
            reason for failure is that you may have provided wrong license id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licenseLicenseCreateErrorResponse'
              example:
                id: api.license.read
                ver: '3.0'
                ts: '2020-12-18T12:21:51ZZ'
                params:
                  resmsgid: f5b2202a-f349-4488-a7ba-e061cfc2a88b
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    standard-youtube-license1
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licenseLicenseCreateErrorResponse'
              example:
                id: api.license.read
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/license/v3/retire/{License_Id}':
    delete:
      description: |-
        This API is associated with retiring license on the Sunbird Platform .
          - The **_/retire/{License_Id}_** endpoint executes  "Retire License" request based on license Id to delete the specific license.'
          - The endpoint for **Retire License** is `/license/v3/retire/{License_Id}`
          - It points to content-service - `/license/v3/retire/{License_Id}`
          - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters.
          - Mandatory fields cannot be null or empty.
      summary: Retire Content
      tags:
        - License APIs
      operationId: Retire License
      parameters:
        - in: path
          name: License_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation.**License retire operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licenseLicenseRetireSuccessResponse'
              example:
                id: api.license.retire
                ver: '3.0'
                ts: '2020-12-11T12:05:52ZZ'
                params:
                  resmsgid: ebd2655a-a69a-460c-9bcf-0f45f5938fac
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: standard-youtube-license
                  node_id: standard-youtube-license
        '400':
          description: ERR CONTENT RETIRE! License is already retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licenseLicenseCreateErrorResponse'
              example:
                id: api.license.retire
                ver: '3.0'
                ts: '2020-12-11T12:01:24ZZ'
                params:
                  resmsgid: ec20ec05-581c-4559-988a-449f3c5ae698
                  msgid: null
                  err: ERR_CONTENT_RETIRE
                  status: failed
                  errmsg: >-
                    Content with Identifier standard-youtube-license is already
                    Retired.
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**License Retire** operation failed !The possible
            reason for failure is that you may have provided wrong license id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licenseLicenseCreateErrorResponse'
              example:
                id: api.license.retire
                ver: '3.0'
                ts: '2020-12-11T11:56:35ZZ'
                params:
                  resmsgid: d826e808-2866-4603-9b60-0a3130a37128
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    standard-youtube-license1
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/licenseLicenseCreateErrorResponse'
              example:
                id: api.license.retire
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /data/v1/location/create:
    post:
      tags:
        - Location  API(s)
      summary: Create-Location
      description: >-
        This API is used to create a physical location of a user or an
        organization, depending upon the usecase
          
          - The endpoint for **Create location** is `/data/v1/location/create`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Create-Location
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of any Location API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
      requestBody:
        description: |-
          The body refers to the format of the request.
            - It represents the set of parameters to be passed for creating a location
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/locationapiCreate-Location-Request'
            examples:
              a:
                summary: Create location
                value:
                  request:
                    code: APCODE
                    name: APSTATE1
                    type: state
              b:
                summary: Create location with 400 error
                value:
                  request:
                    code: APCODE
                    name: APSTATE2
                    type: state
        required: true
      responses:
        '200':
          description: SUCCESS. The **Create location** operation was successful!
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 20 Nov 2020 07:09:36 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 289
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 66
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 8763
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 119
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/locationapiCreate_Location_With_Success_Response
              example:
                id: api.location.create
                ver: v1
                ts: '2020-11-20 07:09:36:098+0000'
                params:
                  resmsgid: null
                  msgid: f794b084-d4e9-4ce3-9795-82c88ada6b66
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
                  id: 6824e3d3-5512-4344-a481-7bac011edaa8
        '400':
          description: >-
            BAD REQUEST,**Create location** operation failed !The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/locationapiDelete-Location_With_Invalid_locationId_Error
              example:
                id: api.location.create
                ver: v1
                ts: '2020-11-20 11:58:42:438+0000'
                params:
                  resmsgid: null
                  msgid: 80755429-318c-47df-82a6-282a72e52a7b
                  err: ALREADY_EXISTS
                  status: ALREADY_EXISTS
                  errmsg: >-
                    A code with APCODE already exists. Please retry with a
                    unique value.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locationapi500_Server_Error'
              example:
                id: api.location.create
                ver: v1
                ts: '2020-11-19 15:58:19:713+0530'
                params:
                  resmsgid: null
                  msgid: c9bd2899-0c46-4bec-8ef0-759e352d9363
                  err: null
                  status: SERVER_ERROR
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  /data/v1/location/search:
    post:
      tags:
        - Location  API(s)
      summary: Search-Location
      description: >-
        This API is associated with fetching the location data based on the
        criterias specified in the request body.
           - The endpoint for **Search location** is `/data/v1/location/search`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Search-Location
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of any Location API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the location to be searched
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/locationapiSearch-Location-Request'
            examples:
              a:
                summary: Search with location code
                value:
                  request:
                    filters:
                      code: APCODE1
              b:
                summary: Search with location type and limits
                value:
                  request:
                    filters:
                      type: state
                    limit: 5
        required: true
      responses:
        '200':
          description: SUCCESS. The **Search location** operation was successful!
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 20 Nov 2020 07:20:43 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 393
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29995
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 170
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 18
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 36
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
            X-Proxy-Cache:
              content:
                text/plain:
                  schema:
                    type: string
                  example: MISS
            X-Proxy-Cache-Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 20 Nov 2020 07:20:43 GMT'
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/locationapiSearch_Location_With_Success_Response
              example:
                id: api.location.search
                ver: v1
                ts: '2020-11-20 07:20:43:770+0000'
                params:
                  resmsgid: null
                  msgid: 2d12c998-96c4-43d6-8937-4ebbb8b68d02
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response:
                    - identifier: 6824e3d3-5512-4344-a481-7bac011edaa8
                      code: APCODE
                      name: APSTATE
                      id: 6824e3d3-5512-4344-a481-7bac011edaa8
                      type: state
                  count: 1
        '400':
          description: >-
            RESOURCE NOT FOUND.**Search Location ** operation failed !The
            possible reason for the failure is that requested resource could not
            be found
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/locationapiDelete-Location_With_Invalid_locationId_Error
              example:
                id: api.location.search
                ver: v1
                ts: '2020-11-20 11:58:42:438+0000'
                params:
                  resmsgid: null
                  msgid: 80755429-318c-47df-82a6-282a72e52a7b
                  err: RESOURCE_NOT_FOUND
                  status: RESOURCE_NOT_FOUND
                  errmsg: null
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locationapi500_Server_Error'
              example:
                id: api.location.search
                ver: v1
                ts: '2020-11-19 15:58:19:713+0530'
                params:
                  resmsgid: null
                  msgid: c9bd2899-0c46-4bec-8ef0-759e352d9363
                  err: null
                  status: SERVER_ERROR
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  /data/v1/location/update:
    patch:
      tags:
        - Location  API(s)
      summary: Update-Location
      description: >-
        This API is associated with updating the location data based on the
        location id,
           - The endpoint for **Update location** is `/data/v1/location/update`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Update-Location
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of any Location API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
      requestBody:
        description: |-
          The body refers to the format of the request.
            - It represents the set of parameters to be passed for updating a location
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/locationapiUpdate-Location-Request'
            example:
              request:
                name: APSTATE1
                id: e4e60956-277c-439e-bbf7-5c99730341f3
        required: true
      responses:
        '200':
          description: SUCCESS. The **Update location** operation was successful!
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 20 Nov 2020 12:58:11 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 245
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 22
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 25
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 71
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locationapiUpdate_Location_With_Success'
              example:
                id: api.location.update
                ver: v1
                ts: '2020-11-20 12:58:11:871+0000'
                params:
                  resmsgid: null
                  msgid: 9e447000-03f7-43ee-9e3e-342c4a6d5acf
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            RESOURCE NOT FOUND.**Update Location ** operation failed !The
            possible reason for the failure is that requested resource could not
            be found
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/locationapiDelete-Location_With_Invalid_locationId_Error
              example:
                id: api.location.update
                ver: v1
                ts: '2020-11-20 12:12:44:963+0000'
                params:
                  resmsgid: null
                  msgid: a48334fc-fa63-4920-869f-9b6d64962a46
                  err: UPDATE_NOT_ALLOWED
                  status: UPDATE_NOT_ALLOWED
                  errmsg: Update of type is not allowed.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locationapi500_Server_Error'
              example:
                id: api.location.update
                ver: v1
                ts: '2020-11-19 15:58:19:713+0530'
                params:
                  resmsgid: null
                  msgid: c9bd2899-0c46-4bec-8ef0-759e352d9363
                  err: null
                  status: SERVER_ERROR
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  '/data/v1/location/delete/{locationId}':
    delete:
      tags:
        - Location  API(s)
      summary: Delete-Location
      description: >-
        This API is associated with deleting the location data based on the
        location id.
           - The endpoint for **Search location** is `/data/v1/location/delete`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Delete-Location
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of any Location API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: locationId
          in: path
          description: Location id of location
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: SUCCESS. The **Delete location** operation was successful!
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 20 Nov 2020 13:17:44 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 245
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 22
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 728
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 90
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/locationapiDelete_Location_With_Success_Response
              example:
                id: api.location.delete
                ver: v1
                ts: '2020-11-20 13:17:44:741+0000'
                params:
                  resmsgid: null
                  msgid: c549ef41-faa8-4db2-9136-3490a6ee2607
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            - Bad Request - RESOURCE NOT FOUND.**Delete location** operation
            failed !The possible reason for the failure is that requested
            resource could not be found 
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/locationapiDelete-Location_With_Invalid_locationId_Error
              example:
                id: api.location.delete
                ver: v1
                ts: '2020-11-20 13:18:24:671+0000'
                params:
                  resmsgid: null
                  msgid: 134c9776-641a-48be-9e36-102cf18e3175
                  err: INVALID_PARAMETER
                  status: INVALID_PARAMETER
                  errmsg: Please provide valid locationId.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locationapi500_Server_Error'
              example:
                id: api.location.delete
                ver: v1
                ts: '2020-11-19 15:58:19:713+0530'
                params:
                  resmsgid: null
                  msgid: c9bd2899-0c46-4bec-8ef0-759e352d9363
                  err: null
                  status: SERVER_ERROR
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  /org/v1/create:
    post:
      tags:
        - Org APIs
      summary: Create a new Organisation
      description: |-
        This API is for creation of a new Organisation on the Sunbird Platform.
          - The endpoint for **Create a new Organisation** is `/org/v1/create`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Create
      parameters:
        - name: ts
          in: header
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          schema:
            type: string
      requestBody:
        description: The body contains metadata about the new Organisation to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgapiOrgCreateRequest'
        required: true
      responses:
        '200':
          description: >-
            OK. Successful operation. The Organisation Create operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgCreateResponse'
        '400':
          description: >-
            CLIENT_ERROR. The Organisation Create operation failed due to bad
            request from client. Possible reasons for failure: Organisation name
            is mandatory. Invalid property <name>. Channel is mandatory for root
            organisation. Either "organisationId" or "provider" and "externalId"
            values are required for the operation. Channel value already used by
            another organisation. Provide different value for channel.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgCreateClientErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. The Organisation Create operation failed due
            to a server error. Possible reasons for failure: Channel
            registration failed.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgCreateErrorResponse'
      security:
        - bearer: []
      x-codegen-request-body-name: Body
  /org/v1/read:
    post:
      tags:
        - Org APIs
      summary: Read Organisation details
      description: >-
        This API is for viewing details of an existing Organisation on the
        Sunbird Platform.
          - The endpoint for **Read Organisation details** is `/org/v1/read`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Get
      parameters:
        - name: ts
          in: header
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body contains metadata about the Organisation whose details are
          required to be viewed.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgapiOrgGetRequest'
        required: true
      responses:
        '200':
          description: >-
            OK. Successful operation. The requested operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgGetResponse'
        '400':
          description: >-
            'CLIENT_ERROR. The requested operation failed due to bad request
            from client. Possible reasons for failure: Either "organisationId"
            or "provider" and "externalId" values are required for the
            operation.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgReadClientErrorResponse'
        '404':
          description: >-
            'RESOURCE_NOT_FOUND. The requested operation failed as given
            resource is not existing on server. Possible reasons for failure:
            organisationId is mandatory.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgReadNotFoundResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. The requested operation failed due to a
            server error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgReadServerErrorResponse'
      security:
        - bearer: []
      x-codegen-request-body-name: Body
  /org/v1/search:
    post:
      tags:
        - Org APIs
      summary: Search for an Organisation
      description: |-
        This API is for searching for Organisations on the Sunbird Platform.
          - The endpoint for **Search for an Organisation** is `/org/v1/search`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Search
      parameters:
        - name: ts
          in: header
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body contains metadata about filters that can be used in
          Organisation search.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgapiOrgSearchRequest'
        required: true
      responses:
        '200':
          description: >-
            OK. Successful operation. The requested operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgSearchResponse'
        '400':
          description: >-
            'CLIENT_ERROR. The requested operation failed due to bad request
            from client. Possible reasons for failure: Either "organisationId"
            or "provider" and "externalId" values are required for the
            operation.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgSearchClientErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. The requested operation failed due to a
            server error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgSearchServerErrorResponse'
      security:
        - bearer: []
      x-codegen-request-body-name: Body
  /org/v1/update:
    patch:
      tags:
        - Org APIs
      summary: Update particulars of an existing Organisation
      description: >-
        This API is for updating details of an existing Organisation on the
        Sunbird Platform.
          - The endpoint for **Update particulars of an existing Organisation** is `/org/v1/update`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Update
      parameters:
        - name: ts
          in: header
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body contains metadata about an existing Organisation to be
          updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgapiOrgUpdateRequest'
        required: true
      responses:
        '200':
          description: >-
            OK. Successful operation. The requested operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgUpdateResponse'
        '400':
          description: >-
            'CLIENT_ERROR. The requested operation failed due to bad request
            from client. Possible reasons for failure: Either "organisationId"
            or "provider" and "externalId" values are required for the
            operation.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgUpdateClientErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. The requested operation failed due to a
            server error. Possible reasons for failure: Channel registration
            failed.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgUpdateServerErrorResponse'
      security:
        - bearer: []
      x-codegen-request-body-name: Body
  /org/v1/status/update:
    patch:
      tags:
        - Org APIs
      summary: Organisation update status
      description: >-
        This API is for updating status of an existing Organisation on the
        Sunbird Platform.
          - The endpoint for **Organisation update status** is `/org/v1/status/update`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Status Update
      parameters:
        - name: ts
          in: header
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body contains metadata about an existing Organisation whose status
          is required to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgapiOrgStatusUpdateRequest'
        required: true
      responses:
        '200':
          description: >-
            OK. Successful operation. The requested operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgStatusUpdateResponse'
        '400':
          description: >-
            'CLIENT_ERROR. The requested operation failed due to bad request
            from client. Possible reasons for failure: Either "organisationId"
            or "provider" and "externalId" values are required for the
            operation.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgUStatusUpdateClientErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. The requested operation failed due to a
            server error. Possible reasons for failure: Channel registration
            failed.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgStatusUpdateServerErrorResponse'
      x-codegen-request-body-name: Body
  /org/v1/type/create:
    post:
      tags:
        - Org APIs
      summary: Create New Organisation Type
      description: >-
        This API is for creation of a new Organisation Type on the Sunbird
        Platform.
          - The endpoint for **Create new Organisation Type** is `/org/v1/type/create`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Type Create
      parameters:
        - name: ts
          in: header
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body contains metadata about the new Organisation Type to be
          created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgapiOrgTypeCreateRequest'
        required: true
      responses:
        '200':
          description: >-
            OK. Successful operation. The Organisation Create operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgSuccessResponse'
        '400':
          description: >-
            'CLIENT_ERROR. The requested operation failed due to bad request
            from client. Possible reasons for failure: Organisation type name is
            mandatory.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. The requested operation failed due to a
            server error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgErrorResponse'
      security:
        - bearer: []
      x-codegen-request-body-name: Body
  /org/v1/type/list:
    get:
      tags:
        - Org APIs
      summary: List all Organisation Types
      description: |-
        This API is for listing all Organisation Types on the Sunbird Platform.
          - The endpoint for **List all Organisation Types** is `/org/v1/type/list`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Type List
      parameters:
        - name: ts
          in: header
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK. Successful operation. The Organisation Create operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgTypeListResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. The requested operation failed due to a
            server error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgTypeListServerErrorResponse'
      security:
        - bearer: []
  /org/v1/type/update:
    patch:
      tags:
        - Org APIs
      summary: Update particulars of an existing Organisation Type
      description: >-
        This API is for updating details of an existing Organisation Type on the
        Sunbird Platform.
          - The endpoint for **Update particulars of an existing Organisation Type** is `/org/v1/type/update`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Type Update
      parameters:
        - name: ts
          in: header
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body contains metadata about an existing Organisation Type to be
          updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgapiOrgTypeUpdateRequest'
        required: true
      responses:
        '200':
          description: >-
            OK. Successful operation. The Organisation Create operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgSuccessResponse'
        '400':
          description: >-
            'CLIENT_ERROR. The requested operation failed due to bad request
            from client. Possible reasons for failure: Organisation type name is
            mandatory.'
          content: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. The requested operation failed due to a
            server error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgErrorResponse'
      security:
        - bearer: []
      x-codegen-request-body-name: Body
  /org/v1/member/add:
    post:
      tags:
        - Org APIs
      summary: Add a User to Organisation
      description: >-
        This API is for adding a user to an existing organisation on the Sunbird
        Platform.
          - The endpoint for **Add a User to Organisation** is `/org/v1/member/add`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Add User
      parameters:
        - name: ts
          in: header
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body contains metadata about adding a member to an existing
          Organisation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgapiOrgAddUserRequest'
        required: true
      responses:
        '200':
          description: >-
            OK. Successful operation. The requested operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgAddMemberResponse'
        '400':
          description: >-
            'CLIENT_ERROR. The requested operation failed due to bad request
            from client. Possible reasons for failure: Organisation Id or
            Provider with External Id values are required for the operation Role
            of the user is required Please provide valid userId or userName and
            provider Given Organisation Data doesn't exist in our records.
            Please provide a valid one Given User Data doesn't exist in our
            records. Please provide a valid one'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgAddMemberClientErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. The requested operation failed due to a
            server error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgAddMemberServerErrorResponse'
      security:
        - bearer: []
      x-codegen-request-body-name: Body
  /org/v1/member/remove:
    post:
      tags:
        - Org APIs
      summary: Remove a User from Organisation
      description: >-
        This API is for removal of a user who is currently a member of an
        existing organisation on the Sunbird Platform.
          - The endpoint for **Remove a User from Organisation** is `/org/v1/member/remove`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Organisation Remove User
      parameters:
        - name: ts
          in: header
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body contains metadata about removing a user from an existing
          Organisation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgapiOrgRemoveUserRequest'
        required: true
      responses:
        '200':
          description: >-
            OK. Successful operation. The requested operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgRemoveMemberResponse'
        '400':
          description: >-
            'CLIENT_ERROR. The requested operation failed due to bad request
            from client. Possible reasons for failure: Organisation Id or
            Provider with External Id values are required for the operation
            Please provide valid userId or userName and provider Given
            Organisation Data doesn't exist in our records. Please provide a
            valid one Given User Data doesn't exist in our records. Please
            provide a valid one'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgRemoveMemberClientErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. The requested operation failed due to a
            server error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgRemoveMemberServerErrorResponse'
      x-codegen-request-body-name: Body
  /org/v1/assign/key:
    post:
      tags:
        - Org APIs
      summary: Create New Organisation Type
      description: This API is for creation/Addition of keysto a Organisation
      operationId: Assign Key to Org
      parameters:
        - name: ts
          in: header
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body contains metadata about the new Organisation Type to be
          created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orgapiOrgAssignKeyRequest'
        required: true
      responses:
        '200':
          description: >-
            OK. Successful operation. The Organisation Create operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgAssignKeyResponse'
        '400':
          description: >-
            'CLIENT_ERROR. The requested operation failed due to bad request
            from client. Possible reasons for failure: Organisation type name is
            mandatory.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgAssignKeyClientErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. The requested operation failed due to a
            server error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiOrgAssignKeyServerErrorResponse'
      security:
        - bearer: []
      x-codegen-request-body-name: Body
  /org/v1/tenant/info:
    get:
      tags:
        - Org APIs
      summary: Gives the tenant information.
      description: >-
        This API gives the tenant information like logo and URL's for specific
        tenant.
          - The endpoint for **Tenant information** is `/v1/tenant/info`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Tenant Information
      parameters:
        - name: ts
          in: header
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK. Successful operation. The get tenent inforamtion operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiTenantInformationResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. The requested operation failed due to a
            server error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orgapiTenantInfoServerErrorResponse'
      security:
        - bearer: []
  /data/v1/page/create:
    post:
      tags:
        - Page APIs
      summary: Create Page
      description: >-
        This API is associated with creating a new page. To create a page first
        create the page section using section create api.make page name unique.
           - The endpoint for **Create Page** is `/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: CreatePost
      parameters:
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
               - Multipart/form-data
               - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This Id Uniquely identifies a request if the same API is executed
            multiple times.
          required: true
          schema:
            type: string
        - name: ts
          in: header
          description: Time Stamp at which creating page request was sent.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          description: The token/key used to execute the API
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for creating a page.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pagesapiCreatePagerequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/pagesapiCreatePagerequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/pagesapiCreatePagerequest'
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."create page" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateResponse'
              example:
                id: api.page.create
                ver: v1
                ts: '1606196636922'
                params:
                  resmsgid: 'null,'
                  msgid: a4b7041c-2d42-43e8-81d2-d3f3b6fbeccf
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
                  pageId: 0131699903041208327
        '400':
          description: >-
            BAD REQUEST. The "create page" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateErrorResponse'
              example:
                id: api.page.create
                ver: v1
                ts: '1606196636922'
                params:
                  resmsgid: 'null,'
                  msgid: 34b7041c-2d42-43e8-81d2-d3f3b6fbeccf
                  err: PAGE_ALREADY_EXIST
                  status: PAGE_ALREADY_EXIST
                  errmsg: page already exist with this Page Name and Org Code.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org. 
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/pagesapi500ServerError'
              example:
                id: api.page.create
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
        - bearer: []
  /data/v1/page/update:
    patch:
      tags:
        - Page APIs
      summary: Update Page Information
      description: |-
        This API is associated with updating the page information
           - The endpoint for **Update Page Information** is `/update`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: UpdatePatch
      parameters:
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
               - Multipart/form-data
               - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This Id Uniquely identifies a request if the same API is executed
            multiple times.
          required: true
          schema:
            type: string
        - name: ts
          in: header
          description: Time Stamp at which update page information request was sent.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          description: The token/key used to execute the API
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for updating page info.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pagesapiUpdatePageInforequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/pagesapiUpdatePageInforequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/pagesapiUpdatePageInforequest'
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."update page information" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateResponse'
              example:
                id: api.page.update
                ver: v1
                ts: '1606196636922'
                params:
                  resmsgid: null
                  msgid: 34b7041c-2d42-43e8-81d2-d3f3b6fbeccf
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            BAD REQUEST. The "update page" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateErrorResponse'
              example:
                id: api.page.update
                ver: v1
                ts: '1606196636922'
                params:
                  resmsgid: 'null,'
                  msgid: 34b7041c-2d42-43e8-81d2-d3f3b6fbeccf
                  err: PAGE_ALREADY_EXIST
                  status: PAGE_ALREADY_EXIST
                  errmsg: page already exist with this Page Name and Org Code.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org. 
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/pagesapi500ServerError'
              example:
                id: api.page.update
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
        - bearer: []
  '/data/v1/page/read/{pageName}':
    get:
      tags:
        - Page APIs
      summary: Get Specific Page Resources
      description: |-
        This API is associated with fetching specific resources.
           - The endpoint for **Get Specific Page Resources** is `/read/{pageName}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: ResourceGet
      parameters:
        - name: pageName
          in: path
          description: Please append a valid Section Id to the request URL
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
          required: true
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This Id Uniquely identifies a request if the same API is executed
            multiple times.
          required: true
          schema:
            type: string
        - name: ts
          in: header
          description: Time Stamp at which get specific page resources request was sent.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          description: The token/key used to execute the API
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."get specific page resources" operation
            was successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiPageReadResponse'
              example:
                id: api.page.read.Course
                ver: v1
                ts: '2020-12-14 10:30:12:868+0000'
                params:
                  resmsgid: null
                  msgid: 829f92fa-ef96-4250-a9b2-1a169e8ff59d
                  err: null
                  status: success
                  errmsg: null
                  responseCode: OK
                result:
                  page:
                    name: Course
                    id: 01228382478150860822
                    portalSections:
                      display: '{"name":{"en":"Latest Courses"}}'
                      alt: null
                      description: null
                      index: 1
                      sectionDataType: course
                      imgUrl: null
                      searchQuery: >-
                        {"request":{"filters":{"contentType":["Course"],"objectType":["Content"],"status":["Live"]},"sort_by":{"lastPublishedOn":"desc"},"limit":10}}
                      name: Latest Courses
                      id: 01228382278062080019
                      dynamicFilters: null
                      dataSource: null
                      status: 1
                      group: 1
                    appSections:
                      display: '{"name":{"en":"Latest Courses","hi":"????????"}}'
                      alt: null
                      description: null
                      index: 1
                      sectionDataType: course
                      imgUrl: null
                      searchQuery: >-
                        {"request":{"filters":{"contentType":["Course"],"objectType":["Content"],"status":["Live"]},"sort_by":{"lastPublishedOn":"desc"},"limit":10}}
                      name: Latest Courses
                      id: 01228382278062080019
                      dynamicFilters: null
                      dataSource: null
                      status: 1
                      group: 1
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org. 
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/pagesapi500ServerError'
              example:
                id: api.page.update
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
        - bearer: []
  /data/v1/page/section/create:
    post:
      tags:
        - Page APIs
      summary: Create Page Section
      description: |-
        This API is associated with creating a new section on a page.
           - The endpoint for **Create Page Section** is `/section/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: SectionCreatePost
      parameters:
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
          required: true
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This Id Uniquely identifies a request if the same API is executed
            multiple times.
          required: true
          schema:
            type: string
        - name: ts
          in: header
          description: Time Stamp at which create section request was sent.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          description: The token/key used to execute the API
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for creating geo location.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pagesapiCreatePageSectionrequest'
              examples:
                a:
                  summary: Create page section Request
                  value:
                    request:
                      name: Page - prad - Section - 1
                      searchQuery:
                        request:
                          facets:
                            - language
                            - grade
                            - domain
                            - contentType
                            - subject
                            - medium
                          filters:
                            contentType:
                              - TextBook
                            objectType:
                              - Content
                            status:
                              - Live
                            compatibilityLevel:
                              max: 4
                              min: 1
                          mode: collection
                          limit: 10
                          sort_by:
                            lastUpdatedOn: desc
                      sectionDataType: Content
                      display:
                        name:
                          en: Page - 1 - Section - 1
                b:
                  summary: 'Create page section Bad Request '
                  value:
                    request:
                      name: Page - prad - Section - 1
                      limit: 10
                      sort_by: null
                      lastUpdatedOn: desc
                      sectionDataType: Content
                      display:
                        name:
                          en: Page - 1 - Section - 1
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."create section" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateResponse'
              example:
                id: api.page.section.create
                ver: v1
                ts: '1606196636922'
                params:
                  resmsgid: 'null,'
                  msgid: a4b7041c-2d42-43e8-81d2-d3f3b6fbeccf
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
                  pageId: 0131735539027230726
        '400':
          description: >-
            BAD REQUEST. The "create section" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateErrorResponse'
              example:
                id: api.page.section.create
                ver: v1
                ts: '2020-12-16 07:58:41:739+0000'
                params:
                  resmsgid: null
                  msgid: 637888ae-16c5-48d0-997f-3662149646f0
                  err: SECTION_DATA_TYPE_MISSING
                  status: SECTION_DATA_TYPE_MISSING
                  errmsg: Section data type missing.
                responseCode: CLIENT_ERROR
                result: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org. 
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/pagesapi500ServerError'
              example:
                id: api.page.section.create
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
        - bearer: []
  /data/v1/page/section/update:
    patch:
      tags:
        - Page APIs
      summary: Update Page Section
      description: |-
        This API is associated with updating content of a section on a page.
           - The endpoint for **Update Page Section** is `/section/update`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: SectionUpdatePatch
      parameters:
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
               - Multipart/form-data
               - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This Id Uniquely identifies a request if the same API is executed
            multiple times.
          required: true
          schema:
            type: string
        - name: ts
          in: header
          description: Time Stamp at which updating page section request was sent.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          description: The token/key used to execute the API
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for creating geo location.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pagesapiUpdatePageSectionInforequest'
            examples:
              a:
                summary: Update Page Request
                value:
                  example:
                    request:
                      id: 01269259447543398412
                      name: Linked Content
                      searchQuery:
                        request:
                          facets:
                            - medium
                          filters:
                            primaryCategory:
                              - Course
                            mimeType:
                              - application/vnd.ekstep.content-collection
                            status:
                              - Live
                            compatibilityLevel:
                              max: 4
                              min: 1
                          mode: collection
                          limit: 10
                          sort_by:
                            lastUpdatedOn: desc
                      display:
                        name: null
                        en: Linked Content
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."create section" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateResponse'
              example:
                id: api.page.section.update
                ver: v1
                ts: '1606196636922'
                params:
                  resmsgid: 'null,'
                  msgid: a4b7041c-2d42-43e8-81d2-d3f3b6fbeccf
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
                  pageId: 0131735539027230726
        '400':
          description: >-
            BAD REQUEST. The "create section" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateErrorResponse'
              example:
                id: api.page.section.update
                ver: v1
                ts: '2020-12-16 07:58:41:739+0000'
                params:
                  resmsgid: null
                  msgid: 637888ae-16c5-48d0-997f-3662149646f0
                  err: SECTION_DATA_TYPE_MISSING
                  status: SECTION_DATA_TYPE_MISSING
                  errmsg: Section data type missing.
                responseCode: CLIENT_ERROR
                result: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org. 
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/pagesapi500ServerError'
              example:
                id: api.page.section.update
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
        - bearer: []
  '/data/v1/page/section/read/{SectionId}':
    get:
      tags:
        - Page APIs
      summary: Fetch Section Details by Id
      description: |-
        This API is associated with fetching specific section details.
           - The endpoint for **Fetch Section Details by Id** is `/section/read/{sectionId}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Section0122771215738306560Get
      parameters:
        - name: SectionId
          in: path
          description: Please append a valid Section Id to the request URL
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
               - Multipart/form-data
               - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This Id Uniquely identifies a request if the same API is executed
            multiple times.
          required: true
          schema:
            type: string
        - name: ts
          in: header
          description: Time Stamp at which Fetch Section Details request was sent.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          description: The token/key used to execute the API
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."fetching section details" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateResponse'
              example:
                id: api.page.section.read
                ver: v1
                ts: '2020-12-16 08:33:54:060+0000'
                params:
                  resmsgid: null
                  msgid: 5d809eaf-525b-4f96-b3f1-798636b55ecf
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  section:
                    updatedBy: null
                    display: '{"name":{"en":"Ongoing Courses"}}'
                    alt: null
                    description: null
                    updatedDate: null
                    sectionDataType: coursebatch
                    imgUrl: null
                    createdDate: null
                    createdBy: null
                    searchQuery: >-
                      {"request":{"query":"","filters":{"status":"1"},"limit":10,"sort_by":{"createdDate":"desc"}}}
                    name: Ongoing Course
                    id: 0127029938411765763
                    dynamicFilters: null
                    dataSource: batch
                    status: 1
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org. 
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/pagesapi500ServerError'
              example:
                id: api.page.section.read
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
        - bearer: []
  /data/v1/page/section/list:
    get:
      tags:
        - Page APIs
      summary: Fetch Page Settings
      description: |-
        This API is associated with fetching the settings of a page.
           - The endpoint for **Fetch Page Settings** is `/section/list`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: AllSettingsGet
      parameters:
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
               - Multipart/form-data
               - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            This Id Uniquely identifies a request if the same API is executed
            multiple times.
          required: true
          schema:
            type: string
        - name: ts
          in: header
          description: Time Stamp at which fetch settings request was sent.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          description: The token/key used to execute the API
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."fetch settings" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesapiContentCreateResponse'
              example:
                id: api.page.section.list
                ver: v1
                ts: '2020-12-16 08:45:22:994+0000'
                params:
                  resmsgid: null
                  msgid: 04c00561-c3af-46a9-924d-ab891e1b62a8
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response:
                    - display: '{"name":{"en":"Latest Courses"}}'
                      alt: null
                      description: null
                      sectionDataType: ContentBrowser
                      imgUrl: null
                      searchQuery: >-
                        {"request":{"filters":{"contentType":["Course"],"objectType":["Content"],"status":["Live"]},"sort_by":{"lastPublishedOn":"desc"},"limit":10}}
                      name: Latest Courses
                      id: 0131191751772733441
                      dynamicFilters: null
                      dataSource: null
                      status: 1
                    - display: '{"name":{"en":"NCC"}}'
                      alt: null
                      description: null
                      sectionDataType: Content
                      imgUrl: null
                      searchQuery: >-
                        {"request":{"filters":{"contentType":["Course"],"status":["Live"],"objectType":["Content"],"createdFor":["0129902071599595522"],"subject":["NCC"]},"sort_by":{"lastPublishedOn":"desc"},"limit":10}}
                      name: NCC
                      id: 0129916933832212480
                      dynamicFilters: null
                      dataSource: null
                      status: 1
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org. 
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/pagesapi500ServerError'
              example:
                id: api.page.section.list
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
        - bearer: []
  /dialcode/v1/generate:
    post:
      tags:
        - DIAL APIs
      summary: Generate DIAL code
      description: |-
        This API is associated with generating DIAL code.
           - The endpoint for **Generate DIAL code** is `/dialcode/v1/generate`
           - It points to knowledge-mw-service - `/v1/dialcode/generate`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: GeneratePost for dial
      parameters:
        - name: X-Channel-ID
          in: header
          description: >-
            It the Unique Id to identify the root organization to which the user
            belongs
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. Possible
            media types can be:-

            - Application/json"
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for Generating DIAL code.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dialapiGenerateDialcoderequest'
            example:
              request:
                dialcodes:
                  count: 5
                  publisher: publisher1
                  batchCode: b672038a-7660-49fe-abc9-2696de81931d
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Generate DIAL code" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeGenerateResponse'
              example:
                id: api.dialcode.generate
                ver: '1.0'
                ts: '2020-12-17T15:20:45.354Z'
                params:
                  resmsgid: 6f1208a0-407b-11eb-9b0c-abcfbdf41bc3
                  msgid: 6ebeb880-407b-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  dialcodes:
                    - N5U3S6
                    - U4X6A2
                    - K5W8G9
                    - Z7N4G2
                    - T8K1Y6
                  count: 5
                  batchcode: b672038a-7660-49fe-abc9-2696de81931d
                  publisher: publisher1
        '400':
          description: >-
            BAD REQUEST. The "Generate DIAL code" operation failed ! The
            possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.dialcode.generate
                ver: '1.0'
                ts: '2020-12-17T15:36:29.803Z'
                params:
                  resmsgid: a20183b1-407d-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_DIALCODE_GENERATE_COUNT_ERROR
                  errmsg: Required fields count is missing or invalid
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /dialcode/v1/publisher/create:
    post:
      tags:
        - DIAL APIs
      summary: Create Publisher
      description: >-
        This API is associated with creating a publisher. A publisher owns the
        DIAL code.
           - The endpoint for **Create Publisher** is ` /dialcode/v1/publisher/create`
           - It points to knowledge-mw-service - `v1/dialcode/publisher/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: PublisherCreatePost
      parameters:
        - name: X-Channel-ID
          in: header
          description: >-
            It the Unique Id to identify the root organization to which the user
            belongs
          required: false
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
               - Multipart/form-data
               - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for Creating Publisher.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dialapiCreatePublisherRequest'
            example:
              request:
                publisher:
                  identifier: 2e5ee61b-57a2-41b3-968b-54607e5885a6
                  name: Sunbird Test Publisher
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Create Publisher" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiPublisherCreateResponse'
              example:
                id: api.publisher.create
                ver: '1.0'
                ts: '2020-12-17T15:39:35.742Z'
                params:
                  resmsgid: 10d58de0-407e-11eb-9b0c-abcfbdf41bc3
                  msgid: 10338180-407e-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  identifier: 2e5ee61b-57a2-41b3-968b-54607e5885a6
        '400':
          description: >-
            BAD REQUEST. The "Create Publisher" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.publisher.create
                ver: '1.0'
                ts: '2020-12-17T15:50:04.717Z'
                params:
                  resmsgid: 87bb85d0-407f-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_CREATE_PUBLISHER_DIALCODE_FIELDS_MISSING
                  errmsg: Required fields for create publisher are missing
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  '/dialcode/v1/process/status/{processId}':
    get:
      tags:
        - DIAL APIs
      summary: Get Process Status
      description: >-
        This API is associated with fetching the process Id while generating
        DIAL codes or when DIAL codes are listed.
           - The endpoint for **Get Process Status** is `/dialcode/v1/process/status/{processId}`
           - It points to knowledge-mw-service - `/v1/dialcode/process/status`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: ProcessStatusGet
      parameters:
        - name: processId
          in: path
          description: >-
            The process id is unique Id which is returned while generation or
            listing of DIAL codes
          required: true
          schema:
            type: string
        - name: X-Channel-ID
          in: header
          description: >-
            It the Unique Id to identify the root organization to which the user
            belongs
          required: false
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Get Process Status" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiProcessStatusResponse'
              example:
                id: api.process.status
                ver: '1.0'
                ts: '2020-12-17T12:44:59.924Z'
                params:
                  resmsgid: acc29540-4065-11eb-9b0c-abcfbdf41bc3
                  msgid: acc1d1f0-4065-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  status: completed
                  url: >-
                    https://sunbirddev.blob.core.windows.net/dial/b00bc992ef25f1a9a8d63291e20efc8d/do_112876945300905984168_hindi_kindergarten_math_1571893740506.zip
        '404':
          description: >-
            RESOURCE NOT FOUND. The "Get Process Status" operation failed ! The
            possible reason for failure is that you may have passed invalid
            process id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.process.status
                ver: '1.0'
                ts: '2020-12-17T16:00:09.824Z'
                params:
                  resmsgid: f0678600-4080-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_PROCESS_ID_NOT_FOUND
                  errmsg: Requested process id not found
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /dialcode/v1/read:
    post:
      tags:
        - DIAL APIs
      summary: Get DIAL Code
      description: |-
        This API is associated with fetching/reading the DIAL code 
          - The endpoint for **Get DIAL code** is `/dialcode/v1/read/{dialcode}`
          - It points to knowledge-mw-service - `/v1/dialcode/read/{dialcode}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
      operationId: ReadPost
      parameters:
        - name: X-Channel-ID
          in: header
          description: >-
            It the Unique ID to identify the root organization to which the user
            belongs
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for fetching/reading DIAL code
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dialapiGetDialcoderequest'
            example:
              request:
                dialcode:
                  identifier: Q13PMA
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Get DIAL code" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiGetDialcodeResponse'
              example:
                id: api.dialcode.read
                ver: '1.0'
                ts: '2020-12-17T16:09:58.255Z'
                params:
                  resmsgid: 4f22f7f0-4082-11eb-9b0c-abcfbdf41bc3
                  msgid: 4f21e680-4082-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  dialcode:
                    identifier: V1T2P8
                    channel: sunbird
                    publisher: ef41a799-0438-4397-bbb4-a2a65aed4e55
                    batchCode: ede34398-5310-4009-a49e-4f3dd0147c69
                    status: Draft
                    generatedOn: '2020-12-17T16:09:13.008+0000'
                    publishedOn: null
                    metadata: null
        '400':
          description: >-
            BAD REQUEST. The "Get DIAL code" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.dialcode.read
                ver: '1.0'
                ts: '2020-12-17T16:21:47.297Z'
                params:
                  resmsgid: f5c23111-4083-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_REQUEST_FIELDS_CHANNEL_ID_MISSING
                  errmsg: Required field channel id is missing
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: >-
            RESOURCE NOT FOUND. The "Get DIAL code" operation failed ! The
            possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.dialcode.read
                ver: '1.0'
                ts: '2020-12-17T16:19:33.944Z'
                params:
                  resmsgid: a6462380-4083-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_DIALCODE_INFO
                  errmsg: 'Dial Code Not Found With Id: {{invalid-dial}}'
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  '/dialcode/v1/publisher/read/{publisherId}':
    get:
      tags:
        - DIAL APIs
      summary: Get Publisher
      description: >-
        This API is associated with fetching a specific publisher owning a DIAL
        code.
          - The endpoint for **Get Publisher** is `/dialcode/v1/publisher/read/publisherId`
          - It points to knowledge-mw-service - `/v1/dialcode/publisher/read/{dialcode}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: PublisherReadSunbirdGet
      parameters:
        - name: publisherId
          in: path
          description: It identifies a publisher uniquely
          required: true
          schema:
            type: string
        - name: X-Channel-ID
          in: header
          description: >-
            It the Unique Id to identify the root organization to which the user
            belongs
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. Possible
            media types can be:

            - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Get Publisher" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiGetPublisherResponse'
              example:
                id: api.publisher.read
                ver: '1.0'
                ts: '2020-12-18T06:50:18.047Z'
                params:
                  resmsgid: 4a2f9cf0-40fd-11eb-9b0c-abcfbdf41bc3
                  msgid: 4a2e3d60-40fd-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  publisher:
                    identifier: f85a10a8-1f16-4414-bd3f-d6b5a9d824bc
                    name: Sunbird Test Publisher
                    channel: sunbird
                    createdOn: '2020-12-18T06:50:08.877'
                    updatedOn: '2020-12-18T06:50:08.877'
        '400':
          description: >-
            BAD REQUEST. The "Get Publisher" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.publisher.read
                ver: '1.0'
                ts: '2020-12-18T07:05:34.268Z'
                params:
                  resmsgid: 6c4bd7c0-40ff-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_INVALID_PUBLISHER_READ_REQUEST
                  errmsg: >-
                    Publisher with Identifier: {{invalid-publisher-id}} does not
                    exists.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  '/dialcode/v1/update/{dialcode}':
    patch:
      tags:
        - DIAL APIs
      summary: Update DIAL code
      description: |-
        This API is associated with updating the DIAL code.
          - The endpoint for **Update DIAL code** is `/dialcode/v1/update/{dialcode}`
          - It points to knowledge-mw-service - `/v1/dialcode/update/{dialcode}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: UpdateDialcode
      parameters:
        - name: dialcode
          in: path
          description: The dialcode identifier which you want to update
          required: true
          schema:
            type: string
        - name: X-Channel-ID
          in: header
          description: >-
            It the Unique Id to identify the root organization to which the user
            belongs
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. Possible
            media types can be:

            - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for updating DIAL code.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dialapiUpdateDialcoderequest'
            example:
              request:
                dialcode:
                  metadata:
                    gradeLevel: Class 5
                    subject: Math
                    board: Test Board
                    medium: English
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Update DIAL code" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeUpdateResponse'
              example:
                id: api.dialcode.update
                ver: '1.0'
                ts: '2020-12-18T07:10:28.747Z'
                params:
                  resmsgid: 1bd1c5b0-4100-11eb-9b0c-abcfbdf41bc3
                  msgid: 19fe8c50-4100-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  identifier: V1T2P8
        '400':
          description: >-
            BAD REQUEST. The "Update DIAL code" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.dialcode.update
                ver: '1.0'
                ts: '2020-12-18T07:19:39.845Z'
                params:
                  resmsgid: 644ca750-4101-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_INVALID_CHANNEL_ID
                  errmsg: Invalid Channel Id.
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: >-
            RESOURCE NOT FOUND. The "Update DIAL code" operation failed ! The
            possible reason for failure is that you may have passed invalid
            dialcode id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.dialcode.update
                ver: '1.0'
                ts: '2020-12-18T07:19:58.494Z'
                params:
                  resmsgid: 6f6a43e0-4101-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_DIALCODE_INFO
                  errmsg: 'Dial Code Not Found With Id: {{invalid-dial}}'
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  '/dialcode/v1/publisher/update/{publisherId}':
    patch:
      tags:
        - DIAL APIs
      summary: Update Publisher
      description: |-
        This API is associated with updating specific DIAL code publisher.
          - The endpoint for **Update Publisher** is `/dialcode/v1/publisher/update/{publisherId}`
          - It points to knowledge-mw-service - `/v1/dialcode/publisher/update/{publisherId}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: PublisherUpdateSunbirdPatch
      parameters:
        - name: publisherId
          in: path
          description: The publisher identifier which require to be updated
          required: true
          schema:
            type: string
        - name: X-Channel-ID
          in: header
          description: >-
            It the Unique Id to identify the root organization to which the user
            belongs
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. Possible
            media types can be:

            - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for updating specific publisher.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dialapiUpdatePublisherrequest'
            example:
              request:
                publisher:
                  name: Test Publisher 001
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Update Publisher" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiPublisherUpdateResponse'
              example:
                id: api.publisher.update
                ver: '1.0'
                ts: '2020-12-18T07:23:10.630Z'
                params:
                  resmsgid: e1efe460-4101-11eb-9b0c-abcfbdf41bc3
                  msgid: e1ed7360-4101-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  identifier: f85a10a8-1f16-4414-bd3f-d6b5a9d824bc
        '400':
          description: >-
            BAD REQUEST. The "Update Publisher" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.publisher.update
                ver: '1.0'
                ts: '2020-12-18T07:30:42.261Z'
                params:
                  resmsgid: ef215050-4102-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_INVALID_PUBLISHER_UPDATE_REQUEST
                  errmsg: >-
                    Publisher with Identifier: {{invalid-publisher-id}} does not
                    exists.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /dialcode/v1/publish:
    post:
      tags:
        - DIAL APIs
      summary: Publish DIAL code
      description: |-
        This API is associated with publishing the  DIAL code.
          - The endpoint for **Publish DIAL code** is `/dialcode/v1/publish`
          - It points to knowledge-mw-service - `/v1/dialcode/publish`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: PublishDialcode
      parameters:
        - name: X-Channel-ID
          in: header
          description: >-
            It the Unique Id to identify the root organization to which the user
            belongs
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. Possible
            media types can be:

            - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for Publishing DIAL code.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dialapiPublishDialcoderequest'
            example:
              request: {}
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Publish DIAL code" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodePublishResponse'
              example:
                id: api.dialcode.publish
                ver: '1.0'
                ts: '2020-12-18T08:52:33.907Z'
                params:
                  resmsgid: 5eb30430-410e-11eb-9b0c-abcfbdf41bc3
                  msgid: 5eb0ba40-410e-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  identifier: V1T2P8
        '400':
          description: >-
            BAD REQUEST. The "Publish DIAL code" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter or provided wrong parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.dialcode.publish
                ver: '1.0'
                ts: '2020-12-18T08:53:46.031Z'
                params:
                  resmsgid: 89b043f0-410e-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_INVALID_CHANNEL_ID
                  errmsg: Invalid Channel Id.
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: >-
            RESOURCE NOT FOUND. The "Publish DIAL code" operation failed ! The
            possible reason for failure is that you may have passed invalid
            dialcode id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.dialcode.publish
                ver: '1.0'
                ts: '2020-12-18T08:55:21.548Z'
                params:
                  resmsgid: c29f00c0-410e-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_DIALCODE_INFO
                  errmsg: 'Dial Code Not Found With Id: {{invalid-dial}}'
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /dialcode/v1/content/link:
    post:
      tags:
        - DIAL APIs
      summary: Link DIAL code
      description: >-
        This API is associated with linking DIAL code to the content

        - The endpoint for **Link DIAL code** is `/dialcode/v1/content/link`

        - It points to knowledge-mw-service - `/v1/dialcode/content/link`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: ContentLinkPost
      parameters:
        - name: X-Channel-ID
          in: header
          description: >-
            It the Unique Id to identify the root organization to which the user
            belongs
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. Possible
            media types can be:

            - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for Linking DIAL code.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dialapiLinkDialcoderequest'
            example:
              request:
                content:
                  identifier:
                    - do_12345
                  dialcode:
                    - A1Y2G3
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Link DIAL code" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiLinkDialcodeResponse'
              example:
                id: api.content.link
                ver: '1.0'
                ts: '2020-12-18T09:20:57.108Z'
                params:
                  resmsgid: 55e2dd40-4112-11eb-9b0c-abcfbdf41bc3
                  msgid: 55bd05c0-4112-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result: {}
        '207':
          description: >-
            OK ! Partial Successful operation."Link DIAL code" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiLinkDialcodeResponse'
              example:
                id: api.content.link
                ver: '1.0'
                ts: '2020-12-18T09:32:11.112Z'
                params:
                  resmsgid: e79fb680-4113-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_DIALCODE_LINK
                  errmsg: 'Content not found with id(s): invalid_do_id_1'
                responseCode: PARTIAL_SUCCESS
                result: {}
        '400':
          description: >-
            BAD REQUEST. The "Link DIAL code" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.content.link
                ver: '1.0'
                ts: '2020-12-18T09:30:48.549Z'
                params:
                  resmsgid: b6699950-4113-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_DIALCODE_CONTENT_LINK_FIELDS_MISSING
                  errmsg: Required fields for content link dialcode are missing
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: >-
            RESOURCE NOT FOUND. The "Link DIAL code" operation failed ! The
            possible reason for failure is that you may have passed invalid
            input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.content.link
                ver: '1.0'
                ts: '2020-12-18T09:33:04.542Z'
                params:
                  resmsgid: 07787be0-4114-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_DIALCODE_LINK
                  errmsg: 'DIAL Code not found with id(s):[INV123, INV234]'
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /dialcode/v1/search:
    post:
      tags:
        - DIAL APIs
      summary: Search DIAL code
      description: |-
        This API is associated with searching a DIAL code.
          - The endpoint for **Search DIAL code** is `/dialcode/v1/search`
          - It points to knowledge-mw-service - `/v1/dialcode/search`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: SearchPost
      parameters:
        - name: X-Channel-ID
          in: header
          description: >-
            It the Unique Id to identify the root organization to which the user
            belongs
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. Possible
            media types can be:
              - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for searching DIAL code
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dialapiSearchDialcoderequest'
            example:
              request:
                search:
                  publisher: 19272ed8-6577-413a-9d1c-f170460e9417
                  status: Draft
                  identifier: L7H1R3
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."search DIAL code" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiSearchDialcodeResponse'
              example:
                id: api.dialcode.search
                ver: '1.0'
                ts: '2020-12-18T09:42:45.135Z'
                params:
                  resmsgid: 6187f1f0-4115-11eb-9b0c-abcfbdf41bc3
                  msgid: 61861d30-4115-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  dialcodes:
                    - dialcode_index: 9040972
                      identifier: L7H1R3
                      channel: sunbird
                      batchcode: 844521db-6fbb-4c03-b8aa-2166a005701d
                      publisher: 19272ed8-6577-413a-9d1c-f170460e9417
                      generated_on: '2020-12-18T09:42:34.802+0000'
                      status: Draft
                      objectType: DialCode
                  count: 1
        '400':
          description: >-
            BAD REQUEST. The "search DIAL code" operation failed ! The possible
            reason for failure is that you may have missed providing input or
            valid channel id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.dialcode.search
                ver: '1.0'
                ts: '2020-12-18T09:50:51.372Z'
                params:
                  resmsgid: 8359d2c0-4116-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_REQUEST_FIELDS_CHANNEL_ID_MISSING
                  errmsg: Required field channel id is missing
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /dialcode/v1/list:
    post:
      tags:
        - DIAL APIs
      summary: List DIAL code
      description: >-
        This API is associated with listing the DIAL codes - The endpoint for
        **List DIAL code** is `/dialcode/v1/list` - It points to
        knowledge-mw-service - `/v1/dialcode/list` - The fields marked with an
        asterisk (*) are mandatory. They cannot be null or empty.
      operationId: ListPost
      parameters:
        - name: X-Channel-ID
          in: header
          description: >-
            It the Unique Id to identify the root organization to which the user
            belongs
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. Possible
            media types can be:

            - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for updating user notes.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dialapiSearchDialcoderequest'
            example:
              request:
                search:
                  publisher: 19272ed8-6577-413a-9d1c-f170460e9417
                  status: Draft
                  identifier: L7H1R3
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."List DIAL code" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiSearchDialcodeResponse'
              example:
                id: api.dialcode.list
                ver: '1.0'
                ts: '2020-12-18T09:52:47.150Z'
                params:
                  resmsgid: c85c24e0-4116-11eb-9b0c-abcfbdf41bc3
                  msgid: c85a2910-4116-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  dialcodes:
                    - dialcode_index: 9040972
                      identifier: L7H1R3
                      channel: sunbird
                      batchcode: 844521db-6fbb-4c03-b8aa-2166a005701d
                      publisher: 19272ed8-6577-413a-9d1c-f170460e9417
                      generated_on: '2020-12-18T09:42:34.802+0000'
                      status: Draft
                      objectType: DialCode
                  count: 1
        '400':
          description: >-
            BAD REQUEST. The "List DIAL code" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.dialcode.list
                ver: '1.0'
                ts: '2020-12-18T09:53:06.734Z'
                params:
                  resmsgid: d4086ce1-4116-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_REQUEST_FIELDS_CHANNEL_ID_MISSING
                  errmsg: Required field channel id is missing
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /dialcode/v1/reserve:
    post:
      tags:
        - DIAL APIs
      summary: Reserve DIAL code
      description: >-
        This API is associated with reserve the DIAL codes - The endpoint for
        **Reserve DIAL code** is `/dialcode/v1/reserve` - It points to
        knowledge-mw-service - `/v1/dialcode/reserve` - The fields marked with
        an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Reserve Dialcode
      parameters:
        - name: X-Channel-ID
          in: header
          description: >-
            It the Unique Id to identify the root organization to which the user
            belongs
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. Possible
            media types can be:

            - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All User APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for updating user notes.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dialapiReserveDialcodeRequest'
            example:
              request:
                dialcodes:
                  count: 2
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Reserve DIAL code" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiReserveDialcodeResponse'
              example:
                id: api.dialcode.reserve
                ver: '1.0'
                ts: '2020-12-18T10:16:46.725Z'
                params:
                  resmsgid: 2269db50-411a-11eb-9b0c-abcfbdf41bc3
                  msgid: 22192340-411a-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  count: 2
                  reservedDialcodes:
                    P6M8X2: 1
                    G4R3K3: 0
                  node_id: do_681
                  versionKey: '1608286373090'
        '400':
          description: >-
            BAD REQUEST. The "List DIAL code" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter or providing wrong count.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dialapiDialcodeErrorResponse'
              example:
                id: api.dialcode.reserve
                ver: '1.0'
                ts: '2020-12-18T10:21:41.072Z'
                params:
                  resmsgid: d1dba500-411a-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_INVALID_COUNT
                  errmsg: >-
                    Invalid dialcode count range. Its hould be between 1 to
                    2500.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /data/v1/report/jobs/submit:
    post:
      tags:
        - druid V1
      summary: SubmitDruidReport
      description: >-
        This API is used for create a new report with druid config with
        selective datasource and filters. For example, the user can create a
        report with selective filters ,dimensions  and aggregations
           - The endpoint for ** Druid Report** is `/submit`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: SubmitDruidReport
      requestBody:
        description: Represents the body and formdata parameters of the new druid report
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/druidreportapiSubmitReportRequest'
            example:
              request:
                reportId: district_monthly
                requestedBy: analytics
                description: Unique Device district wise monthly
                reportSchedule: MONTHLY
                config:
                  id: district_monthly
                  queryType: groupBy
                  dateRange:
                    staticInterval: LastMonth
                    granularity: all
                  metrics:
                    metric: totalUniqueDevices
                    label: Total Unique Devices
                    druidQuery:
                      queryType: groupBy
                      dataSource: telemetry-events
                      intervals: LastMonth
                  aggregations:
                    name: total_unique_devices
                    type: cardinality
                    fieldName: context_did
                  dimensions:
                    - fieldName: derived_loc_state
                      aliasName: state
                    - fieldName: derived_loc_district
                      aliasName: district
                  filters:
                    - type: in
                      dimension: context_pdata_id
                      values:
                        - sunbirdddev.diksha.portal
                        - sunbirddev.diksha.app
                    - type: isnotnull
                      dimension: derived_loc_state
                    - type: isnotnull
                      dimension: derived_loc_district
                  descending: 'false'
                  labels:
                    state: State
                    district: District
                    total_unique_devices: Number of Unique Devices
                  output:
                    - type: csv
                    - metrics:
                        - total_unique_devices
                    - dims:
                        - state
                  fileParameters:
                    - id
                    - dims
        required: true
      responses:
        '200':
          description: Success example for druid report submit API
          headers: {}
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/druidreportapiSubmitDruidReport-SuccessResponse
              examples:
                New_Report:
                  summary: With new reportId
                  description: Report gets created when no report with same reportId exists
                  value:
                    id: ekstep.analytics.report.submit
                    ver: v1
                    ts: '2020-11-30T07:17:22.982+00:00  '
                    params:
                      resmsgid: 25b07a3a-d59f-47e6-b3d3-76cc5866411c
                      status: successful
                    responseCode: OK
                    result:
                      $ref: '#/components/examples/reportexample'
                Existing_Report:
                  summary: With old report id
                  description: >-
                    Report doesnt get submitted or updated when report with
                    reportid exists
                  value:
                    id: ekstep.analytics.report.submit
                    ver: v1
                    ts: '2020-11-30T07:17:22.982+00:00  '
                    params:
                      err: OK
                      resmsgid: 25b07a3a-d59f-47e6-b3d3-76cc5866411c
                      status: failed
                      errmsg: ReportId already Exists
                    responseCode: OK
                    result: null
        '400':
          description: Bad Request for druid report submit API.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/druidreportapiDruidReport-BadRequestResponse
              examples:
                RequiredFieldsMissing:
                  summary: >-
                    With empty fields like request, reportid, config,
                    config.store etc
                  description: Response example when required fields are missing
                  value:
                    $ref: >-
                      #/components/schemas/druidreportapiDruidReport-BadRequestResponse/example
        '500':
          description: Internal Server Error example for report submit
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/druidreportapiDruidReportAPI-InternalServerError
              example:
                id: ekstep.analytics.report.submit
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  '/data/v1/report/jobs/''{report-id}''':
    post:
      tags:
        - druid V1
      summary: UpdateDruidReport
      description: >-
        This API is used for updating any exisiting report. For example, the
        user can update  report with updated filters ,dimensions  or
        aggregations
           - The endpoint for ** Druid Report** is `/{report-id}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: UpdateDruidReport
      parameters:
        - name: report-id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: Represents the body and formdata parameters of the druid report
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/druidreportapiReport-Request'
            example:
              request:
                reportId: district_monthly
                requestedBy: analytics
                description: Unique Device district wise monthly
                id: district_monthly
                reportSchedule: MONTHLY
                config:
                  queryType: groupBy
                  dateRange:
                    staticInterval: LastMonth
                    granularity: all
                  metrics:
                    metric: totalUniqueDevices
                    label: Total Unique Devices
                    druidQuery:
                      queryType: groupBy
                      dataSource: telemetry-events
                      intervals: LastMonth
                  aggregations:
                    name: total_unique_devices
                    type: cardinality
                    fieldName: context_did
                  dimensions:
                    - fieldName: derived_loc_state
                      aliasName: state
                    - fieldName: derived_loc_district
                      aliasName: district
                  filters:
                    - type: in
                      dimension: context_pdata_id
                      values:
                        - sunbirdddev.diksha.portal
                        - sunbirddev.diksha.app
                    - type: isnotnull
                      dimension: derived_loc_state
                    - type: isnotnull
                      dimension: derived_loc_district
                  descending: 'false'
                  labels:
                    state: State
                    district: District
                    total_unique_devices: Number of Unique Devices
                  output:
                    - type: csv
                    - metrics:
                        - total_unique_devices
                    - dims:
                        - state
                  fileParameters:
                    - id
                    - dims
                store: azure
                key: folder-name/
                container: container-name
        required: true
      responses:
        '200':
          description: Success example for druid report Update API
          headers: {}
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/druidreportapiUpdateDruidReport-SuccessResponse
              examples:
                Existing_Report:
                  summary: With exising report id
                  description: 'If report exists,then only update will be successful'
                  value:
                    id: ekstep.analytics.report.update
                    ver: v1
                    ts: '2020-11-30T07:17:22.982+00:00  '
                    params:
                      resmsgid: 25b07a3a-d59f-47e6-b3d3-76cc5866411c
                      status: successful
                    responseCode: OK
                    result:
                      $ref: '#/components/examples/reportexample'
                New_Report:
                  summary: With new report id
                  description: 'If report doesnt exist, the update will fail'
                  value:
                    id: ekstep.analytics.report.submit
                    ver: v1
                    ts: '2020-11-30T07:17:22.982+00:00  '
                    params:
                      err: OK
                      resmsgid: 25b07a3a-d59f-47e6-b3d3-76cc5866411c
                      status: failed
                      errmsg: no report available with requested reportid
                    responseCode: OK
                    result: null
        '400':
          description: Bad Request for druid report update API
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/druidreportapiDruidReport-BadRequestResponse
              examples:
                RequiredFieldsMissing:
                  summary: >-
                    With empty fields like request, reportid, filters,
                    aggregations etc
                  description: Response example when required fields are missing
                  value:
                    $ref: >-
                      #/components/schemas/druidreportapiDruidReport-BadRequestResponse/example
        '500':
          description: Internal Server Error example for druid report update API
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/druidreportapiDruidReportAPI-InternalServerError
              example:
                id: ekstep.analytics.report.submit
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
    get:
      tags:
        - druid V1
      summary: GetDruidReport
      description: >-
        This Get Report API is used for retrieving the details about an existing
        report using the report id.
           - The endpoint for ** Druid Report** is `/{report-id}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: GetDruidReport
      parameters:
        - name: report-id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: Success example for get report API
          headers: {}
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/druidreportapiGetDruidReport-SuccessResponse
              examples:
                Existing_Report:
                  summary: With old report id
                  value:
                    id: ekstep.analytics.report.get
                    ver: v1
                    ts: '2020-11-30T07:17:22.982+00:00  '
                    params:
                      resmsgid: 25b07a3a-d59f-47e6-b3d3-76cc5866411c
                      status: successful
                    responseCode: OK
                    result:
                      $ref: '#/components/examples/reportexample'
                New_Report:
                  summary: With new report id
                  value:
                    id: ekstep.analytics.report.get
                    ver: v1
                    ts: '2020-11-30T07:17:22.982+00:00  '
                    params:
                      err: OK
                      resmsgid: 25b07a3a-d59f-47e6-b3d3-76cc5866411c
                      status: failed
                      errmsg: no report available with requested reportid
                    responseCode: OK
                    result: null
        '500':
          description: Internal Server Error example for report get API
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/druidreportapiDruidReportAPI-InternalServerError
              example:
                id: ekstep.analytics.report.submit
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  /data/v1/report/jobs:
    post:
      tags:
        - druid V1
      summary: GetDruidReportsList
      description: >-
        This API is used for getting the list of avaliable active or inactive
        reports.
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: GetDruidReportsList
      requestBody:
        description: Represents the body and formdata parameters of the druid report
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/druidreportapiListDruidReportRequest'
            example:
              request:
                filters:
                  status:
                    - ACTIVE
        required: true
      responses:
        '200':
          description: Success example for listing all active or inactive reports
          headers: {}
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/druidreportapiListDruidReport-SuccessResponse
              example:
                id: ekstep.analytics.report.get
                ver: v1
                ts: '2020-11-30T07:17:22.982+00:00  '
                params:
                  resmsgid: 25b07a3a-d59f-47e6-b3d3-76cc5866411c
                  status: successful
                responseCode: OK
                result:
                  count: 1
                  reports:
                    - $ref: '#/components/examples/reportexample'
                    - $ref: '#/components/examples/reportexample1'
        '500':
          description: Internal Server Error example druid list report API
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/druidreportapiDruidReportAPI-InternalServerError
              example:
                id: ekstep.analytics.report.get
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  '/data/v1/report/jobs/deactivate/''{report-id}''':
    post:
      tags:
        - druid V1
      summary: DeactivateDruidReport
      description: >-
        This API is used for deactivating any particular report with reportid .
        It make report InActive
           - The endpoint for ** Druid Report** is `/deactivate/{report-id}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: DeactivateDruidReport
      parameters:
        - name: report-id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: Success example for deactivating report API
          headers: {}
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/druidreportapiDeactivateDruidReport-SuccessResponse
              examples:
                Existing_Report:
                  summary: With old report id
                  description: Response when the report is avaliable
                  value:
                    id: ekstep.analytics.report.update
                    ver: v1
                    ts: '2020-11-30T07:17:22.982+00:00  '
                    params:
                      resmsgid: 25b07a3a-d59f-47e6-b3d3-76cc5866411c
                      status: successful
                    responseCode: OK
                    result:
                      result: Successfully DeActivated the Report
                Report_Doesnt_Exist:
                  description: Response when the report doesnt exist
                  summary: With new report id
                  value:
                    id: ekstep.analytics.report.submit
                    ver: v1
                    ts: '2020-11-30T07:17:22.982+00:00  '
                    params:
                      err: OK
                      status: failed
                      resmsgid: 25b07a3a-d59f-47e6-b3d3-76cc5866411c
                      errmsg: no report available with requested reportid
                    responseCode: OK
                    result: null
        '500':
          description: Internal Server Error example for deactivate report API
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/druidreportapiDruidReportAPI-InternalServerError
              example:
                id: ekstep.analytics.report.submit
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
  /user/v1/upload:
    post:
      tags:
        - upload users
      summary: Upload Users in Bulk
      description: >-
        This API is associated with upload users in bulk on the Sunbird
        Platform.
           - The endpoint for **Upload Users in Bulk** is `/user/v1/upload`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: UploadUsersinBulk
      parameters:
        - name: Authorization
          in: header
          description: >-
            (Required) Specify authorization key (format: Bearer api-key)
            received from administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: X-Authenticated-User-Token
          in: header
          description: >-
            (Required) Access token of registered user performing given API
            request.
          required: true
          style: simple
          schema:
            type: string
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
            example: multipart/form-data
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding: {}
            schema:
              required:
                - user
              type: object
              properties:
                user:
                  type: string
                  description: |-
                    This is a .csv file.
                      - Each line of the file is a data record. Each record consists of one or more user fields, separated by commas. Each successfully created user is associated with root org of uploader (org admin).

                    The CSV file format supported is mentioned below:
                      - NAME: Name of user(firstName)
                      - MOBILE PHONE: Phone number. Either phone or email is mandatory.
                      - EMAIL: Email. Either phone or email is mandatory.
                      - SCHOOL ID: Organisation ID to which user must be associated(orgId).
                      - USER_TYPE: Type of user. Supported user types are 'teacher' or 'other'.
                      - ROLES: List of valid roles for assignment to user on association to an organisation.roles must be in Capital letters
                      - USER ID: User ID. Required only in case of user update.
                      - External ID: External ID of user. Either, school ID or external ID is mandatory for user association to organisation.
        required: false
      responses:
        '200':
          description: >-
            OK ! Successful operation."bulk upload user" operation was
            successfully executed.
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Tue, 01 Dec 2020 16:24:35 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 251
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 36
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 121
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 76
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkserviceapiSuccess-UploadUsersinBulk'
              example:
                id: api.user.upload
                ver: v1
                ts: '2020-12-01 16:24:35:250+0000'
                params:
                  resmsgid: null
                  msgid: bf2d6e695e927a885eaae649c45b84b4
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  processId: 01316323485186457631
        '400':
          description: >-
            BAD REQUEST. The "bulk upload user" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/bulkserviceapiUploadOrganisationsinBulk-BadRequest
              example:
                id: api.user.upload
                ver: v1
                ts: '2020-12-07 05:55:54:636+0000'
                params:
                  resmsgid: null
                  msgid: cfaddf7e346675b6aeeb9803e32d0ed8
                  err: INVALID_COLUMNS
                  status: INVALID_COLUMNS
                  errmsg: >-
                    Invalid column: firstnamee. Valid columns are: firstname,
                    firstName, roles, roles, usertype, userType, user id,
                    userId, school external id, orgExternalId, userid, userId,
                    orgid, orgId, user_type, userType, school id, orgId, phone,
                    phone, orgexternalid, orgExternalId, mobile phone, phone,
                    name, firstName, email, email.
                responseCode: CLIENT_ERROR
                result: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/bulkserviceapiUploadOrganisationsinBulk-BadRequest
              example:
                id: api.user.upload
                ver: v1
                ts: '2020-12-07 05:44:39:138+0000'
                params:
                  resmsgid: null
                  msgid: 1b4f72063d1b43ef397e9b6ded1dbd90
                  err: UNAUTHORIZED_USER
                  status: SERVER_ERROR
                  errmsg: You are not authorized.
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
      security: []
  /user/v2/bulk/upload:
    post:
      tags:
        - upload shadow users and self-declared users
      summary: Upload Shadow Users in Bulk
      description: >-
        This API allows you to upload users of an organization from a shadow
        (temporary) database to a permanent database on the Sunbird platform.
        Only the org administrator has permissions to upload users. A user
        becomes eligible for migration from the temporary database to the
        permanent database, if the user identifier (email,phone) of the
        temporary database matches the user identifier of the permananent
        database. 
         - The endpoint for **Upload Users in Bulk** is `/user/v2/bulk/upload`
         - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: UploadShadowUsersinBulk
      parameters:
        - name: Authorization
          in: header
          description: >-
            (Required) Specify authorization key (format: Bearer api-key)
            received from administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: X-Authenticated-User-Token
          in: header
          description: >-
            (Required) Access token of registered user performing given API
            request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
            example: multipart/form-data
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding: {}
            schema:
              required:
                - user
              type: object
              properties:
                user:
                  type: string
                  description: >-
                    - This is a .csv file.
                      - Each line of the file is a data record. Each record consists of one or more user fields, separated by commas. Each successfully created user is associated with the root organization of the org administrator.
                    - The CSV file format for shadow-upload supported is as
                    follows:
                      - NAME: Name of user(firstName+lastName)
                      - PHONE: Phone number. Either phone or email is mandatory.
                      - EMAIL: Email. Either phone or email is mandatory.
                      - Ext Org id: The organisation ID to which the user must be associated(extOrgId). This is an optional field. If a value is is provided, the user is associated with that organisation, i.e. the sub-organization of the root organization. If not, the user is only associated to the root organization od the org administrator uploading the users.
                      - Input Status: This is a mandatory attribute. It indicates if the user is active or inactive in the organization.
                      - Ext User ID: This is a mandatory field. It is the ID provided by the root or sub-organization to users to uniquely identify them.
                    - The CSV file format for self-declared-user-upload
                    supported is as follows:
                      - Diksha UUID: It is the identifier of the user.
                      - Status: This is a mandatory attribute. It indicates if the user is Validated or has any Error showing value.
                      - State provided ext. ID: This is a mandatory field. It is the ID provided by the root or sub-organization to users to uniquely identify them.
                      - Channel: Channel of the user belongs to
                      - Persona: It represents type of the user(person) like teacher/other/student etc.
        required: false
      responses:
        '200':
          description: >-
            OK ! Successful operation. ** Bulk upload user** operation was
            successfully executed, with processId that can be used for further
            communication.
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 04 Dec 2020 06:45:24 GMT'
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 5000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 4999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 58
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 24
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 15
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkserviceapiUploadShadowUsersinBulk'
              example:
                id: api.bulk.user.upload
                ver: v2
                ts: '2020-12-04 06:45:24:931+0000'
                params:
                  resmsgid: null
                  msgid: 5f18f128b083e50a09b137dbac323845
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  processId: 013165071979683840148
                  response: SUCCESS
        '400':
          description: >-
            BAD REQUEST. The **Bulk upload user** operation failed. You may have
            missed input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/bulkserviceapiUploadOrganisationsinBulk-BadRequest
              example:
                id: api.bulk.user.upload
                ver: v2
                ts: '2020-12-07 05:57:57:015+0000'
                params:
                  resmsgid: null
                  msgid: f75747ef04d30f7c613d83ad58d64462
                  err: MANDATORY_PARAMETER_MISSING
                  status: MANDATORY_PARAMETER_MISSING
                  errmsg: Mandatory parameter ext user id is missing.
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
      security: []
  '/data/v1/upload/status/{processId}':
    get:
      tags:
        - Check upload status
      summary: Check Upload Status
      description: |-
        This API is used to check the upload status
           - The endpoint for **Check Upload Status** is `/data/v1/upload/status/{processId}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: CheckUploadStatus
      parameters:
        - name: Accept
          in: header
          description: >-
            (Required) **Accept** relates to content-Type such as **"MIME"**,
            Its used in response body for executing different multi purpose
            operations.Therefore, its important that the server is correctly set
            up, so that the MIME types transmitted are recognised and correct to
            determine what action to do when a resource is fetched.
          required: true
          style: simple
          schema:
            type: string
            example: <string>
        - name: Content-Type
          in: header
          description: >-
            (Required) The Content Type entity is the media type of the
            resource.Possible media types can be:-
              - Application/json
          required: true
          style: simple
          schema:
            type: string
            example: <string>
        - name: Authorization
          in: header
          description: >-
            (Required) To make use of the API, you require bearerorization.
            Raise a request to the administrator for the use of the API. You
            will receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: >-
            (Required) It is a unique token/key to authenticate the user each
            time an API is called. For corresponding sessions this token is
            used, not your actual username/password
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: processId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation." check upload status" operation was
            successfully executed
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Tue, 01 Dec 2020 17:13:43 GMT'
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 551
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 27
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 80
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkserviceapiCheckUploadStatus-Success'
              example:
                id: api.upload.status
                ver: v1
                ts: '2020-12-01 17:13:43:230+0000'
                params:
                  resmsgid: null
                  msgid: ff70ec24aae247f1a2b21fae2c200f6c
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response:
                    - failureResult: []
                      processId: 01316326144873267234
                      successResult:
                        - code: APDIST1
                          parentCode: APCODE
                          name: APDIST1
                          type: district
                          parentId: 6824e3d3-5512-4344-a481-7bac011edaa8
                          id: 333a45f6-ce34-491c-b63b-2187c2df367a
                          operation: create
                        - code: APDIST2
                          parentCode: APCODE
                          name: APDIST2
                          type: district
                          parentId: 6824e3d3-5512-4344-a481-7bac011edaa8
                          id: 97287c81-f439-4f69-85fe-d1cf6fca3003
                          operation: create
                      message: Operation is completed.
                      objectType: location
                      status: COMPLETED
        '404':
          description: >-
            - Not Found - The "check upload status" operation failed ! The
            possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/bulkserviceapiUploadOrganisationsinBulk-BadRequest
              example:
                id: api.upload.status
                ver: v1
                ts: '2020-12-07 06:08:49:310+0000'
                params:
                  resmsgid: null
                  msgid: 67cd9b124a93284a1fbd5341ab84e195
                  err: RESOURCE_NOT_FOUND
                  status: RESOURCE_NOT_FOUND
                  errmsg: Requested resource not found
                responseCode: RESOURCE_NOT_FOUND
                result: {}
      deprecated: false
      security: []
  /data/v1/bulk/location/upload:
    post:
      tags:
        - upload locations
      summary: Upload Location Data in Bulk
      description: >-
        This API is used to create a background job for bulk upload of location
        data into the platform. The upload data is provided in CSV format.
          - The endpoint for **Upload Location Data in Bulk** is `/data/v1/bulk/location/upload`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: UploadLocationDatainBulk
      parameters:
        - name: Authorization
          in: header
          description: >-
            (Required) To make use of any Location API, you require
            authorization. Raise a request to the administrator for the use of
            the API. You will receive the authorization key. Specify the key
            received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: >-
            (Required) It is a unique token/key to authenticate the user each
            time an API is called. For corresponding sessions this token is
            used, not your actual username/password
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
            example: multipart/form-data
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding: {}
            schema:
              required:
                - csvFile
                - type
              type: object
              properties:
                csvFile:
                  type: string
                  description: |-
                    CSV file which contains location data in following format:
                      - code: 'National level code for state'
                      - name: 'Name of entity e.g a state'
                      - parentCode: 'code of the parent'
                      - parentId : 'ID of the parent (In a hierarchy),    

                        - if there exists a parent node either parentCode and parentID is required (in case of a child node) 
                        - if it is highest (top) node in the hierarchy,then no parent details are required
                type:
                  type: string
                  description: >-
                    Represents the information about the possible values of
                    location types state, district, block, cluster
                  example: district
        required: false
      responses:
        '200':
          description: >-
            OK. Successful operation. The data upload operation is accepted for
            further processing.
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Tue, 01 Dec 2020 17:13:28 GMT'
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 36
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1600
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 89
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/bulkserviceapiSuccess-UploadLocationDatainBulk
              example:
                id: api.bulk.location.upload
                ver: v1
                ts: '2020-12-01 17:13:28:034+0000'
                params:
                  resmsgid: null
                  msgid: 0eef8c3ff45390894ecd98c146248792
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  processId: 01316326144873267234
        '400':
          description: >-
            - Bad Request - CLIENT_ERROR. The upload operation failed due to bad
            request from client. Possible reasons for failure, Mandatory
            parameter "csvFile" is missing. Maximum upload file size x MB is
            exceeded. CSV file content is improper.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/bulkserviceapiUploadOrganisationsinBulk-BadRequest
              example:
                id: api.bulk.location.upload
                ver: v1
                ts: '2020-12-07 06:12:12:070+0000'
                params:
                  resmsgid: null
                  msgid: 4061f9877889c52d4eb0b0fe569be1ff
                  err: MANDATORY_PARAMETER_MISSING
                  status: MANDATORY_PARAMETER_MISSING
                  errmsg: Mandatory parameter code is missing.
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
      security: []
  /org/v1/upload:
    post:
      tags:
        - Bulk Organisation Upload
      summary: Upload Organisations in Bulk
      description: >-
        This API is associated with bulk uploading organisations on the Sunbird
        Platform.
           - The endpoint for **Upload Organisations in Bulk** is `/org/v1/upload`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: UploadOrganisationsinBulk
      parameters:
        - name: Authorization
          in: header
          description: >-
            (Required) Specify authorization key (format: Bearer api-key)
            received from administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: X-Authenticated-User-Token
          in: header
          description: >-
            (Required) Access token of registered user performing given API
            request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: Content-Type
          in: header
          description: ''
          required: true
          style: simple
          schema:
            type: string
            example: multipart/form-data
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding: {}
            schema:
              required:
                - org
              type: object
              properties:
                org:
                  type: string
                  description: |-
                    This is a .csv file.
                      - Each line of the file is a data record. Each record consists of one or more organisation fields, separated by commas. Each successfully created organisation is associated with root org of uploader (org admin).

                    The CSV file format supported is mentioned below:
                      - SCHOOL NAME: Organisation name(orgName)
                      - BLOCK CODE: Location code (locationCode)
                      - SCHOOL ID: Organisation ID. Required only in case of organisation update(organisationId).
                      - EXTERNAL ID: External ID of organisation(externalId)
                      - STATUS: Status. Supported values are 'active' and 'inactive'(status) mandatory param.
                      - DESCRIPTION: Organisation description(description)
        required: false
      responses:
        '200':
          description: >-
            OK ! Successful operation."bulk org upload " operation was
            successfully executed.
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 04 Dec 2020 06:51:24 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 249
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 35
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 80
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 43
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/bulkserviceapiUploadOrganisationsinBulk-Suceess
              example:
                id: api.org.upload
                ver: v1
                ts: '2020-12-04 06:51:24:413+0000'
                params:
                  resmsgid: null
                  msgid: 54f533acafefddb758704fb75caad1f9
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  processId: 0131650814782423040
        '400':
          description: |-
            - Bad Request. The "bulk org upload " operation failed ! The
             possible reason for failure is that you may have missed providing input
             for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/bulkserviceapiUploadOrganisationsinBulk-BadRequest
              example:
                id: api.org.upload
                ver: v1
                ts: '2020-12-07 06:14:05:979+0000'
                params:
                  resmsgid: null
                  msgid: 6f50eb71cd56b52a65aea643df42e80b
                  err: MANDATORY_PARAMETER_MISSING
                  status: MANDATORY_PARAMETER_MISSING
                  errmsg: Mandatory parameter orgName is missing.
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
      security: []
  /course/batch/cert/v1/template/add:
    patch:
      tags:
        - Certificate Template Api
      summary: Add certificate template to a course batch
      description: |-
        This API allows you to attach certificate templates.
           - On request, the **_ /template/add_** endpoint attaches a template to the course batch.
           - All fields marked with an * are mandatory
           - The mandatory fields cannot be null or empty
           - Backend route: http://lms-service:9000/v1/course/batch/cert/template/add
      operationId: AddCertificateTemplate
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be Application/json
          required: true
          schema:
            type: string
        - name: ts
          in: header
          description: >-
            The timestamp at which the **Add certificate template** request was
            sent. 
          required: false
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            A unique ID that identifies the request, in case the same API is
            executed multiple times.
          required: false
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          description: >-
            The access token of the registered user sending the given API
            request. This is an alphanumeric string.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body refers to the format of the request. The body contains
          metadata about the request to add the certificate template.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/coursebatchcertificateapiApiRequest'
                - $ref: >-
                    #/components/schemas/coursebatchcertificateapiAddCertificateTemplateRequest
        required: true
      responses:
        '200':
          description: >-
            OK ! Operation successful."Add Certificate template" operation was
            executed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  coursebatchcertificateapiApiResponse:
                    $ref: '#/components/schemas/coursebatchcertificateapiApiResponse'
                  coursebatchcertificateapiSuccessResponse:
                    $ref: >-
                      #/components/schemas/coursebatchcertificateapiSuccessResponse
              example:
                id: api.course.batch.cert.template.add
                ver: v1
                ts: '2020-12-03 05:15:43:693+0000'
                params:
                  resmsgid: null
                  msgid: dcef916a-bbf0-48b6-bb20-2e4b9e90745d
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            BAD REQUEST. The "Add Certificate template" operation failed. Input
            for a mandatory parameter may be missing.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursebatchcertificateapiAddCertificateTemplateErrorResponse
              example:
                id: api.course.batch.cert.template.add
                ver: v1
                ts: '2020-12-03 05:16:35:486+0000'
                params:
                  resmsgid: null
                  msgid: 3d203596-1344-4abd-bb2e-430f1dc865e1
                  err: null
                  status: SERVER_ERROR
                  errmsg: No such batch exists.
                responseCode: CLIENT_ERROR
                result: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursebatchcertificateapiAddCertificateTemplateErrorResponse
              example:
                id: api.course.batch.cert.issue
                ver: v1
                ts: '2020-12-03 04:59:57:705+0000'
                params:
                  resmsgid: null
                  msgid: fefbbbf8-1e39-40a9-b76d-3bd60b9f3786
                  err: UNAUTHORIZED_USER
                  status: SERVER_ERROR
                  errmsg: You are not authorized.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/coursebatchcertificateapi500ServerError
              example:
                id: api.course.batch.cert.template.add
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      x-codegen-request-body-name: Body
      security:
        - bearer: []
        - userToken: []
  /course/batch/cert/v1/template/remove:
    patch:
      tags:
        - Certificate Template Api
      summary: remove certificate template from course batch
      description: |-
        This API is associated with detaching certificate templates.
           - The **_ /template/remove_** endpoint detaches a template from the course batch.
           - All fields marked with an * are mandatory
           - Required fields cannot be null or empty
           - Backend Route: http://lms-service:9000/v1/course/batch/cert/template/remove
      operationId: RemoveCertificateTemplate
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be Application/json
          required: true
          schema:
            type: string
        - name: ts
          in: header
          description: >-
            The timestamp at which the **remove certificate template** request
            was sent. 
          required: false
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            A unique ID that identifies the request in case the same API is
            executed multiple times.
          required: false
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          description: >-
            The access token of the registered user sending the given API
            request. This is an alphanumeric string.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body refers to the format of the request. The body contains
          metadata about the request to remove certificate template.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/coursebatchcertificateapiApiRequest'
                - $ref: >-
                    #/components/schemas/coursebatchcertificateapiRemoveCertificateTemplateRequest
            example:
              request:
                batch:
                  courseId: courseId
                  batchId: batchId
                  template:
                    identifier: template Identifier
        required: true
      responses:
        '200':
          description: >-
            OK ! Operation successful."Remove Certificate template" operation
            was executed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  coursebatchcertificateapiApiResponse:
                    $ref: '#/components/schemas/coursebatchcertificateapiApiResponse'
                  coursebatchcertificateapiSuccessResponse:
                    $ref: >-
                      #/components/schemas/coursebatchcertificateapiSuccessResponse
              example:
                id: api.course.batch.cert.template.remove
                ver: v1
                ts: '2020-12-03 05:36:09:531+0000'
                params:
                  resmsgid: null
                  msgid: cac9434e-fc66-47dc-b37b-15438b3c68ab
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            BAD REQUEST. The "Remove Certificate template" operation failed.
            Input for a mandatory parameter may be missing.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursebatchcertificateapiRemoveCertificateTemplateErrorResponse
              example:
                id: api.course.batch.cert.template.remove
                ver: v1
                ts: '2020-12-03 05:36:09:531+0000'
                params:
                  resmsgid: null
                  msgid: cac9434e-fc66-47dc-b37b-15438b3c68ab
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursebatchcertificateapiAddCertificateTemplateErrorResponse
              example:
                id: api.course.batch.cert.issue
                ver: v1
                ts: '2020-12-03 04:59:57:705+0000'
                params:
                  resmsgid: null
                  msgid: fefbbbf8-1e39-40a9-b76d-3bd60b9f3786
                  err: UNAUTHORIZED_USER
                  status: SERVER_ERROR
                  errmsg: You are not authorized.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: >-
                      #/components/schemas/coursebatchcertificateapi500ServerError
              example:
                id: api.course.batch.cert.template.remove
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      x-codegen-request-body-name: Body
      security:
        - bearer: []
        - userToken: []
  /content/v1/create:
    post:
      tags:
        - Content APIs
      summary: Create Content
      description: |-
        This API is associated with creating content on the Sunbird Platform.
          - The endpoint for **Create Content** is `/content/v1/create`
          - It points to knowledge-mw-service - `/v1/content/create`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      operationId: Create Content
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          required: true
          schema:
            type: string
        - name: x-channel-id
          in: header
          description: >-
            Represents a physical location (e.g: state) uniquely to which the
            user belongs.
          required: true
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          description: Represents the authorized User ID to execute the API.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:'
           
           - JSON 

          The body is the representation of the resource object for creating
          content (an array of parameters which describes the content) 

          - Please refer for supported
          [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/content/1.0/schema.json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contentapiCreateContentRequest'
            example:
              request:
                content:
                  name: H5P Content
                  code: h5pcontent
                  mimeType: application/vnd.ekstep.h5p-archive
                  contentType: Resource
                  createdBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
        required: true
      responses:
        '200':
          description: SUCCESS. The **Create Content** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateSuccessResponse'
              example:
                id: api.content.create
                ver: '3.0'
                ts: '2020-12-10T20:24:45ZZ'
                params:
                  resmsgid: 3be02c4b-3324-41a3-afd8-60f6be0584d2
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_1131697204035993601314
                  node_id: do_1131697204035993601314
                  versionKey: '1607631885207'
        '400':
          description: >-
            'BAD REQUEST. The **Create Content** operation failed. You may have
            missed input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.content.create
                ver: '1.0'
                ts: '2020-12-10T08:50:29.786Z'
                params:
                  resmsgid: c169a7a0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: ERR_CONTENT_CREATE_FIELDS_MISSING
                  errmsg: Required fields for create content are missing
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.content.create
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/content/v1/update/{Content_Id}':
    patch:
      description: |-
        This API is associated with updating content on the Sunbird Platform .
          - **_/Update/_** endpoint executes the "Update Content" request based on parameters provided as metadata in the request body.
          - The endpoint for **Update Content** is `/content/v1/update`
          - It points to knowledge-mw-service - `/v1/content/update`
          - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Update Content
      tags:
        - Content APIs
      operationId: Update Content
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          required: true
          description: The Registered User ID used to execute the API.
          schema:
            type: string
        - name: X-Channel-id
          in: header
          required: false
          description: The unique ID provided to the State to which the user belongs.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contentapiUpdateContentrequest'
            example:
              request:
                content:
                  versionKey: '1607631400608'
                  description: Updated description
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the content to be updated.
            - Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/content/1.0/schema.json)
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation.Content update operation was successfuly
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateSuccessResponse'
              example:
                id: api.content.update
                ver: '4.0'
                ts: '2020-12-10T20:26:07ZZ'
                params:
                  resmsgid: 80aa9310-b749-411c-a13b-8d9f25af389f
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_1131697204035993601314
                  node_id: do_1131697204035993601314
                  versionKey: '1607631967842'
        '400':
          description: >-
            BAD REQUEST. The 'Update Content' operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.content.update
                ver: '4.0'
                ts: '2020-12-10T20:27:01ZZ'
                params:
                  resmsgid: 87eb99c6-bc10-406a-a6fe-13651f546ce1
                  msgid: null
                  err: ERR_INVALID_REQUEST
                  status: failed
                  errmsg: Please Provide Version Key!
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Update** operation failed !The possible
            reason for failure is that you may have provided wrong content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.content.update
                ver: '3.0'
                ts: '2020-12-12T00:31:16ZZ'
                params:
                  resmsgid: c29ffd8b-d105-4eeb-a875-deaeae2bf5b8
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_21317015414162227213604
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/content/v1/upload/{Content_Id}':
    post:
      description: |-
        This API is associated with uploading content on the Sunbird Platform .
           - The**_/upload/{content Id}_** endpoint executes "Upload Content" request based on parameters provided as metadata in the request body.
           - The endpoint for **Upload Content** is `/content/v1/upload`
          - It points to knowledge-mw-service - `/v1/content/upload`
          - {...}refers to a section of upload endpoint URL path that needs to be replaced by appropriate Id.
           - You need to provide a valid content Id value in {Content Id} field of API URL.
           - It is mandatory to provide values for parameters marked with *. 
           - Mandatory fields cannot be null or empty.
      summary: Upload Content
      tags:
        - Content APIs
      operationId: Upload Content
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
          schema:
            type: string
        - name: X-Authenticated-Userid
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  description: Content package file which you intend to upload
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: >-
            OK ! Successful operation."Content upload" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentUploadSuccessResponse'
              example:
                id: api.content.upload
                ver: '3.0'
                ts: '2020-12-10T21:00:16ZZ'
                params:
                  resmsgid: 4505a08c-9d0c-447b-8b3f-692e31f841fd
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_1131697376667402241315
                  artifactUrl: >-
                    https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/content/do_112547906582659072139/artifact/pdf_1531726896452.pdf
                  content_url: >-
                    https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/content/do_112547906582659072139/artifact/pdf_1531726896452.pdf
                  node_id: do_1131697376667402241315
                  versionKey: '1607634016927'
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Review** operation failed !The
            possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.content.upload
                ver: '3.0'
                ts: '2020-12-10T21:21:20ZZ'
                params:
                  resmsgid: 58139c89-2852-4673-b414-2f867c91bbc1
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_11316973766674022413151
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/content/v1/upload/url/{Content_Id}':
    post:
      description: |-
        This API is associated with uploading content on the Sunbird Platform .
           - The**_/upload/url/{content Id}_** endpoint executes "Upload Content URL" request based on parameters provided as metadata in the request body.
           - The endpoint for **Upload Content URL** is `/content/v1/upload/url`
          - It points to knowledge-mw-service - `/v1/content/upload/url`
          - {...}refers to a section of upload endpoint URL path that needs to be replaced by appropriate Id.
           - You need to provide a valid content Id value in {Content Id} field of API URL.
           - On Success api returns pre-signed-url link with come configured ttl against which file can be uploaded.
           - It is mandatory to provide values for parameters marked with *. 
           - Mandatory fields cannot be null or empty.
      summary: Upload URL
      tags:
        - Content APIs
      operationId: Upload URL
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-Userid
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contentapiUploadUrlContentRequest'
            example:
              request:
                content:
                  fileName: test.pdf
        description: |-
          The body refers to the format of the request.
            - The body contains file name against which pre-signed url has to be generated.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Content upload" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentUploadUrlSuccessResponse'
              example:
                id: api.content.upload.url
                ver: '3.0'
                ts: '2020-12-11T23:52:44ZZ'
                params:
                  resmsgid: 81e308fa-3e36-45ff-b295-e28e8f757dc7
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_11317053041892556811094
                  url_expiry: '54000'
                  pre_signed_url: >-
                    https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/assets/do_11317053041892556811094/10-page-pdf.pdf?sv=2017-04-17&se=2020-12-12T14%3A52%3A44Z&sr=b&sp=w&sig=Tlt6uWI/6lMeupkEbsTAmGajmo1qzw8HeUHrVwOm6yk%3D
        '400':
          description: >-
            BAD REQUEST. The 'Upload Url' operation failed ! The possible reason
            for failure is that you may have missed providing input for a
            mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.content.upload.url
                ver: '3.0'
                ts: '2020-12-11T23:54:07ZZ'
                params:
                  resmsgid: 4edde64d-3116-4271-bcc1-a8ba0ec2d56b
                  msgid: null
                  err: ERR_CONTENT_BLANK_FILE_NAME
                  status: failed
                  errmsg: File name is blank
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Id sent for generating upload url**
            operation failed !The possible reason for failure is that you may
            have provided wrong content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.upload.url
                ver: '1.0'
                ts: '2020-12-11T23:48:26.694Z'
                params:
                  resmsgid: 5cf72660-3c0b-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_11254577204586086415
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/content/v1/read/{Content_Id}':
    get:
      description: >-
        This API is associated with viewing and reading out the content on the
        Sunbird Platform .
          - The **_/read/{contentId}_** endpoint executes request for fetching the contents to be viewed and read.
          - The endpoint for **Read Content** is `/content/v1/read`
          - It points to knowledge-mw-service - `/v1/content/read`
          - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.
          - You need to provide a valid content Id value in {Content Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Read Content
      tags:
        - Content APIs
      operationId: Read Content
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Read content" operation was successfully
            executed. For all possible metadata, please
            [refer](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/content/1.0/schema.json)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentGetSuccessResponse'
              example:
                id: api.content.read
                ver: '1.0'
                ts: '2020-12-10T20:38:32.510Z'
                params:
                  resmsgid: ab16e5e0-3b27-11eb-b0a2-8d5c9f561887
                  msgid: ab131550-3b27-11eb-b0a2-8d5c9f561887
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  content:
                    ownershipType:
                      - createdBy
                    code: org.sunbird.EHdZir
                    credentials:
                      enabled: 'No'
                    channel: channel-1
                    language:
                      - English
                    mimeType: application/vnd.ekstep.h5p-archive
                    idealScreenSize: normal
                    createdOn: '2020-12-10T20:38:13.315+0000'
                    objectType: Content
                    primaryCategory: Learning Resource
                    contentDisposition: inline
                    lastUpdatedOn: '2020-12-10T20:38:13.315+0000'
                    contentEncoding: gzip
                    contentType: Resource
                    dialcodeRequired: 'No'
                    trackable:
                      enabled: 'No'
                      autoBatch: 'No'
                    identifier: do_21316972702362828813477
                    lastStatusChangedOn: '2020-12-10T20:38:13.315+0000'
                    audience:
                      - Student
                    os:
                      - All
                    visibility: Default
                    consumerId: 2eaff3db-cdd1-42e5-a611-bebbf906e6cf
                    mediaType: content
                    osId: org.ekstep.quiz.app
                    languageCode:
                      - en
                    version: 2
                    versionKey: '1607632693315'
                    license: CC BY 4.0
                    idealScreenDensity: hdpi
                    framework: NCF
                    createdBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
                    compatibilityLevel: 1
                    name: Test_h5p
                    status: Draft
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Read** operation failed !The possible
            reason for failure is that you may have provided wrong content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.content.read
                ver: '1.0'
                ts: '2020-12-10T20:37:58.223Z'
                params:
                  resmsgid: 96a71df0-3b27-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_1131697204035993601314
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/content/v1/review/{Content_Id}':
    post:
      description: >-
        >- This API is associated with Submission of content for Review  on the
        Sunbird Platform .
          - The**_/review/{content Id}_** endpoint executes "Submit for Review" request based on parameters provided as metadata in the request body.
          - The endpoint for **Review Content** is `/content/v1/review`
          - It points to knowledge-mw-service - `/v1/content/review`
          - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - You need to provide a valid content Id value in {Content Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Submit for Review
      tags:
        - Content APIs
      operationId: Submit Content for Review
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-User-token
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the content to be sent for review.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation.Content sent for review operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateSuccessResponse'
              example:
                id: ekstep.learning.content.review
                ver: '3.0'
                ts: '2020-12-10T21:06:26ZZ'
                params:
                  resmsgid: 186cf9a9-8094-4cdd-926f-b77a030921d1
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  node_id: do_1131697376667402241315
                  versionKey: '1607634386533'
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Review** operation failed !The
            possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: ekstep.learning.content.review
                ver: '3.0'
                ts: '2020-12-10T21:06:54ZZ'
                params:
                  resmsgid: 944ac944-78d9-43e2-bfd5-337ab52b6552
                  msgid: null
                  err: ERR_TAXONOMY_INVALID_CONTENT
                  status: failed
                  errmsg: >-
                    Error! While Fetching the Content for Operation | [Content
                    Id: do_11316973766674022413151]
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! We track
            these errors automatically, but if the problem persists feel free to
            contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/content/v1/publish/{Content_Id}':
    post:
      description: |-
        This API is associated with publishing content on the Sunbird Platform .
          - **_/publish/_** endpoint executes the "Publish Content" request based on parameters provided as metadata in the request body.
          - The endpoint for **Publish Content** is `/content/v1/publish`
          - It points to knowledge-mw-service - `/v1/content/publish`
          -  {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Publish Content
      tags:
        - Content APIs
      operationId: Publish Content
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Content Id to be published
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
          schema:
            type: string
        - name: X-Authenticated-User-token
          in: header
          required: true
          description: 'User Registered ID , which is used for logging In'
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: Authorizing user in order to grant access.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contentapiPublishContentRequest'
            example:
              request:
                content:
                  lastPublishedBy: Ekstep
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the content to be published.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation.**Content publish operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentPublishSuccessResponse'
              example:
                id: api.v3.publish
                ver: '1.0'
                ts: '2020-12-10T21:41:23.491Z'
                params:
                  resmsgid: 72c4ef30-3b30-11eb-b0a2-8d5c9f561887
                  msgid: 72979da0-3b30-11eb-b0a2-8d5c9f561887
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  content_id: do_21316975736724684813479
                  publishStatus: >-
                    Publish Operation for Content Id
                    'do_21316975736724684813479' Started Successfully!
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Review** operation failed !The
            possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.v3.publish
                ver: '1.0'
                ts: '2020-12-10T21:51:39.870Z'
                params:
                  resmsgid: e228e7e0-3b31-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_213169757367246848134791
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! We track
            these errors automatically, but if the problem persists feel free to
            contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/content/v1/reject/{Content_Id}':
    post:
      description: |-
        This API is associated with rejecting content under review.
          - The **_/reject/{contentId}_** endpoint executes request for rejecting content which is under review. 
          - The endpoint for **Reject Content** is `/content/v1/reject`
          - It points to knowledge-mw-service - `/v1/content/reject`
          - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.
          - You need to provide a valid content Id value in {Content Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Reject Content Review
      tags:
        - Content APIs
      operationId: Reject Content Review
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example: {}
        description: |-
          The body refers to the format of the request.
           - The body contains request about setting flag to reject for content in review process.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Content reject" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentRejectSuccessResponse'
              example:
                id: api.v3.reject
                ver: '1.0'
                ts: '2020-12-11T08:09:46.451Z'
                params:
                  resmsgid: 3b7c1230-3b88-11eb-b0a2-8d5c9f561887
                  msgid: 3b692670-3b88-11eb-b0a2-8d5c9f561887
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id: do_213168073757138944196
                  versionKey: '1607674186357'
        '400':
          description: >-
            ERROR CONTENT NOT IN REVIEW STATUS ! Looks like contentId provided
            is not in review status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.v3.reject
                ver: '1.0'
                ts: '2020-12-11T08:03:51.807Z'
                params:
                  resmsgid: 6819b0f0-3b87-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: ERR_CONTENT_NOT_IN_REVIEW
                  errmsg: >-
                    Content is not in review state for identifier:
                    do_2131680942619115521243
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: >-
            RESOURCE NOT FOUND ! Looks like contentId provided is not a valid
            content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.v3.reject
                ver: '1.0'
                ts: '2020-12-11T08:08:30.454Z'
                params:
                  resmsgid: 0e2fd960-3b88-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_2123462720305561601147
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/content/v1/flag/{Content_Id}':
    post:
      description: |-
        This API is associated with setting Flag for content.
          - The **_/flag/{content Id}_** endpoint executes a request to set flagging status for content ,flag can either be set to "Accepted" or "Rejected".
          - The endpoint for **Flag Content** is `/content/v1/flag`
          - It points to knowledge-mw-service - `/v1/content/flag`
          - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.
          - You need to provide a valid content Id value in {Content Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Flag Content
      tags:
        - Content APIs
      operationId: Flag Content
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-Userid
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example: {}
        description: |-
          The body refers to the format of the request.
           - The body contains request about setting flag to "Accept" or "Reject" for content in review process.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Content Flagging" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentFlagSuccessResponse'
              example:
                id: api.content.flag
                ver: '3.0'
                ts: '2020-12-11T08:45:49ZZ'
                params:
                  resmsgid: 9c935e0c-b504-45e6-bd15-313f46c4613f
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_213143334457982976144
                  node_id: do_213143334457982976144
                  versionKey: '1607676349236'
        '400':
          description: >-
            ERR_CONTENT_NOT_FLAGGABLE! Looks like contentId is not in flaggable
            status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.content.flag
                ver: '3.0'
                ts: '2020-12-11T08:44:53ZZ'
                params:
                  resmsgid: 2ff1945b-a114-44ca-929e-7d19a6f8a745
                  msgid: null
                  err: ERR_CONTENT_NOT_FLAGGABLE
                  status: failed
                  errmsg: >-
                    Unpublished Content do_213168073757138944196 cannot be
                    flagged
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Flag** operation failed !The
            possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.content.flag
                ver: '3.0'
                ts: '2020-12-11T09:41:41ZZ'
                params:
                  resmsgid: 5b4f0b33-3941-4c18-b8bf-123c2e0348e6
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_2131433344579829761441
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/content/v1/flag/reject/{Content_Id}':
    post:
      description: >-
        This API is associated with setting Reject Flag for content under review
        process on the Sunbird Platform .
          - The **_/flag/reject/_**endpoint executes request for flagging content under review to "Reject flag", if content is found in-appropriate.
          - The endpoint for **Flag Reject Content** is `/content/v1/flag/reject`
          - It points to knowledge-mw-service - `/v1/content/flag/reject`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Reject Flag
      tags:
        - Content APIs
      operationId: Reject Flag
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-User-token
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
            example: {}
        description: The body refers to the format of the request.
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Reject Flag" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateSuccessResponse'
        '400':
          description: >-
            ERR CONTENT NOT FLAGGED! Looks like contentId is not in flagged
            status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Flag Reject** operation failed
            !The possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/content/v1/flag/accept/{Content_Id}':
    post:
      description: >-
        This API is associated with setting Accept Flag for content under review
        process on the Sunbird Platform .
          - The **_/flag/accept/_**endpoint executes request for flagging content under review to "Accept flag", if content is found appropriate.
          - The endpoint for **Flag Accept Content** is `/content/v1/flag/accept`
          - It points to knowledge-mw-service - `/v1/content/flag/accept`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Accept Flag
      tags:
        - Content APIs
      operationId: Accept Flag
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
          schema:
            type: string
        - name: X-Authenticated-User-token
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contentapiFlagAcceptContentRequest'
            example:
              request:
                versionKey: '1507102327646'
      responses:
        '200':
          description: >-
            OK ! Successful operation."Accept Flag" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateSuccessResponse'
              example:
                id: api.flag.accept
                ver: '1.0'
                ts: '2020-12-11T11:40:01.464Z'
                params:
                  resmsgid: 9a9e4b80-3ba5-11eb-b0a2-8d5c9f561887
                  msgid: 9a49e9f0-3ba5-11eb-b0a2-8d5c9f561887
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_31221753157709004825531
                  node_id: do_31221753157709004825531
                  versionKey: '1607686801161'
        '400':
          description: >-
            BAD REQUEST. The "Accept Flag" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.flag.accept
                ver: '1.0'
                ts: '2020-12-11T11:25:34.614Z'
                params:
                  resmsgid: 95ef7b60-3ba3-11eb-be5b-f9d249ba9049
                  msgid: null
                  status: failed
                  err: ERR_INVALID_CONTENT
                  errmsg: Invalid Flagged Content! Content Can Not Be Accepted.
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Flag Accept** operation failed
            !The possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.flag.accept
                ver: '1.0'
                ts: '2020-12-11T11:24:42.903Z'
                params:
                  resmsgid: 771d0270-3ba3-11eb-be5b-f9d249ba9049
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_213143334457982976144
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/content/v1/retire/{Content_Id}':
    delete:
      description: |-
        This API is associated with retiring content on the Sunbird Platform .
          - The **_/retire/{contentId}_** endpoint executes  "Retire Content" request based on content Id to delete the specific content.'
          - The endpoint for **Retire Content** is `/content/v1/retire`
          - It points to knowledge-mw-service - `/v1/content/retire`
          - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters.
          - Mandatory fields cannot be null or empty.
      summary: Retire Content
      tags:
        - Content APIs
      operationId: Retire Content
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: X-Authenticated-User-token
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation.**Content deletion operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentRetireSuccessResponse'
              example:
                id: api.content.retire
                ver: '3.0'
                ts: '2020-12-11T12:05:52ZZ'
                params:
                  resmsgid: ebd2655a-a69a-460c-9bcf-0f45f5938fac
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: do_11283183576849612818
                  node_id: do_11283183576849612818
        '400':
          description: ERR CONTENT RETIRE! Content is already retired.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.content.retire
                ver: '3.0'
                ts: '2020-12-11T12:01:24ZZ'
                params:
                  resmsgid: ec20ec05-581c-4559-988a-449f3c5ae698
                  msgid: null
                  err: ERR_CONTENT_RETIRE
                  status: failed
                  errmsg: >-
                    Content with Identifier do_11316298360130764811 is already
                    Retired.
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Flag Accept** operation failed
            !The possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.content.retire
                ver: '3.0'
                ts: '2020-12-11T11:56:35ZZ'
                params:
                  resmsgid: d826e808-2866-4603-9b60-0a3130a37128
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_213143334457982976144
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  '/content/v1/copy/{Content_Id}':
    post:
      description: |-
        This API is associated with copying a content on the Sunbird Platform .
          - The **_/copy/_**endpoint executes request for copy content, if content is found appropriate.
          - The endpoint for **Copy Content** is `/content/v1/copy`
          - It points to knowledge-mw-service - `/v1/content/copy`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Copy Content
      tags:
        - Content APIs
      operationId: Copy Content
      parameters:
        - in: path
          name: Content_Id
          required: true
          description: Please append a valid Content Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: X-Authenticated-User-token
          in: header
          required: true
          description: The Registered User ID to execute the API.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contentapiCopyContentRequest'
            example:
              request:
                content:
                  createdBy: user1
                  createdFor:
                    - user2
                  organisation:
                    - sunbird
                  framework: NCF
      responses:
        '200':
          description: >-
            OK ! Successful operation."Copy" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCopySuccessResponse'
              example:
                id: api.content.copy
                ver: '1.0'
                ts: '2020-12-11T23:28:25.343Z'
                params:
                  resmsgid: 90e788f0-3c08-11eb-b0a2-8d5c9f561887
                  msgid: 90b3f5d0-3c08-11eb-b0a2-8d5c9f561887
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id:
                    do_21316884557433241613378: do_21317051846683852813814
                  versionKey: '1607729305036'
        '400':
          description: >-
            BAD REQUEST. The "Copy Content" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.content.copy
                ver: '1.0'
                ts: '2020-12-11T23:27:31.708Z'
                params:
                  resmsgid: 70ef7bc0-3c08-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: ERR_INVALID_REQUEST
                  errmsg: >-
                    Please provide valid value for List(createdBy, createdFor,
                    organisation, framework)
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**Content Send for Copy** operation failed !The
            possible reason for failure is that you may have provided wrong
            content id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.content.copy
                ver: '1.0'
                ts: '2020-12-11T23:28:36.863Z'
                params:
                  resmsgid: 97c558f0-3c08-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_213168845574332416133781
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /content/v1/search:
    post:
      description: >-
        This API is associated with Searching Object created as part of sourcing
        object creation on the Sunbird Platform.
          - The endpoint for **Content Search** is `/content/v1/search`
          - It points to knowledge-mw-service - `/v1/search`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Search Content
      tags:
        - Content APIs
      operationId: Search Content
      parameters:
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
      requestBody:
        description: >-
          The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:

          - JSON

          The body is the representation of the resource object for searching
          objects
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contentapiContentSearchRequest'
            examples:
              a:
                summary: Search - All status & with limit
                value:
                  request:
                    filters:
                      objectType: Content
                      status: []
                    limit: 1
              b:
                summary: Search - Specific status & with limit
                value:
                  request:
                    filters:
                      objectType: Content
                      status:
                        - Review
                    limit: 1
              c:
                summary: Search - Get Facets Between Date Range
                value:
                  request:
                    filters:
                      objectType: Content
                      status: []
                      createdOn:
                        min: '2020-10-01T00:00:00.000+0530'
                        max: '2020-12-01T23:59:59.999+0530'
                    limit: 0
                    facets:
                      - board
              d:
                summary: Search - Get specific fields in response
                value:
                  request:
                    filters:
                      objectType: Content
                      status: []
                    limit: 2
                    fields:
                      - mimeType
                      - createdOn
                    sort_by:
                      createdOn: desc
              e:
                summary: Search - Assert on specific field
                value:
                  request:
                    filters:
                      objectType: Content
                      status: []
                    limit: 2
                    exists:
                      - dialcodes
                    fields:
                      - dialcodes
                      - createdOn
                    sort_by:
                      createdOn: desc
              f:
                summary: Search - based on specific query string
                value:
                  request:
                    query: शेर का साथी हाथी
                    filters:
                      objectType: Content
                      status: []
                    limit: 2
                    fields:
                      - name
                      - description
        required: true
      responses:
        '200':
          description: SUCCESS. The **Content Search** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentSearchSuccessResponse'
              examples:
                a:
                  summary: Search Response - All status & with limit
                  value:
                    id: api.content.search
                    ver: '1.0'
                    ts: '2020-12-22T06:24:45.025Z'
                    params:
                      resmsgid: 62160510-441e-11eb-9b0c-abcfbdf41bc3
                      msgid: 620ae180-441e-11eb-9b0c-abcfbdf41bc3
                      status: successful
                      err: null
                      errmsg: null
                    responseCode: OK
                    result:
                      count: 480465
                      content:
                        - code: org.ekstep.jun16.story.test05
                          subject:
                            - literacy
                          flags:
                            - Test case
                          channel: in.ekstep
                          downloadUrl: >-
                            https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/ecar_files/org.ekstep.jun16.story.test05/vrgaatiil-upkrmclassroom-activities_1498725323304_org.ekstep.jun16.story.test05_1.0.ecar
                          description: शेर का साथी हाथी
                          lastFlaggedOn: '2017-12-27T13:30:48.942+0000'
                          language:
                            - English
                          variants:
                            spine:
                              ecarUrl: >-
                                https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/ecar_files/org.ekstep.jun16.story.test05/vrgaatiil-upkrmclassroom-activities_1498725324677_org.ekstep.jun16.story.test05_1.0_spine.ecar
                              size: 851
                          mimeType: application/vnd.ekstep.ecml-archive
                          flaggedBy:
                            - Test case
                          idealScreenSize: normal
                          createdOn: '2017-06-29T07:44:15.875+0000'
                          objectType: Content
                          collections:
                            - do_11228062262625075214
                          appId: ekstep_portal
                          contentDisposition: inline
                          contentEncoding: gzip
                          artifactUrl: >-
                            https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/content/org.ekstep.jun16.story.test05/artifact/1485166711340_do_30102464_1498725273215.zip
                          lastUpdatedOn: '2017-12-27T13:30:48.968+0000'
                          SYS_INTERNAL_LAST_UPDATED_ON: '2018-01-09T18:41:32.368+0000'
                          contentType: Story
                          owner: EkStep
                          lastUpdatedBy: Test case
                          identifier: org.ekstep.jun16.story.test05
                          audience:
                            - Learner
                          flagReasons:
                            - Copyright Violation
                          visibility: default
                          os:
                            - All
                          consumerId: 72e54829-6402-4cf0-888e-9b30733c1b88
                          mediaType: content
                          osId: org.ekstep.quiz.app
                          graph_id: domain
                          nodeType: DATA_NODE
                          pkgVersion: 1
                          versionKey: '1515523292368'
                          prevState: Draft
                          idealScreenDensity: hdpi
                          dialcodes:
                            - DAKDF
                            - FSDFDSA
                          s3Key: >-
                            ecar_files/org.ekstep.jun16.story.test05/vrgaatiil-upkrmclassroom-activities_1498725323304_org.ekstep.jun16.story.test05_1.0.ecar
                          size: 9983654
                          lastPublishedOn: '2017-06-29T08:35:23.302+0000'
                          compatibilityLevel: 1
                          name: "\tवर्गातील उपक्रम(Classroom Activities)"
                          resourceType: Story
                          status: Flagged
                          node_id: 105761
                b:
                  summary: Search Response - Specific status & with limit
                  value:
                    id: api.content.search
                    ver: '1.0'
                    ts: '2020-12-22T06:33:54.794Z'
                    params:
                      resmsgid: a9c61ca0-441f-11eb-9b0c-abcfbdf41bc3
                      msgid: a9c49600-441f-11eb-9b0c-abcfbdf41bc3
                      status: successful
                      err: null
                      errmsg: null
                    responseCode: OK
                    result:
                      count: 6370
                      content:
                        - ownershipType:
                            - createdBy
                          code: 0cc5be9a-32a0-c825-06c0-69e82a6c5951
                          prevStatus: Draft
                          subject:
                            - English
                          bloomslevel: remember
                          channel: b00bc992ef25f1a9a8d63291e20efc8d
                          language:
                            - English
                          mimeType: application/pdf
                          medium:
                            - English
                          idealScreenSize: normal
                          createdOn: '2020-01-08T13:41:40.258+0000'
                          objectType: Content
                          appIcon: >-
                            https://ntpstagingall.blob.core.windows.net/ntp-content-staging/content/do_21291553051403878414/artifact/explanation.thumb_1576602846206.png
                          gradeLevel:
                            - Grade 1
                          primaryCategory: Explanation Content
                          appId: local.sunbird.portal
                          contentDisposition: inline
                          artifactUrl: >-
                            https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/assets/do_112930997454864384150/sample.pdf
                          contentEncoding: identity
                          lastUpdatedOn: '2020-01-08T13:44:32.610+0000'
                          SYS_INTERNAL_LAST_UPDATED_ON: '2020-01-08T13:43:42.419+0000'
                          contentType: ExplanationResource
                          dialcodeRequired: 'No'
                          identifier: do_112930997454864384150
                          audience:
                            - Student
                          creator: Creation
                          lastStatusChangedOn: '2020-01-08T13:44:32.602+0000'
                          visibility: Default
                          os:
                            - All
                          consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                          mediaType: content
                          osId: org.ekstep.quiz.app
                          graph_id: domain
                          nodeType: DATA_NODE
                          version: 2
                          versionKey: '1578491072610'
                          license: CC BY 4.0
                          idealScreenDensity: hdpi
                          framework: NCFCOPY
                          lastSubmittedOn: '2020-01-08T13:44:32.405+0000'
                          createdBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
                          compatibilityLevel: 1
                          name: lesson Plan
                          board: NCERT
                          resourceType: Read
                          status: Review
                          node_id: 378232
                c:
                  summary: Search Response - Get Facets Between Date Range
                  value:
                    id: api.content.search
                    ver: '1.0'
                    ts: '2020-12-22T06:55:03.815Z'
                    params:
                      resmsgid: 9e2b5970-4422-11eb-9b0c-abcfbdf41bc3
                      msgid: 9e295da0-4422-11eb-9b0c-abcfbdf41bc3
                      status: successful
                      err: null
                      errmsg: null
                    responseCode: OK
                    result:
                      count: 14423
                      facets:
                        - values:
                            - name: state (uttar pradesh)
                              count: 1
                            - name: state (andhra pradesh)
                              count: 1
                            - name: ncert
                              count: 26
                            - name: cbse
                              count: 335
                          name: board
                d:
                  summary: Search Response - Get specific fields in response
                  value:
                    id: api.content.search
                    ver: '1.0'
                    ts: '2020-12-22T07:21:30.803Z'
                    params:
                      resmsgid: 50168030-4426-11eb-9b0c-abcfbdf41bc3
                      msgid: 5010b3d0-4426-11eb-9b0c-abcfbdf41bc3
                      status: successful
                      err: null
                      errmsg: null
                    responseCode: OK
                    result:
                      count: 480465
                      content:
                        - identifier: domain_62767
                          mimeType: application/vnd.ekstep.ecml-archive
                          createdOn: '9390-06-06T13:36:06.929+0000'
                          objectType: Content
                        - identifier: do_112196430983438336116
                          mimeType: application/vnd.ekstep.content-collection
                          createdOn: '4177-05-07T06:55:23.005+0000'
                          objectType: Content
                e:
                  summary: Search Response - Assert on specific field
                  value:
                    id: api.content.search
                    ver: '1.0'
                    ts: '2020-12-22T07:24:02.522Z'
                    params:
                      resmsgid: aa84fba0-4426-11eb-9b0c-abcfbdf41bc3
                      msgid: aa839c10-4426-11eb-9b0c-abcfbdf41bc3
                      status: successful
                      err: null
                      errmsg: null
                    responseCode: OK
                    result:
                      count: 2202
                      content:
                        - identifier: do_395
                          dialcodes:
                            - V1T2P8
                          createdOn: '2020-12-17T06:36:54.716+0000'
                          objectType: Content
                        - identifier: do_11317422696104755212890
                          dialcodes:
                            - K1G7M9
                          createdOn: '2020-12-17T05:13:22.086+0000'
                          objectType: Content
                f:
                  summary: Search Response - based on specific query string
                  value:
                    id: api.content.search
                    ver: '1.0'
                    ts: '2020-12-22T07:30:44.414Z'
                    params:
                      resmsgid: 9a10d5e0-4427-11eb-9b0c-abcfbdf41bc3
                      msgid: 9a0d2c60-4427-11eb-9b0c-abcfbdf41bc3
                      status: successful
                      err: null
                      errmsg: null
                    responseCode: OK
                    result:
                      count: 290
                      content:
                        - identifier: org.ekstep.ma8.story
                          name: शेर का साथी हाथी
                          description: Test
                          objectType: Content
                        - identifier: org.ekstep.march.content_1020
                          name: शेर का साथी हाथी
                          description: शेर का साथी हclsथी
                          objectType: Content
        '400':
          description: >-
            BAD REQUEST. The **Content Search** operation failed. You may have
            missed input for a mandatory parameter - content-type in header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentSearchErrorResponse'
              example:
                id: api.content.search
                ver: '1.0'
                ts: '2020-12-21T11:46:50.400Z'
                params:
                  resmsgid: 367e7a00-4382-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_CONTENT_SEARCH_FIELDS_MISSING
                  errmsg: Required fields for search content are missing
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentSearchErrorResponse'
              example:
                id: api.content.search
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /content/v1/import:
    post:
      description: >-
        This API is associated with importing a content on the Sunbird Platform
        from different environment.
          - The **_/import/_**endpoint executes request for impoting content, if content is found appropriate.
          - The endpoint for **Import Content** is `/content/v1/import`
          - It points to content-service - `/content/v3/import`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Import Content
      tags:
        - Content APIs
      operationId: Import Content
      parameters:
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contentapiImportContentRequest'
            example:
              request:
                content:
                  - source: >-
                      https://vdn.diksha.gov.in/api/content/v1/read/do_4313124780355543040126730
                    metadata: {}
                    collection:
                      - identifier: do_3131112587361648641337
                        unitId: do_3131112587369922561425
      responses:
        '200':
          description: >-
            OK ! Successful operation."Import" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentImportSuccessResponse'
              example:
                id: api.content.import
                ver: '3.0'
                ts: '2020-12-17T16:29:11ZZ'
                params:
                  resmsgid: 7cce8934-0a2f-46bf-a0ee-be5f49874cae
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  processId: 80a765c7-2202-4b3f-b473-448b5c2cd20e
        '400':
          description: >-
            BAD REQUEST. The "Import Content" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
              example:
                id: api.content.import
                ver: '3.0'
                ts: '2020-12-17T16:30:16ZZ'
                params:
                  resmsgid: 31f88a39-2514-4d86-b424-240166e315be
                  msgid: null
                  err: ERR_REQUIRED_PROPS_VALIDATION
                  status: failed
                  errmsg: >-
                    Validation Failed! Mandatory Properties Are [name, code,
                    mimeType, primaryCategory, artifactUrl, framework]
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiContentCreateErrorResponse'
      deprecated: false
      security:
        - bearer: []
  /content/v1/fetchmeta:
    post:
      tags:
        - Content APIs
      summary: Url Fetch Metadata
      description: >-
        This API is associated with fetching url metadata details on the Sunbird
        Platform.
          - The endpoint for **Create Content** is `/content/v1/fetchmeta`
          - It points to knowledge-mw-service - `/v1/url/fetchmeta`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      operationId: Fetch Url Metadata
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:'
           
           - JSON 
          The body is the representation of the resource object for creating
          content (an array of parameters which describes the content) 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contentapiFetchUrlMetadataRequest'
            example:
              request:
                url: 'https://github.com/project-sunbird/sunbird.org-docs'
        required: true
      responses:
        '200':
          description: SUCCESS. The **URL Fetch Metadata** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiUrlFetchMetadataSuccessResponse'
              example:
                ts: '2021-02-02T08:38:20.329Z'
                params:
                  resmsgid: 00edd990-6532-11eb-9dac-65b700f4c009
                  msgid: null
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  url: 'https://github.com/project-sunbird/sunbird.org-docs'
                  canonical: 'https://github.com/project-sunbird/sunbird.org-docs'
                  title: project-sunbird/sunbird.org-docs
                  image: 'https://avatars.githubusercontent.com/u/26705730?s=400&v=4'
                  author: ''
                  description: >-
                    Repository for documentation on sunbird.org. Contribute to
                    project-sunbird/sunbird.org-docs development by creating an
                    account on GitHub.
                  keywords: ''
                  source: github.com
                  'og:url': 'https://github.com/project-sunbird/sunbird.org-docs'
                  'og:locale': ''
                  'og:locale:alternate': ''
                  'og:title': project-sunbird/sunbird.org-docs
                  'og:type': object
                  'og:description': >-
                    Repository for documentation on sunbird.org. Contribute to
                    project-sunbird/sunbird.org-docs development by creating an
                    account on GitHub.
                  'og:determiner': ''
                  'og:site_name': GitHub
                  'og:image': 'https://avatars.githubusercontent.com/u/26705730?s=400&v=4'
                  'og:image:secure_url': ''
                  'og:image:type': ''
                  'og:image:width': ''
                  'og:image:height': ''
                  price: ''
                  priceCurrency: ''
                  availability: ''
        '400':
          description: >-
            'BAD REQUEST. The **URL Fetch Metadata** operation failed. You may
            have missed input for a mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiUrlFetchMetadataErrorResponse'
              example:
                ts: '2021-02-02T08:53:31.808Z'
                params:
                  resmsgid: 20368200-6534-11eb-9dac-65b700f4c009
                  msgid: null
                  status: failed
                  err: ERR_FETCH_URLMETA_MISSING
                  errmsg: Required fields for fetching url meta data are missing
                responseCode: CLIENT_ERROR
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contentapiUrlFetchMetadataErrorResponse'
              example:
                ts: '2021-02-02T08:57:49.620Z'
                params:
                  resmsgid: b9e17f40-6534-11eb-9dac-65b700f4c009
                  msgid: null
                  status: failed
                  err: ERR_FETCH_URLMETA_FAILED
                  errmsg: Unable to load the url metadata
      deprecated: false
      security:
        - bearer: []
  /channel/v1/create:
    post:
      tags:
        - Channel APIs
      summary: Create Channel
      description: |-
        This API is used for creating a channel    
          - The endpoint for **Create Channel** is `/channel/v1/create`
          - It points to knowledge-mw-service - `/v1/channel/create`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: ChannelV1CreatePost
      parameters:
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource
             Possible media types can be:- 
               - application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require bearer authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:'
             
             - JSON 
             - XML data
           
           The body is the representation of the resource object for creating a channel.
           Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/channel/1.0/schema.json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkChannelCreateRequest'
            example:
              request:
                channel:
                  name: Channel Name
                  code: channel-id
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Create channel" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkChannelCreate200Response'
              example:
                id: api.channel.create
                ver: '1.0'
                ts: '2020-12-14T08:27:27.810Z'
                params:
                  resmsgid: 3357da20-3de6-11eb-9ff3-67c41480f6aa
                  msgid: 3353bb70-3de6-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  identifier: channel-id
                  node_id: channel-id
        '400':
          description: >-
            BAD REQUEST. The "Create Channel" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter or providing some wrong request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkChannelCreate400Response'
              example:
                id: api.channel.create
                ver: '1.0'
                ts: '2020-12-14T08:26:15.914Z'
                params:
                  resmsgid: 087d64a0-3de6-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: CONSTRAINT_VALIDATION_FAILED
                  errmsg: 'Object already exists with identifier: channel-id'
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  '/channel/v1/read/{ID}':
    get:
      tags:
        - Channel APIs
      summary: Get a Channel
      description: |-
        This API is associated with fetching a channel by a specific channel ID
           - The endpoint for **Get a Channel** is `/channel/v1/read/{ID}`
           - It points to knowledge-mw-service - `/v1/channel/read/{ID}` 
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: ChannelV1ReadGet
      parameters:
        - name: ID
          in: path
          description: Unique identifier of the channel to get
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource
             Possible media types can be:- 
               
               - application/json
               - multipart/form-data
               - application/x-www-form-urlencoded
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation. **Channel Read** operation was
            successfully executed. \n Please refer for different additional
            [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/content/1.0/schema.json)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkChannelGet200Response'
              example:
                id: api.channel.read
                ver: '3.0'
                ts: '2020-12-14T08:33:50ZZ'
                params:
                  resmsgid: 02c742d2-57e1-4441-aa31-0ce339c3917b
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  channel:
                    identifier: channel-405
                    lastStatusChangedOn: '2020-12-14T08:27:49.490+0000'
                    code: channel-405
                    consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                    assetAdditionalCategories: []
                    autoCreateBatch: Enabled
                    languageCode: []
                    suggested_frameworks:
                      - identifier: NCF
                        code: NCF
                        name: NCF
                        objectType: Framework
                    createdOn: '2020-12-14T08:27:49.490+0000'
                    objectType: Channel
                    versionKey: '1607934825088'
                    collectionPrimaryCategories:
                      - Content Playlist
                      - Course
                      - Digital Textbook
                      - Explanation Content
                    contentPrimaryCategories:
                      - Course Assessment
                      - eTextbook
                      - Explanation Content
                      - Learning Resource
                      - Practice Question Set
                      - Teacher Resource
                    name: Channel without Default License
                    lastUpdatedOn: '2020-12-14T08:33:45.088+0000'
                    defaultCourseFramework: TPD
                    collectionAdditionalCategories:
                      - Textbook
                      - Lesson Plan
                      - TV Lesson
                    assetPrimaryCategories:
                      - Asset
                      - CertAsset
                      - Certificate Template
                    contentAdditionalCategories:
                      - Classroom Teaching Video
                      - Concept Map
                      - Curiosity Question Set
                      - Experiential Resource
                      - Explanation Video
                      - Focus Spot
                      - Learning Outcome Definition
                      - Lesson Plan
                      - Marking Scheme Rubric
                      - Pedagogy Flow
                      - Previous Board Exam Papers
                      - TV Lesson
                      - Textbook
                    status: Live
                    defaultFramework: NCF
        '404':
          description: >-
            RESOURCE NOT FOUND. The **Channel Read** operation failed ! The
            possible reason for failure is that you may have passed invalid
            channel id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkChannelGet400Response'
              example:
                id: api.channel.read
                ver: '3.0'
                ts: '2020-12-14T08:36:08ZZ'
                params:
                  resmsgid: e54ff3af-4026-420e-9412-0fcd3eba1674
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    channel-407
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  '/channel/v1/update/{ID}':
    patch:
      tags:
        - Channel APIs
      summary: Update Channel
      description: |-
        This API is associated with updating a specific channel
          - The endpoint for **Update Channel** is `/channel/v1/update/{ID}`
          - It points to knowledge-mw-service - `/v1/channel/update/{ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: ChannelV1UpdatePatch
      parameters:
        - name: ID
          in: path
          description: Unique identifier of the channel to be updated
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - application/json
               - multipart/form-data
               - application/x-www-form-urlencoded
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
             
             - JSON 
             - XML data
           
           The body is the representation of the resource object for updating a channel.
           Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/channel/1.0/schema.json))
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkChannelUpdateRequest'
            example:
              request:
                channel:
                  description: Updated channel description
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Update channel by ID" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkChannelCreate200Response'
              example:
                id: api.channel.update
                ver: '1.0'
                ts: '2020-12-14T08:29:24.724Z'
                params:
                  resmsgid: 79078340-3de6-11eb-9ff3-67c41480f6aa
                  msgid: 78fef7c0-3de6-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  identifier: channel-405
                  node_id: channel-405
        '400':
          description: >-
            BAD REQUEST. The **Update Channel" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkChannelCreate400Response'
        '404':
          description: >-
            RESOURCE NOT FOUND. The "update channel by ID" operation failed !
            The possible reason for failure is that you may have passed invalid
            channel id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkChannelCreate400Response'
              example:
                id: api.channel.update
                ver: '1.0'
                ts: '2020-12-14T08:30:44.219Z'
                params:
                  resmsgid: a8697cb0-3de6-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    channel-406
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /framework/v1/create:
    post:
      tags:
        - Framework - Core APIs
      summary: Create a Framework
      description: >-
        This API is associated with creating a new framework on the Sunbird
        Platform.
           - The endpoint for **Create a Framework** is `/framework/v1/create`
           - It points to knowledge-mw-service - `/v1/framework/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1CreatePost
      parameters:
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource
             Possible media types can be:- 
               - application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
        - name: X-Channel-Id
          in: header
          description: >-
            It is the Unique Id to identify the root organisation to which the
            user belongs
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:'
            
             - JSON 
            The body is the representation of the resource object for updating a framework. 
           Please refer for supported [metadata](https://github.com/project-sunbird/sunbird-learning-platform/blob/release-3.5.0/docs/domain_model_v2/definitions/framework_definition.json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkCreateFrameworkRequest'
            example:
              request:
                framework:
                  name: Framework Name
                  code: dummy_framework
                  channels:
                    - identifier: in.ekstep
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."create framework" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkCreate200Response'
              example:
                id: api.framework.create
                ver: '1.0'
                ts: '2020-12-14T09:49:06.794Z'
                params:
                  resmsgid: 9b5d7ca0-3df1-11eb-9ff3-67c41480f6aa
                  msgid: 9b4a90e0-3df1-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id: dummy_framework
                  versionKey: '1607939346678'
        '400':
          description: >-
            BAD REQUEST. The "create framework" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkGet400Response'
              example:
                id: api.framework.create
                ver: '1.0'
                ts: '2020-12-14T09:50:45.249Z'
                params:
                  resmsgid: d60c8710-3df1-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: CONSTRAINT_VALIDATION_FAILED
                  errmsg: 'Object already exists with identifier: dummy_framework'
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  '/framework/v1/read/{ID}':
    get:
      tags:
        - Framework - Core APIs
      summary: Get a Framework
      description: |-
        This API is associated with fetching a specific framework
          - The endpoint for **Get a Framework** is `/framework/v1/read/{ID}`
          - It points to knowledge-mw-service - `/v1/framework/read/{ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1ReadGet
      parameters:
        - name: ID
          in: path
          description: The identifier of the framework to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."read framework" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkGet200Response'
              example:
                id: api.framework.read
                ver: '1.0'
                ts: '2020-12-14T19:51:24ZZ'
                params:
                  resmsgid: 28f10a2a-ce6c-4dbe-a733-4c193013e84b
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  framework:
                    identifier: dummy_framework
                    code: Dumy framework updated
                    name: Framework Name
                    description: Dumy framework updated
                    categories:
                      - identifier: dummy_framework_subject
                        code: subject
                        terms:
                          - identifier: dummy_framework_subject_english
                            code: english
                            translations: null
                            name: English
                            description: English
                            index: 1
                            category: subject
                            status: Live
                        translations: null
                        name: Subject
                        description: Updated description
                        index: 1
                        status: Live
                      - identifier: dummy_framework_medium
                        code: medium
                        translations: null
                        name: Medium
                        description: Medium
                        index: 2
                        status: Live
                    type: K-12
                    objectType: Framework
        '400':
          description: >-
            BAD REQUEST. The "read framework" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkGet400Response'
        '404':
          description: >-
            RESOURCE NOT FOUND. The "read framework" operation failed ! The
            possible reason for failure is that you may have passed invalid
            framework id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkGet400Response'
              example:
                id: api.framework.read
                ver: '1.0'
                ts: '2020-12-14T10:00:12.540Z'
                params:
                  resmsgid: 282e43c0-3df3-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_DATA_NOT_FOUND
                  errmsg: 'Data not found with id : dummy_framework1'
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  '/framework/v1/update/{ID}':
    patch:
      tags:
        - Framework - Core APIs
      summary: Update Framework
      description: |-
        This API is associated with updating a framework
          - The endpoint for **Update Framework** is `/framework/v1/update/{ID}`
          - It points to knowledge-mw-service - `/v1/framework/update/{ID}`
          - The fieldsmarked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1UpdatePatch
      parameters:
        - name: ID
          in: path
          description: The identifier of the framework to be updated
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource
             Possible media types can be:- 
               - application/json
               - multipart/form-data
               - application/x-www-form-urlencoded
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
        - name: X-Channel-Id
          in: header
          description: >-
            It is the Unique Id to identify the root organisation to which the
            user belongs
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:'
             
             - JSON 
             - XML data
           
           The body is the representation of the resource object for updating a framework. 
           Please refer for supported [metadata](https://github.com/project-sunbird/sunbird-learning-platform/blob/release-3.5.0/docs/domain_model_v2/definitions/framework_definition.json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkUpdateFrameworkRequest'
            example:
              request:
                framework:
                  description: Dumy framework updated
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."update framework" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkUpdate200Response'
              example:
                id: api.framework.update
                ver: '1.0'
                ts: '2020-12-14T09:57:20.317Z'
                params:
                  resmsgid: c1871ed0-3df2-11eb-9ff3-67c41480f6aa
                  msgid: c17ff2e0-3df2-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id: dummy_framework
                  versionKey: '1607939840281'
        '400':
          description: >-
            BAD REQUEST. The "update framework" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkUpdate400Response'
        '404':
          description: >-
            RESOURCE NOT FOUND. The "update framework" operation failed ! The
            possible reason for failure is that you may have passed invalid
            framework id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkUpdate400Response'
              example:
                id: api.framework.update
                ver: '1.0'
                ts: '2020-12-14T09:57:50.352Z'
                params:
                  resmsgid: d36e1900-3df2-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_FRAMEWORK_NOT_FOUND
                  errmsg: 'Framework Not Found With Id : dummy_framework1'
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /framework/v1/list:
    post:
      tags:
        - Framework - Core APIs
      summary: List Existing Frameworks
      description: |-
        This API is associated with listing of all existing frameworks
           - The endpoint for **List Existing Frameworks** is `/framework/v1/list`
           - It points to knowledge-mw-service - `/v1/framework/list`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1ListPost
      parameters:
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource
             Possible media types can be:- 
               - application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body is the representation of the resource object 
            - The body contains metadata for listing the existing frameworks
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkFrameworkListRequest'
            example:
              request:
                search:
                  status: Live
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."list framework" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkList200Response'
              example:
                id: api.framework.list
                ver: '1.0'
                ts: '2020-12-14T10:02:06.928Z'
                params:
                  resmsgid: 6c5c7d00-3df3-11eb-9ff3-67c41480f6aa
                  msgid: 6c38ef70-3df3-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  frameworks:
                    - owner: in.ekstep
                      identifier: NCERT
                      code: NCERT
                      apoc_json: '{"batch": true}'
                      consumerId: a6654129-b58d-4dd8-9cf2-f8f3c2f458bc
                      channel: in.ekstep
                      description: 'NCERT '
                      type: K-12
                      createdOn: '2018-01-18T17:24:50.850+0000'
                      apoc_text: APOC
                      versionKey: '1525253065583'
                      channels:
                        - identifier: in.ekstep
                          name: Ekstep
                          objectType: Channel
                          relation: hasSequenceMember
                          description: Channel for in.ekstep
                          status: Live
                      appId: ekstep_portal
                      name: NCERT
                      lastUpdatedOn: '2018-05-02T09:24:25.583+0000'
                      categories:
                        - identifier: ncert_board
                          name: Boards
                          objectType: CategoryInstance
                          relation: hasSequenceMember
                          description: ''
                          index: 5
                          status: Retired
                      status: Live
                      apoc_num: 1
                  count: 1
        '400':
          description: >-
            BAD REQUEST. The "list framework" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkList400Response'
              example:
                id: api.framework.list
                ver: '1.0'
                ts: '2020-12-14T18:07:11.141Z'
                params:
                  resmsgid: 2fd2f550-3e37-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_INVALID_SEARCH_REQUEST
                  errmsg: Invalid Search Request
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  '/framework/v1/publish/{ID}':
    post:
      tags:
        - Framework - Core APIs
      summary: Publish Framework
      description: |-
        This API is associated with publishing a framework
          - The endpoint for **Publish Framework** is `/framework/v1/publish/{ID}`
          - It points to knowledge-mw-service - `/v1/framework/publish/{ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: publishFramework
      parameters:
        - name: ID
          in: path
          description: The identifier of the framework to be published
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
              Possible media types can be:- 
               - application/json
          required: false
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
        - name: X-Channel-Id
          in: header
          description: >-
            It is the Unique Id to identify the root organisation to which the
            user belongs
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
             
             - JSON 
             
           The body is the representation of the resource object for publishing a framework
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkPublishFrameworkRequest'
            example: {}
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Publish framework" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkPublish200Response'
              example:
                id: api.framework.publish
                ver: '1.0'
                ts: '2020-12-14T10:07:54.648Z'
                params:
                  resmsgid: 3b9e5980-3df4-11eb-9ff3-67c41480f6aa
                  msgid: 3b9cabd0-3df4-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  publishStatus: >-
                    Publish Operation for Framework Id 'dummy_framework' Started
                    Successfully!
        '400':
          description: >-
            BAD REQUEST. The "Publish Framework" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkCopy400Response'
              example:
                id: api.framework.publish
                ver: '1.0'
                ts: '2020-12-14T10:08:19.872Z'
                params:
                  resmsgid: 4aa73a00-3df4-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_INVALID_FRAMEOWRK_ID
                  errmsg: Invalid Framework Id. Framework doesn't exist.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  '/framework/v1/copy/{ID}':
    post:
      tags:
        - Framework - Core APIs
      summary: Copy Framework
      description: |-
        This API is associated with copying a framework
          - The endpoint for **Copy Framework** is `/framework/v1/copy/{ID}`
          - It points to knowledge-mw-service - `v1/framework/copy/{ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: NCERTPost
      parameters:
        - name: ID
          in: path
          description: The identifier of the framework to be copied
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
              Possible media types can be:- 
               - application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
        - name: X-Channel-Id
          in: header
          description: >-
            It is the Unique Id to identify the root organisation to which the
            user belongs
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
             
             - JSON 
             The body is the representation of the resource object for creating a new framework while copying old one.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkCopyFrameworkRequest'
            example:
              request:
                framework:
                  code: NCERTCOPY11
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Copy framework" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkCopy200Response'
              example:
                id: api.framework.copy
                ver: '1.0'
                ts: '2020-12-14T10:46:44.287Z'
                params:
                  resmsgid: a8310cf0-3df9-11eb-9ff3-67c41480f6aa
                  msgid: a6b2aa50-3df9-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id: NCERTCOPY11
        '400':
          description: >-
            BAD REQUEST. The "Copy fFramework" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkCopy400Response'
              example:
                id: api.framework.copy
                ver: '1.0'
                ts: '2020-12-14T10:47:22.578Z'
                params:
                  resmsgid: bf03cb20-3df9-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_FRAMEWORK_EXISTS
                  errmsg: 'Framework with code: NCERTCOPY11, already exists.'
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: >-
            RESOURCE NOT FOUND. The "Copy fFramework" operation failed ! The
            possible reason for failure is that you may have missed invlalid
            framework id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkCopy400Response'
              example:
                id: api.framework.copy
                ver: '1.0'
                ts: '2020-12-14T10:47:47.865Z'
                params:
                  resmsgid: ce164890-3df9-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_DATA_NOT_FOUND
                  errmsg: 'Data not found with id : NCERT101100'
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /framework/v1/category/create:
    post:
      tags:
        - Framework - Category APIs
      summary: Create Category
      description: |-
        This API is associated with creating a category under a framework
           - The endpoint for **Create Category** is `/framework/v1/category/create`
           - It points to knowledge-mw-service - `/v1/framework/category/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1CategoryCreatePost
      parameters:
        - name: framework
          in: query
          description: The code of the framework under which category has to be created
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource
             Possible media types can be:- 
               - application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
             
             - JSON  
             The body is the representation of the resource object for creating a category.
           Please refer for supported [metadata](https://github.com/project-sunbird/sunbird-learning-platform/blob/release-3.5.0/docs/domain_model_v2/definitions/categoryInstance_definition.json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkCreateCategoryInstanceRequest'
            example:
              request:
                category:
                  name: Subject
                  code: subject
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."create category" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/frameworkCategoryInstanceCreate200Response
              example:
                id: api.category.create
                ver: '1.0'
                ts: '2020-12-14T19:32:01.754Z'
                params:
                  resmsgid: 0a10dba0-3e43-11eb-9ff3-67c41480f6aa
                  msgid: 0a05df20-3e43-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id: dummy_framework_medium
                  versionKey: '1607974321700'
        '400':
          description: >-
            BAD REQUEST. The "create category" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/frameworkCategoryInstanceCreate400Response
              example:
                id: api.category.create
                ver: '1.0'
                ts: '2020-12-14T19:30:50.114Z'
                params:
                  resmsgid: df5d7620-3e42-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: CONSTRAINT_VALIDATION_FAILED
                  errmsg: >-
                    Object already exists with identifier:
                    dummy_framework_subject
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  '/framework/v1/category/read/{code}':
    get:
      tags:
        - Framework - Category APIs
      summary: Fetch Category
      description: |-
        This API is associated with fetching a category on Sunbird Platform
           - The endpoint for **Fetch Category** is `/framework/v1/category/read/{code}`
           - It points to knowledge-mw-service - `/v1/framework/category/read/{code}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1CategoryReadClassGet
      parameters:
        - name: code
          in: path
          description: The name/code of the category to be fetched
          required: true
          schema:
            type: string
        - name: framework
          in: query
          description: >-
            Name of the framework under which category exists. Its an abstract
            data structure which serves as a template for categories and terms
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource
             Possible media types can be:- 
               - application/json
          required: false
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."fetch category" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkCategoryInstanceGet200Response'
              example:
                id: api.category.read
                ver: '1.0'
                ts: '2020-12-14T19:34:41.261Z'
                params:
                  resmsgid: 6923b1d0-3e43-11eb-9ff3-67c41480f6aa
                  msgid: 691e3390-3e43-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  category:
                    identifier: dummy_framework_subject
                    lastStatusChangedOn: '2020-12-14T19:30:32.392+0000'
                    code: subject
                    frameworks:
                      - identifier: dummy_framework
                        name: Framework Name
                        objectType: Framework
                        relation: hasSequenceMember
                        description: Dumy framework updated
                        status: Live
                    consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                    channel: in.ekstep
                    description: Subject
                    domains: []
                    createdOn: '2020-12-14T19:30:32.392+0000'
                    versionKey: '1607974232392'
                    terms: []
                    appId: '@ignore@'
                    name: Subject
                    lastUpdatedOn: '2020-12-14T19:30:32.392+0000'
                    status: Live
        '400':
          description: >-
            BAD REQUEST. The "fetch category" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkCategoryInstanceGet400Response'
              example:
                id: api.category.read
                ver: '1.0'
                ts: '2020-12-14T19:35:21.540Z'
                params:
                  resmsgid: 8125c840-3e43-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_INVALID_FRAMEWORK_ID
                  errmsg: 'Invalid FrameworkId: dummy_framework1 for Categoryinstance '
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  '/framework/v1/category/update/{code}':
    patch:
      tags:
        - Framework - Category APIs
      summary: Update Category
      description: >-
        This API is associated with updating a category in an  existing
        framework
           - The endpoint for **Update Category** is `/framework/v1/category/update/{code}`
           - It points to knowledge-mw-service - `/v1/framework/category/update/{code}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1CategoryUpdatePatch
      parameters:
        - name: code
          in: path
          description: The name/code of the category to be updated
          required: true
          schema:
            type: string
        - name: framework
          in: query
          description: Represents the framework to which the category belongs
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
             
             - JSON 
             The body is the representation of the resource object for updating a category in a framework. 
           Please refer for supported [metadata](https://github.com/project-sunbird/sunbird-learning-platform/blob/release-3.5.0/docs/domain_model_v2/definitions/categoryInstance_definition.json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkUpdateCategoryInstanceRequest'
            example:
              request:
                category:
                  description: Updated description
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."update category" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/frameworkCategoryInstanceUpdate200Response
              example:
                id: api.category.update
                ver: '1.0'
                ts: '2020-12-14T19:37:49.082Z'
                params:
                  resmsgid: d916e7a0-3e43-11eb-9ff3-67c41480f6aa
                  msgid: d90f4680-3e43-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id: dummy_framework_subject
                  versionKey: '1607974669043'
        '400':
          description: >-
            BAD REQUEST. The "update category" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/frameworkCategoryInstanceUpdate400Response
              example:
                id: api.category.update
                ver: '1.0'
                ts: '2020-12-14T19:38:29.662Z'
                params:
                  resmsgid: f146ebe0-3e43-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_INVALID_FRAMEWORK_ID
                  errmsg: 'Invalid FrameworkId: dummy_framework1 for Categoryinstance '
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /framework/v1/category/search:
    post:
      tags:
        - Framework - Category APIs
      summary: Search Categories
      description: |-
        This API is associated with searching a category
          - The endpoint for **Search Categories** is `/framework/v1/category/search`
          - It points to knowledge-mw-service - `/v1/framework/category/search`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1CategorySearchPost
      parameters:
        - name: framework
          in: query
          description: Represents the framework in which category can be searched
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource
             Possible media types can be:- 
               - application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
             
             - JSON 
             The body is the representation of the resource object for searching a category in a framework
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkCategoryInstanceSearchRequest'
            example:
              request:
                search: {}
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."search category" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/frameworkCategoryInstanceSearch200Response
              example:
                id: api.category.search
                ver: '1.0'
                ts: '2020-12-14T19:40:23.864Z'
                params:
                  resmsgid: 3558c380-3e44-11eb-9ff3-67c41480f6aa
                  msgid: 3555b640-3e44-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  count: 2
                  categories:
                    - identifier: dummy_framework_subject
                      lastStatusChangedOn: '2020-12-14T19:30:32.392+0000'
                      code: subject
                      frameworks:
                        - identifier: dummy_framework
                          name: Framework Name
                          objectType: Framework
                          relation: hasSequenceMember
                          description: Dumy framework updated
                          status: Live
                      consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                      channel: in.ekstep
                      description: Updated description
                      domains: []
                      createdOn: '2020-12-14T19:30:32.392+0000'
                      versionKey: '1607974669043'
                      terms: []
                      appId: dev.sunbird.portal
                      name: Subject
                      lastUpdatedOn: '2020-12-14T19:37:49.043+0000'
                      status: Live
                    - identifier: dummy_framework_medium
                      lastStatusChangedOn: '2020-12-14T19:32:01.700+0000'
                      code: medium
                      frameworks:
                        - identifier: dummy_framework
                          name: Framework Name
                          objectType: Framework
                          relation: hasSequenceMember
                          description: Dumy framework updated
                          status: Live
                      consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                      channel: in.ekstep
                      description: Medium
                      domains: []
                      createdOn: '2020-12-14T19:32:01.700+0000'
                      versionKey: '1607974321700'
                      terms: []
                      appId: '@ignore@'
                      name: Medium
                      lastUpdatedOn: '2020-12-14T19:32:01.700+0000'
                      status: Live
        '400':
          description: >-
            BAD REQUEST. The "search category" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/frameworkCategoryInstanceSearch400Response
              example:
                id: api.category.search
                ver: '1.0'
                ts: '2020-12-14T19:41:28.846Z'
                params:
                  resmsgid: 5c143ae0-3e44-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_INVALID_FRAMEWORK_ID
                  errmsg: 'Invalid FrameworkId: dummy_framework1 for Categoryinstance '
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /framework/v1/term/create:
    post:
      tags:
        - Framework - Term APIs
      summary: Create Term
      description: |-
        This API is associated with creating a term under a framework category
          - The endpoint for **Create Term** is `/framework/v1/term/create`
          - It points to knowledge-mw-service - `/v1/framework/term/create`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty."
      operationId: FrameworkV1TermCreatePost
      parameters:
        - name: framework
          in: query
          description: Represents the framework in which the term is to be created
          required: true
          schema:
            type: string
        - name: category
          in: query
          description: Represents the category in which the term is to be created
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
             
             - JSON 
             The body is the representation of the resource object for creating a term. 
           Please refer for supported [metadata](https://github.com/project-sunbird/sunbird-learning-platform/blob/release-3.5.0/docs/domain_model_v2/definitions/term_definition.json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkCreateFrameworkTermRequest'
            example:
              request:
                term:
                  code: english
                  name: English
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."create term" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermCreate200Response'
              example:
                id: api.term.create
                ver: '1.0'
                ts: '2020-12-14T19:44:02.348Z'
                params:
                  resmsgid: b792c6c0-3e44-11eb-9ff3-67c41480f6aa
                  msgid: b783f9b0-3e44-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id:
                    - dummy_framework_subject_english
        '400':
          description: >-
            BAD REQUEST. The "create term" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermCreate400Response'
              example:
                id: api.term.create
                ver: '1.0'
                ts: '2020-12-14T19:44:49.263Z'
                params:
                  resmsgid: d3896ff0-3e44-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_INVALID_CATEGORY_ID
                  errmsg: Please provide valid category.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  '/framework/v1/term/read/{code}':
    get:
      tags:
        - Framework - Term APIs
      summary: Fetch Term
      description: >-
        This API is associated with fetching the available terms under a
        specific category and a framework on Sunbird Platform.
           - The endpoint for **Fetch Term** is `/framework/v1/term/read/{code}`
           - It points to knowledge-mw-service - `/v1/framework/term/read/{code}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1TermReadClass2Get
      parameters:
        - name: code
          in: path
          description: The name/code of the term to be fetched
          required: true
          schema:
            type: string
        - name: framework
          in: query
          description: Represents the framework id in which the term can be fetched
          required: true
          schema:
            type: string
        - name: category
          in: query
          description: Represents the category in which the term can be fetched
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - application/json
          required: false
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Fetch term" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermGet200Response'
              example:
                id: api.term.read
                ver: '1.0'
                ts: '2020-12-17T07:24:51.258Z'
                params:
                  resmsgid: f380c1a0-4038-11eb-9b0c-abcfbdf41bc3
                  msgid: f358c740-4038-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  term:
                    associations: []
                    identifier: dummy_framework_subject_english
                    lastStatusChangedOn: '2020-12-14T19:44:02.260+0000'
                    code: english
                    consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                    channel: in.ekstep
                    description: English
                    createdOn: '2020-12-14T19:44:02.260+0000'
                    versionKey: '1607975299669'
                    children: []
                    appId: dev.sunbird.portal
                    name: English
                    lastUpdatedOn: '2020-12-14T19:48:19.669+0000'
                    categories:
                      - identifier: dummy_framework_subject
                        name: Subject
                        objectType: CategoryInstance
                        relation: hasSequenceMember
                        description: Updated description
                        status: Live
                    category: subject
                    status: Live
        '400':
          description: >-
            BAD REQUEST. The "Fetch term" operation failed ! The possible reason
            for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermGet400Response'
              example:
                id: api.term.read
                ver: '1.0'
                ts: '2020-12-17T07:54:24.246Z'
                params:
                  resmsgid: 14494160-403d-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_INVALID_CATEGORY_ID
                  errmsg: Please provide valid category.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  '/framework/v1/term/update{code}':
    patch:
      tags:
        - Framework - Term APIs
      summary: Update Term
      description: >-
        This API is associated with updating a term under a category in a
        framework on Sunbird Platform
           - The endpoint for **Update Term** is `/framework/v1/term/update{code}`
           - It points to knowledge-mw-service - `/v1/framework/term/update/{code}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1TermUpdateClass2Patch
      parameters:
        - name: code
          in: path
          description: The name/code of the term to be update
          required: true
          schema:
            type: string
        - name: framework
          in: query
          description: Represents the framework in which the terms is to be updated
          required: true
          schema:
            type: string
        - name: category
          in: query
          description: Represents the category in which the term is to be updated
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource
             Possible media types can be:- 
               - application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.'
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
             
             - JSON 
             The body is the representation of the resource object for updating a term. Please refer for supported [metadata](https://github.com/project-sunbird/sunbird-learning-platform/blob/release-3.5.0/docs/domain_model_v2/definitions/term_definition.json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkUpdateFrameworkTermRequest'
            example:
              request:
                term:
                  name: English
                  description: English
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."update term" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermUpdate200Response'
              example:
                id: api.term.update
                ver: '1.0'
                ts: '2020-12-14T19:48:19.754Z'
                params:
                  resmsgid: 50ffd0a0-3e45-11eb-9ff3-67c41480f6aa
                  msgid: 50f04040-3e45-11eb-9ff3-67c41480f6aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  node_id: dummy_framework_subject_english
                  versionKey: '1607975299669'
        '400':
          description: >-
            BAD REQUEST. The "update term" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermUpdate400Response'
              example:
                id: api.term.update
                ver: '1.0'
                ts: '2020-12-14T19:49:03.927Z'
                params:
                  resmsgid: 6b541470-3e45-11eb-9ff3-67c41480f6aa
                  msgid: null
                  status: failed
                  err: ERR_INVALID_CATEGORY_ID
                  errmsg: Please provide valid category.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /framework/v1/term/search:
    post:
      tags:
        - Framework - Term APIs
      summary: Search Term
      description: >-
        This API is associated with searching the existing terms under a
        category in a framework on Sunbird Platform
           - The endpoint for **Search Term** is `/framework/v1/term/search`
           - It points to knowledge-mw-service - `/v1/framework/term/search`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FrameworkV1TermSearchPost
      parameters:
        - name: framework
          in: query
          description: Represents the framework in which the term is to be searched
          required: true
          schema:
            type: string
        - name: category
          in: query
          description: Represents the category in which the term is to be searched
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
             
             - JSON 
             The body is the representation of the resource object for searching a term
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/frameworkFrameworkTermSearchRequest'
            example:
              request: {}
        required: false
      responses:
        '200':
          description: >-
            OK ! Successful operation."Search term operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermSearch200Response'
              example:
                id: api.term.search
                ver: '1.0'
                ts: '2020-12-17T08:12:44.816Z'
                params:
                  resmsgid: a446e900-403f-11eb-9b0c-abcfbdf41bc3
                  msgid: a4447800-403f-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  terms:
                    - associations: []
                      identifier: dummy_framework_subject_english
                      lastStatusChangedOn: '2020-12-14T19:44:02.260+0000'
                      code: english
                      consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                      channel: in.ekstep
                      description: English
                      createdOn: '2020-12-14T19:44:02.260+0000'
                      versionKey: '1607975299669'
                      children: []
                      appId: dev.sunbird.portal
                      name: English
                      lastUpdatedOn: '2020-12-14T19:48:19.669+0000'
                      categories:
                        - identifier: dummy_framework_subject
                          name: Subject
                          objectType: CategoryInstance
                          relation: hasSequenceMember
                          description: Updated description
                          status: Live
                      category: subject
                      status: Live
                  count: 1
        '400':
          description: >-
            BAD REQUEST. The "search term" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/frameworkFrameworkTermSearch400Response'
              example:
                id: api.term.search
                ver: '1.0'
                ts: '2020-12-17T08:13:50.811Z'
                params:
                  resmsgid: cb9cf2b0-403f-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_INVALID_CATEGORY_ID
                  errmsg: Please provide valid category.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
      deprecated: false
      security:
        - bearer: []
  /dataset/v1/request/submit:
    post:
      tags:
        - On Demand Data Exhaust API(s)
      description: >-
        API to submit a job request. The job status will be in the submitted
        state.

        - The endpoint for **Submit Data Request** is `/submit`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: Submit Data Request
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type request header denotes the data type of the request
            body.  Types are:- 
              - Application/json
          required: true
          schema:
            type: string
        - name: X-Channel-ID
          in: header
          description: The organization id of the tenant/state
          required: true
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          description: The user specific token for accessing the API
          schema:
            type: string
          example: '{{authToken}}'
        - name: X-Authenticated-Userid
          in: header
          description: The user id
          schema:
            type: string
      requestBody:
        description: >-
          Request json object in the request has below requied fields -


          - **tag** - Unique identifier to identify request submitted.

          - **dataset** - The job/dataset id the request is for.

          - **datasetConfig** - Dataset config to fetch the data.


          Supported predefined dataset ids are -

          - **progress-exhaust** - course progress/completion and certification
          issued information for specific batch 

          - **response-exhaust** - attempt information of assessments for
          specific batch 

          - **userinfo-exhaust** - all the users personal information wrt
          userConsent for specific batch
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataexhaustapidataRequestBody'
            examples:
              a:
                summary: Request for course progress data exhaust for a given batch
                description: >-
                  Valid request with all required fields for course progress
                  report for specific batch
                value:
                  request:
                    tag: course-001_batch-001
                    dataset: progress-exhaust
                    datasetConfig:
                      batchId: batch-001
                    requestedBy: user-001
              b:
                summary: Request for response data exhaust for a given batch
                description: >-
                  Valid request with all required fields for response exhaust
                  report for specific batch
                value:
                  request:
                    tag: course-001_batch-001
                    dataset: response-exhaust
                    datasetConfig:
                      batchId: batch-001
                    requestedBy: user-001
              c:
                summary: Request for userinfo data exhaust for a given batch
                description: >-
                  Valid request with all required fields for  userinfo report
                  for specific batch
                value:
                  request:
                    tag: course-001_batch-001
                    dataset: userinfo-exhaust
                    datasetConfig:
                      batchId: batch-001
                    requestedBy: user-001
                    encryptionKey: axx-xxx-xxg
              d:
                summary: Request with missing mandatory fields
                description: Invalid request one/few missing fields
                value:
                  request:
                    tag: course-001_batch-001
                    dataset: progress-exhaust
                    requestedBy: user-001
              e:
                summary: Request with invalid dataset id
                description: >-
                  Request for invalid dataset. Request will be submitted
                  successfully but report will never get generated for such
                  requests
                value:
                  request:
                    tag: course-001_batch-001
                    dataset: collection-exhaust
                    datasetConfig:
                      batchId: batch-001
                    requestedBy: user-001
        required: true
      responses:
        '200':
          description: SUCCESS. The **Submit Data Request** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataexhaustapidataExhaustResponse'
              examples:
                a:
                  summary: Request in SUBMITTED state
                  description: Request details returned once submitted
                  value:
                    request:
                      attempts: 0
                      lastUpdated: 1600845394119
                      tag: 'course001_batch001:ORG_001'
                      expiresAt: null
                      datasetConfig:
                        batchId: batch001
                      downloadUrls: []
                      requestedBy: user001
                      jobStats:
                        dtJobSubmitted: 1600845394119
                        dtJobCompleted: null
                        executionTime: null
                      status: SUBMITTED
                      dataset: progress-exhaust
                      requestId: AF7B9BE5D0D075EA0DB8C6D12E192D5F
                      requestedChannel: ORG_001
                b:
                  summary: Request in SUCCESS state
                  description: >-
                    Request details returned when tried submitting same request
                    which is already SUCCESS
                  value:
                    request:
                      attempts: 0
                      lastUpdated: 1600845394119
                      tag: 'course001_batch001:ORG_001'
                      expiresAt: 1598632215685
                      datasetConfig:
                        batchId: batch001
                      downloadUrls:
                        - >-
                          Signled URL of the data exhaust report file on blob
                          storage with an expiry. The report file URL will be
                          automatically invalidated after the expiry.
                      requestedBy: user001
                      jobStats:
                        dtJobSubmitted: 1600845394119
                        dtJobCompleted: 1600845394119
                        executionTime: 200
                      status: SUCCESS
                      dataset: progress-exhaust
                      requestId: AF7B9BE5D0D075EA0DB8C6D12E192D5F
                      requestedChannel: ORG_001
        '400':
          description: >-
            BAD REQUEST, **Submit Data Request** operation failed! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/dataexhaustapiApiResponse'
              examples:
                a:
                  summary: For missing dataset config in request
                  description: Provided request is invalid with missing datasetConfig
                  value:
                    id: analytics.dataset.request.submit
                    ver: '1.0'
                    ts: '2020-11-27T12:33:27.115+00:00'
                    params:
                      resmsgid: 93aa54f5-03b2-4c82-af3a-acc3ee4071f7
                      status: failed
                      err: CLIENT_ERROR
                      errmsg: datasetConfig is empty
                    responseCode: CLIENT_ERROR
                b:
                  summary: For missing dataset id in request
                  description: Provided request is invalid with missing dataset id
                  value:
                    id: analytics.dataset.request.submit
                    ver: '1.0'
                    ts: '2020-11-27T12:33:27.115+00:00'
                    params:
                      resmsgid: 93aa54f5-03b2-4c82-af3a-acc3ee4071f7
                      status: failed
                      err: CLIENT_ERROR
                      errmsg: dataset is empty
                    responseCode: CLIENT_ERROR
                c:
                  summary: For missing tag in request
                  description: Provided request is invalid with missing tag
                  value:
                    id: analytics.dataset.request.submit
                    ver: '1.0'
                    ts: '2020-11-27T12:33:27.115+00:00'
                    params:
                      resmsgid: 93aa54f5-03b2-4c82-af3a-acc3ee4071f7
                      status: failed
                      err: CLIENT_ERROR
                      errmsg: tag is empty
                    responseCode: CLIENT_ERROR
        '401':
          description: >-
            Unauthorized, **Submit Data Request** operation failed! The possible
            reason for failure is that you may have missed providing
            authorization token in header
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '403':
          description: >-
            FORBIDDEN, **Submit Data Request** operation failed! The possible
            reason for failure is that you may not authorized to submit request
            or provided user auth token in header may be incorrect/invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: analytics.dataset.request.submit
                  ver:
                    type: string
                    example: '1.0'
                  ts:
                    type: string
                    example: '2020-11-30T11:07:38.895+00:00'
                  params:
                    type: object
                    properties:
                      resmsgid:
                        type: string
                        example: 3869f5e7-ca5c-47bf-b67b-176305f5a775
                      err:
                        type: string
                        example: FORBIDDEN
                      status:
                        type: string
                        example: failed
                      errmsg:
                        type: string
                        example: You are not authorized.
                  responseCode:
                    type: string
                    example: FORBIDDEN
        '500':
          description: >-
            INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content:
            text/plain:
              schema:
                type: string
                example: An unexpected error occurred
  '/dataset/v1/request/list/{tag}':
    get:
      tags:
        - On Demand Data Exhaust API(s)
      description: >-
        This API is used to list all the requests that are specific to a tag

        - The endpoint for **List Requests**  `/list/{tag}`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: List Requests
      parameters:
        - name: tag
          in: path
          description: 'Unique identifier to identify request submitted. e.g.: BatchId'
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: 'Represents the limit of result entries, default limit is set to 100'
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
        - name: X-Channel-ID
          in: header
          description: The organization id of the tenant/state
          required: true
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          description: The user specific token for accessing the API
          schema:
            type: string
          example: '{{authToken}}'
        - name: X-Authenticated-Userid
          in: header
          description: User id
          schema:
            type: string
      responses:
        '200':
          description: SUCCESS. The **list status** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataexhaustapiJobListResponse'
              examples:
                a:
                  summary: List of requests
                  description: Returns request details for provided tag
                  value:
                    request:
                      count: 3
                      jobs:
                        - attempts: 0
                          lastUpdated: 1600845394119
                          tag: 'course001_batch001:ORG_001'
                          expiresAt: null
                          datasetConfig: null
                          batchId: batch001
                          downloadUrls: []
                          requestedBy: user001
                          jobStats:
                            dtJobSubmitted: 1600845394119
                            dtJobCompleted: null
                            executionTime: null
                          status: SUBMITTED
                          dataset: progress-exhaust
                          requestId: AF7B9BE5D0D075EA0DB8C6D12E192D5F
                          requestedChannel: ORG_001
                        - attempts: 0
                          lastUpdated: 1600845394119
                          tag: 'course001_batch001:ORG_001'
                          expiresAt: 1598632215685
                          datasetConfig:
                            batchId: batch001
                          downloadUrls:
                            - >-
                              Signled URL of the data exhaust report file on
                              blob storage with an expiry. The report file URL
                              will be automatically invalidated after the
                              expiry.
                          requestedBy: user001
                          jobStats:
                            dtJobSubmitted: 1600845394119
                            dtJobCompleted: 1600845394119
                            executionTime: 200
                          status: SUCCESS
                          dataset: progress-exhaust
                          requestId: AF7B9BE5D0D075EA0DB8C6D12E192D5F
                          requestedChannel: ORG_001
                        - attempts: 0
                          lastUpdated: 1600845394119
                          tag: 'course001_batch001:ORG_001'
                          expiresAt: 1598632215685
                          datasetConfig:
                            batchId: batch001
                          downloadUrls: []
                          requestedBy: user001
                          jobStats:
                            dtJobSubmitted: 1600845394119
                            dtJobCompleted: 1600845394119
                            executionTime: 200
                          status: FAILED
                          statusMessage: No data found
                          dataset: progress-exhaust
                          requestId: AF7B9BE5D0D075EA0DB8C6D12E192D5F
                          requestedChannel: ORG_001
                b:
                  summary: Empty list
                  description: Empty list for provided tag if no requests are submitted
                  value:
                    request:
                      count: 0
                      jobs: []
        '401':
          description: >-
            Unauthorized, **List Requests** operation failed! The possible
            reason for failure is that you may have missed providing
            authorization token in header
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '403':
          description: >-
            FORBIDDEN, **List Requests** operation failed! The possible reason
            for failure is that you may not authorized to submit request or
            provided user auth token in header may be incorrect/invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: analytics.dataset.request.submit
                  ver:
                    type: string
                    example: '1.0'
                  ts:
                    type: string
                    example: '2020-11-30T11:07:38.895+00:00'
                  params:
                    type: object
                    properties:
                      resmsgid:
                        type: string
                        example: 3869f5e7-ca5c-47bf-b67b-176305f5a775
                      err:
                        type: string
                        example: FORBIDDEN
                      status:
                        type: string
                        example: failed
                      errmsg:
                        type: string
                        example: You are not authorized.
                  responseCode:
                    type: string
                    example: FORBIDDEN
        '500':
          description: >-
            INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content:
            text/plain:
              schema:
                type: string
                example: An unexpected error occurred
  '/dataset/v1/request/read/{tag}':
    get:
      tags:
        - On Demand Data Exhaust API(s)
      description: >-
        This API is used to get all the details of specific request and a tag

        - The end point for **Get Request Details** is
        `/read/{tag}?requestId={requestId}`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: Get Request Details
      parameters:
        - name: tag
          in: path
          description: 'Unique identifier to identify request submitted. e.g.: BatchId'
          required: true
          schema:
            type: string
        - name: requestId
          in: query
          description: >-
            Request ID provided in the response when the job execution request
            is made.
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
        - name: X-Channel-ID
          in: header
          description: The organization id of the tenant/state
          required: true
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          description: The user specific token for accessing the API
          schema:
            type: string
          example: '{{authToken}}'
        - name: X-Authenticated-Userid
          in: header
          description: The user id
          schema:
            type: string
      responses:
        '200':
          description: SUCCESS. The **fetch current status** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataexhaustapiJobInfoResponse'
              examples:
                a:
                  summary: Success request
                  description: Returns request details for provided tag & request_id
                  value:
                    request:
                      attempts: 0
                      lastUpdated: 1600845394119
                      tag: 'course001_batch001:ORG_001'
                      expiresAt: 1598632215685
                      datasetConfig:
                        batchId: batch001
                      downloadUrls:
                        - >-
                          Signled URL of the data exhaust report file on blob
                          storage with an expiry. The report file URL will be
                          automatically invalidated after the expiry.
                      requestedBy: user001
                      jobStats:
                        dtJobSubmitted: 1600845394119
                        dtJobCompleted: 1600845394119
                        executionTime: 200
                      status: SUCCESS
                      dataset: progress-exhaust
                      requestId: AF7B9BE5D0D075EA0DB8C6D12E192D5F
                      requestedChannel: ORG_001
                b:
                  summary: Failed request
                  description: Returns request details for provided tag & request_id
                  value:
                    request:
                      attempts: 0
                      lastUpdated: 1600845394119
                      tag: 'course001_batch001:ORG_001'
                      expiresAt: 1598632215685
                      datasetConfig:
                        batchId: batch001
                      downloadUrls: []
                      requestedBy: user001
                      jobStats:
                        dtJobSubmitted: 1600845394119
                        dtJobCompleted: 1600845394119
                        executionTime: 200
                      status: FAILED
                      statusMessage: No data found
                      dataset: progress-exhaust
                      requestId: AF7B9BE5D0D075EA0DB8C6D12E192D5F
                      requestedChannel: ORG_001
                c:
                  summary: Submitted request
                  description: Returns request details for provided tag & request_id
                  value:
                    request:
                      attempts: 0
                      lastUpdated: 1600845394119
                      tag: 'course001_batch001:ORG_001'
                      expiresAt: null
                      datasetConfig:
                        batchId: batch001
                      downloadUrls: []
                      requestedBy: user001
                      jobStats:
                        dtJobSubmitted: 1600845394119
                        dtJobCompleted: null
                        executionTime: null
                      status: SUBMITTED
                      dataset: progress-exhaust
                      requestId: AF7B9BE5D0D075EA0DB8C6D12E192D5F
                      requestedChannel: ORG_001
                d:
                  summary: No request found
                  description: >-
                    Response with message, if no requests are submitted with
                    provided tag and request id
                  value:
                    id: analytics.dataset.request.submit
                    ver: '1.0'
                    ts: '2020-11-27T12:33:27.115+00:00'
                    params:
                      resmsgid: 93aa54f5-03b2-4c82-af3a-acc3ee4071f7
                      status: failed
                      err: OK
                      errmsg: no job available with the given request_id and tag
                    responseCode: OK
        '401':
          description: >-
            Unauthorized, **Get Request** operation failed! The possible reason
            for failure is that you may have missed providing authorization
            token in header
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '403':
          description: >-
            FORBIDDEN, **Get Request** operation failed! The possible reason for
            failure is that you may not authorized to submit request or provided
            user auth token in header may be incorrect/invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: analytics.dataset.request.submit
                  ver:
                    type: string
                    example: '1.0'
                  ts:
                    type: string
                    example: '2020-11-30T11:07:38.895+00:00'
                  params:
                    type: object
                    properties:
                      resmsgid:
                        type: string
                        example: 3869f5e7-ca5c-47bf-b67b-176305f5a775
                      err:
                        type: string
                        example: FORBIDDEN
                      status:
                        type: string
                        example: failed
                      errmsg:
                        type: string
                        example: You are not authorized.
                  responseCode:
                    type: string
                    example: FORBIDDEN
        '500':
          description: >-
            INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content:
            text/plain:
              schema:
                type: string
                example: An unexpected error occurred
  '/dataset/v1/request/get/{dataset_id}':
    get:
      tags:
        - Standard Data Exhaust API(s)
      description: >-
        This API is used to get exhaust data(raw/summary-rollup/summary-channel
        data) for specific channel that gets generated by user interaction and
        activities.

        - The endpoint for **Get Exhaust Details** is `/get/{dataset_id}/`

        - The fieldsmarked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: Get Standard Exhaust Details
      parameters:
        - name: dataset_id
          in: path
          description: >-
            Data type id. Available options are: **raw**,
            **summary-channel-exhaust** and **summary-rollup**.
          required: true
          schema:
            type: string
        - name: from
          in: query
          description: >-
            Start date of the data exhaust in YYYY-MM-DD format. Default will
            take as yesterday
          schema:
            type: string
        - name: to
          in: query
          description: >-
            End date of the data exhaust in YYYY-MM-DD format. Default will take
            as today
          schema:
            type: string
        - name: since
          in: query
          description: >-
            From date of the data exhaust in YYYY-MM-DD format till current
            date. e.g.: since can be provided instead of from and to when
            requesting for last x days
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
        - name: X-Channel-ID
          in: header
          description: >-
            The organization slug value of the tenant/states. Slug is nothing
            but specific code for the tenant/states.
          required: true
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          description: The user specific token for accessing the API
          schema:
            type: string
          example: '{{authToken}}'
        - name: X-Authenticated-Userid
          in: header
          description: The user id
          schema:
            type: string
      responses:
        '200':
          description: SUCCESS. The **fetch current status** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataexhaustapiDatasetResponse'
              examples:
                a:
                  summary: Success response with files
                  description: Returns response with files for given slug and dates
                  value:
                    request:
                      expiresAt: 1600845394119
                      files:
                        - 2020-12-01-file1.csv
                        - 2020-12-02-file1.csv
                        - 2020-12-03-file1.csv
                      periodWiseFiles:
                        '2020-12-01':
                          - 2020-12-01-file1.csv
                        '2020-12-02':
                          - 2020-12-02-file1.csv
                        '2020-12-03':
                          - 2020-12-03-file1.csv
                b:
                  summary: Success response with empty list
                  description: >-
                    Returns empty response if no files are found for given slug
                    and dates
                  value:
                    request:
                      expiresAt: 0
                      files: []
                      periodWiseFiles: {}
        '400':
          description: >-
            BAD REQUEST, **Get Request** operation failed! The possible reason
            for failure is that you may have incorrectly provided input query
            parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    $ref: '#/components/schemas/dataexhaustapiApiResponse'
              examples:
                a:
                  summary: For date range greater than 10 days
                  description: Provided request has date range of more than 10 days.
                  value:
                    id: analytics.telemetry
                    ver: '1.0'
                    ts: '2020-11-27T12:33:27.115+00:00'
                    params:
                      resmsgid: 93aa54f5-03b2-4c82-af3a-acc3ee4071f7
                      status: failed
                      err: CLIENT_ERROR
                      errmsg: Date range should be < 10 days
                    responseCode: CLIENT_ERROR
                b:
                  summary: For negative date range
                  description: Provided request has from date greater than to date
                  value:
                    id: analytics.telemetry
                    ver: '1.0'
                    ts: '2020-11-27T12:33:27.115+00:00'
                    params:
                      resmsgid: 93aa54f5-03b2-4c82-af3a-acc3ee4071f7
                      status: failed
                      err: CLIENT_ERROR
                      errmsg: >-
                        Date range should not be -ve. Please check your 'from' &
                        'to'
                    responseCode: CLIENT_ERROR
                c:
                  summary: For future dates
                  description: >-
                    Provided request has to date greater than current date i.e.,
                    to has future dates
                  value:
                    id: analytics.telemetry
                    ver: '1.0'
                    ts: '2020-11-27T12:33:27.115+00:00'
                    params:
                      resmsgid: 93aa54f5-03b2-4c82-af3a-acc3ee4071f7
                      status: failed
                      err: CLIENT_ERROR
                      errmsg: '''to'' should be LESSER OR EQUAL TO today''s date..'
                    responseCode: CLIENT_ERROR
        '401':
          description: >-
            Unauthorized, **Get Request** operation failed! The possible reason
            for failure is that you may have missed providing authorization
            token in header
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '403':
          description: >-
            FORBIDDEN, **Get Request** operation failed! The possible reason for
            failure is that you may not authorized to submit request or provided
            user auth token in header may be incorrect/invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: analytics.telemetry
                  ver:
                    type: string
                    example: '1.0'
                  ts:
                    type: string
                    example: '2020-11-30T11:07:38.895+00:00'
                  params:
                    type: object
                    properties:
                      resmsgid:
                        type: string
                        example: 3869f5e7-ca5c-47bf-b67b-176305f5a775
                      err:
                        type: string
                        example: FORBIDDEN
                      status:
                        type: string
                        example: failed
                      errmsg:
                        type: string
                        example: >-
                          You are not authorized. or Given
                          X-Consumer-ID='consumer-id' and X-Channel-ID='slug'
                          are not authorized
                  responseCode:
                    type: string
                    example: FORBIDDEN
              examples:
                a:
                  summary: Unauthorized user
                  description: Response when user with provided token is not authorized
                  value:
                    id: analytics.telemetry
                    ver: '1.0'
                    ts: '2020-11-27T12:33:27.115+00:00'
                    params:
                      resmsgid: 93aa54f5-03b2-4c82-af3a-acc3ee4071f7
                      status: failed
                      err: FORBIDDEN
                      errmsg: You are not authorized
                    responseCode: FORBIDDEN
                b:
                  summary: Unauthorized consumer
                  description: Response when consumer is not authorized
                  value:
                    id: analytics.telemetry
                    ver: '1.0'
                    ts: '2020-11-27T12:33:27.115+00:00'
                    params:
                      resmsgid: 93aa54f5-03b2-4c82-af3a-acc3ee4071f7
                      status: failed
                      err: FORBIDDEN
                      errmsg: >-
                        Given X-Consumer-ID='consumer-id' and
                        X-Channel-ID='slug' are not authorized
                    responseCode: FORBIDDEN
        '500':
          description: >-
            INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content:
            text/plain:
              schema:
                type: string
                example: An unexpected error occurred
  /add:
    post:
      tags:
        - opensaber Misc
      summary: Add Registry Record
      description: >-
        This api is used to create a record in registry based on the schema
        configuration.
         - The endpoint for **Create Registry** is `/add`.
         - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty
         - Schema representation for entity available such as **Teacher.json, Person.json** available by default in **public/_schema** directory under resources folder. Teacher or Person will represent the entity and other fields under Teacher or Person will represent the schema definition.
      operationId: AddRegistryRecord
      parameters:
        - name: Authorization
          in: header
          required: true
          description: >-
            To make use of any opensaber Registry API, you require
            authorization. Raise a request to the administrator for the use of
            the API. You will receive the authorization key. Specify the key
            received, here.
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opensaberapiAddRegistryRecordRequest'
            examples:
              a:
                $ref: '#/components/examples/addTeacherRegistry'
              b:
                $ref: '#/components/examples/addPersonRegistry'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opensaberapiAddRegistryRecord'
              examples:
                a:
                  $ref: '#/components/examples/addTeacherRegistryResponse'
                b:
                  $ref: '#/components/examples/addPersonRegistryResponse'
                c:
                  $ref: '#/components/examples/schemaInvalidErrorResponse'
                d:
                  $ref: '#/components/examples/MandatoryParamMissingResponse'
                e:
                  $ref: '#/components/examples/AuthenticationInvalidResponse'
                f:
                  $ref: '#/components/examples/InternalServerErrorResponse'
      deprecated: false
  /read:
    post:
      tags:
        - opensaber Misc
      summary: Read Registry Record
      description: |-
        This api is used to read the registry record
         - The endpoint for **Read Registry Record** is /read.
         - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty
         - The view can be customized or change to show different, computed or hide fields by using `static view` template or `dynamic view` templates as available in the examples section.
      operationId: ReadRegistryRecord
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opensaberapiReadRegistryRecordRequest'
            examples:
              a:
                $ref: '#/components/examples/ReadTeacherRegistryRequest'
              b:
                $ref: '#/components/examples/ReadPersonRegistryRequest'
              c:
                $ref: >-
                  #/components/examples/ReadPersonRegistryRequestWithstaticTemplate
              d:
                $ref: >-
                  #/components/examples/ReadPersonRegistryRequestWithDynamicTemplate
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opensaberapiReadRegistryRecord'
              examples:
                a:
                  $ref: '#/components/examples/ReadTeacherRegistryResponse'
                b:
                  $ref: '#/components/examples/ReadPersonRegistryResponse'
                c:
                  $ref: >-
                    #/components/examples/ReadRegistryWithStaticTemplatesResponse
                d:
                  $ref: >-
                    #/components/examples/ReadRegistryWithDynamicTemplatesResponse
                e:
                  $ref: '#/components/examples/AuthenticationInvalidReadResponse'
                f:
                  $ref: '#/components/examples/InternalServerErrorReadResponse'
                g:
                  $ref: '#/components/examples/InvalidIdResponse'
      deprecated: false
  /update:
    post:
      tags:
        - opensaber Misc
      summary: Update Registry Record
      description: |-
        This api is used to Update a record in registry
         - The endpoint for **Update Registry** is `/update`.
         - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty
      operationId: UpdateRegistryRecord
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opensaberapiUpdateRegistryRecordRequest'
            examples:
              a:
                $ref: '#/components/examples/UpdateRequestExample1'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opensaberapiUpdateRegistryRecord'
              examples:
                a:
                  $ref: '#/components/examples/UpdateRequestResponse'
                b:
                  $ref: '#/components/examples/AuthenticationInvalidUpdateResponse'
                c:
                  $ref: '#/components/examples/InternalServerErrorUpdateResponse'
                d:
                  $ref: '#/components/examples/InvalidIdUpdateResponse'
      deprecated: false
  /delete:
    post:
      tags:
        - opensaber Misc
      summary: Delete Registry Record
      description: |-
        This api is used to delete a record in registry
         - The endpoint for **Delete Registry** is `/delete`.
         - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty
         - It does a soft delete records by making the record status as inactive, so we cannot use the same value for primary key, unique fields even after delete as data exist physically in the database
      operationId: DeleteRegistryRecord
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opensaberapiDeleteRegistryRecordRequest'
            examples:
              a:
                summary: Delete Person Record
                description: >-
                  This is an example of delete request for person registry
                  record
                value:
                  id: open-saber.registry.delete
                  ver: '1.0'
                  ets: '11234'
                  params:
                    did: ''
                    key: ''
                    msgid: ''
                  request:
                    opensaberapiPerson:
                      osid: 1-d6844c76-b128-43cc-bbba-74edfd09c716
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opensaberapiDeleteRegistryRecord'
              examples:
                a:
                  $ref: '#/components/examples/SuccessDeleteResponse'
                b:
                  $ref: '#/components/examples/AuthenticationInvalidDeleteResponse'
                c:
                  $ref: '#/components/examples/InternalServerErrorDeleteResponse'
                d:
                  $ref: '#/components/examples/InvalidIdDeleteResponse'
      deprecated: false
  /search:
    post:
      tags:
        - opensaber Misc
      summary: Search Registry Records
      description: |-
        This api is used to Search a record in registry
         - The endpoint for **Search Registry** is `/search`.
         - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty
         - Other Supported operators can be found  [here](https://github.com/project-sunbird/open-saber/wiki/API-examples-(JSON-Support)#search)
      operationId: SearchRegistryRecords
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opensaberapiSearchRegistryRecordsRequest'
            examples:
              a:
                $ref: '#/components/examples/SearchRequest1'
              b:
                $ref: '#/components/examples/SearchRequest2'
              c:
                $ref: '#/components/examples/SearchRequest3'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opensaberapiSearchRegistryRecords'
              examples:
                a:
                  $ref: '#/components/examples/SearchResultsResponse1'
                b:
                  $ref: '#/components/examples/EmptySearchResponse'
                c:
                  $ref: '#/components/examples/AuthenticationInvalidSearchResponse'
                d:
                  $ref: '#/components/examples/InternalServerErrorSearchResponse'
      deprecated: false
  /audit:
    post:
      tags:
        - opensaber Misc
      summary: Search Audit Records
      description: |-
        This api is used to Search audit records in registry
         - The endpoint for **Search Audit Registry** is `/audit`.
         - It fetches all the operation performed such as ADD, READ, DELETE , UPDATE or AUDIT logged as a part of audit operation.
         - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty
         - This api is supported only when the audit is enabled and storage is chosen as DATABASE in the configuration.
      operationId: SearchAuditRecords
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/opensaberapiSearchAuditRecordsRequest'
            examples:
              a:
                $ref: '#/components/examples/TeacherSearchAuditEmptyFilterRequest'
              b:
                $ref: '#/components/examples/TeacherSearchAuditFilterRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/opensaberapiAuditResponseSchema'
              examples:
                a:
                  $ref: '#/components/examples/SearchAuditRecordsResponse'
                b:
                  $ref: '#/components/examples/SearchAddAuditRecordsResponse'
      deprecated: false
  '/course/v1/batch/read/{batch-id}':
    get:
      tags:
        - Course Batch APIs
      summary: CourseBatch Read
      description: >-
        Fetch a particular Batch

        This API is associated with fetching a particular batch on the Sunbird
        Platform.

        The endpoint for Fetch a particular Batch is /batch/read/{Batch_ID}

        The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: CourseBatchRead
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{api-key}}'
        - name: x-authenticated-user-token
          in: header
          description: The alphanumeric string to access the API
          required: true
          style: simple
          schema:
            type: string
            example: '{{authToken}}'
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible\
            \ media types can be:- \n  - application/json
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: batch-id
          in: path
          description: Append a valid Batch ID To the Request URL
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: SUCCESS. The **Fetch a batch** operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/coursebatchmanapiCourseBatchRead-200OK'
              example:
                id: api.course.batch.read
                ver: v1
                ts: '2020-11-23 15:10:45:215+0000'
                params:
                  resmsgid: null
                  msgid: aa240e09-4481-4cbd-a832-617a15e8e872
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response:
                    identifier: 0131439667998310406
                    createdFor: []
                    endDate: 2020-12-30T00:00:00.000Z
                    description: batch description1
                    updatedDate: null
                    cert_templates:
                      Test_Template_4:
                        identifier: Test_Template_4
                        criteria:
                          enrollment:
                            status: 2
                        name: Test_Template_4
                        notifyTemplate:
                          emailTemplateType: defaultCertTemp
                          subject: Completion certificate
                          stateImgUrl: >-
                            https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
                          regards: Minister of Gujarat
                          regardsperson: Chairperson
                        issuer:
                          name: Gujarat Council of Educational Research and Training
                          url: 'https://gcert.gujarat.gov.in/gcert/'
                        url: >-
                          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_4/artifact/cbse.svg
                        signatoryList:
                          - image: >-
                              https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                            name: CEO Gujarat
                            id: CEO
                            designation: CEO
                      Test_Template_prad:
                        identifier: Test_Template_prad
                        criteria:
                          enrollment:
                            status: 2
                        name: Updated Asset
                        notifyTemplate:
                          emailTemplateType: defaultCertTemp
                          subject: Completion certificate
                          stateImgUrl: >-
                            https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
                          regards: Minister of Gujarat
                          regardsperson: Chairperson
                        issuer:
                          name: Gujarat Council of Educational Research and Training
                          url: 'https://gcert.gujarat.gov.in/gcert/'
                        url: >-
                          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_prad/artifact/file-0130860005482086401.svg
                        signatoryList:
                          - image: >-
                              https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                            name: CEO Gujarat
                            id: CEO
                            designation: CEO
                      template_01_dev_001:
                        identifier: template_01_dev_001
                        criteria:
                          enrollment:
                            status: 2
                        name: Course merit certificate
                        notifyTemplate:
                          emailTemplateType: defaultCertTemp
                          subject: Completion certificate
                          stateImgUrl: >-
                            https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
                          regards: Minister of Gujarat
                          regardsperson: Chairperson
                        issuer:
                          name: Gujarat Council of Educational Research and Training
                          url: 'https://gcert.gujarat.gov.in/gcert/'
                        url: ''
                        signatoryList:
                          - image: >-
                              https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                            name: CEO Gujarat
                            id: CEO
                            designation: CEO
                    batchId: 0131439667998310406
                    tandc: null
                    createdDate: '2020-11-04 10:54:31:731+0000'
                    createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
                    mentors: []
                    name: test cert scalability
                    id: 0131439667998310406
                    enrollmentType: open
                    enrollmentEndDate: null
                    courseId: do_1131396442662912001425
                    collectionId: do_1131396442662912001425
                    startDate: 2020-11-04T00:00:00.000Z
                    status: 1
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursebatchmanapiCourseBatchCreate-400BadRequest-InvalidCourseId
              example:
                id: api.course.batch.read
                ver: v1
                ts: '2020-11-23 06:48:19:128+0000'
                params:
                  resmsgid: null
                  msgid: 50f76a53-4710-4333-936f-c043031eec03
                  err: SERVER_ERROR
                  status: SERVER_ERROR
                  errmsg: SERVER_ERROR
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /course/v1/batch/update:
    patch:
      tags:
        - Course Batch APIs
      summary: CourseBatch Update
      description: >-
        This API is associated with updating a batch on the Sunbird Platform.

        The endpoint for Course Batch Update is /batch/update

        The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: CourseBatchUpdate
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible\
            \ media types can be:- \n  - application/json
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: x-authenticated-user-token
          in: header
          description: The alphanumeric string for accessing the API
          required: true
          style: simple
          schema:
            type: string
            example: '{{authToken}}'
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{api-key}}'
      requestBody:
        description: >-
          The body refers to the format of the request. - The body contains
          metadata about the batch to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/coursebatchmanapiCourseBatchUpdateRequest'
            example:
              request:
                enrollmentType: open
                startDate: '2020-11-23'
                enrollmentEndDate: '2021-12-30'
                status: 1
                courseId: '{{course-id}}'
                id: '{{batch-id}}'
        required: true
      responses:
        '200':
          description: SUCCESS. The **Update a batch** operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/coursebatchmanapiCourseBatchUpdate-200OK'
              example:
                id: api.course.batch.update
                ver: v1
                ts: '2020-11-23 06:59:52:152+0000'
                params:
                  resmsgid: null
                  msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result: {}
        '400':
          description: >-
            BAD REQUEST,**Update a batch** operation failed !The possible reason
            for failure is that you may have missed providing input for a
            mandatory parameter
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursebatchmanapiCourseBatchCreate-400BadRequest-InvalidCourseId
              example:
                id: api.course.batch.update
                ver: v1
                ts: '2020-11-23 06:57:38:160+0000'
                params:
                  resmsgid: null
                  msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
                  err: INVALID_BATCH_START_DATE_ERROR
                  status: INVALID_BATCH_START_DATE_ERROR
                  errmsg: Please provide valid Start Date.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursebatchmanapiCourseBatchCreate-500InternalServerError
              example:
                id: api.course.batch.update
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /course/v1/batch/list:
    post:
      tags:
        - Course Batch APIs
      summary: CourseBatch Search
      description: >-
        Lists the existing batches

        This API is associated with fetching and listing existing batches

        The endpoint for Lists the existing batches is /batch/list

        The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: CourseBatchSearch
      parameters:
        - in: query
          name: orgdetails
          description: >-
            Extra data can be passed in query parameter with above mentioned key
            and comma separated value. Example,?orgdetails=email,name. Sunbird
            will take this query parameter and pass to content service as it is,
            and content service does the needful.
          schema:
            type: string
          required: true
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible\
            \ media types can be:- \n  - application/json
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{api-key}}'
        - name: x-authenticated-user-token
          in: header
          description: The alphanumeric string for accessing the API
          required: true
          style: simple
          schema:
            type: string
            example: '{{authToken}}'
      requestBody:
        description: The body refers to the format of the request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/coursebatchmanapiCourseBatchSearchRequest'
            example:
              request:
                filters:
                  courseId: '{{course-id}}'
                limit: 2
        required: true
      responses:
        '200':
          description: >-
            SUCCESS. The **Lists the existing batches** operation was
            successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/coursebatchmanapiCourseBatchSearch-200OK'
              example:
                id: api.course.batch.search
                ver: v1
                ts: '2020-11-23 15:31:47:895+0000'
                params:
                  resmsgid: null
                  msgid: 3b07f74d-59af-494c-8d41-c8b665fa75ea
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response:
                    count: 15
                    content:
                      - identifier: 0131440087048683528
                        createdFor: []
                        endDate: '2020-11-30'
                        description: batch description1
                        updatedDate: null
                        cert_templates:
                          Test_Template_prad:
                            identifier: Test_Template_prad
                            criteria:
                              enrollment:
                                status: 2
                            name: Updated Asset
                            notifyTemplate:
                              emailTemplateType: defaultCertTemp
                              subject: Completion certificate
                              stateImgUrl: >-
                                https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
                              regards: Minister of Gujarat
                              regardsperson: Chairperson
                            issuer:
                              name: >-
                                Gujarat Council of Educational Research and
                                Training
                              url: 'https://gcert.gujarat.gov.in/gcert/'
                            url: >-
                              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_prad/artifact/file-0130860005482086401.svg
                            signatoryList:
                              - image: >-
                                  https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                                name: CEO Gujarat
                                id: CEO
                                designation: CEO
                        batchId: 0131440087048683528
                        tandc: null
                        createdDate: '2020-11-04 12:26:38:668+0000'
                        createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
                        mentors: []
                        name: test cert scalability
                        id: 0131440087048683528
                        enrollmentType: open
                        enrollmentEndDate: null
                        courseId: do_1131396442662912001425
                        collectionId: do_1131396442662912001425
                        startDate: '2020-11-04'
                        status: 1
                      - identifier: 0131439524674273284
                        createdFor: []
                        endDate: '2020-12-30'
                        description: batch description1
                        updatedDate: null
                        cert_templates:
                          Test_Template_prad:
                            identifier: Test_Template_prad
                            criteria:
                              enrollment:
                                status: 2
                            name: Updated Asset
                            notifyTemplate:
                              emailTemplateType: defaultCertTemp
                              subject: Completion certificate
                              stateImgUrl: >-
                                https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
                              regards: Minister of Gujarat
                              regardsperson: Chairperson
                            issuer:
                              name: >-
                                Gujarat Council of Educational Research and
                                Training
                              url: 'https://gcert.gujarat.gov.in/gcert/'
                            url: >-
                              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_prad/artifact/file-0130860005482086401.svg
                            signatoryList:
                              - image: >-
                                  https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                                name: CEO Gujarat
                                id: CEO
                                designation: CEO
                        batchId: 0131439524674273284
                        tandc: null
                        createdDate: '2020-11-04 10:24:25:778+0000'
                        createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
                        mentors: []
                        name: test cert scalability
                        id: 0131439524674273284
                        enrollmentType: open
                        enrollmentEndDate: null
                        courseId: do_1131396442662912001425
                        collectionId: do_1131396442662912001425
                        startDate: '2020-11-04'
                        status: 1
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursebatchmanapiCourseBatchCreate-500InternalServerError
              example:
                id: api.course.batch.search
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /course/v1/batch/create:
    post:
      tags:
        - Course Batch APIs
      summary: CourseBatch Create
      description: >-
        This API is associated with batch creation

        The endpoint for Creates a Batch is /batch/create

        The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: CourseBatchCreate
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible\
            \ media types can be:- \n  - application/json
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: x-authenticated-user-token
          in: header
          description: The alphanumeric string to access the API
          required: true
          style: simple
          schema:
            type: string
            example: '{{authToken}}'
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{api-key}}'
      requestBody:
        description: >-
          The body refers to the format of the request. - The body contains
          metadata about the new batch to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/coursebatchmanapiCourseBatchCreateRequest'
            example:
              request:
                courseId: '{{course-id}}'
                name: test cert scalability
                description: batch description1
                enrollmentType: open
                startDate: '2020-11-23'
                endDate: '2021-12-30'
        required: true
      responses:
        '200':
          description: Success example for batch create
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/coursebatchmanapiCourseBatchCreate-200OK'
              example:
                id: api.course.batch.create
                ver: v1
                ts: '2020-11-23 06:42:39:001+0000'
                params:
                  resmsgid: null
                  msgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
                  batchId: 01315728917531852810
        '400':
          description: >-
            BAD REQUEST,**create batch** operation failed !The possible reason
            for failure is that you may have missed providing input for a
            mandatory parameter
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursebatchmanapiCourseBatchCreate-400BadRequest-InvalidCourseId
              examples:
                a:
                  summary: Invalid_CourseId
                  description: >-
                    Response example when invalid course id got passed into
                    request
                  value:
                    id: api.course.batch.create
                    ver: v1
                    ts: '2020-11-23 06:40:48:878+0000'
                    params:
                      resmsgid: null
                      msgid: e85a4592-7458-4506-a3e3-0dc00d923616
                      err: INVALID_COURSE_ID
                      status: INVALID_COURSE_ID
                      errmsg: >-
                        Course doesnot exist. Please provide a valid course
                        identifier
                    responseCode: CLIENT_ERROR
                    result: {}
                b:
                  summary: Mandatory_Parameter_Missing
                  description: Response example for any parameter is missing into request
                  value:
                    id: api.course.batch.create
                    ver: v1
                    ts: '2020-11-23 06:40:48:878+0000'
                    params:
                      resmsgid: null
                      msgid: 4bc18ba9-0f3a-44ad-884a-d8b15c5680d1
                      err: MANDATORY_PARAMETER_MISSING
                      status: MANDATORY_PARAMETER_MISSING
                      errmsg: Mandatory parameter courseId/collectionId is missing.
                    responseCode: CLIENT_ERROR
                    result: {}
                c:
                  summary: Invalid_Batch_Start_Date
                  description: Response example for invalid batch start date
                  value:
                    id: api.course.batch.create
                    ver: v1
                    ts: '2020-11-23 06:40:48:878+0000'
                    params:
                      resmsgid: null
                      msgid: 358e9376-0eb4-426b-903f-42a0a5235c39
                      err: COURSE_BATCH_START_DATE_INVALID
                      status: COURSE_BATCH_START_DATE_INVALID
                      errmsg: Batch start date should be either today or future date.
                    responseCode: CLIENT_ERROR
                    result: {}
                d:
                  summary: Invalid_Batch_End_Date
                  description: Response example for invalid batch end date
                  value:
                    id: api.course.batch.create
                    ver: v1
                    ts: '2020-11-23 06:40:48:878+0000'
                    params:
                      resmsgid: null
                      msgid: 40e5e6c9-3777-4a15-b820-124f974dc202
                      err: END_DATE_ERROR
                      status: END_DATE_ERROR
                      errmsg: End date should be greater than start date.
                    responseCode: CLIENT_ERROR
                    result: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursebatchmanapiCourseBatchCreate-500InternalServerError
              example:
                id: api.course.batch.create
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /certreg/v1/certs/add:
    post:
      tags:
        - Add Certificate
      summary: adding of certificate
      description: >-
        This API allows you to add the  digitally generated certificates into
        the certificate registry.
           - All fields marked with an * are mandatory
           - Mandatory fields cannot be null or empty
           - The request accepts id, accessCode , jsonData(the raw certificate json,generated using cert/generate api ),related (courseId, batchId, type of the certificate, templateId(optional), pdfUrl) . If certificate should be reissused provide oldId
           - Backend route : http://cert-registry-service:9000/certs/v1/registry/add 
      operationId: AddCertificateV1
      parameters:
        - name: ts
          in: header
          description: 'The timestamp at which the **add certificate** request was sent. '
          required: false
          schema:
            type: string
      security:
        - bearer: []
      requestBody:
        description: >-
          The body refers to the format of the request. The body contains
          metadata about the request to add the certificate.
        content:
          application/json:
            schema:
              allOf:
                - $ref: >-
                    #/components/schemas/certificateregistryapiCertificateAddRequest
            examples:
              a:
                summary: Add Certifiate Request
                description: >-
                  Deposits a certificate to the user. Request should contain
                  unique id, accesscode, jsonData( raw certificate json),
                  related params of certificate like type courseId,
                  batchId,jsonUrl, pdfUrl 
                value:
                  request:
                    id: 8a6d6cc2-16ee-4e7a-a4d1-de74d75234243
                    accessCode: H9W9S4
                    recipientType: individual
                    recipientId: 8a6d6cc2-16ee-4e7a-a4d1-d74d752344343
                    recipientName: UserName
                    oldId: 8a6d6cc2-16ee-4e7a-a4d1-d74d7523424
                    related:
                      courseId: course-ids
                      type: course-completion
                      batchId: batchId
                    jsonData:
                      id: >-
                        https://staging.open-sunbird.org/certs/0125450863553740809/cc9eccab-56a1-47ba-ab10-27565f864243
                      type:
                        - Assertion
                        - Extension
                        - 'extensions:CertificateExtension'
                      issuedOn: 2019-08-21T00:00:00.000Z
                      recipient:
                        type:
                          - id
                        hashed: false
                        name: userName
                        '@context': 'https://staging.open-sunbird.org/certs/v1/context.json'
                      badge:
                        id: >-
                          https://staging.open-sunbird.org/certs/0125450863553740809/Badge.json
                        type:
                          - BadgeClass
                        name: Course Name
                        criteria:
                          type:
                            - Criteria
                          narrative: course completion certificate
                        issuer:
                          context: >-
                            https://staging.open-sunbird.org/certs/v1/context.json
                          id: 'https://staging.open-sunbird.org/certs/Issuer.json'
                          type:
                            - Issuer
                          name: issuer name
                          url: 'https://gcert.gujarat.gov.in/gcert/'
                        '@context': 'https://staging.open-sunbird.org/certs/v1/context.json'
                      evidence:
                        id: 'https://staging.open-sunbird.org/certs/Evidence.json'
                        type:
                          - Evidence
                          - Extension
                          - 'extensions:TrainingEvidence'
                        name: Course name
                        '@context': 'https://staging.open-sunbird.org/certs/v1/context.json'
                      verification:
                        type:
                          - hosted
                      revoked: false
                      signatory:
                        - identity: CEO
                          type:
                            - Extension
                            - 'extensions:SignatoryExtension'
                          hashed: false
                          designation: CEO
                          image: >-
                            https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                          '@context': >-
                            https://staging.open-sunbird.org/certs/v1/extensions/SignatoryExtension/context.json
                      '@context': 'https://staging.open-sunbird.org/certs/v1/context.json'
                    jsonUrl: >-
                      https://staging.open-sunbird.org/certs/0125450863553740809/cc9eccab-56a1-47ba-ab10-27565f864243.json
                    pdfUrl: >-
                      https://staging.open-sunbird.org/certs/0125450863553740809/cc9eccab-56a1-47ba-ab10-27565f864243.pdf
              b:
                summary: Mandatory Param Missing Request
                description: >-
                  some fields are mandatory. in the above example json data is
                  missing. if jsondata is not provide , will get 400 bad request
                  in the response
                value:
                  request:
                    id: 8a6d6cc2-16ee-4e7a-a4d1-d7d752342
                    accessCode: ABC123
                    recipientName: UserName
                    recipientId: 8a6d6cc2-16ee-4e7a-a4d1-d7d7
                    related:
                      courseId: do_31312968239031910412799
                      type: completion certificate
                      batchId: 0130533172574371843
                    pdfUrl: pdf url
        required: true
      responses:
        '200':
          description: >-
            OK ! Operation successful."Certificate addition" operation was
            executed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  certificateregistryapiApiResponse:
                    $ref: '#/components/schemas/certificateregistryapiApiResponse'
                  certificateregistryapiCertificateAddResponse:
                    $ref: >-
                      #/components/schemas/certificateregistryapiCertificateAddResponse
              example:
                id: api.certs.registry.add
                ver: v1
                ts: 1601451354559
                params:
                  msgid: string
                  status: string
                  resmsgid: string
                responseCode: OK
                result:
                  id: certificate id
        '400':
          description: >-
            BAD REQUEST. The "Certificate addition" operation failed. Input for
            a mandatory parameter may be missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificateregistryapiBadRequestResponse'
              examples:
                a:
                  summary: Mandatory Param jsonData Missing Res
                  description: provide all the mandatory params for the request.
                  value:
                    id: api.certs.registry.add
                    ver: v1
                    ts: 1605695233845
                    params: null
                    responseCode: CLIENT_ERROR
                    result:
                      message: value can not be empty for mandatory param jsonData
                b:
                  summary: Mandatory Param accessCode Missing Res
                  description: provide all the mandatory params for the request.
                  value:
                    id: api.certs.registry.add
                    ver: v1
                    ts: 1605695233845
                    params: null
                    responseCode: CLIENT_ERROR
                    result:
                      message: value can not be empty for mandatory param accesCode
                c:
                  summary: Certiifvat Id Uniqueness check Res
                  description: certificate id should be always unique
                  value:
                    id: api.certs.registry.add
                    ver: v1
                    ts: 1605695233845
                    params: null
                    responseCode: CLIENT_ERROR
                    result:
                      message: Please provide unique certificate id
                d:
                  summary: Invalid DataType Response
                  description: >-
                    value for for id is string, if the interger is provided then
                    the error is thrown
                  value:
                    id: api.certs.registry.add
                    ver: v1
                    ts: 1605695233845
                    params: null
                    responseCode: CLIENT_ERROR
                    result:
                      message: id PARAM SHOULD BE OF TYPE string
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org. 
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/certificateregistryapi500ServerError'
              example:
                id: api.certs.registry.add
                ver: v1
                ts: 1601451354559
                params:
                  msgid: string
                  status: string
                  resmsgid: string
                responseCode: SERVER_ERROR
                result:
                  message: 'Process failed,please try again later.'
  /certreg/v2/certs/add:
    post:
      tags:
        - Add Certificate
      summary: Add Certificate (v2)
      description: >-
        This API allows you to add the  digitally generated certificates into
        the certificate registry.
           - All fields marked with an * are mandatory
           - Mandatory fields cannot be null or empty
           - The request accepts id, accessCode , jsonUrl, jsonData(the raw certificate json),related (courseId, batchId, type of the certificate, templateId(optional)). The difference between v1 and v2 are v1 expects pdfurl and v2 expects printUri(materialised svg string) in the jsonData
           - Backend route : http://cert-registry-service:9000/certs/v2/registry/add 
      operationId: AddCertificateV2
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/certificateregistryapiAddCertificateV2Request
            examples:
              a:
                summary: Add V2 Certifiate Request
                value:
                  request:
                    id: 8a6d6cc2-16ee-4e7a-a4d1-de74d75234243
                    accessCode: H9W9S4
                    recipientType: individual
                    recipientId: 8a6d6cc2-16ee-4e7a-a4d1-d74d752344343
                    recipientName: UserName
                    oldId: 8a6d6cc2-16ee-4e7a-a4d1-d74d7523424
                    related:
                      courseId: course-ids
                      type: course-completion
                      batchId: batchId
                      templateId: templateId
                      completionUrl: completionUrl
                    jsonData:
                      id: >-
                        https://staging.open-sunbird.org/certs/0125450863553740809/cc9eccab-56a1-47ba-ab10-27565f864243
                      type:
                        - Assertion
                        - Extension
                        - 'extensions:CertificateExtension'
                      issuedOn: 2019-08-21T00:00:00.000Z
                      recipient:
                        type:
                          - id
                        hashed: false
                        name: userName
                        '@context': 'https://staging.open-sunbird.org/certs/v1/context.json'
                      badge:
                        id: >-
                          https://staging.open-sunbird.org/certs/0125450863553740809/Badge.json
                        type:
                          - BadgeClass
                        name: CourseName
                        criteria:
                          type:
                            - Criteria
                          narrative: course completion certificate
                        issuer:
                          context: >-
                            https://staging.open-sunbird.org/certs/v1/context.json
                          id: 'https://staging.open-sunbird.org/certs/Issuer.json'
                          type:
                            - Issuer
                          name: issure name
                          url: 'https://gcert.gujarat.gov.in/gcert/'
                          publicKey: []
                        '@context': 'https://staging.open-sunbird.org/certs/v1/context.json'
                      evidence:
                        id: 'https://staging.open-sunbird.org/certs/Evidence.json'
                        type:
                          - Evidence
                          - Extension
                          - 'extensions:TrainingEvidence'
                        name: CourseName
                        '@context': 'https://staging.open-sunbird.org/certs/v1/context.json'
                      verification:
                        type:
                          - hosted
                      revoked: false
                      signatory:
                        - identity: CEO
                          type:
                            - Extension
                            - 'extensions:SignatoryExtension'
                          hashed: false
                          designation: CEO
                          image: >-
                            https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                          '@context': >-
                            https://staging.open-sunbird.org/certs/v1/extensions/SignatoryExtension/context.json
                      printUri: ''
                      '@context': 'https://staging.open-sunbird.org/certs/v1/context.json'
                    jsonUrl: >-
                      https://staging.open-sunbird.org/certs/0125450863553740809/cc9eccab-56a1-47ba-ab10-27565f864243.json
              b:
                summary: Mandatory Param Missing Request
                value:
                  request:
                    id: 8a6d6cc2-16ee-4e7a-a4d1-d7d752342
                    accessCode: ABC123
                    recipientName: UserName
                    recipientId: 8a6d6cc2-16ee-4e7a-a4d1-d7d7
                    jsonData: {}
                    related:
                      courseId: do_31312968239031910412799
                      type: completion certificate
                      batchId: 0130533172574371843
                    json: json url
        required: true
      responses:
        '200':
          description: >-
            OK ! Operation successful."Certificate addition" operation was
            executed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  certificateregistryapiApiResponse:
                    $ref: '#/components/schemas/certificateregistryapiApiResponse'
                  certificateregistryapiCertificateAddResponse:
                    $ref: >-
                      #/components/schemas/certificateregistryapiCertificateAddResponse
              example:
                id: api.certs.registry.add
                ver: v2
                ts: 1601971810845
                params: null
                responseCode: OK
                result:
                  id: string
        '400':
          description: >-
            BAD REQUEST. The "Certificate addition" operation failed. Input for
            a mandatory parameter may be missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificateregistryapiBadRequestResponse'
              examples:
                a:
                  summary: Mandatory Param jsonData Missing Res
                  description: provide all the mandatory params for the request.
                  value:
                    id: api.certs.registry.add
                    ver: v2
                    ts: 1605695233845
                    params: null
                    responseCode: CLIENT_ERROR
                    result:
                      message: value can not be empty for mandatory param jsonData
                b:
                  summary: Mandatory Param accessCode Missing Res
                  description: provide all the mandatory params for the request.
                  value:
                    id: api.certs.registry.add
                    ver: v2
                    ts: 1605695233845
                    params: null
                    responseCode: CLIENT_ERROR
                    result:
                      message: value can not be empty for mandatory param accesCode
                c:
                  summary: Certiifvat Id Uniqueness check Res
                  description: certificate id should be always unique
                  value:
                    id: api.certs.registry.add
                    ver: v2
                    ts: 1605695233845
                    params: null
                    responseCode: CLIENT_ERROR
                    result:
                      message: Please provide unique certificate id
                d:
                  summary: Invalid DataType Response
                  description: >-
                    value for for id is string, if the interger is provided then
                    the error is thrown
                  value:
                    id: api.certs.registry.add
                    ver: v2
                    ts: 1605695233845
                    params: null
                    responseCode: CLIENT_ERROR
                    result:
                      message: id PARAM SHOULD BE OF TYPE string
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org. 
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/certificateregistryapi500ServerError'
              example:
                id: api.certs.registry.add
                ver: v2
                ts: 1601451354559
                params:
                  msgid: string
                  status: string
                  resmsgid: string
                responseCode: SERVER_ERROR
                result:
                  message: 'Process failed,please try again later.'
      deprecated: false
      security:
        - bearer: []
  /certreg/v1/certs/download:
    post:
      tags:
        - Download Certificate API
      summary: Downloading the certificate
      description: |-
        This API allows you to download digitally generated certificates.
          - All fields marked with an * are mandatory
          - The mandatory fields cannot be null or empty
          - the request accepts pdfUrl , during certificate generation pdfUrl will generated, and returns signed url
          - Backend route: http://cert-registry-service:9000/certs/v1/registry/download
      operationId: download certificate
      parameters:
        - name: ts
          in: header
          description: >-
            The timestamp at which the **download certificate** request was
            sent. 
          required: false
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            A unique ID that identifies the request, in case the same API is
            executed multiple times.
          required: false
          schema:
            type: string
      requestBody:
        description: >-
          The body refers to the format of the request. The body contains
          metadata about the request to download the certificate.
        content:
          application/json:
            schema:
              allOf:
                - $ref: >-
                    #/components/schemas/certificateregistryapiCertificateDownloadRequest
            examples:
              a:
                summary: Download Certificate Request
                description: 'Provide pdf Url, Get from certificate generate response '
                value:
                  request:
                    pdfUrl: >-
                      https://staging.open-sunbird.org/certs/0125450863553740809/0baa0938-f814-460a-bddb-09519507b6e1.pdf
              b:
                summary: Mandatory Param pdfUrl Missing
                description: PdfUrl is mandatory
                value:
                  request:
                    pdfUrl: ''
        required: true
      responses:
        '200':
          description: >-
            OK ! Operation successful."Certificate download" operation was
            executed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  certificateregistryapiApiResponse:
                    $ref: '#/components/schemas/certificateregistryapiApiResponse'
                  result:
                    $ref: >-
                      #/components/schemas/certificateregistryapiCertificateDownloadResponse
              example:
                id: api.certs.registry.download
                ver: v1
                ts: '1606222737453'
                responseCode: OK
                result:
                  signedUrl: signed string value
        '400':
          description: >-
            BAD REQUEST. The "Certificate Download" operation failed. You may
            have missed input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/certificateregistryapiIssueCertificateErrorResponse
              example:
                id: api.certs.registry.download
                ver: v1
                ts: '1606222737453'
                responseCode: CLIENT_ERROR
                result:
                  message: MANDATORY PARAM pdfUrl IS MISSING
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact us at info.sunbird.org.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/certificateregistryapi500ServerError'
              example:
                id: api.certs.registry.download
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
        - bearer: []
  '/certreg/v2/certs/download/{certId}':
    get:
      tags:
        - Download Certificate API
      summary: Download Certificate (v2)
      description: |-
        This API allows you to download digitally generated certificates.
           - All fields marked with an * are mandatory
           - The mandatory fields cannot be null or empty
           - Based on Id provided in the url, returns printUri (materialised svg string)
           - Backend route: http://cert-registry-service:9000/certs/v2/registry/download
      operationId: DownloadCertificate(v2)
      parameters:
        - name: certId
          in: path
          description: Certificate Id
          required: true
          style: simple
          schema:
            type: string
        - name: Content-Type
          in: header
          description: ''
          required: false
          style: simple
          schema:
            type: string
            example: application/json
      responses:
        '200':
          description: >-
            OK ! Operation successful."Certificate read" operation was executed
            successfully.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/certificateregistryapiCertificateDownloadV2Response
              example:
                id: api.certs.registry.download
                ver: v2
                ts: 1604044379151
                params: ''
                responseCode: OK
                result:
                  printUri: materialized svg string
          headers: {}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/certificateregistryapiIssueCertificateErrorResponse
              example:
                id: api.certs.registry.read
                ver: v1
                ts: 1604044379151
                params: ''
                responseCode: RESOURCE_NOT_FOUND
                result:
                  message: Certificate not found
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact us at info.sunbird.org.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/certificateregistryapi500ServerError'
              example:
                id: api.certs.registry.download
                ver: v2
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/certreg/v1/certs/read/{certId}':
    get:
      tags:
        - Read Certificate API
      summary: Read the certificate
      description: >-
        This API allows you to read digitally generated certificates. The
        **_/certreg/v1/certs/Read/{id}_** endpoint executes the **Read
        certificate** request based on path parameters provided.
           - All fields marked with an * are mandatory
           - The mandatory fields cannot be null or empty
           - Returns certificate json data, pdfUrl, related params
           - Backend route : http://cert-registry-service:9000/certs/v1/registry/read/:certId
      operationId: Read certificate
      parameters:
        - name: certId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: ts
          in: header
          description: >-
            The timestamp at which the **download certificate** request was
            sent. 
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            A unique ID that identifies the request, in case the same API is
            executed multiple times.
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK! Operation successful."Certificate read" operation was executed
            successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  certificateregistryapiCertificateReadResponse:
                    $ref: >-
                      #/components/schemas/certificateregistryapiCertificateReadResponse
              example:
                id: api.certs.registry.read
                ver: v1
                ts: 1604044379151
                params: ''
                responseCode: OK
                result:
                  response:
                    data: {}
                    jsonUrl: string
                    createdAt: timestamp
                    pdfUrl: string
                    related:
                      courseId: string
                      type: string
                      batchId: string
                    accessCode: string
                    recipient:
                      name: string
                      id: string
                      type: string
                    id: string
                    isrevoked: false
        '404':
          description: >-
            RESOURCE NOT FOUND. The "Certificate read" operation failed. You may
            have provided an invalid certificate ID. 
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/certificateregistryapiIssueCertificateErrorResponse
              example:
                id: api.certs.registry.read
                ver: v1
                ts: 1601006936286
                params: null
                responseCode: RESOURCE_NOT_FOUND
                result:
                  message: Certificate not found
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact us at info.sunbird.org.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/certificateregistryapi500ServerError'
              example:
                id: api.certs.registry.read
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
        - bearer: []
      deprecated: false
  /certreg/v1/certs/validate:
    post:
      tags:
        - Validate Certificate API
      summary: Certificate validation
      description: |-
        This API is allows you to validatedigitally generated certificates.
           - All fields marked with an * are mandatory
           - Mandatory fields cannot be null or empty
           - Request body expects certificate id and accesscode, Validates the certificate id matches the access code supplied and if matches  returns raw certificate json data else returns error message
           - Backend route : http://cert-registry-service:9000/certs/v1/registry/validate
      operationId: validate certificate
      requestBody:
        description: >-
          The body refers to the format of the request. The body contains
          metadata about the request to validate the certificate.
        content:
          application/json:
            schema:
              allOf:
                - $ref: >-
                    #/components/schemas/certificateregistryapiCertificateValidateRequest
            examples:
              a:
                summary: Certificate Validate Request
                value:
                  request:
                    certId: 8a6d6cc2-16ee-4e7a-a4d1-d7d7571f77a1
                    accessCode: ABC123
              b:
                summary: Invalid AccessCode Request
                value:
                  request:
                    certId: 8a6d6cc2-16ee-4e7a-a4d1-d7d7571f77a1
                    accessCode: InvalidCode
              c:
                summary: Mandatory Param accessCode Missing
                value:
                  request:
                    certId: 8a6d6cc2-16ee-4e7a-a4d1-d7d7571f77a1
                    accessCode: ''
        required: true
      responses:
        '200':
          description: >-
            OK ! Operation successful."Certificate Validation" operation was
            executed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  certificateregistryapiApiResponse:
                    $ref: '#/components/schemas/certificateregistryapiApiResponse'
                  certificateregistryapiCertificateValidateResponse:
                    $ref: >-
                      #/components/schemas/certificateregistryapiCertificateValidateResponse
              example:
                id: api.certs.registry.validate
                ver: v1
                ts: 1604989972001
                params: null
                responseCode: OK
                result:
                  response:
                    related: object
                    json: object
        '400':
          description: >-
            BAD REQUEST. The "Certificate validation" operation failed. Input
            for a mandatory parameter may be missing.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/certificateregistryapiIssueCertificateErrorResponse
              examples:
                a:
                  summary: Mandatory Param Missing Res
                  value:
                    id: api.certs.registry.validate
                    ver: v1
                    ts: timestamp
                    responseCode: CLIENT_ERROR
                    result:
                      message: value can not be empty for mandatory param accessCode
                b:
                  summary: Invalid AccessCode Response
                  description: >-
                    Validates the certificate id matches the access code
                    supplied. If accessCode is invalid , error is thrown
                  value:
                    id: api.certs.registry.validate
                    ver: v1
                    ts: '2020-11-23 15:15:18:331+0000'
                    responseCode: CLIENT_ERROR
                    result:
                      message: >-
                        PROVIDED ID {certId} AND ACCESS CODE {accesCode}
                        COMBINATION DOES NOT EXISTS"
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact us at info.sunbird.org.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/certificateregistryapi500ServerError'
              example:
                id: api.certs.registry.validate
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
        - bearer: []
  /certreg/v1/certs/verify:
    post:
      tags:
        - Verify Certificate Api
      summary: verify of certificate
      description: |-
        This API allows you to verify digitally generated certificates.
           - The **_/certreg/v1/certs/verify** endpoint executes the "verify certificate" request based on parameters provided in the request body.
           - All fields marked with an * are mandatory
           - Required fields cannot be null or empty
           - Request expects raw certificate data and id . This is to verify the JSON certificate data. Verifies certificate signature value and expiry date.
           - The certificate contains a signature in the signature field. The signature is encrypted using the awarding body's(Issuer) private key. Signature is verified by using encryption service verify API which takes signature value, issuer's public key id, and certificate object in the request and returns "true" if the signature is valid else "false"
           - If a certificate contains an expiry date, The expiry date is compared with the current date. and checks whether the certificate is expired or not
           - Backend route : http://cert-registry-service:9000/certs/v1/registry/verify
      operationId: verify certificate
      parameters:
        - name: ts
          in: header
          description: 'The timestamp at which the **verify certificate** request was sent. '
          required: false
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            A unique ID that identifies the request, in case the same API is
            executed multiple times.
          required: false
          schema:
            type: string
      requestBody:
        description: >-
          The body refers to the format of the request. The body contains
          metadata about the request to verify the certificate.
        content:
          application/json:
            schema:
              allOf:
                - $ref: >-
                    #/components/schemas/certificateregistryapiCertificateVerifyRequest
            examples:
              a:
                summary: Verify Certificate Request
                value:
                  request:
                    id: >-
                      https://staging.sunbirded.org/certs/0125450863553740809/15ccd968-8a19-4c0c-ab0b-cef953d7a924.json
              b:
                summary: Mandatory Param Missing Request
                value:
                  request:
                    id: ''
              c:
                summary: Invalid certificate Id Request
                value:
                  request:
                    id: Invalid Id
        required: true
      responses:
        '200':
          description: >-
            OK ! Operation successful."Certificate Verify" operation was
            executed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  certificateregistryapiApiResponse:
                    $ref: '#/components/schemas/certificateregistryapiApiResponse'
                  certificateregistryapiCertificateVerifyResponse:
                    $ref: >-
                      #/components/schemas/certificateregistryapiCertificateVerifyResponse
              examples:
                a:
                  summary: Response For Valid Certificate
                  value:
                    id: certs.v1.registry.verify
                    ver: v1
                    ts: 1590583013778
                    params: null
                    responseCode: OK
                    result:
                      response:
                        valid: true
                        messages: []
                        errorCount: 0
                b:
                  summary: Response For InValid Certificate
                  description: >-
                    certifiacte is expired and signature of certificate is
                    invalid
                  value:
                    id: certs.v1.registry.verify
                    ver: v1
                    ts: 1590583013778
                    params: null
                    responseCode: OK
                    result:
                      response:
                        valid: false
                        messages:
                          - >-
                            ERROR: Assertion.signature - certificate is not
                            valid , signature verification failed
                          - >-
                            ERROR: Assertion.expires - certificate has been
                            expired
                        errorCount: 2
        '400':
          description: >-
            BAD REQUEST. The "Certificate validation" operation failed. Input
            for a mandatory parameter may be missing.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/certificateregistryapiIssueCertificateErrorResponse
              examples:
                MandatoryParamMissing:
                  value:
                    id: api.certs.registry.verify
                    ver: v1
                    ts: '1606222737453'
                    responseCode: CLIENT_ERROR
                    result:
                      message: 'MANDATORY PARAM either:data:or:id IS MISSING'
                InvalidParamValue:
                  value:
                    id: api.certs.registry.verify
                    ver: v1
                    ts: '1606222737453'
                    responseCode: CLIENT_ERROR
                    result: null
                    message: 'Invalid value {{id}} for parameter id.'
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact us at info.sunbird.org.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/certificateregistryapi500ServerError'
      security:
        - bearer: []
  /certreg/v1/certs/search:
    post:
      tags:
        - Search Certificate API
      summary: Search the certificate
      description: >-
        This API allows you to search digitally generated certificates. The
        **_/certreg/v1/certs/search_** endpoint executes the **search
        certificate** request based on parameters provided in the request body.
           - All fields marked with an * are mandatory
           - The mandatory fields cannot be null or empty
           - This API is a wrapper for ElasticSearch. Hence, the manner in which the search request is sent to ElasticSearch, the same way it is sent to the search API inside the request object.
           - The system does not validate the request.  
         - Backend route : http://cert-registry-service:9000/certs/v1/registry/validate
      operationId: Search certificate
      parameters:
        - name: ts
          in: header
          description: 'The timestamp at which the **search certificate** request was sent. '
          schema:
            type: string
        - name: X-msgid
          in: header
          description: >-
            A unique ID that identifies the request, in case the same API is
            executed multiple times.
          schema:
            type: string
      requestBody:
        description: >-
          The body refers to the format of the request. The body contains
          metadata about the request to download the certificate.
        content:
          application/json:
            schema:
              allOf:
                - $ref: >-
                    #/components/schemas/certificateregistryapiCertificateSearchRequest
            example:
              request:
                _source:
                  - data.badge.issuer.name
                  - pdfUrl
                  - data.issuedOn
                  - recipient
                  - related
                  - data
                query:
                  match_phrase:
                    recipient.id: string
        required: true
      responses:
        '200':
          description: >-
            OK! Operation successful."Certificate Search" operation was executed
            successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  certificateregistryapiApiResponse:
                    $ref: '#/components/schemas/certificateregistryapiApiResponse'
                  certificateregistryapiCertificateSearchResponse:
                    $ref: >-
                      #/components/schemas/certificateregistryapiCertificateSearchResponse
              example:
                id: api.certs.registry.search
                ver: v1
                ts: 1605779119142
                params: null
                responseCode: OK
                result:
                  response:
                    content:
                      - _index: certv3
                        _type: _doc
                        _source:
                          pdfUrl: pdfURl
                          related:
                            type: completion certificate
                            batchId: batchId
                            courseId: batchId
                        _id: 8a6d6cc2-16ee-4e7a-a4d1-d74d7523424
                        _score: 55.46094
                      - _index: certv3
                        _type: _doc
                        _source:
                          pdfUrl: string
                          related:
                            type: completion certificate
                            batchId: batchId
                            courseId: batchId
                        _id: 8a6d6cc2-16ee-4e7a-a4d1-d74d7523222
                        _score: 55.46094
                    count: 2
        '400':
          description: >-
            BAD REQUEST. The "Certificate Search" operation failed. You may have
            missed input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/certificateregistryapiIssueCertificateErrorResponse
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org. 
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/certificateregistryapi500ServerError'
      security:
        - bearer: []
  /user/v1/create:
    post:
      tags:
        - User APIs
      summary: Create User V1
      description: >-
        This API is used to create a user - The endpoint for **Create User V1**
        is `/user/v1/create` - The fields marked with an asterisk (*) are
        mandatory. They cannot be null or empty.
      operationId: User-Create
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
      requestBody:
        description: >-
          - The body payload comprises of the metadata of the user being created
          - The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiUser-Create-Request'
            examples:
              a:
                summary: Request with email as mandatory
                value:
                  request:
                    firstName: selfdeclaredev5
                    userName: selfdeclaredev5
                    email: selfdeclaredev5@yopmail.com
                    lastName: selfdeclaredev5
                    emailVerified: true
                    password: Pass@1
              b:
                summary: Request with phone as mandatory
                value:
                  request:
                    firstName: selfdeclaredev5
                    userName: selfdeclaredev5
                    phone: 8888888888
                    lastName: selfdeclaredev5
                    phoneVerified: true
                    password: Pass@1
              c:
                summary: Request With optional fields
                value:
                  request:
                    firstName: selfdeclaredev5
                    userName: selfdeclaredev5
                    phone: 8888888888
                    lastName: selfdeclaredev5
                    phoneVerified: true
                    password: Pass@1
                    dob: 20-08-2000
                    subject:
                      - hindi
                      - english
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Create User" operation was successfully
            executed.
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Mon, 23 Nov 2020 10:03:39 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 301
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 82
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 131
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 15
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUser_Create_V1_With_Success'
              example:
                id: api.user.create
                ver: v1
                ts: '2020-11-23 10:03:39:935+0000'
                params:
                  resmsgid: null
                  msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  userId: f5863f60-2b21-47dc-aa9c-2f9822bae9bd
                  response: SUCCESS
                  errors: []
        '400':
          description: >-
            BAD REQUEST. The "Create User" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Accept_Tnc_With_UnAuthorized_Error
              example:
                id: api.user.create
                ver: v1
                ts: '2020-11-23 06:15:18:287+0000'
                params:
                  resmsgid: null
                  msgid: 9874c6b2-4bc6-4c4e-8e95-6d56499de337
                  err: MANDATORY_PARAMETER_MISSING
                  status: MANDATORY_PARAMETER_MISSING
                  errmsg: Mandatory parameter userName is missing.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  /user/v2/create:
    post:
      tags:
        - User APIs
      summary: Create User V2
      description: |-
        This API is used to create a user
           - The endpoint for **Create User V2** is `/user/v2/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: User-Create-V2
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
      requestBody:
        description: >-
          - The body payload comprises of the metadata of the user being created
          - The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiUser-Create-V2-Request'
            examples:
              a:
                summary: Request with email as mandatory
                value:
                  request:
                    firstName: selfdeclaredev2
                    email: selfdeclaredev5@yopmail.com
                    lastName: selfdeclaredev2
                    emailVerified: true
                    password: Pass@1
              b:
                summary: Request with phone as mandatory
                value:
                  request:
                    firstName: selfdeclaredev2
                    phone: 8888888888
                    lastName: selfdeclaredev2
                    phoneVerified: true
                    password: Pass@1
              c:
                summary: Request With optional fields
                value:
                  request:
                    firstName: selfdeclaredev2
                    phone: 8888888888
                    lastName: selfdeclaredev2
                    phoneVerified: true
                    password: Pass@1
                    dob: 20-08-2000
                    subject:
                      - hindi
                      - english
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Create User" operation was successfully
            executed.
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Mon, 23 Nov 2020 06:47:27 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 301
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 82
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1593
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 73
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUser_Create_V2_With_Success'
              example:
                id: api.user.create
                ver: v2
                ts: '2020-11-23 06:47:27:960+0000'
                params:
                  resmsgid: null
                  msgid: e271bd1c-cf1c-43d1-811c-cf845e507870
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
                  userId: 0019f27d-68f4-48d6-a2d8-dbe00099e8f3
                  errors: []
        '400':
          description: >-
            BAD REQUEST. The "Create User V2" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Accept_Tnc_With_UnAuthorized_Error
              example:
                id: api.user.create
                ver: v2
                ts: '2020-11-23 06:50:34:744+0000'
                params:
                  resmsgid: null
                  msgid: 1aee23df-ed02-4877-aa48-2788a69754e7
                  err: USERNAME_IN_USE
                  status: USERNAME_IN_USE
                  errmsg: Username already exists.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  /user/v3/create:
    post:
      tags:
        - User APIs
      summary: Create User V3
      description: |-
        This API is used to create a user
           - The endpoint for **Create User V3** is `/user/v3/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: User-Create-V3
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
      requestBody:
        description: >-
          - The body payload comprises of the metadata of the user being created
          - The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiUser-Create-V3-Request'
            example:
              request:
                firstName: selfdeclaredev4
                password: Password@1
                email: selfdeclaredev4@yopmail.com
                lastName: selfdeclaredev4
                userName: selfdeclaredev4
                emailVerified: true
        required: true
      responses:
        '200':
          description: ''
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Mon, 23 Nov 2020 06:59:16 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 301
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 82
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 557
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 92
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Create_V3_With_Success_Response
              example:
                id: api.user.create
                ver: v3
                ts: '2020-11-23 06:59:16:472+0000'
                params:
                  resmsgid: null
                  msgid: a9ee7e03-6034-47b7-8499-0fb4dc86fb1a
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  userId: 0e59b33f-d829-459f-a043-03ea726bf91c
                  response: SUCCESS
                  errors: []
        '400':
          description: >-
            BAD REQUEST. The "Create User" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Accept_Tnc_With_UnAuthorized_Error
              example:
                id: api.user.create
                ver: v3
                ts: '2020-11-23 07:02:52:007+0000'
                params:
                  resmsgid: null
                  msgid: 277f88e6-c028-4ecf-99d4-a450a43dc83a
                  err: USERNAME_IN_USE
                  status: USERNAME_IN_USE
                  errmsg: Username already exists.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  /user/v1/signup:
    post:
      tags:
        - User APIs
      summary: User Signup
      description: |-
        This API is used to create a user
           - The endpoint for **User Signup** is `/user/v1/signup`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: User-Signup
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
      requestBody:
        description: >-
          - The body payload comprises of the metadata of the user being created
          - The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiUser-Create-V3-Request'
            example:
              request:
                firstName: selfdeclaredev4
                password: Password@1
                email: selfdeclaredev4@yopmail.com
                lastName: selfdeclaredev4
                userName: selfdeclaredev4
                emailVerified: true
        required: true
      responses:
        '200':
          description: ''
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Mon, 23 Nov 2020 06:59:16 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 301
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 82
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 557
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 92
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Create_V3_With_Success_Response
              example:
                id: api.user.create
                ver: v3
                ts: '2020-11-23 06:59:16:472+0000'
                params:
                  resmsgid: null
                  msgid: a9ee7e03-6034-47b7-8499-0fb4dc86fb1a
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  userId: 0e59b33f-d829-459f-a043-03ea726bf91c
                  response: SUCCESS
                  errors: []
        '400':
          description: >-
            BAD REQUEST. The "Create User" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Accept_Tnc_With_UnAuthorized_Error
              example:
                id: api.user.create
                ver: v3
                ts: '2020-11-23 07:02:52:007+0000'
                params:
                  resmsgid: null
                  msgid: 277f88e6-c028-4ecf-99d4-a450a43dc83a
                  err: USERNAME_IN_USE
                  status: USERNAME_IN_USE
                  errmsg: Username already exists.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  /user/v4/create:
    post:
      tags:
        - User APIs
      summary: Create User V4
      description: |-
        This API is used to create MUA user.
           - The endpoint for **Create MUA User** is `/user/v4/create`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: User-Create-V4
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiUser-Create-V4-Request'
            example:
              request:
                firstName: selfdeclaredev4child1
                lastName: selfdeclaredev4
                managedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Create User" operation was successfully
            executed.
          headers: {}
        '400':
          description: >-
            BAD REQUEST. The "Create User V4" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Accept_Tnc_With_UnAuthorized_Error
              example:
                id: ''
                ver: v4
                ts: '2020-11-23 07:17:15:737+0000'
                params:
                  resmsgid: null
                  msgid: 680f0ecf-bb01-4d6f-9fe7-e36624ec8d5b
                  err: UNAUTHORIZED_USER
                  status: SERVER_ERROR
                  errmsg: You are not authorized.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Accept_Tnc_With_UnAuthorized_Error
              example:
                id: ''
                ver: v4
                ts: '2020-11-23 09:51:40:058+0000'
                params:
                  resmsgid: null
                  msgid: 651bc3a6-3670-49bc-95c4-1c96b26094c5
                  err: INTERNAL_ERROR
                  status: INTERNAL_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  /user/v1/search:
    post:
      tags:
        - User APIs
      summary: Search User
      description: |-
        This API is used for searching a particular user
          - The endpoint for **Search User** is `/user/v1/search`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: User_Search
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
      requestBody:
        description: >-
          - The body payload comprises of metadata of the user being searched

          - The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:

             - JSON
           **Note**: You can search the user based on different user attributes
            - The attributes must be passed inside the filters of the request payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiUser_Search_Request'
            examples:
              a:
                summary: Search based on email
                value:
                  request:
                    filters:
                      email: neworgadmin@yopmail.com
              b:
                summary: Search based on firstName and limit
                value:
                  request:
                    filters:
                      firstName: neworgadmin
                      limit: 10
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Search User" operation was successfully
            executed.
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Mon, 23 Nov 2020 09:16:58 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1900
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29998
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1681
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 13
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 12
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUser_Search_With_Success_Response'
              example:
                id: api.user.search
                ver: v1
                ts: '2020-11-23 09:16:58:628+0000'
                params:
                  resmsgid: null
                  msgid: ad7135b8-ef64-44bd-adaa-0b131a657689
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response:
                    count: 1
                    content:
                      - webPages: []
                        tcStatus: null
                        maskedPhone: null
                        rootOrgName: Pre-prod Custodian Organization
                        subject: []
                        channel: dikshapreprodcustodian
                        language: []
                        updatedDate: null
                        managedBy: null
                        flagsValue: 2
                        id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                        recoveryEmail: ''
                        identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                        thumbnail: null
                        updatedBy: null
                        accesscode: null
                        locationIds: []
                        registryId: null
                        rootOrgId: 0126796199493140480
                        prevUsedEmail: ''
                        firstName: selfdeclaredev4
                        tncAcceptedOn: null
                        allTncAccepted: {}
                        phone: ''
                        dob: null
                        grade: []
                        currentLoginTime: null
                        userType: TEACHER
                        userSubType: null
                        status: 1
                        lastName: selfdeclaredev4
                        gender: null
                        roles:
                          - PUBLIC
                        prevUsedPhone: ''
                        stateValidated: false
                        isDeleted: false
                        organisations:
                          - updatedBy: null
                            organisationId: 0126796199493140480
                            orgName: Pre-prod Custodian Organization
                            addedByName: null
                            addedBy: null
                            roles:
                              - PUBLIC
                            approvedBy: null
                            updatedDate: null
                            userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                            approvaldate: null
                            isDeleted: false
                            hashTagId: 0126796199493140480
                            isRejected: null
                            position: null
                            id: 3157455573689335
                            orgjoindate: '2020-11-23 07:02:43:194+0000'
                            isApproved: null
                            orgLeftDate: null
                        provider: null
                        countryCode: null
                        maskedEmail: se*************@yopmail.com
                        tempPassword: null
                        email: se*************@yopmail.com
                        profileSummary: null
                        phoneVerified: false
                        tcUpdatedDate: null
                        recoveryPhone: ''
                        avatar: null
                        userName: selfdeclaredev4
                        lastLoginTime: null
                        emailVerified: true
                        framework: {}
                        createdDate: '2020-11-23 07:02:36:155+0000'
                        createdBy: null
                        location: null
                        tncAcceptedVersion: null
        '400':
          description: >-
            BAD REQUEST. The "User Search" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Accept_Tnc_With_UnAuthorized_Error
              example:
                id: api.user.search
                ver: v1
                ts: '2020-11-23 07:23:49:202+0000'
                params:
                  resmsgid: null
                  msgid: 7420055e-1284-41ea-9570-d8ed552ab096
                  err: UNAUTHORIZED_USER
                  status: SERVER_ERROR
                  errmsg: You are not authorized.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  /user/v1/update:
    patch:
      tags:
        - User APIs
      summary: Update User
      description: |-
        This API is use for updating the user realted details
          - The endpoint for **Update User** is `/user/v1/update`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: User_Update
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
      requestBody:
        description: >-
          - The body payload comprises of the metadata about the user to be
          updated. - The body parameter refers to the format of the request, the
          request body (payload) takes the following media types to make the
          payload:
             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiUser_Update_Request'
            examples:
              a:
                summary: Update phone number of user
                value:
                  request:
                    userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                    phone: 8888888888
                    phoneVerified: true
              b:
                summary: Update location details of user
                value:
                  request:
                    userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                    locationCodes:
                      - '22'
                      - '2202'
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Update User" operation was successfully
            executed.
          headers: {}
        '400':
          description: >-
            BAD REQUEST. The "Update User" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Accept_Tnc_With_UnAuthorized_Error
              example:
                id: api.user.update
                ver: v1
                ts: '2020-11-23 11:11:57:835+0000'
                params:
                  resmsgid: null
                  msgid: 095def6b-8678-46f8-9e2f-142a731f7235
                  err: UNAUTHORIZED_USER
                  status: UNAUTHORIZED_USER
                  errmsg: You are not authorized.
                responseCode: UNAUTHORIZED
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  '/user/v1/read/{userId}':
    get:
      tags:
        - User APIs
      summary: Read User
      description: >-
        This API is used for searching a specific user, the user search is based
        on the unique ID of the user
          - The endpoint for **Get User by User ID** is `/user/v1/read/{User_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - User can pass an optional query parameter 'fields'. The value is a comma separated list of fields whose information is required in response. e.g. fields=completeness,missingFields,topic,organisations,roles
          - 'completeness' is to return profile completeness percentage.
          - 'missingFields' is to return fields that are missing to achieve 100% profile completeness.
          - 'topic' is to return list of topics that are used for announcements.
          - 'organisations' is to return organisation and location details.
          - 'roles' is to return list of roles with name and ID details.
      operationId: ReadUser
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: >-
            It a unique token/key to authenticate the user each time an API is
            called. For corresponsing sessions, this token is exchanged, not the
            username/password of the user
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: userId
          in: path
          description: User-Id of the user
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Get User by User ID" operation was
            successfully executed.
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Mon, 23 Nov 2020 13:21:57 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 2984
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29997
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 2767
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 19
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 10
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiGet_User_Success_With_Valid_Auth_Token
              example:
                id: api.user.read
                ver: v1
                ts: '2020-11-23 13:21:57:692+0000'
                params:
                  resmsgid: null
                  msgid: af801330-0dcb-42c6-b76b-cedaa6212118
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response:
                    webPages: []
                    tcStatus: null
                    maskedPhone: null
                    rootOrgName: Pre-prod Custodian Organization
                    subject: []
                    channel: dikshapreprodcustodian
                    language: []
                    updatedDate: null
                    managedBy: null
                    flagsValue: 2
                    id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                    recoveryEmail: ''
                    identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                    thumbnail: null
                    updatedBy: null
                    accesscode: null
                    locationIds: []
                    registryId: null
                    rootOrgId: 0126796199493140480
                    prevUsedEmail: ''
                    firstName: selfdeclaredev4
                    tncAcceptedOn: null
                    allTncAccepted: {}
                    phone: ''
                    dob: null
                    grade: []
                    currentLoginTime: null
                    userType: TEACHER
                    userSubType: null
                    status: 1
                    lastName: selfdeclaredev4
                    tncLatestVersion: v8
                    gender: null
                    roles:
                      - PUBLIC
                    prevUsedPhone: ''
                    stateValidated: false
                    isDeleted: false
                    organisations:
                      - updatedBy: null
                        organisationId: 0126796199493140480
                        orgName: Pre-prod Custodian Organization
                        addedByName: null
                        addedBy: null
                        roles:
                          - PUBLIC
                        approvedBy: null
                        updatedDate: null
                        userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                        approvaldate: null
                        isDeleted: false
                        hashTagId: 0126796199493140480
                        isRejected: null
                        position: null
                        id: 3157455573689335
                        orgjoindate: '2020-11-23 07:02:43:194+0000'
                        isApproved: null
                        orgLeftDate: null
                    provider: null
                    countryCode: null
                    tncLatestVersionUrl: >-
                      https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
                    maskedEmail: se*************@yopmail.com
                    tempPassword: null
                    email: se*************@yopmail.com
                    rootOrg:
                      dateTime: null
                      preferredLanguage: null
                      keys:
                        encKeys:
                          - 456
                        signKeys:
                          - 456
                      channel: dikshapreprodcustodian
                      approvedBy: null
                      description: Pre-prod Custodian Organization
                      updatedDate: '2020-08-28 10:12:01:096+0000'
                      addressId: null
                      orgType: null
                      provider: null
                      orgCode: null
                      locationId: null
                      theme: null
                      id: 0126796199493140480
                      isApproved: null
                      communityId: null
                      slug: dikshapreprodcustodian
                      email: null
                      isSSOEnabled: null
                      thumbnail: null
                      updatedBy: null
                      orgName: Pre-prod Custodian Organization
                      locationIds:
                        - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                        - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
                      externalId: null
                      isRootOrg: true
                      rootOrgId: 0126796199493140480
                      imgUrl: null
                      approvedDate: null
                      orgTypeId: null
                      homeUrl: null
                      isDefault: true
                      createdDate: '2019-01-18 09:48:13:428+0000'
                      contactDetail: null
                      parentOrgId: null
                      createdBy: system
                      hashTagId: 0126796199493140480
                      noOfMembers: null
                      status: 1
                    profileSummary: null
                    phoneVerified: false
                    tcUpdatedDate: null
                    recoveryPhone: ''
                    avatar: null
                    userName: selfdeclaredev4
                    promptTnC: true
                    lastLoginTime: null
                    emailVerified: true
                    framework: {}
                    createdDate: '2020-11-23 07:02:36:155+0000'
                    createdBy: null
                    location: null
                    tncAcceptedVersion: null
        '400':
          description: >-
            BAD REQUEST. The "Read User V1" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  '/user/v2/read/{userId}':
    get:
      tags:
        - User APIs
      summary: Read User V2
      description: >-
        This API is used for searching a specific user, the user search is based
        on the unique ID of the user
          - The endpoint for **Get User by User ID v2** is `/user/v2/read/{User_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - User can pass an optional query parameter 'fields'. The value is a comma separated list of fields whose information is required in response. e.g. fields=completeness,missingFields,topic,organisations,roles
          - 'completeness' is to return profile completeness percentage.
          - 'missingFields' is to return fields that are missing to achieve 100% profile completeness.
          - 'topic' is to return list of topics that are used for announcements.
          - 'organisations' is to return organisation and location details.
          - 'roles' is to return list of roles with name and ID details.
          - Only necessary fields are returned in the response as per user profile configuration.
      operationId: Get User by User ID v2
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: userId
          in: path
          description: >-
            Please append a valid User Id To the Request URI and if user need
            any specific values like , profile completeness ,missingFields,topic
            Ex: ?Fields=completeness,missingFields,topic
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Get User by User ID v2" operation was
            successfully executed.
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Mon, 23 Nov 2020 13:21:57 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 2984
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29997
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 2767
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 19
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 10
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiGet_User_Success_With_Valid_Auth_Token
              example:
                id: api.user.read
                ver: v1
                ts: '2020-11-23 13:21:57:692+0000'
                params:
                  resmsgid: null
                  msgid: af801330-0dcb-42c6-b76b-cedaa6212118
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response:
                    webPages: []
                    tcStatus: null
                    maskedPhone: null
                    rootOrgName: Pre-prod Custodian Organization
                    subject: []
                    channel: dikshapreprodcustodian
                    language: []
                    updatedDate: null
                    managedBy: null
                    flagsValue: 2
                    id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                    recoveryEmail: ''
                    identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                    thumbnail: null
                    updatedBy: null
                    accesscode: null
                    locationIds: []
                    registryId: null
                    rootOrgId: 0126796199493140480
                    prevUsedEmail: ''
                    firstName: selfdeclaredev4
                    tncAcceptedOn: null
                    allTncAccepted: {}
                    phone: ''
                    dob: null
                    grade: []
                    currentLoginTime: null
                    userType: TEACHER
                    userSubType: null
                    status: 1
                    lastName: selfdeclaredev4
                    tncLatestVersion: v8
                    gender: null
                    roles:
                      - PUBLIC
                    prevUsedPhone: ''
                    stateValidated: false
                    isDeleted: false
                    organisations:
                      - updatedBy: null
                        organisationId: 0126796199493140480
                        orgName: Pre-prod Custodian Organization
                        addedByName: null
                        addedBy: null
                        roles:
                          - PUBLIC
                        approvedBy: null
                        updatedDate: null
                        userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                        approvaldate: null
                        isDeleted: false
                        hashTagId: 0126796199493140480
                        isRejected: null
                        position: null
                        id: 3157455573689335
                        orgjoindate: '2020-11-23 07:02:43:194+0000'
                        isApproved: null
                        orgLeftDate: null
                    provider: null
                    countryCode: null
                    tncLatestVersionUrl: >-
                      https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
                    maskedEmail: se*************@yopmail.com
                    tempPassword: null
                    email: se*************@yopmail.com
                    rootOrg:
                      dateTime: null
                      preferredLanguage: null
                      keys:
                        encKeys:
                          - 456
                        signKeys:
                          - 456
                      channel: dikshapreprodcustodian
                      approvedBy: null
                      description: Pre-prod Custodian Organization
                      updatedDate: '2020-08-28 10:12:01:096+0000'
                      addressId: null
                      orgType: null
                      provider: null
                      orgCode: null
                      locationId: null
                      theme: null
                      id: 0126796199493140480
                      isApproved: null
                      communityId: null
                      slug: dikshapreprodcustodian
                      email: null
                      isSSOEnabled: null
                      thumbnail: null
                      updatedBy: null
                      orgName: Pre-prod Custodian Organization
                      locationIds:
                        - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                        - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
                      externalId: null
                      isRootOrg: true
                      rootOrgId: 0126796199493140480
                      imgUrl: null
                      approvedDate: null
                      orgTypeId: null
                      homeUrl: null
                      isDefault: true
                      createdDate: '2019-01-18 09:48:13:428+0000'
                      contactDetail: null
                      parentOrgId: null
                      createdBy: system
                      hashTagId: 0126796199493140480
                      noOfMembers: null
                      status: 1
                    profileSummary: null
                    phoneVerified: false
                    tcUpdatedDate: null
                    recoveryPhone: ''
                    avatar: null
                    userName: selfdeclaredev4
                    promptTnC: true
                    lastLoginTime: null
                    emailVerified: true
                    framework: {}
                    createdDate: '2020-11-23 07:02:36:155+0000'
                    createdBy: null
                    location: null
                    tncAcceptedVersion: null
        '400':
          description: >-
            BAD REQUEST. The "Read User V2" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  '/user/v3/read/{userId}':
    get:
      tags:
        - User APIs
      summary: Read User V3
      description: >-
        This API is used for reading a specific user, the user read is based on
        the unique ID of the user
          - The endpoint for **Get User by User ID v3** is `/user/v2/read/{User_ID}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - User can pass an optional query parameter 'fields'. The value is a comma separated list of fields whose information is required in response. e.g. fields=completeness,missingFields,topic,organisations,roles,tokens
          - 'completeness' is to return profile completeness percentage.
          - 'missingFields' is to return fields that are missing to achieve 100% profile completeness.
          - 'topic' is to return list of topics that are used for announcements.
          - 'organisations' is to return organisation and location details.
          - 'roles' is to return list of roles with name and ID details.
          - MUA user detail can be retreived with their token details
      operationId: Read_User_V3
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: withTokens
          in: query
          description: >-
            - When withTokens attribute is passed MUA user tokens will passsed
            in the response
          style: form
          explode: true
          schema:
            type: boolean
            example: true
        - name: fields
          in: query
          description: >-
            - User can pass an optional query parameter 'fields'. The value is a
            comma separated list of fields whose information is required in
            response. e.g.
            fields=completeness,missingFields,topic,organisations,roles
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: 'organisations,roles,locations,declarations'
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: userId
          in: path
          description: >-
            Please append a valid User Id To the Request URI and if user need
            any specific values like , profile completeness ,missingFields,topic
            Ex: ?Fields=completeness,missingFields,topic
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Get User by User ID v3" operation was
            successfully executed.
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Tue, 24 Nov 2020 09:13:00 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 27465
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 27248
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 26
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 12
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiRead_User_V3_With_Success_Response'
              example:
                id: api.user.read
                ver: v3
                ts: '2020-11-24 09:13:00:959+0000'
                params:
                  resmsgid: null
                  msgid: 26012a3e-59f1-40af-b96e-5bc808f5f2ab
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response:
                    webPages: []
                    tcStatus: null
                    maskedPhone: null
                    rootOrgName: Pre-prod Custodian Organization
                    subject: []
                    channel: dikshapreprodcustodian
                    language: []
                    updatedDate: '2020-11-23 17:47:49:640+0000'
                    managedBy: null
                    flagsValue: 2
                    id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                    recoveryEmail: ''
                    identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                    thumbnail: null
                    updatedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                    accesscode: null
                    registryId: null
                    roleList:
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                      - name: Content Curation
                        id: CONTENT_CURATION
                      - name: Content Creator
                        id: CONTENT_CREATOR
                      - name: Official TextBook Badge Issuer
                        id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                      - name: Admin
                        id: ADMIN
                      - name: Course Mentor
                        id: COURSE_MENTOR
                      - name: Org Admin
                        id: ORG_ADMIN
                      - name: Content Review
                        id: CONTENT_REVIEW
                      - name: Flag Reviewer
                        id: FLAG_REVIEWER
                      - name: Announcement Sender
                        id: ANNOUNCEMENT_SENDER
                      - name: System Administration
                        id: SYSTEM_ADMINISTRATION
                      - name: Book Creator
                        id: BOOK_CREATOR
                      - name: Course Creator
                        id: COURSE_CREATOR
                      - name: Report Viewer
                        id: REPORT_VIEWER
                      - name: Flag Reviewer
                        id: 'FLAG_REVIEWER '
                      - name: Membership Management
                        id: MEMBERSHIP_MANAGEMENT
                      - name: Content Creation
                        id: CONTENT_CREATION
                      - name: Book Reviewer
                        id: BOOK_REVIEWER
                      - name: Teacher Badge Issuer
                        id: TEACHER_BADGE_ISSUER
                      - name: Org Management
                        id: ORG_MANAGEMENT
                      - name: Course Admin
                        id: COURSE_ADMIN
                      - name: Org Moderator
                        id: ORG_MODERATOR
                      - name: Public
                        id: PUBLIC
                      - name: Content Reviewer
                        id: CONTENT_REVIEWER
                      - name: Report Admin
                        id: REPORT_ADMIN
                    rootOrgId: 0126796199493140480
                    prevUsedEmail: ''
                    firstName: selfdeclaredev4
                    tncAcceptedOn: 2020-11-23T17:47:05.019Z
                    allTncAccepted: {}
                    phone: ''
                    dob: null
                    grade: []
                    currentLoginTime: null
                    userType: TEACHER
                    userSubType: null
                    status: 1
                    lastName: selfdeclaredev4
                    tncLatestVersion: v8
                    gender: null
                    roles:
                      - PUBLIC
                    prevUsedPhone: ''
                    stateValidated: false
                    isDeleted: false
                    organisations:
                      - updatedBy: null
                        organisationId: 0126796199493140480
                        orgName: Pre-prod Custodian Organization
                        addedByName: null
                        addedBy: null
                        roles:
                          - PUBLIC
                        approvedBy: null
                        channel: dikshapreprodcustodian
                        locationIds:
                          - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                          - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
                        updatedDate: null
                        userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                        approvaldate: null
                        isDeleted: false
                        hashTagId: 0126796199493140480
                        isRejected: null
                        locations:
                          - code: 29
                            name: Karnataka
                            id: 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                            type: state
                            parentId: null
                          - code: 2901
                            name: BELAGAVI
                            id: 8250d58d-f1a2-4397-bfd3-b2e688ba7141
                            type: district
                            parentId: 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                        position: null
                        id: 3157455573689335
                        orgjoindate: '2020-11-23 07:02:43:194+0000'
                        isApproved: null
                        orgLeftDate: null
                    provider: null
                    countryCode: null
                    tncLatestVersionUrl: >-
                      https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
                    maskedEmail: se*************@yopmail.com
                    tempPassword: null
                    email: se*************@yopmail.com
                    rootOrg:
                      dateTime: null
                      preferredLanguage: null
                      keys:
                        encKeys:
                          - 456
                        signKeys:
                          - 456
                      channel: dikshapreprodcustodian
                      approvedBy: null
                      description: Pre-prod Custodian Organization
                      updatedDate: '2020-08-28 10:12:01:096+0000'
                      addressId: null
                      orgType: null
                      provider: null
                      orgCode: null
                      locationId: null
                      theme: null
                      id: 0126796199493140480
                      isApproved: null
                      communityId: null
                      slug: dikshapreprodcustodian
                      email: null
                      isSSOEnabled: null
                      thumbnail: null
                      updatedBy: null
                      orgName: Pre-prod Custodian Organization
                      locationIds:
                        - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                        - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
                      externalId: null
                      isRootOrg: true
                      rootOrgId: 0126796199493140480
                      imgUrl: null
                      approvedDate: null
                      orgTypeId: null
                      homeUrl: null
                      isDefault: true
                      createdDate: '2019-01-18 09:48:13:428+0000'
                      contactDetail: null
                      parentOrgId: null
                      createdBy: system
                      hashTagId: 0126796199493140480
                      noOfMembers: null
                      status: 1
                    profileSummary: null
                    phoneVerified: false
                    tcUpdatedDate: null
                    userLocations:
                      - code: 2823
                        name: CHITTOOR
                        id: b5c35cfc-6c1e-4266-94ef-a425c43c7f4e
                        type: district
                        parentId: bc75cc99-9205-463e-a722-5326857838f8
                      - code: 28
                        name: Andhra Pradesh
                        id: bc75cc99-9205-463e-a722-5326857838f8
                        type: state
                        parentId: null
                    recoveryPhone: ''
                    avatar: null
                    userName: selfdeclaredev4
                    promptTnC: false
                    lastLoginTime: 0
                    emailVerified: true
                    framework:
                      gradeLevel:
                        - Class 1
                      subject:
                        - English
                      id:
                        - ekstep_ncert_k-12
                      medium:
                        - English
                      board:
                        - CBSE
                    createdDate: '2020-11-23 07:02:36:155+0000'
                    createdBy: null
                    location: null
                    tncAcceptedVersion: v8
        '400':
          description: >-
            BAD REQUEST. The "Read User V3" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  '/user/v1/get/{idType}/{id}':
    get:
      tags:
        - User APIs
      summary: Get User by  ID Type
      description: >-
        This API is used for searching a specific user, the user search is based
        on the unique ID type of the user
          - The endpoint for **Get User by User ID** is `/user/v1/get/{idType}/{id}`
      operationId: Get User by  ID Type
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called.
          required: true
          style: simple
          schema:
            type: string
        - name: idType
          in: path
          description: 'idType can only be either email, phone or loginId'
          required: true
          style: simple
          schema:
            type: string
        - name: id
          in: path
          description: 'id can only be values of email, phone or loginId'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Get User by ID Type" operation was
            successfully executed.
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Mon, 23 Nov 2020 16:31:29 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 2627
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 2402
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 55
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiGet_User_By_IdType_As_Username_With_Success_Response
              example:
                id: api.user.get.userName
                ver: v1
                ts: '2020-11-23 16:31:29:317+0000'
                params:
                  resmsgid: null
                  msgid: 76a967d4-74ac-4478-b3ed-e917c3ce3ee8
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response:
                    webPages: []
                    tcStatus: null
                    maskedPhone: null
                    rootOrgName: Pre-prod Custodian Organization
                    subject: []
                    channel: dikshapreprodcustodian
                    language: []
                    updatedDate: null
                    managedBy: null
                    flagsValue: 2
                    id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                    recoveryEmail: ''
                    identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                    thumbnail: null
                    updatedBy: null
                    accesscode: null
                    locationIds: []
                    registryId: null
                    rootOrgId: 0126796199493140480
                    prevUsedEmail: ''
                    firstName: selfdeclaredev4
                    tncAcceptedOn: null
                    allTncAccepted: {}
                    phone: ''
                    dob: null
                    grade: []
                    currentLoginTime: null
                    userType: TEACHER
                    userSubType: null
                    status: 1
                    lastName: selfdeclaredev4
                    tncLatestVersion: v8
                    gender: null
                    roles:
                      - PUBLIC
                    prevUsedPhone: ''
                    stateValidated: false
                    isDeleted: false
                    organisations:
                      - updatedBy: null
                        organisationId: 0126796199493140480
                        orgName: Pre-prod Custodian Organization
                        addedByName: null
                        addedBy: null
                        roles:
                          - PUBLIC
                        approvedBy: null
                        updatedDate: null
                        userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                        approvaldate: null
                        isDeleted: false
                        hashTagId: 0126796199493140480
                        isRejected: null
                        position: null
                        id: 3157455573689335
                        orgjoindate: '2020-11-23 07:02:43:194+0000'
                        isApproved: null
                        orgLeftDate: null
                    provider: null
                    countryCode: null
                    tncLatestVersionUrl: >-
                      https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
                    maskedEmail: se*************@yopmail.com
                    tempPassword: null
                    email: se*************@yopmail.com
                    rootOrg:
                      identifier: 0126796199493140480
                      orgName: Pre-prod Custodian Organization
                      keys:
                        signKeys:
                          - 456
                        encKeys:
                          - 456
                      channel: dikshapreprodcustodian
                      locationIds:
                        - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                        - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
                      description: Pre-prod Custodian Organization
                      isRootOrg: true
                      updatedDate: '2020-08-28 10:12:01:096+0000'
                      rootOrgId: 0126796199493140480
                      isDefault: true
                      createdDate: '2019-01-18 09:48:13:428+0000'
                      createdBy: system
                      hashTagId: 0126796199493140480
                      id: 0126796199493140480
                      slug: dikshapreprodcustodian
                      status: 1
                    profileSummary: null
                    phoneVerified: false
                    tcUpdatedDate: null
                    recoveryPhone: ''
                    avatar: null
                    userName: selfdeclaredev4
                    promptTnC: true
                    lastLoginTime: null
                    emailVerified: true
                    framework: {}
                    createdDate: '2020-11-23 07:02:36:155+0000'
                    createdBy: null
                    location: null
                    tncAcceptedVersion: null
        '400':
          description: >-
            BAD REQUEST. The "Get User By Id Type" operation failed ! The
            possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Accept_Tnc_With_UnAuthorized_Error
              example:
                id: api.user.get.userName
                ver: v1
                ts: '2020-11-23 16:59:29:101+0000'
                params:
                  resmsgid: null
                  msgid: ba7566b1-aaa1-4f5d-90dd-70225bd7e5d8
                  err: UNAUTHORIZED_USER
                  status: SERVER_ERROR
                  errmsg: You are not authorized.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  '/user/v2/exists/{idType}/{id}':
    get:
      tags:
        - User APIs
      summary: Check User Exists by ID Type V2
      description: >-
        This API is used for searching a specific user, the user search is based
        on the unique ID type of the user
          - The endpoint for **Get User by User ID** is `/user/v2/exists/{idType}/{id}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: User_Exists
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: app
          in: query
          description: >-
            Captha validation for APP is based on this value, for app this field
            is mandatory
          style: form
          explode: true
          schema:
            type: string
        - name: captchaResponse
          in: query
          description: >-
            Captcha is sent with the request, it is validated and then response
            is shared
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: someInvalidCaptcha
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called.
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: idType
          in: path
          description: 'idType can only be either email, phone or userName'
          required: true
          style: simple
          schema:
            type: string
        - name: id
          in: path
          description: 'id can only be values of email, phone or userName'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Get User by ID Type" operation was
            successfully executed.
          headers: {}
        '400':
          description: >-
            BAD REQUEST. The "User Exists V2" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
        '418':
          description: Client Error (418)
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Accept_Tnc_With_UnAuthorized_Error
              example:
                id: api.user.exists.userName
                ver: v2
                ts: '2020-11-23 17:30:24:819+0000'
                params:
                  resmsgid: null
                  msgid: 353b01cf-8752-416a-9dc6-47aaafba2013
                  err: INVALID_CAPTCHA
                  status: INVALID_CAPTCHA
                  errmsg: Captcha is invalid
                responseCode: IM_A_TEAPOT
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  '/user/v1/exists/{idType}/{id}':
    get:
      tags:
        - User APIs
      summary: Check User Exists by ID Type
      description: >-
        This API is used for searching a specific user, the user search is based
        on the unique ID type of the user
          - The endpoint for **Get User by User ID** is `/user/v1/exists/{idType}/{id}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: User_Exists_V1
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called.
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: idType
          in: path
          description: 'idType can only be either email, or phone'
          required: true
          style: simple
          schema:
            type: string
        - name: id
          in: path
          description: id can only be values of email or phone
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."will return true or false on the basis of
            user existence in system" operation was successfully executed.
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 27 Nov 2020 17:26:43 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 239
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29997
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 15
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 2712
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 12
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Exists_V1_With_Suceess_Response
              examples:
                a:
                  summary: Success response with user exists
                  value:
                    id: api.user.exists.userName
                    ver: v1
                    ts: '2020-11-27 17:26:43:814+0000'
                    params:
                      resmsgid: null
                      msgid: 9b739351ebcbe7923209d0fc2e48bb68
                      err: null
                      status: success
                      errmsg: null
                    responseCode: OK
                    result:
                      exists: true
                b:
                  summary: Success response with user not exists
                  value:
                    id: api.user.exists.userName
                    ver: v1
                    ts: '2020-11-27 17:26:43:814+0000'
                    params:
                      resmsgid: null
                      msgid: 9b739351ebcbe7923209d0fc2e48bb68
                      err: null
                      status: success
                      errmsg: null
                    responseCode: OK
                    result:
                      exists: false
        '400':
          description: >-
            BAD REQUEST. The "User Exists V1" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUser_Unblock_Already_Active_Error'
              example:
                id: api.user.exists.userName
                ver: v1
                ts: '2020-11-27 17:24:21:988+0000'
                params:
                  resmsgid: null
                  msgid: 9c791e062b2fbbecd4838bdba17e604c
                  err: UNAUTHORIZED_USER
                  status: SERVER_ERROR
                  errmsg: You are not authorized.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  /user/v1/block:
    post:
      tags:
        - User APIs
      summary: Block user
      description: |-
        This API is used to block a user
           - The endpoint for **Block User** is `/user/v1/block`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: User_Block
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponsing sessions, this token is exchanged, not
            the username/password of the user
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
      requestBody:
        description: >-
          The Content Type entity is the media type of the resource. Possible
          media types can be:-
             - Application/json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiUser_Block_Request'
            example:
              request:
                userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Blocking user" operation was successfully
            executed.
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Sun, 29 Nov 2020 08:03:21 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 236
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29997
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 22
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 4937
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 18
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUser_Block_Success_Response'
              example:
                id: api.user.block
                ver: v1
                ts: '2020-11-29 08:03:21:697+0000'
                params:
                  resmsgid: null
                  msgid: 1fdc83eb2321b513bab2c96726b194f5
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUser_Unblock_Already_Active_Error'
              example:
                id: api.user.block
                ver: v1
                ts: '2020-11-29 08:02:19:958+0000'
                params:
                  resmsgid: null
                  msgid: 17f8b99b346e6feb215037805a620afc
                  err: MANDATORY_PARAMETER_MISSING
                  status: MANDATORY_PARAMETER_MISSING
                  errmsg: Mandatory parameter userId is missing.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  /user/v1/unblock:
    post:
      tags:
        - User APIs
      summary: Unblock user
      description: |-
        This API is used to unblock a user
           - The endpoint for **Unblock user** is `/user/v1/unblock`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: User_Unblock
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For further sessions this token is exchanged, not the
            username/password of the user
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
      requestBody:
        description: >-
          - The body payload comprises of the metadata about unblocking a user
          request - The body parameter refers to the format of the request, the
          request body (payload) takes the following media types to make the
          payload:

             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiUser_Unblock_Request'
            example:
              request:
                userId: ''
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Unblocking User" operation was
            successfully executed.
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Sun, 29 Nov 2020 08:05:08 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 238
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 22
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 229
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 103
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUser_Unblock_Success_Response'
              example:
                id: api.user.unblock
                ver: v1
                ts: '2020-11-29 08:05:08:744+0000'
                params:
                  resmsgid: null
                  msgid: bb11b7ccc7d37ae2c2502912406543a7
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUser_Unblock_Already_Active_Error'
              example:
                id: api.user.unblock
                ver: v1
                ts: '2020-11-29 08:00:26:520+0000'
                params:
                  resmsgid: null
                  msgid: b1443786da8c22f208b1f0806a2445ca
                  err: USER_ALREADY_ACTIVE
                  status: USER_ALREADY_ACTIVE
                  errmsg: User is already active.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  /user/v1/profile/read:
    post:
      tags:
        - User APIs
      summary: Get User by Login ID
      description: >-
        This API is used for getting information about the currently
        authenticated user
          - The endpoint for **Get User by Login ID** is `/user/v1/profile/read`
      operationId: Get_User_By_LoginId
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: fields
          in: query
          description: >-
            'User can pass an optional query parameter 'fields'. The value is a
            comma separated list of fields whose information is required in
            response. e.g.
            fields=completeness,missingFields,topic,organisations,roles'
          style: form
          explode: true
          schema:
            type: string
            example: roles
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
      requestBody:
        description: >-
          - The body payload comprises of the metadata about the user to be
          updated. - The body parameter refers to the format of the request, the
          request body (payload) takes the following media types to make the
          payload:
             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiGet_User_By_LoginId_Request'
            example:
              request:
                loginId: selfdeclaredev4
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation. The requested operation was successfully
            executed.
          headers: {}
        '400':
          description: >-
            BAD REQUEST. The "User By LoginId" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
        '404':
          description: >-
            Resource not found. The "User Profile Read" operation failed ! The
            possible reason for failure is that requested resource not found.
            here resource is user.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Accept_Tnc_With_UnAuthorized_Error
              example:
                id: api.user.getuser
                ver: v1
                ts: '2020-11-23 17:52:03:512+0000'
                params:
                  resmsgid: null
                  msgid: 36b1b053-cd8d-443c-b4e5-ca5cf9d744eb
                  err: USER_NOT_FOUND
                  status: USER_NOT_FOUND
                  errmsg: user not found.
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  '/user/v1/managed/{userId}':
    get:
      tags:
        - User APIs
      summary: Get Managed Users Details
      description: This api will get the MUA details with token details.
      operationId: Get_Managed_Users
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: withTokens
          in: query
          description: >-
            - When withTokens attribute is passed MUA user tokens will passsed
            in the response
          style: form
          explode: true
          schema:
            type: boolean
            example: true
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: >-
            It is a unique token to authenticate the user each time an API is
            called
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: userId
          in: path
          description: '- User-Id of the managedby user.'
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation. The requested operation was successfully
            executed.
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Tue, 24 Nov 2020 04:57:12 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1293
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29998
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1073
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 12
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 14
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiGet_Managed_Users_Sucees_Response'
              examples:
                a:
                  summary: Success Response Without MUA token
                  value:
                    id: api.user.managed
                    ver: v1
                    ts: '2020-11-24 04:57:12:732+0000'
                    params:
                      resmsgid: null
                      msgid: 8415ce74-7f6b-452f-99a5-79ba21ad6320
                      err: null
                      status: success
                      errmsg: null
                    responseCode: OK
                    result:
                      response:
                        count: 1
                        content:
                          - identifier: e8b67b42-52be-4f0b-a74e-d9435e0842fe
                            rootOrgName: null
                            phoneVerified: false
                            roles:
                              - PUBLIC
                            channel: dikshapreprodcustodian
                            locationIds:
                              - bc75cc99-9205-463e-a722-5326857838f8
                              - b5c35cfc-6c1e-4266-94ef-a425c43c7f4e
                            stateValidated: false
                            userName: mua1_af93
                            rootOrgId: 0126796199493140480
                            firstName: MUA1
                            emailVerified: false
                            framework:
                              gradeLevel:
                                - Class 1
                              subject:
                                - English
                              medium:
                                - English
                              id:
                                - ekstep_ncert_k-12
                              board:
                                - CBSE
                            createdDate: '2020-11-24 04:56:58:907+0000'
                            isDeleted: false
                            organisations:
                              - orgJoinDate: '2020-11-24 04:56:59:006+0000'
                                organisationId: 0126796199493140480
                                isDeleted: false
                                hashTagId: 0126796199493140480
                                roles:
                                  - PUBLIC
                                id: 01315794795101388811
                                userId: e8b67b42-52be-4f0b-a74e-d9435e0842fe
                            managedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                            createdBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                            phone: ''
                            countryCode: 91
                            flagsValue: 0
                            id: e8b67b42-52be-4f0b-a74e-d9435e0842fe
                            userType: TEACHER
                            userSubType: null
                            email: ''
                            status: 1
                b:
                  summary: Success Response With MUA token
                  value:
                    id: api.user.managed
                    ver: v1
                    ts: '2020-11-24 05:08:46:901+0000'
                    params:
                      resmsgid: null
                      msgid: d8b170aa-2399-4628-96d9-089fc3a3d773
                      err: null
                      status: success
                      errmsg: null
                    responseCode: OK
                    result:
                      response:
                        count: 1
                        content:
                          - rootOrgName: null
                            roles:
                              - PUBLIC
                            channel: dikshapreprodcustodian
                            stateValidated: false
                            isDeleted: false
                            organisations:
                              - orgJoinDate: '2020-11-24 04:56:59:006+0000'
                                organisationId: 0126796199493140480
                                isDeleted: false
                                hashTagId: 0126796199493140480
                                roles:
                                  - PUBLIC
                                id: 01315794795101388811
                                userId: e8b67b42-52be-4f0b-a74e-d9435e0842fe
                            managedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                            countryCode: '+91'
                            flagsValue: 0
                            id: e8b67b42-52be-4f0b-a74e-d9435e0842fe
                            email: ''
                            identifier: e8b67b42-52be-4f0b-a74e-d9435e0842fe
                            phoneVerified: false
                            locationIds:
                              - bc75cc99-9205-463e-a722-5326857838f8
                              - b5c35cfc-6c1e-4266-94ef-a425c43c7f4e
                            userName: mua1_af93
                            rootOrgId: 0126796199493140480
                            firstName: MUA1
                            emailVerified: false
                            framework:
                              gradeLevel:
                                - Class 1
                              subject:
                                - English
                              medium:
                                - English
                              id:
                                - ekstep_ncert_k-12
                              board:
                                - CBSE
                            createdDate: '2020-11-24 04:56:58:907+0000'
                            tncAcceptedOn: '2020-11-24T05:00:22.201Z'
                            managedToken: >-
                              eyJhbGciOiJSUzI1NiIsImtpZCI6ImFjY2Vzc3YxX2tleTIifQ.eyJwYXJlbnRJZCI6ImVjOGRlZWIyLTRkZWQtNGZhMi1hYzQ4LTAyM2FkODI5OGQ5MiIsInN1YiI6ImU4YjY3YjQyLTUyYmUtNGYwYi1hNzRlLWQ5NDM1ZTA4NDJmZSIsImV4cCI6MTY2OTI2NjUyNiwiaWF0IjoxNjA2MTk0NTI2fQ.vGeqoZ67vNqX5tZiKKwLenwAk-G7T2R7UAo8uMCGmPrlbzxEV1n60sUJMghgFhQf5xCXC4BizHbqzmwhlToU5Tf7KOvj55kqJk2VJCyQOH-YZuUNfznQlfBZX82qDyan0rFH8F21HpergGB0HOJQxPafQaomTQPjxXIEckE6YrAv56P2lMfmeoT7tzTmNLZ7C8G7WrBnzn2CfP2Sv5mqxCXZdehCHNOUPdY93lAQP3W_LfpwJog65WT2zwpHLfrbgNjqf-ZjqLHeJWoIN70IMdU6pgGxW1z_qrSrPHEQuQ2Xnpc3OiV0gg-RvzBILvZaRtgHwkZpQqvLMhWGa1zwKg
                            createdBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                            phone: ''
                            userType: TEACHER
                            userSubType: null
                            tncAcceptedVersion: v8
                            status: 1
        '400':
          description: >-
            BAD REQUEST. The "Get MUA User Details" operation failed ! The
            possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  /user/v1/declarations:
    patch:
      tags:
        - User APIs
      summary: Update User Declarations
      description: Api will add or update custodian user self-declarations
      operationId: Update_User_Declarations
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: >-
            It is a unique token to authenticate the user each time an API is
            called
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
      requestBody:
        description: >-
          It is a unique token to authenticate the user each time an API is
          called
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiUpdate_User_Declarations_Request'
            examples:
              a:
                summary: Adding user declarations
                value:
                  params: {}
                  request:
                    declarations:
                      - operation: add
                        userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                        orgId: 01297544481264435214
                        persona: teacher
                        info:
                          declared-school-name: mgm21
                          declared-email: abc@gmail.com
                          declared-phone: 99999999
                          declared-school-udise-code: 190923
              b:
                summary: Editing user declarations
                value:
                  params: {}
                  request:
                    declarations:
                      - operation: edit
                        userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                        orgId: 01297544481264435214
                        persona: teacher
                        info:
                          declared-school-name: mgm22modified
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation. The requested operation was successfully
            executed.
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Tue, 24 Nov 2020 10:42:19 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 247
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 22
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 2447
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 67
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUpdate_User_Declarations_With_Success_Response
              example:
                id: api.user.declarations
                ver: v1
                ts: '2020-11-24 10:42:19:886+0000'
                params:
                  resmsgid: null
                  msgid: d072daa8-8518-4f86-9f4d-dfc9e9b1dcd1
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            BAD REQUEST. The "User Declarations" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  /user/v1/migrate:
    post:
      tags:
        - User APIs
      summary: User Migrate
      description: >-
        This API is used to Migrated the custodian account with non-custodian
        account.
           - The endpoint for **User Migrations** is `/user/v1/migration`
           - It is mandatory to provide values for required parameters
      operationId: User_Migrate
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponsing sessions, this token is exchanged, not
            the username/password of the user. it is mandatory to pass the auth
            token of same user whom we  want to migrate
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
      requestBody:
        description: >-
          - The body payload comprises of the metadata to migrate a user request
          - The body parameter refers to the format of the request, the request
          body takes the following media types to make the payload:
             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiUser_Migrate_Request'
            examples:
              a:
                summary: Shadow-user accepts with providing user-extenralid
                value:
                  request:
                    userId: 0e59b33f-d829-459f-a043-03ea726bf91c
                    channel: No Data
                    action: accept
                    feedId: 2e59b34f-d834-989z-a043-34ea846bf91d
                    userExtId: staginghari9
              b:
                summary: Shadow-user rejects user-extenralid
                value:
                  request:
                    userId: 0e59b33f-d829-459f-a043-03ea726bf91c
                    action: reject
                    feedId: 2e59b34f-d834-989z-a043-34ea846bf91d
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation. "User migration" operation was
            successfully executed.
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Tue, 24 Nov 2020 17:19:05 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 246
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29998
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 22
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 43
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 42
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUser_Migrate_With_Success_Response'
              examples:
                a:
                  summary: Migrate shadow-user with inappropriate user-externalid
                  value:
                    id: api.user.migrate
                    ver: v1
                    ts: '2020-05-18 00:26:05:154+0530'
                    params:
                      resmsgid: null
                      msgid: null
                      err: null
                      status: success
                      errmsg: null
                    responseCode: SERVER_ERROR
                    result:
                      maxAttempt: 2
                      remainingAttempt: 1
                      err: true
                      message: provided ext user id staginghari9 is incorrect
                b:
                  summary: Migrate shadow-user with appropriate user-externalid
                  value:
                    id: api.user.migrate
                    ver: v1
                    ts: '2020-05-18 00:26:05:154+0530'
                    params:
                      resmsgid: null
                      msgid: null
                      err: null
                      status: success
                      errmsg: null
                    responseCode: OK
                    result:
                      response: SUCCESS
                      userId: 258ab127-601e-481a-95a2-d7c87ebd3b7e
        '400':
          description: >-
            BAD REQUEST. The "User Migrate" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
              example:
                id: api.user.migrate
                ver: v1
                ts: '2020-05-17 23:15:18:785+0530'
                params:
                  resmsgid: null
                  msgid: 8c2179bd-0631-4e68-92cf-f3fc94be3d7c
                  err: INVALID_PARAMETER_VALUE
                  status: INVALID_PARAMETER_VALUE
                  errmsg: >-
                    Invalid value 258ab127-601e-481a-95a2-d7c87ebd3b7e for
                    parameter userId. Please provide a valid value.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
              example:
                id: api.user.migrate
                ver: v1
                ts: '2020-05-18 12:42:01:430+0530'
                params:
                  resmsgid: null
                  msgid: 1a4a32dc-917a-4a48-b95f-00370a5ab17c
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  /user/v1/account/merge:
    patch:
      tags:
        - User APIs
      summary: User Merge
      description: >-
        This API is used to merge the custodian account with non-custodian
        account.
           - The endpoint for **User Account Merge** is `/user/v1/account/merge`
           - It is mandatory to provide values for required parameters
      operationId: User_Merge
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
      requestBody:
        description: >-
          - The body payload comprises of the metadata to merge a user request

          - The body parameter refers to the format of the request, the request
          body takes the following media types to make the   payload:
             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiUser_Merge_Request'
            example:
              request:
                fromAccountId: 9760d936-5fc9-47a7-a3b7-56fdebc7cad5
                toAccountId: c8c452e6-7f1c-4480-9299-6bdf2ed4e4b8
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation. "USer Merge" operation was successfully
            executed.
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Tue, 24 Nov 2020 17:19:05 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 246
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29998
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 22
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 43
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 42
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUser_Merge_With_Success_Response'
              example:
                id: null
                ver: private
                ts: '2020-11-24 17:19:05:681+0000'
                params:
                  resmsgid: null
                  msgid: 0957c785-ec79-49a5-bd26-a35aa76b12fb
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            BAD REQUEST. The "User Merge" operation failed ! The possible reason
            for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
              example:
                id: ''
                ver: private
                ts: '2020-12-02 05:27:01:277+0000'
                params:
                  resmsgid: null
                  msgid: 86df950b825574caaf954a39baa47c4d
                  err: MANDATORY_HEADER_PARAMETER_MISSING
                  status: MANDATORY_HEADER_PARAMETER_MISSING
                  errmsg: Mandatory header parameter x-source-user-token is missing.
                responseCode: CLIENT_ERROR
                result: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
              example:
                id: ''
                ver: private
                ts: '2020-12-02 05:28:30:824+0000'
                params:
                  resmsgid: null
                  msgid: 3f9756e0e94e8bf419a6d3c7bd223e38
                  err: UNAUTHORIZED_USER
                  status: UNAUTHORIZED_USER
                  errmsg: You are not authorized.
                responseCode: UNAUTHORIZED
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  /user/v1/role/assign:
    post:
      tags:
        - User APIs
      summary: Assign Role to User
      description: >-
        This API is used to assign roles to a user. It can also be used to
        replace and remove already assigned user roles. If a user should not be
        assigned any role in the organization, pass the role paramater as an
        empty array.
           - The endpoint for **Assign Role to User** is `/user/v1/role/assign`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Assign_User_Role
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called.
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
      requestBody:
        description: >-
          - The body payload comprises of the metadata about assigning roles to
          a user.

          - The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload.
             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiAssign_User_Role_Request'
            example:
              request:
                userId: 3fda9884-29b6-4f78-ada9-de045a0d3978
                organisationId: 01297544481264435214
                roles:
                  - COURSE_CREATOR
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation. "assign role" operation was successfully
            executed.
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nginx/1.15.8
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Tue, 24 Nov 2020 17:19:05 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 246
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29998
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 22
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 43
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 42
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiAssign_User_Role_With_Success_Response
              example:
                id: api.user.assign.role
                ver: v1
                ts: '2020-11-24 17:19:05:681+0000'
                params:
                  resmsgid: null
                  msgid: 0957c785-ec79-49a5-bd26-a35aa76b12fb
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            BAD REQUEST. The "User Role Assign" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  /user/v1/tnc/accept:
    post:
      tags:
        - User APIs
      summary: Accept User Tnc
      description: >-
        This API is used to assign roles to a user. It can also be used to
        replace and remove already assigned user roles. If a user should not be
        assigned any role in the organization, pass the role paramater as an
        empty array.
           - The endpoint for *Accepting User T&C** is `/user/v1/tnc/accept`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: User_Accept_Tnc
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: x-authenticated-user-token
          in: header
          description: Access token of registered user performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: x-authenticated-for
          in: header
          description: Managed User token of registered MUA user performing given API
          required: false
          style: simple
          schema:
            type: string
            example:
              '[object Object]': null
      requestBody:
        description: >-
          - The body payload comprises of the metadata about the user profile
          visibility request

          - The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:

             - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userapiUser_Accept_Tnc_Request'
            examples:
              a:
                summary: MUA accept tnc
                value:
                  request:
                    version: v4
                    userId: 4c2ece16-6749-4489-b069-413fc4993e27
              b:
                summary: LUA accept tnc
                value:
                  request:
                    version: v4
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."User accept TnC" operation was
            successfully executed.
          headers: {}
        '400':
          description: >-
            BAD REQUEST. The "User Accept Tnc" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/userapiUser_Accept_Tnc_With_UnAuthorized_Error
              example:
                id: api.user.tnc.accept
                ver: v1
                ts: '2020-11-24 17:06:03:513+0000'
                params:
                  resmsgid: null
                  msgid: e481d7fe-c80e-42c5-ba9b-7bc48f172004
                  err: UNAUTHORIZED_USER
                  status: SERVER_ERROR
                  errmsg: You are not authorized.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userapiUserErrorResponse'
      deprecated: false
      security: []
  /discussion/categories:
    get:
      tags:
        - categories
      summary: Get list of all categories
      description: |-
        This api is used to fetch all categories from nodebb.
           - The endpoint for **Category** is `/categories`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
           - Backend Route: http://nodebb-service:4567/discussions/api/categories
      operationId: GetCategories
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/discussionForumListOfCategories'
                x-content-type: application/json
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Categories
  /discussion/v2/categories:
    post:
      tags:
        - categories
      summary: Add a new category
      description: |-
        This api allows the user to create a new category in nodebb
          - The endpoint for **Category** is `/v2/categories`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/categories
      operationId: CreateCategory
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumCategory'
            examples:
              a:
                summary: Create simple category
                value:
                  name: NodeJS Tutorial
              b:
                summary: Create category with all inputs
                value:
                  name: NodeJS Tutorial
                  description: Nodejs Tutorial
                  bgColor: White
                  color: black
                  parentCid: 1
                  class: category
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumCategoryResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Categories
  '/discussion/category/{category_id}/{slug}':
    get:
      tags:
        - categories
      summary: Get category details
      description: >-
        This api allows the user to get all details of a category by using
        categoryId and slug from nodebb.
          - The endpoint for **Category** is `/category/{category_id}/{slug}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/category/{category_id}/{slug}
      operationId: GetCategoryDetails
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: category_id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: slug
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumCategoryDetails'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Categories
  '/discussion/category/{cid}':
    get:
      tags:
        - categories
      summary: Get the category details by category id
      description: >-
        This api allow the user to get all the details of categories using
        categoryId from nodebb
          - The endpoint for **Category** is `/category/{cid}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/category/{cid}
      operationId: GetCategoryDetailsById
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: cid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumCategoryDetails'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Categories
  '/discussion/v2/categories/{cid}':
    put:
      tags:
        - categories
      summary: Updates already existing catrgory details
      description: >-
        This api can updated the category details based on the category id which
        we created previously
          - The endpoint for **Category** is `/v2/categories/{cid}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/categories/{cid}
      operationId: UpdateCategory
      parameters:
        - name: Authorization
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: cid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumCategory'
            examples:
              a:
                summary: Update the category
                value:
                  description: Nodejs Tutorial
                  bgColor: White
                  color: black
                  parentCid: 1
                  class: category
        required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumCategoryResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Categories
    delete:
      tags:
        - categories
      summary: Delete the Category
      description: >-
        This api allows the user to delete the existing category by using
        categoryID from nodebb
          - The endpoint for **Category** is `/v2/categories/{cid}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/categories/{cid}
      operationId: DeleteCategory
      parameters:
        - name: Authorization
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: cid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Categories
  '/discussion/v2/categories/{cid}/moderators':
    get:
      tags:
        - categories
      summary: Get the moderators list for a category
      description: >-
        This api can get the list of category moderators based on the category
        ID that we created previously
          - The endpoint for **Category** is `/v2/categories/{cid}/moderators`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/categories/{cid}/moderators
      operationId: GetModeratorsList
      parameters:
        - name: Authorization
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: cid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumModeratorsResponse'
              examples:
                a:
                  summary: Success response
                  value:
                    uid: 8
                    username: content_reviewer_tn1970
                    userslug: content_reviewer_tn1970
                    picture: null
                    displayname: content_reviewer_tn1970
                    'icon:text': C
                    'icon:bgColor': null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Categories
  '/discussion/v2/categories/{cid}/state':
    put:
      tags:
        - categories
      summary: Enable category
      description: >-
        This api allow the user to enable the category(If the category is in
        disable state)
          - The endpoint for **Category** is `/v2/categories/{cid}/state`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/categories/{cid}/state
      operationId: EnableCategories
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: cid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Categories
    delete:
      tags:
        - categories
      summary: Disable Category
      description: |-
        This api allow the user to disable category in nodebb
          - The endpoint for **Category** is `/v2/categories/{cid}/state`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/categories/{cid}/state
      operationId: DisableCategories
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: cid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Categories
  '/discussion/v2/categories/{cid}/privileges':
    put:
      tags:
        - categories
      summary: Add privileges to category
      description: |-
        This api allow the user to add privilages for category in nodebb.
          - The endpoint for **Category** is `/v2/categories/{cid}/privileges`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/categories/{cid}/privileges
      operationId: AddPrivilagesToCategories
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: cid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumAddPrivilagesToCategory'
            examples:
              a:
                summary: Success operation
                value: 'groups:topics:create'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Categories
    delete:
      tags:
        - categories
      summary: Remove privileges for a category
      description: |-
        This api allow user to remove privileges for a category in nodebb.
          - The endpoint for **Category** is `/v2/categories/{cid}/state`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/categories/{cid}/privileges
      operationId: RemovePrivilagesCategories
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: cid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Categories
  '/discussion/user/{userslug}':
    get:
      tags:
        - users
      summary: Fetch nodebb user details
      description: >-
        This api is used for fetching the user details based on user slug from
        nodebb.
          - The endpoint for **User** is `/user/{userslug}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/user/{userslug}
      operationId: GetUserDetails
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: userslug
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumUserDetails'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Users
  '/discussion/user/{userslug}/upvoted':
    get:
      tags:
        - users
      summary: Fetch user upvoted posts list
      description: |-
        This api is used for fetching the user upvote details from nodebb.
          - The endpoint for **User** is `/user/{userslug}/upvoted`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/user/{userslug}/upvoted
      operationId: GetUserUpvoteDetails
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: userslug
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumUserDetails'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Users
  '/discussion/user/{userslug}/downvoted':
    get:
      tags:
        - users
      summary: Fetch user downvoted posts list
      description: |-
        This api is used for fetching the user down vote details from nodebb.
          - The endpoint for **User** is `/user/{userslug}/downvoted`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/user/{userslug}/downvoted
      operationId: GetUserDownvoteDetails
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: userslug
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumUserDetails'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Users
  '/discussion/user/{userslug}/bookmarks':
    get:
      tags:
        - users
      summary: Fetch user bookmarked posts
      description: >-
        This api is used for fetching the user bookmark post details from
        nodebb.
          - The endpoint for **User** is `/user/{userslug}/bookmarks`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/user/{userslug}/bookmarks
      operationId: GetUserBookmarkDetails
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: userslug
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumUserDetails'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Users
  /discussion/v2/users:
    post:
      tags:
        - users
      summary: Create new user in nodebb using write api plugin
      description: |-
        This api is used for creating the user in nodebb using write api plugin.
          - The endpoint for **User** is `/v2/users`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/users
      operationId: CreateNewUser
      parameters:
        - name: Authorization
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumCreateUser'
            examples:
              a:
                summary: Create user
                value:
                  username: Vinu Kumar
                  email: example@gmail.com
                  password: Test@123
        required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumCreateUserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Users
  '/discussion/v2/users/{uid}':
    put:
      tags:
        - users
      summary: Updates a user's profile information
      description: |-
        This api is used to update user's profile information in nodebb.
          - The endpoint for **User** is `/v2/users/{uid}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/users/{uid}
      operationId: UpdateUserInfo
      parameters:
        - name: Authorization
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: uid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumUpdateUserInfo'
            examples:
              a:
                summary: Update user info
                value:
                  username: Venkat
                  email: example@gmail.com
                  fullname: venkat kadiveti
                  website: 'https://example.org/'
                  location: Bangalore
                  birthday: 02/04/1995
                  signature: venkat
        required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumPostOperationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Users
    delete:
      tags:
        - users
      summary: Deletes a user from nodebb
      description: |-
        This api is used for deleting user in nodebb.
          - The endpoint for **User** is `/v2/users/{uid}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/users/{uid}
      operationId: DeleteUser
      parameters:
        - name: Authorization
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
        - name: uid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumPostOperationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Users
  /discussion/user/v1/create:
    post:
      tags:
        - users
      summary: Create new user in nodebb Sunbird OIDC
      description: >-
        This api is used for creating the user in nodebb usig Sunbird OIDC
        plugin.
          - The endpoint for **User** is `/user/v1/create`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/user/v1/create
      operationId: CreateNewUserUsingOIDC
      parameters:
        - name: Authorization
          in: header
          required: false
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumCreateUserOIDC'
            examples:
              a:
                summary: Create user
                value:
                  request:
                    example:
                      id: api.discussions.user.create
                      ver: 1
                      params:
                        resmsgid: null
                        msgid: null
                        status: unsuccessful
                        msg: User already Exists
                      responseCode: 400
                      result:
                        userId:
                          uid: 1
                        userSlug: content_creator_tn3941
                        userName: content_creator_tn3941
        required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumCreateUserResponseOIDC'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Users
  /discussion/unread:
    get:
      tags:
        - topics
      summary: Get unread topics
      description: |-
        This api allow the user to get all the unread topics in nodebb
          - The endpoint for **Topics** is `/unread`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/unread
      operationId: GetUnreadTopics
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumTopicResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Topics
  /discussion/recent:
    get:
      tags:
        - topics
      summary: Get recent topics
      description: |-
        This api allow the user to get all the recent topics in nodebb
          - The endpoint for **Topics** is `/recent`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/recent
      operationId: GetRecentTopics
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumTopicResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Topics
  /discussion/popular:
    get:
      tags:
        - topics
      summary: Get popular topics
      description: |-
        This api allow the user to get all the popular topics in nodebb
          - The endpoint for **Topics** is `/recent`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/popular
      operationId: GetPopularTopics
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumTopicResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Topics
  /discussion/top:
    get:
      tags:
        - topics
      summary: Get top topics
      description: |-
        This api allow the user to get all top topics in nodebb
          - The endpoint for **Topics** is `/top`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/top
      operationId: GetTopTopics
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumTopTopicResponse'
              examples:
                a:
                  summary: Success response
                  value:
                    nextStart: 20
                    topicCount: 50
                    topics:
                      mainPid: 67
                      postcount: 5
                      slug: 35/how-to-enroll-into-nishtha-courses
                      tid: 35
                      timestamp: 1610697802418
                      title: How to enroll into Nishtha courses
                      uid: 18
                      viewcount: 103
                      postercount: 5
                      teaserPid: 109
                      downvotes: 0
                      upvotes: 3
                      deleted: 0
                      locked: 0
                      pinned: 0
                      pinExpiry: 0
                      deleterUid: 0
                      titleRaw: How to enroll into Nishtha courses
                      timestampISO: 2021-01-15T08:03:22.418Z
                      lastposttimeISO: 2021-01-20T05:48:10.675Z
                      pinExpiryISO: null
                      votes: 3
                      thumbs: null
                      category:
                        cid: 9
                        lastposttime: 1611121690675
                        name: General Discussion
                        slug: 9/general-discussion
                        icon: fa-comments
                        backgroundImage: null
                        imageClass: cover
                        bgColor: null
                        color: null
                        disabled: 0
                      user:
                        cid: 9
                        lastposttime: 1611121690675
                        uid: 18
                        username: vsv.df1_t1p1
                        userslug: vsv-df1_t1p1
                        reputation: 3
                        postcount: 1
                        picture: null
                        signature: null
                        banned: 0
                        status: offline
                        displayname: vsv.df1_t1p1
                        'icon:text': V
                        'icon:bgColor': null
                        banned_until_readable: Not Banned
                      teaser: null
                      tags: null
                      isOwner: false
                      ignored: false
                      unread: false
                      bookmark: 1
                      unreplied: false
                      icons: null
                      index: 0
                    tids: null
                    canPost: true
                    showSelect: true
                    showTopicTools: true
                    categories: null
                    allCategoriesUrl: top
                    selectedCategory: null
                    selectedCids: null
                    'feeds:disableRSS': 0
                    rssFeedUrl: >-
                      /discussions/top/alltime.rss?uid=6&token=bdb3cc19-791f-4d4a-a97c-895565cb3ad7
                    title: null
                    filters: null
                    selectedFilter: null
                    terms: null
                    selectedTerm: null
                    pagination: null
                    breadcrumbs: null
                    loggedIn: true
                    relative_path: /discussions
                    template: null
                    url: /discussions/top
                    bodyClass: page-top page-status-200
                    _header: null
                    widgets: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Topics
  /discussion/unread/total:
    get:
      tags:
        - topics
      summary: Get total count
      description: |-
        This api allow the user to get count of unread topics in nodebb
          - The endpoint for **Topics** is `/unread/total`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/unread/total
      operationId: GetCountOfTopics
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumCountOfTopic'
              examples:
                a:
                  summary: success response
                  value: 10
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Topics
  '/discussion/topic/teaser/{topic_id}':
    get:
      tags:
        - topics
      summary: Get teaser of topic
      description: |-
        This api allow the user to get teaser details of topic in nodebb
          - The endpoint for **Topics** is `/topic/teaser/{topic_id}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/topic/teaser/{topic_id}
      operationId: GetTeaserOfTopics
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: topic_id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumTeaserTopicDetails'
              examples:
                a:
                  summary: success response
                  value:
                    pid: 16
                    tid: 16
                    content: <p dir="auto">Disucssion umesh 1</p>
                    uid: 4
                    timestamp: 1610103898937
                    deleted: false
                    upvotes: 0
                    downvotes: 0
                    replies: 0
                    votes: 0
                    timestampISO: 2021-01-08T11:04:58.937Z
                    user:
                      uid: 4
                      username: nodebb
                      userslug: nodebb
                      picture: null
                      status: offline
                      displayname: nodebb
                      'icon:text': 'N'
                      'icon:bgColor': null
                    topic:
                      uid: 4
                      tid: 16
                      title: Disucssion umesh 1
                      cid: 8
                      slug: 16/disucssion-umesh-1
                      deleted: 0
                      postcount: 1
                      mainPid: 16
                      teaserPid: null
                      titleRaw: Disucssion umesh 1
                    category:
                      cid: 8
                      name: Announcements
                      icon: fa-comments
                      slug: 8/announcements
                      parentCid: 7
                      bgColor: null
                      color: null
                      backgroundImage: null
                      imageClass: cover
                    isMainPost: true
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Topics
  '/discussion/topic/{topic_id}/{slug}':
    get:
      tags:
        - topics
      summary: Get topics details
      description: >-
        This api allow the user to get topics details by using topicId ad slug
        from nodebb
          - The endpoint for **Topics** is `/topic/{topic_id}/{slug}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/topic/{topic_id}/{slug}
      operationId: GetTopicsDetails
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: topic_id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: slug
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumTopicDetails'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Topics
  '/discussion/topic/pagination/{topic_id}':
    get:
      tags:
        - topics
      summary: Get Paginate details topics
      description: |-
        This api allow the user to get paginations topics in nodebb
          - The endpoint for **Topics** is `/topic/pagination/{topic_id}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/topic/pagination/{topic_id}
      operationId: GetPaginationTopics
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: topic_id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumTopicPaginationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Topics
  /discussion/v2/topics:
    post:
      tags:
        - topics
      summary: Create new topic
      description: |-
        This api allow the user to create new topic in nodebb
          - The endpoint for **Topics** is `/v2/topics`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/topics
      operationId: CreateNewTopic
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumCreateTopicBody'
            examples:
              a:
                summary: Create simple topic
                value:
                  cid: 1
                  title: Learning
                  content: All Javascript frameworks
              b:
                summary: Create topics with tags
                value:
                  cid: 1
                  title: Learning
                  content: All Javascript frameworks
                  tags:
                    - Angular
                    - React
        required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumCreateTopicResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Topics
  '/discussion/v2/topics/{tid}/state':
    put:
      tags:
        - topics
      summary: Delete a topic (Soft delete)
      description: |-
        This api allow the user to delete a topic in nodebb
          - The endpoint for **Topics** is `/v2/topics/{tid}/state`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/topics/{tid}/state
      operationId: SoftDeleteTopic
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: tid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Topics
  '/discussion/v2/topics/{tid}/follow':
    put:
      tags:
        - topics
      summary: Follow a topic
      description: |-
        This api allow the user to follow a topic in nodebb
          - The endpoint for **Topics** is `/v2/topics/{tid}/state`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/topics/{tid}/follow
      operationId: FollowTopic
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: tid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Topics
    delete:
      tags:
        - topics
      summary: UnFollow a Post
      description: |-
        This api allow the user to unfollow a topic in nodebb
          - The endpoint for **Topics** is `/v2/topics/{tid}/state`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/topics/{tid}/follow
      operationId: UnFollowTopic
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: tid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Topics
  '/discussion/v2/topics/{tid}/tags':
    put:
      tags:
        - topics
      summary: Add tags for a topic
      description: |-
        This api allow the user to add tags to a topic in nodebb
          - The endpoint for **Topics** is `/v2/topics/{tid}/tags`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/topics/{tid}/tags
      operationId: AddTagsToTopic
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: tid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumAddTagsToTopic'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Topics
    delete:
      tags:
        - topics
      summary: Delete tags for a topic
      description: |-
        This api allow the user to delete tags for a topic in nodebb
          - The endpoint for **Topics** is `/v2/topics/{tid}/tags`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/topics/{tid}/tags
      operationId: DaleteTagsForTopic
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: tid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Topics
  '/discussion/v2/topics/{tid}/pin':
    put:
      tags:
        - topics
      summary: Pin a topic
      description: |-
        This api allow the user to pin to a topic in nodebb
          - The endpoint for **Topics** is `/v2/topics/{tid}/pin`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/topics/{tid}/pin
      operationId: PinTagsToTopic
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: tid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumAddTagsToTopic'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Topics
    delete:
      tags:
        - topics
      summary: Unpin a topic
      description: |-
        This api allow the user to unpin a topic in nodebb
          - The endpoint for **Topics** is `/v2/topics/{tid}/pin`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/topics/{tid}/pin
      operationId: UnPinTagsToTopic
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: tid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Topics
  '/discussion/v2/topics/{tid}':
    put:
      tags:
        - topics
      summary: Updates topic details
      description: |-
        This api allow the user to update topic details in nodebb
          - The endpoint for **Topics** is `/v2/topics/{tid}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/topics/{tid}
      operationId: UpdateTopic
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: tid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumUpdateTopicBody'
            examples:
              a:
                summary: Update topic
                value:
                  content: Example content
                  pid: 1
                  handle: example
                  title: Topic title
                  topic_thumb: 0
                  tags:
                    - Angular
        required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumCreateTopicResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Topics
    post:
      tags:
        - topics
      summary: Create new reply to topic
      description: |-
        This api allow the user to create new reply to topic in nodebb
          - The endpoint for **Topics** is `/v2/topics/{tid}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/topics/{tid}
      operationId: CreateNewReplyToTopic
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: tid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumCreateReplyBody'
            examples:
              a:
                summary: Create Reply
                value:
                  content: Example reply to topic
                  toPid: 1
        required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumCreateTopicResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Topics
    delete:
      tags:
        - topics
      summary: delete topic
      description: |-
        This api allow the user to delete topic in nodebb
          - The endpoint for **Topics** is `/v2/topics/{tid}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/topics/{tid}
      operationId: DeleteTopic
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: tid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumCreateTopicResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Topics
  /discussion/groups:
    get:
      tags:
        - groups
      summary: Get group list
      description: |-
        This api allows the user to get the groups list in nodebb
          - The endpoint for **Groups** is `/groups`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/groups
      operationId: GetGroupList
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumGroupListResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Groups
  '/discussion/groups/{slug}':
    get:
      tags:
        - groups
      summary: Get group Details
      description: |-
        This api allows the user to get the group details in nodebb
          - The endpoint for **Groups** is `/groups/{slug}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/groups/{slug}
      operationId: GetGroupDetails
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: slug
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumGroupDetailsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Groups
  /discussion/v2/groups:
    post:
      tags:
        - groups
      summary: Create new group
      description: |-
        This api allow the user to create new group in nodebb
          - The endpoint for **Groups** is `/v2/groups`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/groups
      operationId: CreateNewGroup
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumGroupRequestBody'
            examples:
              a:
                summary: Create group
                value:
                  name: Group name
                  description: Group description
                  hidden: false
                  private: true
                  ownerUid: 1
        required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumGroupResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Groups
  '/discussion/v2/groups/{slug}':
    delete:
      tags:
        - groups
      summary: Deletes a group
      description: |-
        This api allow the user to delete group in nodebb
          - The endpoint for **Groups** is `/v2/groups/{slug}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/groups/{slug}
      operationId: DeleteGroup
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: slug
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumPostOperationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Groups
  '/discussion/v2/groups/{slug}/membership':
    put:
      tags:
        - groups
      summary: Join to group
      description: |-
        This api allow the user to join to group in nodebb
          - The endpoint for **Groups** is `/v2/groups/{slug}/membership`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/groups/{slug}/membership
      operationId: JoinToNewGroup
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: slug
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Groups
    delete:
      tags:
        - groups
      summary: Exit from group
      description: |-
        This api allow the user to Exit from group in nodebb
          - The endpoint for **Groups** is `/v2/groups/{slug}/membership`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/groups/{slug}/membership
      operationId: ExitFromNewGroup
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: slug
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Groups
  '/discussion/v2/groups/{slug}/membership/{uid}':
    put:
      tags:
        - groups
      summary: Add User to group
      description: |-
        This api allow the user to Add user to group in nodebb
          - The endpoint for **Groups** is `/v2/groups/{slug}/membership/{uid}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/groups/{slug}/membership/{uid}
      operationId: AddUserIntoGroup
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: slug
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: uid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Groups
    delete:
      tags:
        - groups
      summary: Remove user from group
      description: |-
        This api allow the user to remove user from group in nodebb
          - The endpoint for **Groups** is `/v2/groups/{slug}/membership/{uid}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/groups/{slug}/membership/{uid}
      operationId: RemoveUserFromGroup
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: slug
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: uid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Groups
  '/discussion/v2/posts/{pid}':
    put:
      tags:
        - Posts
      summary: Edits a post by post ID
      description: |-
        This api allows the user to edit post in the nodebb
          - The endpoint for **Post** is `/v2/posts/{pid}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/posts/{pid}
      operationId: UpdatePost
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: pid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumUpdatePostBody'
            examples:
              a:
                summary: Edit post
                value:
                  content: Some example content
                  title: Post title name
                  topic_thumb: 0
                  tags:
                    - JS
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumPostOperationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Posts
    delete:
      tags:
        - Posts
      summary: Delete a post by postID
      description: |-
        This api allows the user to delete post in the nodebb
          - The endpoint for **Post** is `/v2/posts/{pid}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/posts/{pid}
      operationId: DeletePost
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: pid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumPostOperationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Posts
  '/discussion/v2/posts/{pid}/vote':
    post:
      tags:
        - Posts
      summary: Vote a post by postID
      description: |-
        This api allows the user to vote(Up/down) to post in the nodebb
          - The endpoint for **Post** is `/v2/posts/{pid}/vote`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/posts/{pid}/vote
      operationId: VotePost
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: pid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        description: >-
          The delta must be a number. If delta is > 0, it's considered an
          upvote; if delta is < 0, it's considered a downvote; otherwise, it's
          an unvote.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumVotePostBody'
            examples:
              a:
                summary: Up vote
                value:
                  delta: 1
              b:
                summary: Down vote
                value:
                  delta: -1
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumPostOperationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-codegen-request-body-name: body
      x-swagger-router-controller: Posts
    delete:
      tags:
        - Posts
      summary: Remove votes for a post by postID
      description: |-
        This api allows the user to delete vote(Up/down) to post in the nodebb
          - The endpoint for **Post** is `/v2/posts/{pid}/vote`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/posts/{pid}/vote
      operationId: UnvotesPost
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: pid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumPostOperationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Posts
  '/discussion/v2/posts/{pid}/bookmark':
    post:
      tags:
        - Posts
      summary: Bookmarks a post by postID
      description: |-
        This api allows the user to bookmarks a post in the nodebb
          - The endpoint for **Post** is `/v2/posts/{pid}/bookmark`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/posts/{pid}/bookmark
      operationId: BookmarksPost
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: pid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumPostOperationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Posts
    delete:
      tags:
        - Posts
      summary: Removes bookmarks for a post by postID
      description: |-
        This api allows the user to Unbookmarks a post in the nodebb
          - The endpoint for **Post** is `/v2/posts/{pid}/bookmark`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/posts/{pid}/bookmark
      operationId: UnbookmarksPost
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: pid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumPostOperationResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Posts
  '/discussion/v2/posts/{pid}/state':
    put:
      tags:
        - Posts
      summary: Restores a post
      description: |-
        This api allows the user to Restores a post in the nodebb
          - The endpoint for **Post** is `/v2/posts/{pid}/state`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/posts/{pid}/state
      operationId: RestorePost
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: pid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Posts
    delete:
      tags:
        - Posts
      summary: Deletes a post
      description: |-
        This api allows the user to Deletes a post in the nodebb
          - The endpoint for **Post** is `/v2/posts/{pid}/state`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/v2/posts/{pid}/state
      operationId: SoftDeletePost
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: pid
          in: path
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumDeleteCategory'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: Posts
  /discussion/forum/v2/read:
    post:
      tags:
        - Forum
      summary: Get Forum Id
      description: |-
        This api allow the user to get the forum id
          - The endpoint for **Forum** is `/forum/v2/read`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/forum/v2/read
      operationId: GetForumID
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumReadForumCID'
            examples:
              a:
                summary: Create group
                value:
                  request:
                    type: course
                    identifier: do_12345678996312
        required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/discussionForumForumResponse'
                x-content-type: application/json
      x-swagger-router-controller: Forum
  /discussion/forum/v2/create:
    post:
      tags:
        - Forum
      summary: Create forum id
      description: |-
        This api allow the user to create new forum id
          - The endpoint for **Forum** is `/forum/v2/create`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Backend Route: http://nodebb-service:4567/discussions/api/forum/v2/create
      operationId: CreateForumID
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/discussionForumCreateForumCID'
            examples:
              a:
                summary: Create forumID
                value:
                  sbType: course
                  cid: 2
                  sbIdentifier: do_123456789
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/discussionForumForumResponse'
                x-content-type: application/json
      x-codegen-request-body-name: body
      x-swagger-router-controller: Forum
  /discussion/tags:
    get:
      tags:
        - tags
      summary: Get list of all tags
      description: |-
        This api is used to fetch tags from nodebb.
           - The endpoint for **Tags** is `/tags`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
           - Backend Route: http://nodebb-service:4567/discussions/api/tags
      operationId: GetTags
      parameters:
        - name: Authorization
          in: header
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/discussionForumListOfTags'
                x-content-type: application/json
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/discussionForumError'
      x-swagger-router-controller: tags
  /program/v1/list/download:
    post:
      tags:
        - Program CRUD
      summary: Program List Download
      description: |-
        This API downloads the generated Details of the Program.
            - The **_list/download_** endpoint downloads the generated details of the program.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/list/download
      operationId: ListDownload200Success
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: fetch program generated/Program List Download Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programListDownload200SuccessRequest'
            example:
              request:
                filters:
                  program_id:
                    - afdfa9a0-1dbc-11eb-81b1-659ec274e395
        required: true
      responses:
        '200':
          description: ListDownload200SuccessResponse
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programListDownload200SuccessResponse'
              example:
                id: api.list.download
                ver: 1
                ts: 2021-01-07T06:52:58.030Z
                params:
                  resmsgid: f9ce14e0-50b4-11eb-a115-db22788c28aa
                  msgid: f95402e0-50b4-11eb-a115-db22788c28aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  tableData:
                    - program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
                      values:
                        - Digital Textbook Name: Learning_Outcome_Book
                          Medium:
                            - English
                          Class: Class 7
                          Subject:
                            - English
                          Number of Chapters: 5
                          Nominations Received: 2
                          Samples Received: 0
                          Nominations Accepted: 2
                          Contributions Received: 6
                          Contributions Accepted: 5
                          Contributions Rejected: 0
                          Contributions Pending: 1
                          Contributions corrections pending: 0
        '400':
          description: ListDownload400BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programListDownload400BadRequest'
              example:
                id: api.list.download
                ver: 1
                ts: 2021-01-07T08:02:37.384Z
                params:
                  resmsgid: b4e4e482-50be-11eb-a115-db22788c28aa
                  msgid: null
                  status: failed
                  err: ERR_GENERATING_PROGRAM_DATA
                  errmsg: 'Required fields like program_id<Array>, is missing'
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
  /program/v1/configuration/search:
    post:
      tags:
        - Configuration
      summary: Configuration Search
      description: |-
        This API searches the Program Configuration Based on Key provided to it.
            - The **_configuration/search_** endpoint fetch the program configuration for the key provided.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/configuration/search
      operationId: ConfigurationSearch200Success
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: Program Configuration Search Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programConfigurationSearch200SuccessRequest'
            example:
              request:
                key: overrideMetaData
                status: active
        required: true
      responses:
        '200':
          description: Successful Program Configuration Search Response
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programConfigurationSearch400BadRequest'
              example:
                id: api.configuration.search
                ver: 1
                ts: 2020-12-02T11:03:07.275Z
                params:
                  resmsgid: f5241db0-348d-11eb-9c32-15914148e3ce
                  msgid: f80986af-e190-f6a4-04c4-c1b984e056e4
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  configuration:
                    id: 9
                    key: overrideMetaData
                    value: >-
                      [{"code":"name","dataType":"text","editable":true},{"code":"learningOutcome","dataType":"list","editable":true},{"code":"attributions","dataType":"list","editable":false},{"code":"copyright","dataType":"text","editable":false},{"code":"creator","dataType":"text","editable":false},{"code":"license","dataType":"list","editable":false},{"code":"contentPolicyCheck","dataType":"boolean","editable":false}]
                    status: active
                    createdby: null
                    updatedby: null
                    createdon: 2020-09-03T11:24:42.130Z
                    updatedon: 2020-09-03T11:24:42.130Z
        '401':
          description: 'Unauthorized, Failure Program Configuration Search Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/program400badRequestwithoutchannel'
              example:
                id: api.error
                ver: 1
                ts: '2020-12-03 07:50:55:637+0000'
                params:
                  resmsgid: 46298c50-353c-11eb-ada5-dde7a2458a3f
                  msgid: null
                  status: failed
                  err: INVALID_TOKEN
                  errmsg: INVALID_TOKEN
                responseCode: UNAUTHORIZED_ACCESS
                result: {}
      deprecated: false
  /program/v1/nomination/update:
    post:
      tags:
        - Nomination
      summary: Nomination Update
      description: |-
        This API updates the Nomination for the respective program Id .
            - The **_nomination/update_** endpoint successfully updates the nomination for a particular program.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/nomination/update
      operationId: NominationUpdate200Success
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: Program Nomination Update Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programNominationUpdate200SuccessRequest'
            example:
              request:
                program_id: c43f7790-0a2a-11eb-a2e9-4fe29a51bb70
                status: Initiated
                content_types:
                  - Teacher Resource
                user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
                updatedby: bcc23eec-5290-4ca2-8f3e-144a24f03b6d
        required: true
      responses:
        '200':
          description: Successful Program Nomination Update Request Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programNominationUpdate200Success'
              example:
                id: api.nomination.update
                ts: 2021-01-08T12:03:50.823Z
                params:
                  resmsgid: 92262b71-51a9-11eb-9ecd-69fe79984d78
                  msgid: 92262b70-51a9-11eb-9ecd-69fe79984d78
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  program_id: c43f7790-0a2a-11eb-a2e9-4fe29a51bb70
                  user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
        '400':
          description: 'Bad Request, Failure Program Nomination Update Request Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programnominationupdate400BadRequest'
        '401':
          description: 'Unauthorized, Failure Program Nomination Update Request response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/program400badRequestwithoutchannel'
              example:
                id: api.error
                ver: 1
                ts: '2020-12-03 07:55:28:459+0000'
                params:
                  resmsgid: e8c6e1b0-353c-11eb-ada5-dde7a2458a3f
                  msgid: null
                  status: failed
                  err: INVALID_TOKEN
                  errmsg: INVALID_TOKEN
                responseCode: UNAUTHORIZED_ACCESS
                result: {}
        '404':
          description: 'Not Found, Failure Program Nomination Update Request Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/program404NotFound'
              example:
                request_path: /program/nomination/update
                message: API not found with these values
                request_host:
                  - kong
      deprecated: false
  /program/v1/nomination/list/download:
    post:
      tags:
        - Nomination
      summary: Nomination List Download
      description: >-
        This API downloads the nomination list for the provided program Id/User
        Id .
            - The **_list/download_** will successfully download the nomination list for the Program Id.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/nomination/list/download
      operationId: NominationListDownload200Success
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: Program Nomination List Download Request Body
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/programNominationListDownload200SuccessRequest
            example:
              request:
                filters:
                  program_name: allTypeContent
                  program_id: d16524d0-348a-11eb-9c32-15914148e3ce
                  status:
                    - Pending
                    - Approved
                    - Rejected
        required: true
      responses:
        '200':
          description: Successful Downloading nomination List Data Request
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programNominationListDownload200Success'
              example:
                id: api.list.download
                ver: 1
                ts: 2021-01-08T12:14:36.345Z
                params:
                  resmsgid: 12e90290-51ab-11eb-9ecd-69fe79984d78
                  msgid: 12e8b470-51ab-11eb-9ecd-69fe79984d78
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  stats:
                    - programName: allTypeContent
                      name: Vidya2
                      type: Organisation
                      textbooks: 1
                      sample: 0
                      createdon: 'December 2, 2020'
                      status: Approved
                    - programName: allTypeContent
                      name: 'anusha '
                      type: Individual
                      textbooks: 1
                      sample: 0
                      createdon: 'December 2, 2020'
                      status: Approved
        '400':
          description: 'Bad Request, Program nomination List Download Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/program400badRequestwithoutchannel'
              example:
                id: api.list.download
                ver: 1
                ts: 2020-12-02T18:12:26.673Z
                params:
                  resmsgid: eef05210-34c9-11eb-9c32-15914148e3ce
                  msgid: null
                  status: failed
                  err: ERR_DOWNLOADING_NOMINATION_DATA
                  errmsg: >-
                    Required fields like program_id, program_name, status while
                    getting nomination data are missing
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: 'Not Found, Program Nomination List Download request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/program404NotFound'
              example:
                request_path: /program/nomination/list/download
                message: API not found with these values
                request_host:
                  - kong
      deprecated: false
  /program/v1/nomination/list:
    post:
      tags:
        - Nomination
      summary: Nomination List
      description: |-
        This API provides the Nomination List for the respective program Id .
            - The **_nomination/list_** endpoint successfully provides the nomination list for a particular program/User Id.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/nomination/list
      operationId: NominationList200Success
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: Program Nomination Read/List Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programNominationList200SuccessRequest'
            example:
              request:
                filters: {}
        required: true
      responses:
        '200':
          description: 'Successful, Fetch Program Nomination List/Read Request'
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programNominationList200Success'
              example:
                id: api.nomination.list
                ts: 2021-01-11T04:43:33.952Z
                params:
                  resmsgid: 8fb4cc01-53c7-11eb-9ecd-69fe79984d78
                  msgid: 8fb4cc00-53c7-11eb-9ecd-69fe79984d78
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  - id: 14258
                    program_id: d4688e90-50ca-11eb-a115-db22788c28aa
                    user_id: 5a587cc1-e018-4859-a0a8-e842650b9d64
                    organisation_id: e7328d77-42a7-44c8-84f4-8cfea235f07d
                    status: Approved
                    content_types:
                      - Course Assessment
                      - eTextbook
                      - Explanation Content
                      - Learning Resource
                      - Practice Question Set
                      - Teacher Resource
                    collection_ids:
                      - do_11318921666818048011613
                    feedback: null
                    rolemapping: null
                    createdby: null
                    updatedby: null
                    createdon: 2021-01-07T09:30:00.506Z
                    updatedon: null
                    userData:
                      osUpdatedAt: 2020-10-15T18:45:31.316Z
                      lastName: ''
                      firstName: N11
                      gradeLevel: []
                      osCreatedAt: 2020-10-15T18:45:31.316Z
                      enrolledDate: 2020-08-24T11:24:10.893Z
                      '@type': User
                      subject: []
                      channel: 01309282781705830427
                      osid: 179b8dcd-ad56-42fd-83d1-9459bb8e4489
                      medium: []
                      userId: 5a587cc1-e018-4859-a0a8-e842650b9d64
                    orgData:
                      osUpdatedAt: 2020-08-24T11:23:53.873Z
                      code: NIT
                      osCreatedAt: 2020-08-24T11:23:53.873Z
                      createdBy: 9e41deb1-daf3-4e0d-b45d-cfcad7291af9
                      '@type': Org
                      name: NIT
                      description: NIT
                      osid: e7328d77-42a7-44c8-84f4-8cfea235f07d
                      type:
                        - contribute
                        - sourcing
                      orgId: 01309282781705830427
        '401':
          description: 'Unauthorized,Nomination List/Read Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/program400badRequestwithoutchannel'
              example:
                id: api.error
                ver: 1
                ts: '2020-12-03 07:52:57:567+0000'
                params:
                  resmsgid: 8ed696f0-353c-11eb-ada5-dde7a2458a3f
                  msgid: null
                  status: failed
                  err: INVALID_TOKEN
                  errmsg: INVALID_TOKEN
                responseCode: UNAUTHORIZED_ACCESS
                result: {}
      deprecated: false
  /program/v1/preference/create:
    post:
      tags:
        - Preference
      summary: Preference Create
      description: |-
        This API adds the user preferences based on program Id/user Id .
            - The **_preference/create_** endpoint successfully add the preferences for a particular program/User Id.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/preference/create
      operationId: Preference-create200Success
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: Program Preference Create Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programPreference-create200SuccessRequest'
            example:
              request:
                user_id: 48dc0e70-2775-474b-9b78-def27d047836
                program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
                preference:
                  medium:
                    - English
                  subject:
                    - ''
                  gradeLevel:
                    - Class 7
                type: sourcing
        required: true
      responses:
        '200':
          description: Preference-create200Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programPreference-create200Success'
              example:
                id: api.preference.create
                ver: 1
                ts: 2021-01-11T06:37:52.627Z
                params:
                  resmsgid: 87cb8c30-53d7-11eb-9ecd-69fe79984d78
                  msgid: 87cb6520-53d7-11eb-9ecd-69fe79984d78
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  user_id: 48dc0e70-2775-474b-9b78-def27d047836
                  program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
                  type: sourcing
                  sourcing_preference:
                    medium:
                      - English
                    subject:
                      - ''
                    gradeLevel:
                      - Class 7
                  contributor_preference: {}
        '400':
          description: Preference400BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programPreference400BadRequest'
              example:
                id: api.preference.create
                ver: 1
                ts: 2021-01-11T06:41:19.145Z
                params:
                  resmsgid: 02e3b190-53d8-11eb-a43e-7fcb93a469e2
                  msgid: null
                  status: failed
                  err: ERR_CREATE_USER_PREFERENCE
                  errmsg: >-
                    Required fields like user_id, program_id for adding user
                    preferences are missing
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
  /program/v1/preference/read:
    post:
      tags:
        - Preference
      summary: Preference Read
      description: |-
        This API provides the user preferences based on user Id.
            - The **_preference/read_** endpoint successfully fetch the user preferences for a particular User Id.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/preference/read
      operationId: Preference-read200Success
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: Program Preference Read Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programPreference-read200SuccessRequest'
            example:
              request:
                user_id: 48dc0e70-2775-474b-9b78-def27d047836
                program_id: ef3ecc80-3553-11eb-84ed-692ec8c8dbe9
        required: true
      responses:
        '200':
          description: Preference-read200Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programPreference-read200Success'
              example:
                id: api.preference.read
                ver: 1
                ts: 2021-01-11T06:46:03.524Z
                params:
                  resmsgid: ac647c40-53d8-11eb-9ecd-69fe79984d78
                  msgid: ac642e20-53d8-11eb-9ecd-69fe79984d78
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  contributor_preference: {}
                  sourcing_preference: {}
                  synced: true
                  timestamp: 2020-12-03T10:42:58.288Z
        '400':
          description: Preference read 400 BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programPreference400BadRequest'
              example:
                id: api.preference.read
                ver: 1
                ts: 2021-01-11T06:46:24.378Z
                params:
                  resmsgid: b8d28da0-53d8-11eb-a43e-7fcb93a469e2
                  msgid: null
                  status: failed
                  err: ERR_GET_USER_PREFERENCE
                  errmsg: Required fields like user_id to get preference are missing
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
  /program/v1/preference/update:
    post:
      tags:
        - Preference
      summary: Preference Update
      description: |-
        This API updates the user preferences based on user Id.
            - The **_preference/update_** endpoint successfully updates the user preferences for a particular User Id.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/preference/update
      operationId: Preference-update200Success
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: Program Preference Update Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programPreference-update200SuccessRequest'
            example:
              request:
                user_id: 48dc0e70-2775-474b-9b78-def27d047836
                program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
                preference:
                  medium:
                    - English
                  subject:
                    - ''
                  gradeLevel:
                    - ''
                type: sourcing
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programPreference-update200Success'
              example:
                id: api.preference.create
                ver: 1
                ts: 2021-01-11T06:46:58.423Z
                params:
                  resmsgid: cd1d6870-53d8-11eb-9ecd-69fe79984d78
                  msgid: cd1d1a50-53d8-11eb-9ecd-69fe79984d78
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  user_id: 48dc0e70-2775-474b-9b78-def27d047836
                  program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
                  type: sourcing
                  sourcing_preference:
                    medium:
                      - English
                    subject:
                      - ''
                    gradeLevel:
                      - ''
                  contributor_preference: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programPreference400BadRequest'
              example:
                id: api.preference.create
                ver: 1
                ts: 2021-01-11T06:47:17.091Z
                params:
                  resmsgid: d83deb31-53d8-11eb-a43e-7fcb93a469e2
                  msgid: null
                  status: failed
                  err: ERR_CREATE_USER_PREFERENCE
                  errmsg: >-
                    Required fields like user_id, program_id for adding user
                    preferences are missing
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
  /program/v1/update:
    post:
      tags:
        - Program CRUD
      summary: Program Update
      description: |-
        This API updates the Program Data based on Program Id.
            - The **_v1/update_** endpoint successfully Updates the Program Data for a particular Program Id.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/update
      operationId: ProgramUpdate200Success
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: Program update Request Body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programProgramUpdate200SuccessRequest'
        required: true
      responses:
        '200':
          description: Successful Program Update Response
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programProgramUpdate200Successfull'
              example:
                id: api.program.update
                ts: 2020-12-03T08:38:21.340Z
                params:
                  resmsgid: e6555dc1-3542-11eb-84ed-692ec8c8dbe9
                  msgid: e6555dc0-3542-11eb-84ed-692ec8c8dbe9
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  program_id: a043dc40-3497-11eb-9c32-15914148e3ce
        '400':
          description: 'Bad Request, Program Update Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/program400badRequestwithoutchannel'
              example:
                id: api.v1.update
                ver: 1
                ts: 2020-12-03T08:53:26.127Z
                params:
                  resmsgid: 01a0e7f0-3545-11eb-84ed-692ec8c8dbe9
                  msgid: null
                  status: failed
                  err: ERR_UPDATE_PROGRAM_DATA
                  errmsg: Required fields while updating program data are missing
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
  /program/v1/create:
    post:
      tags:
        - Program CRUD
      summary: Program Create
      description: |-
        This API creates the program data for root Org Id or request type.
            - The **_v1/create_** endpoint successfully creates the Program Data for a particular Root Org Id or request type.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/create
      operationId: CreateProgram200Success
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: Program Create Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programCreateProgram200SuccessRequest'
        required: true
      responses:
        '200':
          description: Program Create Successful Response
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programCreateProgram200success'
              example:
                id: api.program.create
                ts: 2020-12-03T08:25:51.200Z
                params:
                  resmsgid: 27371601-3541-11eb-a10c-1da50649277e
                  msgid: 27371600-3541-11eb-a10c-1da50649277e
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  program_id: 26be3c80-3541-11eb-a10c-1da50649277e
        '400':
          description: 'Bad Request, Nomination Update Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programnominationupdate400BadRequest'
      deprecated: false
  /program/v1/publish:
    post:
      tags:
        - Program CRUD
      summary: Program Publish
      description: |-
        This API publishes the program data for program Id or channel.
            - The **_v1/publish_** endpoint successfully publishes the Program Data for a particular Program Id or channel.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/publish
      operationId: Program-Publish200Success
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: Successful Program publish Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programProgram-Publish200SuccessRequest'
            example:
              request:
                program_id: a043dc40-3497-11eb-9c32-15914148e3ce
                channel: sunbird
        required: true
      responses:
        '200':
          description: Successful Program Publish Request Response
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programProgram-Publish200Success'
              example:
                id: api.program.publish
                ts: 2020-12-03T08:14:32.077Z
                params:
                  resmsgid: 926d23d1-353f-11eb-86c8-875983bcd642
                  msgid: 926d23d0-353f-11eb-86c8-875983bcd642
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  program_id: a043dc40-3497-11eb-9c32-15914148e3ce
                  afterPublishResponse:
                    nomination:
                      error: null
                      result:
                        program_id: a043dc40-3497-11eb-9c32-15914148e3ce
                        user_id: 48dc0e70-2775-474b-9b78-def27d047836
                        organisation_id: e0ab89f4-0fcb-47ea-9b70-3ed0f12b1b7a
                        status: Approved
                        content_types:
                          - Course Assessment
                          - eTextbook
                          - Explanation Content
                          - Learning Resource
                          - Practice Question Set
                          - Teacher Resource
                        collection_ids:
                          - do_1131644069627576321824
                          - do_1131644069627740161825
                          - do_1131644069627330561823
                    userMapping: {}
        '400':
          description: Program Publish Bad Request without channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/program400badRequestwithoutchannel'
              example:
                id: api.v1.publish
                ver: 1
                ts: 2020-12-02T18:28:15.284Z
                params:
                  resmsgid: 245adf40-34cc-11eb-9c32-15914148e3ce
                  msgid: null
                  status: failed
                  err: ERR_PUBLISH_PROGRAM_DATA
                  errmsg: Required fields while publishing program data are missing
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: Program Publish Not Found Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/program404NotFound'
              example:
                request_path: /v1/publish
                message: API not found with these values
                request_host:
                  - kong
      deprecated: false
  /program/v1/feed/search:
    post:
      tags:
        - Feed Search
      summary: Program-Feed-Search
      description: |-
        This API search for program latest Updates.
            - The **_feed/search_** endpoint successfully loads the latest Updates on program data .
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/feed/search
      operationId: Program-Feed-Search200success
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: Successful Program feed latest data RequestBody
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programProgram-Feed-Search200successRequest'
            example:
              request:
                nomination:
                  programId:
                    - a549ffa0-3553-11eb-84ed-692ec8c8dbe9
                    - ef3ecc80-3553-11eb-84ed-692ec8c8dbe9
                  status:
                    - Pending
                contribution:
                  programId:
                    - f2c1d380-389a-11eb-af92-c5fb4afce83e
                    - a043dc40-3497-11eb-9c32-15914148e3ce
                  status:
                    - Live
                channel: 012983850117177344161
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programProgram-Feed-Search200success'
              example:
                id: api.feed.search
                ver: 1
                ts: 2021-01-11T08:51:23.467Z
                params:
                  resmsgid: 2ea0b9b0-53ea-11eb-9ecd-69fe79984d78
                  msgid: 2e3f11b0-53ea-11eb-9ecd-69fe79984d78
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
        '400':
          description: Program-Feed-Search Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programProgram-Feed-SearchBadRequest'
              example:
                id: api.feed.search
                ver: 1
                ts: 2021-01-11T08:54:00.664Z
                params:
                  resmsgid: 8c531580-53ea-11eb-9ecd-69fe79984d78
                  msgid: null
                  status: failed
                  err: ERR_SEARCHING_PROGRAM_FEED
                  errmsg: >-
                    [{"request.nomination.programId":"programId should not be
                    empty"}]
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
  /program/v1/read/c43f7790-0a2a-11eb-a2e9-4fe29a51bb70:
    get:
      tags:
        - Program CRUD
      summary: Program Read
      description: |-
        This API get the program Data for program Id.
            - The **_v1/read_** endpoint successfully loads the program data for provided Program Id.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/read
      operationId: Read-Program-200-Success
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Read-Program
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programRead-Program-200-Success'
      deprecated: false
  /program/v1/unlist/publish:
    post:
      tags:
        - Program CRUD
      summary: Program Unlist Publish
      description: >-
        This API unlist the Published content based on request program Id/
        channel.
            - The **_unlist/publish_** endpoint successfully unlist the content published for the provided program Id.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/unlist/publish
      operationId: Unlist-Publish400BadRequest
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: 'Failure Program Unlist Publish Request, invalid request body'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programUnlist-Publish400BadRequestRequest'
            example:
              request:
                program_id: ''
                channel: sunbird
        required: true
      responses:
        '200':
          description: Successful Unlist-Publish Program Content
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programresultProgram'
              example:
                id: api.program.publish
                ts: 2021-01-12T10:57:24.721Z
                params:
                  resmsgid: f3e64611-54c4-11eb-8795-e372ee0a4d37
                  msgid: f3e64610-54c4-11eb-8795-e372ee0a4d37
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  program_id: d2f35e20-54c4-11eb-8795-e372ee0a4d37
                  afterPublishResponse:
                    nomination:
                      error: null
                      result:
                        program_id: d2f35e20-54c4-11eb-8795-e372ee0a4d37
                        user_id: c5bbabfc-7f2b-4d2e-bdc4-64b0db810817
                        organisation_id: 32625405-bc59-4622-89bb-d06934d690ef
                        status: Approved
                        content_types:
                          - Course Assessment
                        collection_ids:
                          - do_21319279857165107214382
                    userMapping: {}
        '400':
          description: Unlist-Publish Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programUnlist-Publish400Success'
              example:
                id: api.unlist.publish
                ver: 1
                ts: 2021-01-11T13:03:17.396Z
                params:
                  resmsgid: 5f3b4541-540d-11eb-99da-e37131bdf7ab
                  msgid: null
                  status: failed
                  err: ERR_PUBLISH_PROGRAM_DATA
                  errmsg: Required fields while publishing program data are missing
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
  /program/v1/list:
    post:
      tags:
        - Program CRUD
      summary: Program List
      description: |-
        This API fetches the program data for the provided request filters.
            - The **_v1/list_** endpoint successfully loads the program data for the request or request filters.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/list
      operationId: ProgramListsuccess-200
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programProgramListsuccess-200Request'
            example:
              request:
                filters:
                  enrolled_id:
                    user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
                  status:
                    - Live
                    - Unlisted
        required: true
      responses:
        '200':
          description: Program List success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programProgramListsuccess-200'
              example:
                id: api.program.list
                ts: 2021-01-07T08:22:19.773Z
                params:
                  resmsgid: 75a722d1-50c1-11eb-a115-db22788c28aa
                  msgid: 75a722d0-50c1-11eb-a115-db22788c28aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  count: 1
                  programs:
                    - id: 13936
                      program_id: 8d25f050-8df1-11ea-a3b1-3fc837314429
                      user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
                      organisation_id: null
                      status: Initiated
                      content_types:
                        - Teacher Resource
                      collection_ids: null
                      feedback: null
                      rolemapping: null
                      createdby: bcc23eec-5290-4ca2-8f3e-144a24f03b6d
                      updatedby: null
                      createdon: 2020-11-24T07:57:48.365Z
                      updatedon: null
                      program:
                        program_id: 8d25f050-8df1-11ea-a3b1-3fc837314429
                        name: TN tenant Test project
                        type: public
                        collection_ids:
                          - do_11301367038142054411248
                          - do_11301367120541286411551
                        content_types:
                          - Teacher Resource
                        target_collection_category: null
                        startdate: 2020-05-04T10:25:18.092Z
                        enddate: 2021-06-18T18:30:00.000Z
                        nomination_enddate: 2021-03-27T18:30:00.000Z
                        shortlisting_enddate: 2021-05-01T18:30:00.000Z
                        content_submission_enddate: 2021-05-01T18:30:00.000Z
                        image: null
                        status: Live
                        slug: sunbird
                        rolemapping:
                          REVIEWER:
                            - 6d9f0332-3662-497d-a8ff-ede453e557e4
                        createdby: 90ffbea3-2f41-4404-868e-2dfbe2ed3656
                        updatedby: null
                        createdon: 2020-05-04T10:25:18.092Z
                        updatedon: 2020-10-23T10:18:31.295Z
                        rootorg_id: 013013662290239488220
                        sourcing_org_name: Tamilnadu_Tenant
                        channel: DIKSHA
                        template_id: template1
                        guidelines_url: ''
                        subject: '["Tamil"]'
                        defaultContributeOrgReview: null
                        framework: tn_k-12
                        board: State (Tamil Nadu)
                        gradeLevel: '["Class 7"]'
                        medium: '["English", "Tamil"]'
          headers: {}
        '400':
          description: ProgramList400BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programProgramList400BadRequest'
              example:
                id: api.list.download
                ver: 1
                ts: 2021-01-08T11:38:10.738Z
                params:
                  resmsgid: fc2fd921-51a5-11eb-9ecd-69fe79984d78
                  msgid: null
                  status: failed
                  err: ERR_GENERATING_PROGRAM_DATA
                  errmsg: 'Required fields like program_id<Array>, is missing'
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
  /program/v1/report:
    post:
      tags:
        - Report
      summary: Program Report
      description: >-
        This API generate the approved content report for request
        filters/programs Id's/filter report.
            - The **_v1/report_** endpoint successfully loads the approved content report for program Id's(array).
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/report
      operationId: Report-success-200
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: Successful Approved content report Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programReport-success-200-Request'
            example:
              request:
                filters:
                  program_id:
                    - 95d604b0-2af4-11eb-9bed-c53bebe417b7
                  openForContribution: true
                  report: textbookLevelReport
        required: true
      responses:
        '200':
          description: Report-success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programReport-success-200'
              example:
                id: api.v1.report
                ver: 1
                ts: 2021-01-11T11:23:09.881Z
                params:
                  resmsgid: 62793a90-53ff-11eb-9c52-f5f4fb791715
                  msgid: 62082940-53ff-11eb-9c52-f5f4fb791715
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  tableData:
                    - - Medium: English
                        Grade: >-
                          Class 1, Class 2, Class 3, Class 9, Class 10, Class 8,
                          Class 5, Class 7, Class 6, Class 4
                        Subject: Mathematics
                        undefined Name: Math-Magic
                        Total Number of Chapters: 2
                        Total Contents Contributed: 0
                        Total Contents Reviewed: 0
                        Chapters with atleast one approved in each contentType: 0
                        Chapters with atleast one approved: 0
                        Total number of Approved Contents: 0
                        Digital Textbook: 0
        '400':
          description: Report-Error-400
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programReport-Error-400'
              example:
                id: api.v1.report
                ver: 1
                ts: 2021-01-11T11:23:38.453Z
                params:
                  resmsgid: 7380f850-53ff-11eb-9c52-f5f4fb791715
                  msgid: null
                  status: failed
                  err: ERR_GENERATING_CONTENT_REPORT
                  errmsg: 'Required fields like program_id<Array>,report is missing'
                responseCode: PRG_RPT01_CLIENT_ERROR
                result: {}
      deprecated: false
  /program/v1/tenant/list:
    post:
      tags:
        - Tenant list
      summary: Tenant
      description: |-
        This API gives the list of all the tenants.
            - The **_tenant/list_** endpoint successfully gives the list of all the tenants.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/tenant/list
      operationId: Tenant-success-200
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: Successful Tenant Read/List Request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/programTenant-success-200-Request'
            example:
              request:
                filters:
                  status: Live
        required: true
      responses:
        '200':
          description: Tenant-success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/programTenant-success-200'
              example:
                id: api.tenant.list
                ver: 1
                ts: 2021-01-11T11:53:41.373Z
                params:
                  resmsgid: a620bad0-5403-11eb-9c52-f5f4fb791715
                  msgid: a5ba57e0-5403-11eb-9c52-f5f4fb791715
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  count: 1
                  content:
                    - imgUrl: null
                      orgName: Tamilnadu_Tenant
                      orgCode: null
                      id: 013013662290239488220
                      slug: tn_tenant
                      program_count: 32
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/programTenant-error-400'
              example:
                id: api.tenant.list
                ver: 1
                ts: 2021-01-11T11:43:18.952Z
                params:
                  resmsgid: 3322d280-5402-11eb-8dd7-51aa5ed27ae5
                  msgid: null
                  status: failed
                  err: ERR_GET_PROGRAMCOUNTS_FAILED
                  errmsg: Error while fetching program count group by facets
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
  /program/v1/contributor/search:
    post:
      tags:
        - Contributor Search
      summary: Contributor Search
      description: |-
        This API gives the list of all the contributors.
            - The **_contributor/search_** endpoint successfully gives the list of all contributors.
            - All fields marked with an * are mandatory
            - Required fields cannot be null or empty
            - Backend Route: http://program-service:6000/program/v1/contributor/search
      operationId: Contributor-search
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contributorsearch200Request'
            example:
              request:
                filters:
                  user_org:
                    orgId:
                      eq: 18180aff-07ba-4f50-bf4a-04ace80f303b
                    roles:
                      - sourcing_reviewer
                      - sourcing_admin
                fields: []
                limit: 1
                offset: 0
        required: true
      responses:
        '200':
          description: Contributor search 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contributorsearch200'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contributorsearch4001'
      deprecated: false
  /program/v1/process/create:
    post:
      tags:
        - Process
      summary: Process create
      operationId: Process create
      description: |-
        This API creates the bulk job of the content.
           - The **_process/create_** endpoint creates the bulk job approval for contents.
           - All fields marked with an * are mandatory
           - Required fields cannot be null or empty
           - Backend Route: http://program-service:6000/program/v1/process/create
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: This represents the create process request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bulkapproveapiCreateRequest'
            example:
              request:
                process_id: 98c5d59a-5e8d-41ec-99d4-9cad8fef5ee4
                program_id: d3183400-f729-11ea-a660-c91ae7e44037
                collection_id: do_113108485878816768110286
                org_id: 01307938306521497658
                type: bulk_approval
                status: processing
                overall_stats:
                  approve_success: 0
                  approve_failed: 0
                  approve_pending: 7
                  total: 7
                createdby: bf020396-0d7b-436f-ae9f-869c6780fc45
                createdon: 2020-12-04T11:37:03.130Z
        required: true
      responses:
        '200':
          description: This represents the response of the api
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/bulkapproveapiCreate-bulk-Job-Success-200'
              example:
                id: api.process.create
                ver: 1
                ts: 2021-01-06T11:30:50.300Z
                params:
                  resmsgid: a0d6d7c0-5012-11eb-a115-db22788c28aa
                  msgid: a0709be0-5012-11eb-a115-db22788c28aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  id: 391
                  process_id: 98c5d59a-5e8d-41ec-99d4-9cad8fef5664
                  program_id: d3183400-f729-11ea-a660-c91ae7e44037
                  collection_id: do_113108485878816768110286
                  org_id: 01307938306521497658
                  type: bulk_approval
                  status: processing
                  overall_stats:
                    total: 7
                    approve_failed: 0
                    approve_pending: 7
                    approve_success: 0
                  createdby: bf020396-0d7b-436f-ae9f-869c6780fc45
                  createdon: 2020-12-04T11:37:03.130Z
                  data: null
                  err_message: null
                  updatedby: null
                  updatedon: 2021-01-06T11:30:50.261Z
                  completedon: null
                  expiration: null
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/bulkapproveapiCreate-Process-Error-400-Response
              example:
                id: api.process.create
                ver: 1
                ts: 2021-01-06T14:51:59.175Z
                params:
                  resmsgid: ba730572-502e-11eb-a115-db22788c28aa
                  msgid: null
                  status: failed
                  err: ERR_CREATE_BULK_JOB
                  errmsg: Required fields to create bulk job request are missing
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/bulkapproveapiCreate-Process-Error-500-Response
              example:
                id: api.process.create
                ver: 1
                ts: 2021-01-07T04:14:57.384Z
                params:
                  resmsgid: e6e64e81-509e-11eb-a115-db22788c28aa
                  msgid: null
                  status: failed
                  err: ERR_CREATE_BULK_JOB_REQUEST_FAILED
                  errmsg: process_id must be unique
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
  /program/v1/process/update:
    patch:
      tags:
        - Process
      summary: Process update
      operationId: Process update
      description: |-
        This API updates the bulk job approval of the content.
           - The **_process/update** endpoint updates the bulk job approve of the content.
           - All fields marked with an * are mandatory
           - Required fields cannot be null or empty
           - Backend Route: http://program-service:6000/program/v1/process/create
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: This represents the request body of the process update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bulkapproveapiupdateRequest'
            example:
              request:
                process_id: 16264756-c71c-4061-a99c-bfab0556d047
                status: processing
                overall_stats:
                  approve_success: 44
                  approve_failed: 0
                  approve_pending: -40
                  total: 4
                updatedby: bf020396-0d7b-436f-ae9f-869c6780fc45
        required: true
      responses:
        '200':
          description: This represents the Process-update response of the api
          content:
            application/json; charset=utf-8:
              schema:
                $ref: >-
                  #/components/schemas/bulkapproveapiProcess-update-success-200-Response
              example:
                id: api.process.update
                ver: 1
                ts: 2021-01-06T12:26:27.188Z
                params:
                  resmsgid: 65c78b40-501a-11eb-a115-db22788c28aa
                  msgid: 6562fd10-501a-11eb-a115-db22788c28aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  process_id: 16264756-c71c-4061-a99c-bfab0556d047
        '400':
          description: Update-Process-Error-400
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/bulkapproveapiProcess-Update-Error-400-Response
              example:
                id: api.process.update
                ver: 1
                ts: 2021-01-07T04:43:35.328Z
                params:
                  resmsgid: e6dfc202-50a2-11eb-a115-db22788c28aa
                  msgid: null
                  status: failed
                  err: ERR_UPDATING_BULK_JOB_REQUEST
                  errmsg: >-
                    Required fields like process_id to update bulk job request
                    are missing
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkapproveapiProcess-Update-Error-404'
              example:
                id: api.process.update
                ver: 1
                ts: 2021-01-06T10:49:45.873Z
                params:
                  resmsgid: e3ed2011-500c-11eb-a115-db22788c28aa
                  msgid: null
                  status: failed
                  err: ERR_UPDATING_BULK_JOB_REQUEST
                  errmsg: process_id not found
                responseCode: PROCESS_NOT_FOUND
                result: {}
      deprecated: false
  /program/v1/process/read/98c5d59a-5e8d-41ec-99d4-9cad8fef5ee2:
    get:
      tags:
        - Process
      summary: Process read
      operationId: Read process
      description: |-
        This API reads the bulk job approval of the content.
           - The **_process/read_** endpoint read the bulk job approve of the content.
           - All fields marked with an * are mandatory
           - Required fields cannot be null or empty
           - Backend Route: http://program-service:6000/program/v1/process/read
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: This represents the response of the api
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/bulkapproveapiProcess-Read-Success-200'
              example:
                id: api.process.read
                ver: 1
                ts: 2021-01-06T13:06:53.323Z
                params:
                  resmsgid: 0bde5db0-5020-11eb-a115-db22788c28aa
                  msgid: 0b4503e0-5020-11eb-a115-db22788c28aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  id: 300
                  process_id: 98c5d59a-5e8d-41ec-99d4-9cad8fef5ee2
                  program_id: d3183400-f729-11ea-a660-c91ae7e44037
                  collection_id: do_113108485878816768110286
                  org_id: 01307938306521497658
                  status: processing
                  type: bulk_approval
                  overall_stats:
                    total: 7
                    approve_failed: 0
                    approve_pending: -37
                    approve_success: 44
                  data: null
                  err_message: null
                  createdby: bf020396-0d7b-436f-ae9f-869c6780fc45
                  updatedby: bf020396-0d7b-436f-ae9f-869c6780fc45
                  createdon: 2020-12-04T11:37:03.130Z
                  updatedon: 2020-12-04T11:39:25.265Z
                  completedon: null
                  expiration: null
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/bulkapproveapiProcess-Read-Error-404-Response
              example:
                id: api.process.read
                ver: 1
                ts: 2021-01-07T06:02:51.523Z
                params:
                  resmsgid: f9c98531-50ad-11eb-a115-db22788c28aa
                  msgid: null
                  status: failed
                  err: PROCESS_NOT_FOUND
                  errmsg: >-
                    process_id 98c5d59a-5e8d-41ec-99d4-9cad8fef5ee does not
                    exist
                responseCode: PROCESS_NOT_FOUND
                result: {}
      deprecated: false
  /program/v1/process/search:
    post:
      tags:
        - Process
      summary: Process search
      operationId: Search process
      description: |-
        This API searches for the bulk job approval of the content.
           - The **_process/search_** endpoint search the bulk job approve of the content.
           - All fields marked with an * are mandatory
           - Required fields cannot be null or empty
           - Backend Route: http://program-service:6000/program/v1/process/search
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: This represents the search request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/bulkapproveapiSearchRequest'
            example:
              request:
                filters:
                  program_id: 4d1bece0-fbf0-11ea-8789-cf2d70041403
                  collection_id: do_113112787166773248110944
        required: true
      responses:
        '200':
          description: This represents the response of the api
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/bulkapproveapiProcess-Search-Success-200'
              example:
                id: api.process.search
                ver: 1
                ts: 2021-01-06T13:07:45.175Z
                params:
                  resmsgid: 2ac65a70-5020-11eb-a115-db22788c28aa
                  msgid: 2a5c7510-5020-11eb-a115-db22788c28aa
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  count: 1
                  process:
                    - id: 299
                      process_id: 3bd5eb6a-6de0-4a64-9051-0882bfd76480
                      program_id: 4d1bece0-fbf0-11ea-8789-cf2d70041403
                      collection_id: do_113112787166773248110944
                      org_id: 01307938306521497658
                      status: processing
                      type: bulk_approval
                      overall_stats:
                        total: 2
                        approve_failed: 0
                        approve_pending: -42
                        approve_success: 44
                      data: null
                      err_message: null
                      createdby: bf020396-0d7b-436f-ae9f-869c6780fc45
                      updatedby: bf020396-0d7b-436f-ae9f-869c6780fc45
                      createdon: 2020-12-04T10:59:04.797Z
                      updatedon: 2020-12-04T11:35:21.942Z
                      completedon: null
                      expiration: null
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/bulkapproveapiProcess-Search-Error-400-Response
              example:
                id: api.process.search
                ver: 1
                ts: 2021-01-07T06:08:49.166Z
                params:
                  resmsgid: cef582e2-50ae-11eb-a115-db22788c28aa
                  msgid: null
                  status: failed
                  err: ERR_SEARCHING_BULK_JOB_REQUEST
                  errmsg: Required fields like filters are missing
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/bulkapproveapiProcess-Search-Error-500-Response
              example:
                id: api.process.search
                ver: 1
                ts: 2021-01-07T06:14:02.620Z
                params:
                  resmsgid: 89cacbc1-50af-11eb-a115-db22788c28aa
                  msgid: null
                  status: failed
                  err: ERROR_SEARCHING_BULK_JOB_REQUEST
                  errmsg: column bulk_job_request.collection does not exist
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
  /composite/v1/search:
    post:
      tags:
        - Search APIs
      summary: Composite Search
      description: >-
        This API is associated with Searching Object created as part of sourcing
        object creation on the Sunbird Platform.
          - The endpoint for **Composite Search** is `/composite/v1/search`
          - It points to knowledge-mw-service - `/v1/search`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      operationId: Composite Search
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:

            - application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:

          - JSON

          The body is the representation of the resource object for searching
          objects
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchapiCompositeSearchRequest'
            examples:
              a:
                summary: Search - All status & with limit
                value:
                  request:
                    filters:
                      objectType: Content
                      status: []
                    limit: 1
              b:
                summary: Search - Specific status & with limit
                value:
                  request:
                    filters:
                      objectType: Content
                      status:
                        - Review
                    limit: 1
              c:
                summary: Search - Get Facets Between Date Range
                value:
                  request:
                    filters:
                      objectType: Content
                      status: []
                      createdOn:
                        min: '2020-10-01T00:00:00.000+0530'
                        max: '2020-12-01T23:59:59.999+0530'
                    limit: 0
                    facets:
                      - board
              d:
                summary: Search - Get specific fields in response
                value:
                  request:
                    filters:
                      objectType: Content
                      status: []
                    limit: 2
                    fields:
                      - mimeType
                      - createdOn
                    sort_by:
                      createdOn: desc
              e:
                summary: Search - Assert on specific field
                value:
                  request:
                    filters:
                      objectType: Content
                      status: []
                    limit: 2
                    exists:
                      - dialcodes
                    fields:
                      - dialcodes
                      - createdOn
                    sort_by:
                      createdOn: desc
              f:
                summary: Search - based on specific query string
                value:
                  request:
                    query: शेर का साथी हाथी
                    filters:
                      objectType: Content
                      status: []
                    limit: 2
                    fields:
                      - name
                      - description
        required: true
      responses:
        '200':
          description: SUCCESS. The **Composite Search** operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchapiCompositeSearchSuccessResponse'
              examples:
                a:
                  summary: Search Response - All status & with limit
                  value:
                    id: api.v1.search
                    ver: '1.0'
                    ts: '2020-12-22T06:24:45.025Z'
                    params:
                      resmsgid: 62160510-441e-11eb-9b0c-abcfbdf41bc3
                      msgid: 620ae180-441e-11eb-9b0c-abcfbdf41bc3
                      status: successful
                      err: null
                      errmsg: null
                    responseCode: OK
                    result:
                      count: 480465
                      content:
                        - code: org.ekstep.jun16.story.test05
                          subject:
                            - literacy
                          flags:
                            - Test case
                          channel: in.ekstep
                          downloadUrl: >-
                            https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/ecar_files/org.ekstep.jun16.story.test05/vrgaatiil-upkrmclassroom-activities_1498725323304_org.ekstep.jun16.story.test05_1.0.ecar
                          description: शेर का साथी हाथी
                          lastFlaggedOn: '2017-12-27T13:30:48.942+0000'
                          language:
                            - English
                          variants:
                            spine:
                              ecarUrl: >-
                                https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/ecar_files/org.ekstep.jun16.story.test05/vrgaatiil-upkrmclassroom-activities_1498725324677_org.ekstep.jun16.story.test05_1.0_spine.ecar
                              size: 851
                          mimeType: application/vnd.ekstep.ecml-archive
                          flaggedBy:
                            - Test case
                          idealScreenSize: normal
                          createdOn: '2017-06-29T07:44:15.875+0000'
                          objectType: Content
                          collections:
                            - do_11228062262625075214
                          appId: ekstep_portal
                          contentDisposition: inline
                          contentEncoding: gzip
                          artifactUrl: >-
                            https://ekstep-public-dev.s3-ap-south-1.amazonaws.com/content/org.ekstep.jun16.story.test05/artifact/1485166711340_do_30102464_1498725273215.zip
                          lastUpdatedOn: '2017-12-27T13:30:48.968+0000'
                          SYS_INTERNAL_LAST_UPDATED_ON: '2018-01-09T18:41:32.368+0000'
                          contentType: Story
                          owner: EkStep
                          lastUpdatedBy: Test case
                          identifier: org.ekstep.jun16.story.test05
                          audience:
                            - Learner
                          flagReasons:
                            - Copyright Violation
                          visibility: default
                          os:
                            - All
                          consumerId: 72e54829-6402-4cf0-888e-9b30733c1b88
                          mediaType: content
                          osId: org.ekstep.quiz.app
                          graph_id: domain
                          nodeType: DATA_NODE
                          pkgVersion: 1
                          versionKey: '1515523292368'
                          prevState: Draft
                          idealScreenDensity: hdpi
                          dialcodes:
                            - DAKDF
                            - FSDFDSA
                          s3Key: >-
                            ecar_files/org.ekstep.jun16.story.test05/vrgaatiil-upkrmclassroom-activities_1498725323304_org.ekstep.jun16.story.test05_1.0.ecar
                          size: 9983654
                          lastPublishedOn: '2017-06-29T08:35:23.302+0000'
                          compatibilityLevel: 1
                          name: "\tवर्गातील उपक्रम(Classroom Activities)"
                          resourceType: Story
                          status: Flagged
                          node_id: 105761
                b:
                  summary: Search Response - Specific status & with limit
                  value:
                    id: api.v1.search
                    ver: '1.0'
                    ts: '2020-12-22T06:33:54.794Z'
                    params:
                      resmsgid: a9c61ca0-441f-11eb-9b0c-abcfbdf41bc3
                      msgid: a9c49600-441f-11eb-9b0c-abcfbdf41bc3
                      status: successful
                      err: null
                      errmsg: null
                    responseCode: OK
                    result:
                      count: 6370
                      content:
                        - ownershipType:
                            - createdBy
                          code: 0cc5be9a-32a0-c825-06c0-69e82a6c5951
                          prevStatus: Draft
                          subject:
                            - English
                          bloomslevel: remember
                          channel: b00bc992ef25f1a9a8d63291e20efc8d
                          language:
                            - English
                          mimeType: application/pdf
                          medium:
                            - English
                          idealScreenSize: normal
                          createdOn: '2020-01-08T13:41:40.258+0000'
                          objectType: Content
                          appIcon: >-
                            https://ntpstagingall.blob.core.windows.net/ntp-content-staging/content/do_21291553051403878414/artifact/explanation.thumb_1576602846206.png
                          gradeLevel:
                            - Grade 1
                          primaryCategory: Explanation Content
                          appId: local.sunbird.portal
                          contentDisposition: inline
                          artifactUrl: >-
                            https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/assets/do_112930997454864384150/sample.pdf
                          contentEncoding: identity
                          lastUpdatedOn: '2020-01-08T13:44:32.610+0000'
                          SYS_INTERNAL_LAST_UPDATED_ON: '2020-01-08T13:43:42.419+0000'
                          contentType: ExplanationResource
                          dialcodeRequired: 'No'
                          identifier: do_112930997454864384150
                          audience:
                            - Student
                          creator: Creation
                          lastStatusChangedOn: '2020-01-08T13:44:32.602+0000'
                          visibility: Default
                          os:
                            - All
                          consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                          mediaType: content
                          osId: org.ekstep.quiz.app
                          graph_id: domain
                          nodeType: DATA_NODE
                          version: 2
                          versionKey: '1578491072610'
                          license: CC BY 4.0
                          idealScreenDensity: hdpi
                          framework: NCFCOPY
                          lastSubmittedOn: '2020-01-08T13:44:32.405+0000'
                          createdBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
                          compatibilityLevel: 1
                          name: lesson Plan
                          board: NCERT
                          resourceType: Read
                          status: Review
                          node_id: 378232
                c:
                  summary: Search Response - Get Facets Between Date Range
                  value:
                    id: api.v1.search
                    ver: '1.0'
                    ts: '2020-12-22T06:55:03.815Z'
                    params:
                      resmsgid: 9e2b5970-4422-11eb-9b0c-abcfbdf41bc3
                      msgid: 9e295da0-4422-11eb-9b0c-abcfbdf41bc3
                      status: successful
                      err: null
                      errmsg: null
                    responseCode: OK
                    result:
                      count: 14423
                      facets:
                        - values:
                            - name: state (uttar pradesh)
                              count: 1
                            - name: state (andhra pradesh)
                              count: 1
                            - name: ncert
                              count: 26
                            - name: cbse
                              count: 335
                          name: board
                d:
                  summary: Search Response - Get specific fields in response
                  value:
                    id: api.v1.search
                    ver: '1.0'
                    ts: '2020-12-22T07:21:30.803Z'
                    params:
                      resmsgid: 50168030-4426-11eb-9b0c-abcfbdf41bc3
                      msgid: 5010b3d0-4426-11eb-9b0c-abcfbdf41bc3
                      status: successful
                      err: null
                      errmsg: null
                    responseCode: OK
                    result:
                      count: 480465
                      content:
                        - identifier: domain_62767
                          mimeType: application/vnd.ekstep.ecml-archive
                          createdOn: '9390-06-06T13:36:06.929+0000'
                          objectType: Content
                        - identifier: do_112196430983438336116
                          mimeType: application/vnd.ekstep.content-collection
                          createdOn: '4177-05-07T06:55:23.005+0000'
                          objectType: Content
                e:
                  summary: Search Response - Assert on specific field
                  value:
                    id: api.v1.search
                    ver: '1.0'
                    ts: '2020-12-22T07:24:02.522Z'
                    params:
                      resmsgid: aa84fba0-4426-11eb-9b0c-abcfbdf41bc3
                      msgid: aa839c10-4426-11eb-9b0c-abcfbdf41bc3
                      status: successful
                      err: null
                      errmsg: null
                    responseCode: OK
                    result:
                      count: 2202
                      content:
                        - identifier: do_395
                          dialcodes:
                            - V1T2P8
                          createdOn: '2020-12-17T06:36:54.716+0000'
                          objectType: Content
                        - identifier: do_11317422696104755212890
                          dialcodes:
                            - K1G7M9
                          createdOn: '2020-12-17T05:13:22.086+0000'
                          objectType: Content
                f:
                  summary: Search Response - based on specific query string
                  value:
                    id: api.v1.search
                    ver: '1.0'
                    ts: '2020-12-22T07:30:44.414Z'
                    params:
                      resmsgid: 9a10d5e0-4427-11eb-9b0c-abcfbdf41bc3
                      msgid: 9a0d2c60-4427-11eb-9b0c-abcfbdf41bc3
                      status: successful
                      err: null
                      errmsg: null
                    responseCode: OK
                    result:
                      count: 290
                      content:
                        - identifier: org.ekstep.ma8.story
                          name: शेर का साथी हाथी
                          description: Test
                          objectType: Content
                        - identifier: org.ekstep.march.content_1020
                          name: शेर का साथी हाथी
                          description: शेर का साथी हclsथी
                          objectType: Content
        '400':
          description: >-
            BAD REQUEST. The **Composite Search** operation failed. You may have
            missed input for a mandatory parameter - content-type in header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchapiCompositeSearchErrorResponse'
              example:
                id: api.v1.search
                ver: '1.0'
                ts: '2020-12-21T11:46:50.400Z'
                params:
                  resmsgid: 367e7a00-4382-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_CONTENT_SEARCH_FIELDS_MISSING
                  errmsg: Required fields for search content are missing
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchapiCompositeSearchErrorResponse'
              example:
                id: api.v1.search
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/textbook/v1/toc/upload/{textbook-id}':
    post:
      tags:
        - TOC APIs
      summary: TOC Upload
      description: >-
        'This API is associated with upload TOC with csv format on the Sunbird
        Platform.


        The endpoint for TOC upload is /textbook/v1/toc/upload


        You can find sample TOC here
        [Sample-TOC](https://dev.sunbirded.org/content-plugins/org.ekstep.collectioneditor-1.6/assets/uploadsamplecsvfile.csv)


        or use following


        "Board,Medium,Grade,Subject,Textbook Name,Level 1 Textbook Unit,Level 2
        Textbook Unit,Level 3 Textbook Unit,Level 4 Textbook
        Unit,Description,Mapped Topics,Purpose of Content to be
        linked,Keywords,QR Code Required?,QR Code

        CBSE,English,Class 6,Science,Science-10,5. Human Body,,,,This chapter
        describes about human body,Human Body,Video of lungs pumping,"head,
        eyes, nose, mouth",Yes,

        CBSE,English,Class 6,Science,Science-10,5. Human Body,5.1 Parts of
        Body,,,"This section describes about various part of the body such as
        head, hands, legs etc.",Parts of Body,,,No,"


        The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.'
      operationId: TOCUpload
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. Possible
            media types are:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
            example: application/json
        - name: X-Authenticated-User-Token
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authToken}}'
        - name: Authorization
          in: header
          description: Access token of registered user performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{api-key}}'
        - name: textbook-id
          in: path
          description: >-
            TextBook id to upload. It should be unique and same as csv file
            identifier
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            encoding: {}
            schema:
              required:
                - fileUrl
              type: object
              properties:
                fileUrl:
                  type: string
                  description: File which user want to upload
        required: false
      responses:
        '200':
          description: SUCCESS. The "TOC Upload" operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tocapiTOCUpload-Success'
              example:
                id: api.textbook.toc.upload
                ver: v1
                ts: '2020-11-27 15:35:56:361+0000'
                params:
                  resmsgid: null
                  msgid: b3eb6ee7-108d-48b7-9f9f-0d96c55ac289
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tocapiTOCDownload-Resource_Not_Found'
              example:
                id: api.textbook.toc.upload
                ver: v1
                ts: '2020-11-27 15:20:24:393+0000'
                params:
                  resmsgid: null
                  msgid: 30527359-4723-4b59-b4c0-0b5b14f9a3e2
                  err: INVALID_TEXTBOOK_NAME
                  status: INVALID_TEXTBOOK_NAME
                  errmsg: >-
                    Textbook Name given in the file doesn’t match current
                    Textbook name. Please check and upload again.
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tocapiTOCDownload-Resource_Not_Found'
              example:
                id: api.textbook.toc.upload
                ver: v1
                ts: '2020-11-27 15:27:56:969+0000'
                params:
                  resmsgid: null
                  msgid: c148b326-7f46-4899-b0cb-31d563f225bc
                  err: RESOURCE_NOT_FOUND
                  status: RESOURCE_NOT_FOUND
                  errmsg: rootId do_11316025545317580812 does not exist
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tocapiTOCDownload-Resource_Not_Found'
              example:
                id: api.textbook.toc.upload
                ver: v1
                ts: '2020-11-23 06:48:19:128+0000'
                params:
                  resmsgid: null
                  msgid: 50f76a53-4710-4333-936f-c043031eec03
                  err: SERVER_ERROR
                  status: SERVER_ERROR
                  errmsg: SERVER_ERROR
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/textbook/v1/toc/download/{textbook-id}':
    get:
      tags:
        - TOC APIs
      summary: TOC Download
      description: >-
        This API is associated with download textbook in csv format.


        The endpoint for TOC download is /download

        The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: TOCDownload
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. Possible
            media types are:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
            example: application/json
        - name: x-authenticated-user-token
          in: header
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authToken}}'
        - name: Authorization
          in: header
          description: Access token of registered user performing given API request.
          required: true
          style: simple
          schema:
            type: string
            example: '{{api-key}}'
        - name: textbook-id
          in: path
          description: Textbook id which user want to download
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: SUCCESS. The "TOC Download" operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tocapiTOCDownload-Success'
              example:
                id: api.textbook.toc.download
                ver: v1
                ts: '2020-11-27 15:47:33:106+0000'
                params:
                  resmsgid: null
                  msgid: ab202e68-bacd-4eee-a3b3-10d59b09c17f
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  textbook:
                    tocUrl: >-
                      https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/textbook/toc/do_11316025504283852811_test-27-nov_1606491356306.csv
                    ttl: '86400'
        '404':
          description: Resource Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tocapiTOCDownload-Resource_Not_Found'
              example:
                id: api.textbook.toc.download
                ver: v1
                ts: '2020-11-27 15:49:18:113+0000'
                params:
                  resmsgid: null
                  msgid: 1f4ed0b6-ab14-4644-8e91-0bed6b0cd756
                  err: RESOURCE_NOT_FOUND
                  status: RESOURCE_NOT_FOUND
                  errmsg: rootId do_11263298042220544900 does not exist
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tocapiTOCDownload-Resource_Not_Found'
              example:
                id: api.textbook.toc.download
                ver: v1
                ts: '2020-11-23 06:48:19:128+0000'
                params:
                  resmsgid: null
                  msgid: 50f76a53-4710-4333-936f-c043031eec03
                  err: SERVER_ERROR
                  status: SERVER_ERROR
                  errmsg: SERVER_ERROR
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /object/category/v1/create:
    post:
      tags:
        - Object Category APIs
      summary: Create Object Category
      description: >-
        This API is associated with creating Object Category on the Sunbird
        Platform.
          - The endpoint for **Create Object Category** is `/object/category/v1/create`
          - It points to taxonomy-service - `/object/category/v4/create`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      operationId: Create Object Category
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:

            - application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
            - JSON: The body is the representation of the resource object for creating object category (an array of parameters which describes the object category)
            - Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/objectcategory/1.0/schema.json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/objectcategoryCreateObjectCategoryRequest'
            example:
              request:
                objectCategory:
                  name: Explanation Content
                  description: Content that can be used to Explain
        required: true
      responses:
        '200':
          description: SUCCESS. The **Create Object Category** operation was successful!
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryCreateSuccessResponse
              example:
                id: api.object.category.create
                ver: '3.0'
                ts: '2020-12-10T20:24:45ZZ'
                params:
                  resmsgid: 3be02c4b-3324-41a3-afd8-60f6be0584d2
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: 'obj-cat:classroom-teaching-video'
        '400':
          description: >-
            BAD REQUEST. The **Create Object Category** operation failed. You
            may have missed input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryCreateErrorResponse
              example:
                id: api.object.category.create
                ver: '1.0'
                ts: '2020-12-10T08:50:29.786Z'
                params:
                  resmsgid: c169a7a0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: ERR_NAME_SET_AS_IDENTIFIER
                  errmsg: Name will be set as identifier
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryCreateErrorResponse
              example:
                id: api.object.category.create
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/object/category/v1/update/{ObjectCategory_Id}':
    patch:
      description: >-
        This API is associated with updating object category on the Sunbird
        Platform .
          - **_/Update/_** endpoint executes the "Update Object Category" request based on parameters provided as metadata in the request body.
          - The endpoint for **Update Object Category** is `/object/category/v1/update/{ObjectCategory_Id}`
          - It points to taxonomy-service - `/object/category/v4/update/{ObjectCategory_Id}`
          - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Update Object Category
      tags:
        - Object Category APIs
      operationId: Update Object Category
      parameters:
        - in: path
          name: ObjectCategory_Id
          required: true
          description: Please append a valid Object Category Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/objectcategoryUpdateObjectCategoryrequest'
            example:
              request:
                objectCategory:
                  description: Updated description
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the object category to be updated.
            - Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/objectcategory/1.0/schema.json)
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation. Object Category  update operation was
            successfuly executed.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryCreateSuccessResponse
              example:
                id: api.object.category.update
                ver: '4.0'
                ts: '2020-12-10T20:26:07ZZ'
                params:
                  resmsgid: 80aa9310-b749-411c-a13b-8d9f25af389f
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: 'obj-cat:classroom-teaching-video'
        '400':
          description: >-
            BAD REQUEST. The 'Update  Object Category ' operation failed ! The
            possible reason for failure is that you may have missed providing
            input for a mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryCreateErrorResponse
              example:
                id: api.object.category.update
                ver: '4.0'
                ts: '2020-12-10T20:27:01ZZ'
                params:
                  resmsgid: 87eb99c6-bc10-406a-a6fe-13651f546ce1
                  msgid: null
                  err: ERROR_RESTRICTED_PROP
                  status: failed
                  errmsg: >-
                    Properties in list [identifier, name, status] are not
                    allowed in request
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,** Object Category Update** operation failed !The
            possible reason for failure is that you may have provided wrong
            object category id.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryCreateErrorResponse
              example:
                id: api.object.category.update
                ver: '3.0'
                ts: '2020-12-17T20:16:23ZZ'
                params:
                  resmsgid: 34d3161a-aaa8-417e-9cbd-d77bad54441c
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    obj-cat:classroom-teaching-video1
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryCreateErrorResponse
              example:
                id: api.object.category.update
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/object/category/v1/read/{ObjectCategory_Id}':
    get:
      description: >-
        This API is associated with viewing and reading out the master object
        category on the Sunbird Platform .
          - The **_/read/{ObjectCategory_Id}_** endpoint executes request for fetching the contents to be viewed and read.
          - The endpoint for **Read Object Category** is `/object/category/v1/read/{ObjectCategory_Id}`
          - It points to taxonomy-service - `/object/category/v4/read/{ObjectCategory_Id}`
          - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate id.
          - You need to provide a valid object category id value in {ObjectCategory Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Read ObjectCategory
      tags:
        - Object Category APIs
      operationId: Read ObjectCategory
      parameters:
        - in: path
          name: ObjectCategory_Id
          required: true
          description: Please append a valid ObjectCategory Id To the Request URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource. Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Read Object Category" operation was
            successfully executed. For all possible metadata, please
            [refer](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/objectcategory/1.0/schema.json)
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryGetSuccessResponse
              example:
                id: api.object.category.read
                ver: '3.0'
                ts: '2020-12-17T09:32:09ZZ'
                params:
                  resmsgid: fa4ebf30-bb78-4448-9636-ee2a27bf75e5
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  objectCategory:
                    identifier: 'obj-cat:checking-account'
                    lastStatusChangedOn: '2020-12-17T09:09:55.687+0000'
                    consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                    name: Checking Account
                    channel: in.ekstep
                    lastUpdatedOn: '2020-12-17T09:14:56.660+0000'
                    description: Textbook Unit
                    languageCode: []
                    createdOn: '2020-12-17T09:09:55.687+0000'
                    objectType: ObjectCategory
                    versionKey: '1608196496660'
                    status: Live
        '404':
          description: >-
            RESOURCE NOT FOUND,**Object Category Read** operation failed !The
            possible reason for failure is that you may have provided wrong
            object category id.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryCreateErrorResponse
              example:
                id: api.content.read
                ver: '1.0'
                ts: '2020-12-10T20:37:58.223Z'
                params:
                  resmsgid: 96a71df0-3b27-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_1131697204035993601314
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryCreateErrorResponse
              example:
                id: api.object.category.read
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /object/category/definition/v1/create:
    post:
      tags:
        - Object Category Definition APIs
      summary: Create Object Category Definition
      description: >-
        This API is associated with creating Object Category Definition on the
        Sunbird Platform.
          - The endpoint for **Create Object Category Definition** is `/object/category/definition/v1/create`
          - It points to taxonomy-service - `/object/category/definition/v4/create`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      operationId: Create Object Category Definition
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. Possible
            media types can be:
              - application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
            - JSON
          The body is the representation of the resource object for creating
          object category defintion (an array of parameters which describes the
          object category defintion) 
            - Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/objectcategorydefinition/1.0/schema.json)
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/objectcategoryCreateObjectCategoryDefinitionRequest
            example:
              request:
                objectCategoryDefinition:
                  categoryId: 'obj-cat:practice-question-set'
                  targetObjectType: Content
                  objectMetadata:
                    config: {}
                    schema: {}
        required: true
      responses:
        '200':
          description: >-
            SUCCESS. The **Create Object Category Definition** operation was
            successful!
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryDefinitionCreateSuccessResponse
              example:
                id: api.object.category.definition.create
                ver: '3.0'
                ts: '2020-12-10T20:24:45ZZ'
                params:
                  resmsgid: 3be02c4b-3324-41a3-afd8-60f6be0584d2
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: 'obj-cat:explanation-content_content_all'
        '400':
          description: >-
            BAD REQUEST. The **Create Object Category Definition** operation
            failed. You may have missed input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryDefinitionCreateErrorResponse
              example:
                id: api.object.category.definition.create
                ver: '3.0'
                ts: '2020-12-17T06:44:49ZZ'
                params:
                  resmsgid: c4fa577f-6e15-4991-b251-94f7b2a897bf
                  msgid: null
                  err: CLIENT_ERROR
                  status: failed
                  errmsg: Invalid request
                responseCode: CLIENT_ERROR
                result:
                  messages:
                    - 'Invalid Props are : [xyz]'
        '500':
          description: >-
            INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryDefinitionCreateErrorResponse
              example:
                id: api.object.category.definition.create
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/object/category/definition/v1/update/{ObjectCategoryDefinition_Id}':
    patch:
      description: >-
        This API is associated with updating object category on the Sunbird
        Platform .
          - **_/Update/_** endpoint executes the "Update Object Category Definition" request based on parameters provided as metadata in the request body.
          - The endpoint for **Update Object Category Definition** is `/object/category/definition/v1/update/{ID}`
          - It points to taxonomy-service - `/object/category/definition/v4/update/{ID}`
          - {...}refers to a section of review endpoint URL path that needs to be replaced by appropriate Id.
          - It is mandatory to provide values for parameters marked with *.
          - Mandatory fields cannot be null or empty.
      summary: Update Object Category Definition
      tags:
        - Object Category Definition APIs
      operationId: Update Object Category Definition
      parameters:
        - in: path
          name: ObjectCategoryDefinition_Id
          required: true
          description: >-
            Please append a valid Object Category Definition Id To the Request
            URL
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:
              - Application/json
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            All content APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/objectcategoryUpdateObjectCategoryDefinitionrequest
            example:
              request:
                content:
                  description: Updated description
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the object category to be updated.
            - Please refer for supported [metadata](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/objectcategorydefinition/1.0/schema.json)
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation. Object Category Definition  update
            operation was successfuly executed.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryDefinitionCreateErrorResponse
              example:
                id: api.object.category.definition.update
                ver: '4.0'
                ts: '2020-12-10T20:26:07ZZ'
                params:
                  resmsgid: 80aa9310-b749-411c-a13b-8d9f25af389f
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  identifier: 'obj-cat:explanation-content_content_all'
        '400':
          description: >-
            BAD REQUEST. The 'Update  Object Category Definition ' operation
            failed ! The possible reason for failure is that you may have missed
            providing input for a mandatory parameter. 
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryDefinitionCreateErrorResponse
              example:
                id: api.object.category.definition.update
                ver: '3.0'
                ts: '2020-12-17T11:15:46ZZ'
                params:
                  resmsgid: d2ed46be-6846-42e4-b761-c8acdff5954a
                  msgid: null
                  err: ERROR_RESTRICTED_PROP
                  status: failed
                  errmsg: >-
                    Properties in list [identifier, categoryId,
                    targetObjectType, channel, status, objectType] are not
                    allowed in request
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,** Object Category Definition  Update** operation
            failed !The possible reason for failure is that you may have
            provided wrong content id.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryDefinitionCreateErrorResponse
              example:
                id: api.object.category.definition.update
                ver: '3.0'
                ts: '2020-12-12T00:31:16ZZ'
                params:
                  resmsgid: c29ffd8b-d105-4eeb-a875-deaeae2bf5b8
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_21317015414162227213604
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryDefinitionCreateErrorResponse
              example:
                id: api.object.category.create
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/object/category/definition/v1/read/{ObjectCategoryDefinition_Id}':
    get:
      description: >-
        This API is associated with viewing and reading out the master object
        category on the Sunbird Platform .
          - The **_/read/{objectCategoryDefinition_Id}_** endpoint executes request for fetching the contents to be viewed and read.
          - The endpoint for **Update Object Category Definition** is `/object/category/definition/v1/read/{ID}`
          - It points to taxonomy-service - `/object/category/definition/v4/read/{ID}`
          - {...}refers to a section of reject endpoint URL path that needs to be replaced by appropriate Id.
          - You need to provide a valid object category definition Id value in {objectCategoryDefinition_Id} field of API URL.
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      summary: Read ObjectCategoryDefinition
      tags:
        - Object Category Definition APIs
      operationId: Read ObjectCategoryDefinition
      parameters:
        - name: ObjectCategoryDefinition_Id
          in: path
          required: true
          description: Please append a valid ObjectCategoryDefinition Id To the Request URL
          schema:
            type: string
        - name: fields
          in: query
          required: false
          description: List of specific properties to be fetched.
          schema:
            type: string
        - name: Content-Type
          in: header
          required: false
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Read content" operation was successfully
            executed. For all possible metadata, please
            [refer](https://github.com/project-sunbird/knowledge-platform/blob/release-3.5.0/schemas/objectcategorydefinition/1.0/schema.json)
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryDefinitionGetSuccessResponse
              example:
                id: api.object.category.definition.read
                ver: '3.0'
                ts: '2020-12-17T13:25:16ZZ'
                params:
                  resmsgid: e61aee2f-8099-4978-a624-6605360218e1
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  objectCategoryDefinition:
                    identifier: 'obj-cat:checking-account'
                    lastStatusChangedOn: '2020-12-17T09:09:55.687+0000'
                    consumerId: 7411b6bd-89f3-40ec-98d1-229dc64ce77d
                    name: Checking Account
                    channel: in.ekstep
                    lastUpdatedOn: '2020-12-17T11:15:37.740+0000'
                    description: Textbook Unit
                    createdOn: '2020-12-17T09:09:55.687+0000'
                    objectType: ObjectCategory
                    versionKey: '1608203737740'
                    status: Live
                    objectMetadata:
                      config: {}
                      schema: {}
                    languageCode: []
                    forms: {}
        '404':
          description: >-
            RESOURCE NOT FOUND,**ObjectCategoryDefinition Read** operation
            failed !The possible reason for failure is that you may have
            provided wrong content id.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryDefinitionCreateErrorResponse
              example:
                id: api.object.category.definition.read
                ver: '1.0'
                ts: '2020-12-10T20:37:58.223Z'
                params:
                  resmsgid: 96a71df0-3b27-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_1131697204035993601314
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryDefinitionCreateErrorResponse
              example:
                id: api.object.category.create
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /object/category/definition/v1/read:
    post:
      tags:
        - Object Category Definition APIs
      summary: Get Object Category Definition
      description: >-
        This API is associated with creating Object Category Definition on the
        Sunbird Platform.
          - The endpoint for **Create Object Category Definition** is `/object/category/definition/v1/read`
          - It points to taxonomy-service - `/object/category/definition/v4/read`
          - It is mandatory to provide values for parameters marked with *. 
          - Mandatory fields cannot be null or empty.
      operationId: Read Object Category Definition
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource. Possible
            media types can be:
              - application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the payload:
            - JSON
          The body is the representation of the resource object for getting
          object category defintion (an array of parameters which describes the
          object category defintion) 
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/objectcategoryGetObjectCategoryDefinitionRequest
            example:
              request:
                objectCategoryDefinition:
                  name: learning resource
                  objectType: Content
                  channel: 013085024460783616158023
        required: true
      responses:
        '200':
          description: >-
            SUCCESS. The **Create Object Category Definition** operation was
            successful!
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryDefinitionGetSuccessResponse
              example:
                id: api.object.category.definition.read
                ver: '3.0'
                ts: '2020-12-14T14:01:36ZZ'
                params:
                  resmsgid: 8c94cbfa-7bb9-4d81-97f5-6cd1bdbe0ed6
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  objectCategoryDefinition:
                    identifier: 'obj-cat:learning-resource_content_013085024460783616158023'
                    objectMetadata:
                      config: {}
                      schema: {}
                    languageCode: []
                    forms: {}
        '400':
          description: >-
            BAD REQUEST. The **Get Object Category Definition** operation
            failed. You may have missed input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryDefinitionCreateErrorResponse
              example:
                id: api.object.category.definition.read
                ver: '3.0'
                ts: '2020-12-17T19:40:33ZZ'
                params:
                  resmsgid: e1d9d400-bbda-483f-8184-0f506a3649b4
                  msgid: null
                  err: ERR_INVALID_REQUEST
                  status: failed
                  errmsg: Please provide required properties!
                responseCode: CLIENT_ERROR
                result:
                  messages: null
        '404':
          description: >-
            RESOURCE NOT FOUND,**ObjectCategoryDefinition Read** operation
            failed !The possible reason for failure is that you may have
            provided wrong content id.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryDefinitionCreateErrorResponse
              example:
                id: api.object.category.definition.read
                ver: '1.0'
                ts: '2020-12-10T20:37:58.223Z'
                params:
                  resmsgid: 96a71df0-3b27-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: NOT_FOUND
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_1131697204035993601314
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: >-
            INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/objectcategoryObjectCategoryDefinitionCreateErrorResponse
              example:
                id: api.object.category.definition.create
                ver: '1.0'
                ts: '2020-12-10T08:51:51.647Z'
                params:
                  resmsgid: f234a6f0-3ac4-11eb-b0a2-8d5c9f561887
                  msgid: null
                  status: failed
                  err: null
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /cert/v1/template/create:
    post:
      tags:
        - Certificate Template API
      summary: Create certificate template
      description: |-
        This API creates the certificate templates.
           - The **_ /template/create_** endpoint creates a certificate template in the system.
           - All fields marked with an * are mandatory
           - Required fields cannot be null or empty
           - Accepts certificate template name , template , description etc
           - Backend Route: http://cert-service:9000/cert/v1/template/create
      operationId: CreateCertificateTemplate
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The content type entity is the media type of the resource. Possible
            media types can be Application/json
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body refers to the format of the request. The body contains
          metadata about the request to add the certificate template.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/certificatetemplateapiApiRequest'
                - $ref: >-
                    #/components/schemas/certificatetemplateapiAddCertificateTemplateRequest
            examples:
              a:
                summary: Template Create Request
                value:
                  request:
                    certificate:
                      template:
                        identifier: template_01_pdf_stag
                        name: Course completion pdf certificate staging
                        template: >-
                          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_stag/artifact/cbse-certificate.zip
                        params:
                          - issuer.name
                          - issuer.url
              b:
                summary: Mandatory Param Missing Request
                value:
                  request:
                    certificate:
                      template:
                        identifier: template_01_pdf_stag
                        params:
                          - issuer.name
                          - issuer.url
        required: true
      responses:
        '200':
          description: >-
            OK ! Operation successful. The **Create certificate template**
            operation was executed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  certificatetemplateapiApiResponse:
                    $ref: '#/components/schemas/certificatetemplateapiApiResponse'
                  certificatetemplateapiSuccessResponse:
                    $ref: '#/components/schemas/certificatetemplateapiSuccessResponse'
              example:
                id: null
                ver: null
                ts: null
                params: null
                responseCode: OK
                result:
                  identifier: templateId
        '400':
          description: >-
            BAD REQUEST. The "Create certificate template" operation failed.
            Input for a mandatory parameter may be missing.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/certificatetemplateapiAddCertificateTemplateErrorResponse
              examples:
                a:
                  summary: Mandatory Param Missing Response
                  value:
                    id: cert.v1.template.create
                    ver: v1
                    ts: 1606719505532
                    responseCode: CLIENT_ERROR
                    result:
                      message: Request is empty.
                b:
                  summary: Mandatory Param Name Missing Response
                  value:
                    id: cert.v1.template.create
                    ver: v1
                    ts: 1606719505532
                    responseCode: CLIENT_ERROR
                    result:
                      message: name or template missing in request.
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/certificatetemplateapi500ServerError'
              example:
                id: cert.v1.template.create
                ver: v1
                ts: 1601451354559
                params:
                  msgid: string
                  status: string
                  resmsgid: string
                responseCode: SERVER_ERROR
                result:
                  message: 'Process failed,please try again later.'
      security:
        - bearer: []
  '/cert/v1/template/update/{templateId}':
    patch:
      tags:
        - Certificate Template API
      summary: update the certificate template
      description: |-
        This API updates the certificate templates.
           - The **_ /template/update_** endpoint updates the certificate template.
           - All fields marked with an * are mandatory
           - Required fields cannot be null or empty
           - Backend Route: http://cert-service:9000/cert/v1/template/update/:templateId
           
      operationId: UpdateCertificateTemplate
      parameters:
        - name: templateId
          in: path
          description: Append a valid template ID To the Request URL
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be Application/json
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          The body refers to the format of the request. The body contains
          metadata about the request to update the certificate template.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/certificatetemplateapiApiRequest'
                - $ref: >-
                    #/components/schemas/certificatetemplateapiUpdateCertificateTemplateRequest
            example:
              request:
                certificate:
                  template:
                    name: Course completion pdf certificate staging
                    template: >-
                      https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_stag/artifact/cbse-certificate.zip
                    params:
                      - issuer.name
                      - issuer.url
        required: true
      responses:
        '200':
          description: >-
            OK ! Operation successful."Update Certificate template" operation
            was executed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  certificatetemplateapiApiResponse:
                    $ref: '#/components/schemas/certificatetemplateapiApiResponse'
                  certificatetemplateapiSuccessResponse:
                    $ref: '#/components/schemas/certificatetemplateapiSuccessResponse'
              example:
                id: null
                ver: null
                ts: null
                params: null
                responseCode: OK
                result:
                  identifier: template_01_pdf_stag
        '400':
          description: >-
            BAD REQUEST. The "Update Certificate template" operation failed.
            Input for a mandatory parameter may be missing.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/certificatetemplateapiUpdateCertificateTemplateErrorResponse
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/certificatetemplateapi500ServerError'
              example:
                id: cert.v1.template.update
                ver: v1
                ts: 1601451354559
                params:
                  msgid: string
                  status: string
                  resmsgid: string
                responseCode: SERVER_ERROR
                result:
                  message: 'Process failed,please try again later.'
      security:
        - bearer: []
  '/cert/v1/template/read/{templateId}':
    get:
      tags:
        - Certificate Template API
      summary: read the certificate template
      description: |-
        This API fetches the certificate templates.
           - The **_ /template/read_** endpoint fetches the certificate template.
           - All fields marked with an * are mandatory
           - Required fields cannot be null or empty
           - Backend Route: http://cert-service:9000/cert/v1/template/read/:templateId
      operationId: GetCertificateTemplate
      parameters:
        - name: templateId
          in: path
          description: Append a valid template ID To the Request URL
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be Application/json
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Operation successful."Read Certificate template" operation was
            executed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  certificatetemplateapiApiResponse:
                    $ref: '#/components/schemas/certificatetemplateapiApiResponse'
                  certificatetemplateapiGetCertificateTemplateResponse:
                    $ref: >-
                      #/components/schemas/certificatetemplateapiGetCertificateTemplateResponse
              example:
                id: null
                ver: null
                ts: null
                params: null
                responseCode: OK
                result:
                  certificate:
                    template:
                      template: >-
                        https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_stag/artifact/cbse-certificate.zip
                      identifier: template_01_pdf_stag
                      name: ''
                      params:
                        - issuer.name
                        - issuer.url
        '400':
          description: >-
            BAD REQUEST. The "Read Certificate template" operation failed. Input
            for a mandatory parameter may be missing.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/certificatetemplateapiReadCertificateTemplateErrorResponse
              example:
                id: null
                ver: null
                ts: null
                params: null
                responseCode: RESOURCE_NOT_FOUND
                result:
                  message: >-
                    Cert template not found for the given identifier:
                    do_213149680075849728113
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/certificatetemplateapi500ServerError'
              example:
                id: cert.v1.template.read
                ver: v1
                ts: 1601451354559
                params:
                  msgid: string
                  status: string
                  resmsgid: string
                responseCode: SERVER_ERROR
                result:
                  message: 'Process failed,please try again later.'
      security:
        - bearer: []
  /data/v1/experiement/create:
    post:
      tags:
        - expirement V1
      summary: CreateExperiment
      description: >-
        This API is used for create a new experiment based on particular user
        filters such as organisation, board, medium etc. or device filters such
        as device id, device location state/district, first access dates etc.
           - The endpoint for ** Experiment Create** is `/create
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: CreateExperiment
      requestBody:
        description: Represents the body and formdata parameters of the new experiment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/experimentapiCreateExperiment'
        required: true
      responses:
        '200':
          description: An example for successful experiment creation
          headers: {}
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/experimentapiCreateExperiment-SuccessResponse
              examples:
                New_Experiment:
                  summary: With new experiment id
                  description: >-
                    New experiment gets created when no experiment with same
                    ExpId exists
                  value:
                    id: ekstep.analytics.experiement.create
                    ver: v1
                    ts: '2020-11-30T07:17:22.982+00:00  '
                    params:
                      resmsgid: 565b07a3a-d59f-47e6-b3d3-76cc5866411c
                      status: successful
                    responseCode: OK
                    result:
                      stats: {}
                      request: '#/components/schemas/Experiment-Request/example'
                      created_on: 1606818148268
                      last_updated: 1606818148268
                      status: SUBMITTED
                      status_msg: Experiment successfully submitted
                Experiment_Already_Exists:
                  summary: With old experiment id
                  description: >-
                    experiment doesnt get created or updated when experiment
                    with same ExpId already Exists
                  value:
                    id: ekstep.analytics.experiement.create
                    ver: v1
                    ts: '2020-11-23 06:42:39:001+0000'
                    params:
                      resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
                      status: successful
                    responseCode: OK
                    result:
                      expResponse:
                        request: '#/components/schemas/Experiment-Request/example'
                        err: Failed
                        errorMsg: ExperimentId already exists.
        '400':
          description: Bad Request for Create Experiment API
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/experimentapiCreateExperiment-FailedResponse
              examples:
                EmptyRequest:
                  summary: With no request field in body
                  description: Response example when request is missing
                  value:
                    $ref: >-
                      #/components/schemas/experimentapiCreateExperiment-FailedResponse/example
                RequiredRequestFieldsEmpty:
                  summary: 'With empty request fields- ex: request-{}'
                  description: >-
                    Response example when requried fields expId, name, data etc
                    in the request field are missing
                  value:
                    id: ekstep.analytics.experiement.create
                    ver: v1
                    ts: '2020-11-23 06:42:39:001+0000'
                    params:
                      resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
                      status: failed
                      err: CLIENT_ERROR
                      errorMsg:
                        status: failed
                        request.expId: Experiment Id should not be empty
                        request.name: Experiment Name should not be  empty
                        request.createdBy: Created By should not be empty
                        request.data: Data should not be empty
                    responseCode: CLIENT_ERROR
                    result: null
                RequiredDataDateFields:
                  summary: With startdate and enddate missing in data field
                  description: Response example with date fields are missing in data fields
                  value:
                    id: ekstep.analytics.experiement.create
                    ver: v1
                    ts: '2020-11-23 06:42:39:001+0000'
                    params:
                      resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
                      status: failed
                      err: CLIENT_ERROR
                      errorMsg:
                        status: failed
                        data.startDate: Experiment Start_Date should not be empty
                        data.endDate: Experiment End_Date should not be empty
                    responseCode: CLIENT_ERROR
                    result: null
                InvalidDateFields:
                  summary: With invalid dates for startdate and enddate
                  description: Response example start date and end date are invalid
                  value:
                    id: ekstep.analytics.experiement.create
                    ver: v1
                    ts: '2020-11-23 06:42:39:001+0000'
                    params:
                      resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
                      status: failed
                      err: CLIENT_ERROR
                      errorMsg:
                        status: failed
                        data.endDate: End_Date should be greater than today's date.
                    responseCode: CLIENT_ERROR
                    result: null
                StartEndDateValidation:
                  summary: With startdate greater than enddate
                  description: Response example start date is greater than end date
                  value:
                    id: ekstep.analytics.experiement.create
                    ver: v1
                    ts: '2020-11-23 06:42:39:001+0000'
                    params:
                      resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
                      status: failed
                      err: CLIENT_ERROR
                      errorMsg:
                        status: failed
                        data.startDate: >-
                          Date range should not be -ve. Please check your
                          start_date & end_date
                    responseCode: CLIENT_ERROR
                    result: null
        '500':
          description: Internal Server Error example for create experiment API
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/experimentapiExperimentAPI-InternalServerError
              example:
                id: ekstep.analytics.experiment.create
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  '/data/v1/experiement/get/''{experiment-id}''':
    get:
      tags:
        - expirement V1
      summary: GetExperiment
      description: >-
        The get experiment API is used for retrieving the details about an
        existing experiment using the experiment id
           - The endpoint for ** Get Experiment** is `/{experiment-id}`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: GetExperiment
      parameters:
        - name: experiment-id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: >-
            An example for a successful retrieval of an existing experiment
            using the Get Experiment API.
          headers: {}
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/experimentapiGetExperiment-SuccessResponse
              examples:
                Existing_Experiment:
                  summary: With available experiment id
                  value:
                    id: ekstep.analytics.experiement.get
                    ver: v1
                    ts: '2020-11-23 06:42:39:001+0000'
                    params:
                      resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
                      status: successful
                    responseCode: OK
                    result:
                      stats:
                        devicesMatched: 10000
                      request:
                        expId: D1234
                        name: DEVICE_EXP
                        createdBy: USER2
                        description: >-
                          Experiment to redirect all users with device_state as
                          Karnataka and first_access in the range of the month
                          of October 2019 to a different app landing page.
                        criteria:
                          type: device
                          filters:
                            - name: state
                              operator: IN
                              value:
                                - KARNATAKA
                            - name: first_access
                              operator: RANGE
                              value:
                                start: '2019-10-01'
                                end: '2019-10-30'
                        data:
                          startDate: 2020-11-01T00:00:00.000Z
                          endDate: 2020-11-05T00:00:00.000Z
                          key: 24-32jewfjewout0sdf
                          client: app
                    created_date: 1602062500777
                    last_updated: 1602062542509
                    status: ACTIVE
                    status_msg: Experiment Mapped Sucessfully
                IF_Experiment_DOESNT_EXIST:
                  summary: With new experiment id
                  description: >-
                    Get Experiment fails when experiment with experiment id
                    doesnt exists
                  value:
                    id: ekstep.analytics.experiment.get
                    ver: v1
                    ts: '2020-11-30T07:17:22.982+00:00  '
                    params:
                      err: OK
                      resmsgid: 25b07a3a-d59f-47e6-b3d3-76cc5866411c
                      status: failed
                      errmsg: no experiment available with the given experimentid
                    responseCode: OK
                    result: null
        '500':
          description: Internal Server Error example for Get Experiment API
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/experimentapiExperimentAPI-InternalServerError
              example:
                id: ekstep.analytics.experiment.submit
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
  /org/v2/preferences/read:
    post:
      tags:
        - TenantPreferenceAPIs
      summary: TenantPreferenceRead
      operationId: TenantPreferenceRead
      description: >-
        This API is used to get data that is saved as tenant preference for an
        organisation
           - The endpoint for **Update Consent** is `/org/v2/preferences/read`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            To make use of this API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          required: true
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          schema:
            type: string
        - name: x-authenticated-for
          in: header
          required: false
          description: >-
            Managed User token of registered MUA user performing given API
            request.
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/tenantpreferenceapiTenantPreferenceReadRequest
            example:
              request:
                orgId: all
                key: selfdeclarations
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/tenantpreferenceapiTenantPreferenceReadSuccess
              example:
                id: api.org.preferences.read
                ver: v2
                ts: '2020-11-25 19:32:15:113+0000'
                params:
                  resmsgid: null
                  msgid: cb39f64aeb15c9ac0afdb5d2a8bc634b
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response:
                    updatedBy: null
                    data: Tenant preference data
                    createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
                    updatedOn: null
                    createdOn: 1597330354157
                    key: selfdeclarations
                    orgId: all
        '400':
          description: >-
            BAD REQUEST. The possible reason for failure is that you may have
            missed providing input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantpreferenceapiBadRequest'
              example:
                id: api.org.preferences.read
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: BAD_REQUEST
                  status: BAD_REQUEST
                  errmsg: Bad Request.
                responseCode: BAD_REQUEST
                result: {}
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantpreferenceapiUnauthorizedRead'
              example:
                id: api.org.preferences.read
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: UNAUTHORIZED_USER
                  status: SERVER_ERROR
                  errmsg: You are not authorized.
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: >-
            RESOURSE NOT FOUND. The possible reason for failure is the requested
            resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantpreferenceapiResourceNotFoundRead'
              example:
                id: api.org.preferences.read
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: PREFERENCE_NOT_FOUND
                  status: PREFERENCE_NOT_FOUND
                  errmsg: preference selfdeclarations not found in the org all.
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantpreferenceapiServerErrorRead'
              example:
                id: api.org.preferences.read
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: INTERNAL_SERVER_ERROR
                  status: INTERNAL_SERVER_ERROR
                  errmsg: INTERNAL_SERVER_ERROR
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
  /org/v2/preferences/create:
    post:
      tags:
        - TenantPreferenceAPIs
      summary: TenantPreferenceCreate
      operationId: TenantPreferenceCreate
      description: >-
        This API is used to save data as per the tenant preference for an
        organisation
           - The endpoint for **Update Consent** is `/org/v2/preferences/create`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            To make use of this API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          required: true
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          schema:
            type: string
        - name: x-authenticated-for
          in: header
          required: false
          description: >-
            Managed User token of registered MUA user performing given API
            request.
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/tenantpreferenceapiTenantPreferenceCreateRequest
            example:
              request:
                orgId: all
                key: selfdeclarations
                data: Tenant preference data
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/tenantpreferenceapiTenantPreferenceCreateSuccess
              example:
                id: api.org.preferences.create
                ver: v2
                ts: '2020-11-26 17:49:14:722+0000'
                params:
                  resmsgid: null
                  msgid: cc4678bef11ed973caae3760385a3af0
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
                  orgId: all
                  key: selfdeclarations
        '400':
          description: >-
            BAD REQUEST. The possible reason for failure is that you may have
            missed providing input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantpreferenceapiBadRequest'
              example:
                id: api.org.preferences.create
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: BAD_REQUEST
                  status: BAD_REQUEST
                  errmsg: Bad Request.
                responseCode: BAD_REQUEST
                result: {}
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantpreferenceapiUnauthorizedRead'
              example:
                id: api.org.preferences.create
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: UNAUTHORIZED_USER
                  status: SERVER_ERROR
                  errmsg: You are not authorized.
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: >-
            RESOURSE NOT FOUND. The possible reason for failure is the requested
            resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantpreferenceapiResourceNotFoundRead'
              example:
                id: api.org.preferences.create
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: PREFERENCE_NOT_FOUND
                  status: PREFERENCE_NOT_FOUND
                  errmsg: preference selfdeclarations not found in the org all.
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantpreferenceapiServerErrorRead'
              example:
                id: api.org.preferences.create
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: INTERNAL_SERVER_ERROR
                  status: INTERNAL_SERVER_ERROR
                  errmsg: INTERNAL_SERVER_ERROR
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
  /org/v2/preferences/update:
    patch:
      tags:
        - TenantPreferenceAPIs
      summary: TenantPreferenceUpdate
      operationId: TenantPreferenceUpdate
      description: >-
        This API is used to update data as per the tenant preference for an
        organisation
           - The endpoint for **Update Consent** is `/org/v2/preferences/update`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            To make use of this API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          required: true
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          schema:
            type: string
        - name: x-authenticated-for
          in: header
          required: false
          description: >-
            Managed User token of registered MUA user performing given API
            request.
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/tenantpreferenceapiTenantPreferenceUpdateRequest
            example:
              request:
                orgId: all
                key: selfdeclarations
                data: Tenant preference data
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/tenantpreferenceapiTenantPreferenceUpdateSuccess
              example:
                id: api.org.preferences.update
                ver: v2
                ts: '2020-11-25 19:33:57:441+0000'
                params:
                  resmsgid: null
                  msgid: 8980371bc3521fe2a154e13e4772e493
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            BAD REQUEST. The possible reason for failure is that you may have
            missed providing input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantpreferenceapiBadRequest'
              example:
                id: api.org.preferences.update
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: BAD_REQUEST
                  status: BAD_REQUEST
                  errmsg: Bad Request.
                responseCode: BAD_REQUEST
                result: {}
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantpreferenceapiUnauthorized'
              example:
                id: api.org.preferences.update
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: UNAUTHORIZED_USER
                  status: SERVER_ERROR
                  errmsg: You are not authorized.
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: >-
            RESOURSE NOT FOUND. The possible reason for failure is the requested
            resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantpreferenceapiResourceNotFound'
              example:
                id: api.org.preferences.update
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: PREFERENCE_NOT_FOUND
                  status: PREFERENCE_NOT_FOUND
                  errmsg: preference selfdeclarations not found in the org all.
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenantpreferenceapiServerError'
              example:
                id: api.org.preferences.update
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: INTERNAL_SERVER_ERROR
                  status: INTERNAL_SERVER_ERROR
                  errmsg: INTERNAL_SERVER_ERROR
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
  /user/v1/consent/update:
    post:
      tags:
        - Consent APIs
      summary: Consent Update
      operationId: Consent Update
      description: >-
        This API is used to update user consent for sharing the PII to an
        organisation, course or collection
           - The endpoint for **Update Consent** is `/user/v1/consent/update`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            To make use of this API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          required: true
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          schema:
            type: string
        - name: x-authenticated-for
          in: header
          required: false
          description: >-
            Managed User token of registered MUA user performing given API
            request.
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userconsentapiuserconsentupdaterequest'
            examples:
              RequestUpdateConsentToActiveForCourse:
                value:
                  request:
                    consent:
                      status: ACTIVE
                      userId: e94ad69a-9096-491c-b107-782a67760a2b
                      consumerId: 0126632859575746566
                      objectId: do_31313966505806233613406
                      objectType: Collection
              RequestUpdateConsentToRevokedForCourse:
                value:
                  request:
                    consent:
                      status: REVOKED
                      userId: e94ad69a-9096-491c-b107-782a67760a2b
                      consumerId: 0126632859575746566
                      objectId: do_31313966505806233613406
                      objectType: Collection
              RequestUpdateConsentToActiveForOrganication:
                value:
                  request:
                    consent:
                      status: ACTIVE
                      userId: e94ad69a-9096-491c-b107-782a67760a2b
                      consumerId: 0126632859575746566
                      objectId: 0126632859575746566
                      objectType: Organisation
              RequestUpdateConsentToRevokedForOrganication:
                value:
                  request:
                    consent:
                      status: REVOKED
                      userId: e94ad69a-9096-491c-b107-782a67760a2b
                      consumerId: 0126632859575746566
                      objectId: 0126632859575746566
                      objectType: Organisation
        required: true
      responses:
        '200':
          description: Consent update success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userconsentapiConsentUpdateSuccess'
              example:
                id: api.user.consent.update
                ver: v1
                ts: '2020-09-17 14:07:15:545+0000'
                params:
                  resmsgid: null
                  msgid: 3d1afc39-9350-4565-afb3-735dbccd19c7
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  consent:
                    userId: e94ad69a-9096-491c-b107-782a67760a2b
                  message: User Consent updated successfully.
        '400':
          description: >-
            BAD REQUEST. The possible reason for failure is that you may have
            missed providing input for a mandatory parameter.
          content:
            application/json:
              example: Bad Request
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userconsentapiUnauthorized'
              example:
                id: api.user.consent.update
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: UNAUTHORIZED_USER
                  status: SERVER_ERROR
                  errmsg: You are not authorized.
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: >-
            RESOURSE NOT FOUND. The possible reason for failure is the requested
            resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userconsentapiResourceNotFound'
              example:
                id: api.user.consent.update
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: INVALID_ORG_ID
                  status: INVALID_ORG_ID
                  errmsg: INVALID_ORG_ID
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userconsentapiServerError'
              example:
                id: api.user.consent.update
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: INTERNAL_SERVER_ERROR
                  status: INTERNAL_SERVER_ERROR
                  errmsg: INTERNAL_SERVER_ERROR
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
  /user/v1/consent/read:
    post:
      tags:
        - Consent APIs
      summary: UserConsentRead
      operationId: UserConsentRead
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            To make use of this API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          required: true
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          schema:
            type: string
        - name: x-authenticated-for
          in: header
          required: false
          description: >-
            Managed User token of registered MUA user performing given API
            request.
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userconsentapiuserconsentreadrequest'
            examples:
              RequestReadConsentForCourse:
                value:
                  request:
                    consent:
                      filters:
                        userId: 5a8a3f2b-3409-42e0-9001-f913bc0fde31
                        consumerId: 0126632859575746566
                        objectId: do_31313966505806233613406
              RequestReadConsentForOrganisation:
                value:
                  request:
                    consent:
                      filters:
                        userId: 5a8a3f2b-3409-42e0-9001-f913bc0fde31
                        consumerId: 0126632859575746566
                        objectId: 0126632859575746566
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userconsentapiConsentReadSuccess'
              examples:
                ReadConsentResponseForCourse:
                  value:
                    id: api.user.consent.read
                    ver: v1
                    ts: '2020-09-17 14:11:19:029+0000'
                    params:
                      resmsgid: null
                      msgid: dfb32305-cb9f-470a-b52b-fe492ca89415
                      err: null
                      status: success
                      errmsg: null
                    responseCode: OK
                    result:
                      consents:
                        - userId: 5a8a3f2b-3409-42e0-9001-f913bc0fde31
                          consumerId: 0126632859575746566
                          status: ACTIVE
                          objectType: Collection
                          objectId: do_31313966505806233613406
                ReadConsentResponseForOrganisation:
                  value:
                    id: api.user.consent.read
                    ver: v1
                    ts: '2020-09-17 14:11:19:029+0000'
                    params:
                      resmsgid: null
                      msgid: dfb32305-cb9f-470a-b52b-fe492ca89415
                      err: null
                      status: success
                      errmsg: null
                    responseCode: OK
                    result:
                      consents:
                        - userId: 5a8a3f2b-3409-42e0-9001-f913bc0fde31
                          consumerId: 0126632859575746566
                          status: ACTIVE
                          objectType: Organisation
                          objectId: 0126632859575746566
        '400':
          description: >-
            BAD REQUEST. The possible reason for failure is that you may have
            missed providing input for a mandatory parameter.
          content:
            application/json:
              example: Bad Request
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userconsentapiUnauthorizedRead'
              example:
                id: api.user.consent.read
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: UNAUTHORIZED_USER
                  status: SERVER_ERROR
                  errmsg: You are not authorized.
                responseCode: CLIENT_ERROR
                result: {}
        '404':
          description: >-
            RESOURSE NOT FOUND. The possible reason for failure is the requested
            resource is not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userconsentapiResourceNotFoundRead'
              example:
                id: api.user.consent.read
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: USER_CONSENT_NOT_FOUND
                  status: USER_CONSENT_NOT_FOUND
                  errmsg: User consent not found.
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userconsentapiServerErrorRead'
              example:
                id: api.user.consent.read
                ver: v1
                ts: '2020-11-25 03:47:00:682+0000'
                params:
                  resmsgid: null
                  msgid: 3714a8e54fc515c1e8dccf06449cf677
                  err: INTERNAL_SERVER_ERROR
                  status: INTERNAL_SERVER_ERROR
                  errmsg: INTERNAL_SERVER_ERROR
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
  /course/v1/enrol:
    post:
      tags:
        - Course Enrolment APIs
      summary: Course Enrol
      description: >+
        The API associated with user enrolment into a courseBatch.

        The endpoint for Course Enrol is /enrol


        The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.

      operationId: CourseEnrol
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{api-key}}'
        - name: x-authenticated-user-token
          in: header
          description: The alphanumeric string for accessing the API
          required: true
          style: simple
          schema:
            type: string
            example: '{{authToken}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/courseenrolmentapiCourseEnrolRequest'
            example:
              request:
                courseId: '{{course-id}}'
                batchId: '{{batch-id}}'
                userId: '{{user-id}}'
        required: true
      responses:
        '200':
          description: SUCCESS. The "Course Enrol Request" operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/courseenrolmentapiCourseEnrol-success'
              example:
                id: api.course.enroll
                ver: v1
                ts: '2020-12-03 04:24:19:186+0000'
                params:
                  resmsgid: null
                  msgid: d8e54177-acb2-4351-8dcc-a7e6fc5c8a2f
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/courseenrolmentapiCourseBatchUserRemove-Enrollmenttypevalidation
              example:
                id: api.course.enroll
                ver: v1
                ts: '2020-12-03 04:44:14:386+0000'
                params:
                  resmsgid: null
                  msgid: 75199913-1346-49cc-b486-0810ce706a4e
                  err: INVALID_COURSE_BATCH_ID
                  status: INVALID_COURSE_BATCH_ID
                  errmsg: 'Invalid course batch id '
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/courseenrolmentapiUserEnrolmentList-500InternalServerError
              example:
                id: api.course.enroll
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /course/v1/unenrol:
    post:
      tags:
        - Course Enrolment APIs
      summary: Course Unenrol
      description: >+
        The Course Unenrol API is associated with unenrol of a user from a
        CourseBatch.

        The endpoint for Course Unenrol is /unenrol


        The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.

      operationId: CourseUnenrol
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{api-key}}'
        - name: x-authenticated-user-token
          in: header
          description: The alphanumeric string for accessing the API
          required: true
          style: simple
          schema:
            type: string
            example: '{{authToken}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/courseenrolmentapiCourseUnenrolRequest'
            example:
              request:
                courseId: '{{course-id}}'
                batchId: '{{batch-id}}'
                userId: '{{user-id}}'
        required: true
      responses:
        '200':
          description: SUCCESS. The "Course Unenrol Request" operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/courseenrolmentapiCourseUnenrol-success'
              example:
                id: api.course.unenroll
                ver: v1
                ts: '2020-12-03 06:33:38:843+0000'
                params:
                  resmsgid: null
                  msgid: 728efae3-8352-4886-8cb2-34b7b3fc41cc
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/courseenrolmentapiCourseBatchUserRemove-Enrollmenttypevalidation
              example:
                id: api.course.unenroll
                ver: v1
                ts: '2020-12-03 04:08:02:757+0000'
                params:
                  resmsgid: null
                  msgid: 9837db38-2eff-4415-85d1-5404ddc16892
                  err: COURSE_BATCH_ALREADY_COMPLETED
                  status: COURSE_BATCH_ALREADY_COMPLETED
                  errmsg: Course batch is already completed.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/courseenrolmentapiUserEnrolmentList-500InternalServerError
              example:
                id: api.course.unenroll
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/course/v1/user/enrollment/list/{user-id}':
    get:
      tags:
        - Course Enrolment APIs
      summary: UserEnrolment List
      description: >
        The UserEnrolmentList api provides the detail of a user's all enrolled
        CourseBatches

        The endpoint for UserEnrolment List is /user/enrollment/list/{{user-id}}


        The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: UserEnrolmentList
      parameters:
        - name: orgdetails
          in: query
          description: Org details related with course
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 'orgName,email'
        - name: licenseDetails
          in: query
          description: License details related with course
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 'name,description,url'
        - name: fields
          in: query
          description: Different course related details can be passed
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: 'contentType,topic,name,channel'
        - name: batchDetails
          in: query
          description: Batch details can be passed to filter
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: >-
              name,endDate,startDate,status,enrollmentType,createdBy,certificates
        - name: cache
          in: query
          description: >-
            The batch data got updated in cache after sometime to get updated
            details immediately we can pass cache false
          required: false
          style: form
          explode: true
          schema:
            type: string
            example: cache=false
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:-

            Application/json
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{api-key}}'
        - name: x-authenticated-user-token
          in: header
          description: The alphanumeric string for accessing the API
          required: true
          style: simple
          schema:
            type: string
            example: '{{authToken}}'
        - name: user-id
          in: path
          description: Id of user for whom enrolment details we want
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: SUCCESS. The "User Enrolment List" operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/courseenrolmentapiUserEnrolmentList-Success
              example:
                id: api.user.courses.list
                ver: v1
                ts: '2020-12-03 06:56:38:376+0000'
                params:
                  resmsgid: null
                  msgid: 83f3347f-0d7a-4369-bde2-daae13aa5938
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  courses:
                    - dateTime: 1594191696100
                      lastReadContentStatus: 2
                      enrolledDate: '2020-07-08 07:01:36:100+0000'
                      addedBy: null
                      contentId: do_11305961646828748812224
                      active: true
                      description: Enter description for Course
                      courseLogoUrl: >-
                        https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11305961646828748812224/artifact/06_maths_book_1566813333849_1580197829074.thumb.jpg
                      batchId: 01305961938705612812
                      userId: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
                      content:
                        ownershipType:
                          - createdBy
                        copyright: Sunbird
                        channel: b00bc992ef25f1a9a8d63291e20efc8d
                        downloadUrl: >-
                          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
                        organisation:
                          - Sunbird
                        language:
                          - English
                        mimeType: application/vnd.ekstep.content-collection
                        variants:
                          online:
                            ecarUrl: >-
                              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511612_do_11305961646828748812224_1.0_online.ecar
                            size: 4936
                          spine:
                            ecarUrl: >-
                              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
                            size: 76289
                        leafNodes:
                          - do_11305605610466508811
                        c_sunbird_dev_private_batch_count: 0
                        objectType: Content
                        appIcon: >-
                          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11305961646828748812224/artifact/06_maths_book_1566813333849_1580197829074.thumb.jpg
                        children:
                          - do_11305605610466508811
                        primaryCategory: Course
                        appId: dev.sunbird.portal
                        contentEncoding: gzip
                        lockKey: 097e65a0-9c65-4198-b65c-269de9ae6072
                        totalCompressedSize: 499149
                        mimeTypesCount: >-
                          {"application/vnd.ekstep.content-collection":1,"application/vnd.ekstep.ecml-archive":1}
                        contentType: Course
                        trackable:
                          enabled: 'Yes'
                          autoBatch: 'Yes'
                        identifier: do_11305961646828748812224
                        lastUpdatedBy: 8454cb21-3ce9-4e30-85b5-fade097880d8
                        audience:
                          - Teacher
                        visibility: Default
                        toc_url: >-
                          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11305961646828748812224/artifact/do_11305961646828748812224_toc.json
                        contentTypesCount: '{"CourseUnit":1,"Resource":1}'
                        consumerId: 6533af82-f38b-429a-bcfb-681ed02a62e3
                        childNodes:
                          - do_11305961679918694412225
                          - do_11305605610466508811
                        mediaType: content
                        osId: org.ekstep.quiz.app
                        graph_id: domain
                        nodeType: DATA_NODE
                        lastPublishedBy: Ekstep
                        version: 2
                        license: CC BY 4.0
                        prevState: Draft
                        size: 76289
                        lastPublishedOn: 2020-07-08T06:58:31.132Z
                        IL_FUNC_OBJECT_TYPE: Content
                        name: Test-auto-certificate-8thjuly
                        status: Live
                        code: org.sunbird.DuGnxI
                        credentials:
                          enabled: 'Yes'
                        prevStatus: Processing
                        description: Enter description for Course
                        idealScreenSize: normal
                        posterImage: >-
                          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11294498061374259215/artifact/06_maths_book_1566813333849_1580197829074.jpg
                        createdOn: 2020-07-08T06:57:43.417Z
                        reservedDialcodes: '{"U6K9M6":0}'
                        batches:
                          - createdFor:
                              - ORG_001
                            endDate: null
                            name: Test-auto-certificate-8thjuly
                            batchId: 01305961938705612812
                            enrollmentType: open
                            enrollmentEndDate: null
                            startDate: 2020-07-08T00:00:00.000Z
                            status: 1
                          - createdFor:
                              - ORG_001
                            endDate: null
                            name: Test-auto-certificate-8thjuly
                            batchId: 01306956038530662417
                            enrollmentType: open
                            enrollmentEndDate: null
                            startDate: 2020-07-22T00:00:00.000Z
                            status: 1
                        copyrightYear: 2020
                        contentDisposition: inline
                        lastUpdatedOn: 2020-07-08T06:58:30.585Z
                        licenseterms: >-
                          By creating and uploading content on DIKSHA, you
                          consent to publishing this content under the Creative
                          Commons Framework, specifically under the CC-BY-SA 4.0
                          license.
                        SYS_INTERNAL_LAST_UPDATED_ON: 2020-07-23T12:24:29.500Z
                        dialcodeRequired: 'No'
                        createdFor:
                          - ORG_001
                        lastStatusChangedOn: 2020-07-08T06:58:31.950Z
                        creator: Mentor First User
                        IL_SYS_NODE_TYPE: DATA_NODE
                        os:
                          - All
                        pkgVersion: 1
                        versionKey: 1594191510585
                        idealScreenDensity: hdpi
                        framework: TPD
                        depth: 0
                        s3Key: >-
                          ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
                        dialcodes:
                          - U6K9M6
                        createdBy: 8454cb21-3ce9-4e30-85b5-fade097880d8
                        compatibilityLevel: 4
                        leafNodesCount: 1
                        IL_UNIQUE_ID: do_11305961646828748812224
                        resourceType: Course
                        node_id: 452442
                        c_sunbird_dev_open_batch_count: 2
                      contentStatus:
                        do_11305605610466508811: 2
                      issuedCertificates: []
                      completionPercentage: 100
                      courseName: Test-auto-certificate-8thjuly
                      certificates:
                        - id: fe2aadc6-5065-460a-98ed-4de17bc13f62
                          lastIssuedOn: 2020-07-22T12:57:44.335Z
                          name: Course completion certificate prad
                          token: A8T4Q7
                          url: >-
                            https://dev.sunbirded.org/certs/ORG_001_01305961938705612812/eedc6a60-cc1a-11ea-bff5-c98df349f522.pdf
                      completedOn: 1595422613486
                      leafNodesCount: 1
                      progress: 1
                      lastReadContentId: do_11305605610466508811
                      courseId: do_11305961646828748812224
                      collectionId: do_11305961646828748812224
                      status: 2
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/courseenrolmentapiUserEnrolmentList-500InternalServerError
              example:
                id: api.user.courses.list
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  '/v3/device/register/{device-id}':
    post:
      tags:
        - Device Register API(s)
      summary: Register device to system with details
      description: |-
        This API is used to capture device and user location details.
           - The endpoint for **Device Register** is `/register`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: StatePost
      parameters:
        - name: device-id
          in: path
          description: device unique id
          required: true
          style: simple
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the type of the request. Possible types
            are:- 
              - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Represents the body and parameters of the device register API. Request
          example is
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/deviceapiApiRequest'
                - $ref: '#/components/schemas/deviceapiRegisterDeviceRequest'
            examples:
              a:
                summary: With User Declared location data
                description: Valid request with both dspec and user declared location data
                value:
                  request:
                    deviceapidspec:
                      idisk: 11
                      cap: []
                      mem: -1
                      os: Android 6.0
                      cpu: 'abi: armeabi-v7a  ARMv7 Processor rev 4 (v7l)'
                      scrn: 5
                      sims: -1
                      id: 2d994b152d314aca
                      camera: '9.0,5.0'
                      edisk: 11
                      make: Motorola XT1706
                    userDeclaredLocation:
                      state: Karnataka
                      district: BENGALURU URBAN SOUTH
              b:
                summary: Without User Declared location data
                description: Valid request with only dspec
                value:
                  request:
                    deviceapidspec:
                      idisk: 11
                      cap: []
                      mem: -1
                      os: Android 6.0
                      cpu: 'abi: armeabi-v7a  ARMv7 Processor rev 4 (v7l)'
                      scrn: 5
                      sims: -1
                      id: 2d994b152d314aca
                      camera: '9.0,5.0'
                      edisk: 11
                      make: Motorola XT1706
        required: true
      responses:
        '200':
          description: SUCCESS. The "Device Register" operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceapiDeviceRegisterResponse'
        '401':
          description: >-
            Unauthorized, **Device Register** operation failed! The possible
            reason for failure is that you may have missed providing
            authorization token in header
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '500':
          description: >-
            INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content:
            text/plain:
              schema:
                type: string
                example: An unexpected error occurred
  '/v3/device/profile/{device-id}':
    get:
      tags:
        - Device Profile API(s)
      summary: Retrieve device ip resolved and user declared location data
      description: >-
        This API is used to retrieve device ip resolved and user declared
        location details  
           - The endpoint for **Device Profile** is `/profile`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
           
      operationId: StateGet
      parameters:
        - name: device-id
          in: path
          description: device unique id
          required: true
          style: simple
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the type of the request. Possible types
            are:- 
              - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: SUCCESS. The "Device Profile Get" operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deviceapiDeviceProfileResponse'
              examples:
                a:
                  summary: With both user declared and IP resolved data
                  description: >-
                    provides both user declared and IP resolved loaction for
                    given device id
                  value:
                    id: analytics.device-profile
                    ver: '1.0'
                    ts: '2020-11-27T12:33:27.115+00:00'
                    params:
                      resmsgid: 93aa54f5-03b2-4c82-af3a-acc3ee4071f7
                      status: successful
                    responseCode: OK
                    result:
                      userDeclaredLocation:
                        state: Karnataka
                        district: BENGALURU URBAN SOUTH
                      ipLocation:
                        state: Karnataka
                        district: BENGALURU URBAN SOUTH
                b:
                  summary: With only IP resolved data
                  description: >-
                    provides only IP resolved loaction for given device id and
                    user declared location data is not available
                  value:
                    id: analytics.device-profile
                    ver: '1.0'
                    ts: '2020-11-27T12:33:27.115+00:00'
                    params:
                      resmsgid: 93aa54f5-03b2-4c82-af3a-acc3ee4071f7
                      status: successful
                    responseCode: OK
                    result:
                      ipLocation:
                        state: Karnataka
                        district: BENGALURU URBAN SOUTH
                c:
                  summary: With only user declared data
                  description: >-
                    provides only user declared loaction for given device id and
                    ip based location is not resolved
                  value:
                    id: analytics.device-profile
                    ver: '1.0'
                    ts: '2020-11-27T12:33:27.115+00:00'
                    params:
                      resmsgid: 93aa54f5-03b2-4c82-af3a-acc3ee4071f7
                      status: successful
                    responseCode: OK
                    result:
                      userDeclaredLocation:
                        state: Karnataka
                        district: BENGALURU URBAN SOUTH
                      ipLocation:
                        state: ''
                        district: ''
                d:
                  summary: Without location data/Empty response
                  description: >-
                    for given device id, ip based location is not resolved and
                    user declared location data is not available
                  value:
                    id: analytics.device-profile
                    ver: '1.0'
                    ts: '2020-11-27T12:33:27.115+00:00'
                    params:
                      resmsgid: 93aa54f5-03b2-4c82-af3a-acc3ee4071f7
                      status: successful
                    responseCode: OK
                    result:
                      ipLocation:
                        state: ''
                        district: ''
        '401':
          description: >-
            Unauthorized, **Device Profile Get** operation failed! The possible
            reason for failure is that you may have missed providing
            authorization token in header
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        '500':
          description: >-
            INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content:
            text/plain:
              schema:
                type: string
                example: An unexpected error occurred
  /data/v1/report-service/report/list:
    post:
      tags:
        - Reports API's
      summary: Search Reports
      description: >-
        This API is associated with Searching Reports on the Sunbird Platform.


        - The endpoint for search Reports is `/report/list`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: SearchReports
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{auth}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reportsSearchReportsRequest'
            example:
              request:
                filters: {}
        required: true
      responses:
        '200':
          description: SUCCESS. The **Search Reports** operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsSuccess'
              example:
                id: api.report.list
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: string
                  status: string
                  err: string
                  errmsg: string
                responseCode: string
                result:
                  reports:
                    - reportid: string
                      title: string
                      description: string
                      authorizedroles:
                        - string
                      status: string
                      type: string
                      reportaccessurl: string
                      createdon: string
                      updatedon: string
                      createdby: string
                      reportconfig:
                        id: string
                        label: string
                        table:
                          - name: string
                            valuesExpr: string
                            columnsExpr: string
                        title: string
                        charts:
                          - colors:
                              - borderColor: string
                                backgroundColor: string
                            options:
                              title:
                                text: string
                                display: true
                                fontSize: 16
                              legend:
                                display: false
                              scales:
                                xAxes:
                                  - scaleLabel:
                                      display: true
                                      labelString: string
                                yAxes:
                                  - scaleLabel:
                                      display: true
                                      labelString: string
                              tooltips:
                                mode: string
                                intersect: false
                                bodySpacing: 5
                                titleSpacing: 5
                              responsive: true
                            datasets:
                              - label: string
                                dataExpr: string
                            chartType: string
                            labelsExpr: string
                        dataSource: string
                        description: string
                        downloadUrl: string
                      templateurl: string
                      slug: string
                      reportgenerateddate: string
                      reportduration:
                        enddate: string
                        startdate: string
                      tags:
                        - string
                      updatefrequency: string
                      parameters:
                        - string
                      report_type: string
                      children: []
                  count: 1
        '400':
          description: >-
            'BAD REQUEST. The operation failed. You may have missed input for a
            mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsNoReportFound'
              example:
                id: api.report.list
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: null
                  status: failed
                  err: string
                  errmsg: string
                responseCode: string
                result: {}
        '500':
          description: >-
            ''INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsInternalServerError'
              example:
                result: {}
                id: string
                ver: string
                params:
                  resmsgid: string
                  msgid: string
                  err: string
                  status: string
                  errmsg: string
                responseCode: {}
      deprecated: false
      security: []
  '/data/v1/report-service/get/{Report_Id}':
    get:
      tags:
        - Reports API's
      summary: Read Report
      description: >-
        This API is associated with viewing and reading out the Report on the
        Sunbird Platform.


        - The endpoint for search Reports is `/report/get/{ Report_Id }`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: ReadReport
      parameters:
        - name: Report_Id
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:-


            Application/json
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{auth}}'
      responses:
        '200':
          description: SUCCESS. The **Read Report** operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsSuccess'
              example:
                id: string
                ver: string
                params:
                  resmsgid: string
                  msgid: string
                  status: success
                  err: string
                  errmsg: string
                responseCode: OK
                result:
                  reports:
                    - reportid: string
                      title: string
                      description: string
                      authorizedroles:
                        - string
                      status: string
                      type: string
                      reportaccessurl: string
                      createdon: string
                      updatedon: string
                      createdby: string
                      reportconfig:
                        id: string
                        label: string
                        table:
                          - name: string
                            valuesExpr: string
                            columnsExpr: string
                        title: string
                        charts:
                          - colors:
                              - borderColor: string
                                backgroundColor: string
                            options:
                              title:
                                text: string
                                display: true
                                fontSize: 16
                              legend:
                                display: false
                              scales:
                                xAxes:
                                  - scaleLabel:
                                      display: true
                                      labelString: string
                                yAxes:
                                  - scaleLabel:
                                      display: true
                                      labelString: string
                              tooltips:
                                mode: string
                                intersect: false
                                bodySpacing: 5
                                titleSpacing: 5
                              responsive: true
                            datasets:
                              - label: string
                                dataExpr: string
                            chartType: string
                            labelsExpr: string
                        dataSource: string
                        description: string
                        downloadUrl: string
                      templateurl: string
                      slug: string
                      reportgenerateddate: string
                      reportduration:
                        enddate: string
                        startdate: string
                      tags:
                        - string
                      updatefrequency: string
                      parameters:
                        - string
                      report_type: string
                      children: []
                  count: 1
        '404':
          description: Report Not Found with given report Id parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsNoReportFound'
              example:
                id: api.report.read
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: null
                  status: failed
                  err: null
                  errmsg: no report found
                responseCode: string
                result: {}
        '500':
          description: >-
            ''INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsInternalServerError'
              example:
                result: {}
                id: string
                ver: string
                params:
                  resmsgid: string
                  msgid: string
                  err: string
                  status: string
                  errmsg: string
                responseCode: {}
      deprecated: false
      security: []
  /data/v1/report-service/create:
    post:
      tags:
        - Reports API's
      summary: Create Report
      description: >-
        This API is associated with creating a  Report on the Sunbird Platform.


        - The endpoint for search Reports is `/report/create`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: CreateReport
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{auth}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reportsCreateReportRequest'
            example:
              request:
                report:
                  title: string
                  description: string
                  authorizedroles:
                    - string
                  status: string
                  type: string
                  createdby: string
                  reportconfig:
                    id: string
                    label: string
                    table:
                      valuesExpr: string
                      columnsExpr: string
                    title: string
                    charts:
                      - id: string
                        options:
                          title:
                            text: string
                            display: true
                            fontSize: 16
                          legend:
                            display: true
                          scales:
                            xAxes:
                              - scaleLabel:
                                  display: true
                                  labelString: string
                            yAxes:
                              - scaleLabel:
                                  display: true
                                  labelString: string
                          tooltips:
                            mode: string
                            intersect: false
                            bodySpacing: 5
                            titleSpacing: 5
                          responsive: true
                        datasets:
                          - label: string
                            dataExpr: string
                        chartType: string
                        labelsExpr: string
                        dataSource:
                          ids:
                            - string
                          commonDimension: string
                    dataSource:
                      - id: string
                        path: string
                    description: string
                    reportLevelDataSourceId: string
                  slug: string
                  reportgenerateddate: string
                  reportduration:
                    enddate: string
                    startdate: Tstring
                  tags:
                    - string
                  updatefrequency: string
        required: true
      responses:
        '200':
          description: SUCCESS. The **Create Report** operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsSuccess2'
              example:
                id: api.report.create
                ver: string
                params:
                  resmsgid: string
                  msgid: string
                  status: string
                  err: string
                  errmsg: string
                responseCode: string
                result:
                  reportId: string
                  reportaccessurl: string
        '400':
          description: >-
            'BAD REQUEST. The operation failed. You may have missed input for a
            mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsNoReportFound'
              example:
                id: api.report.create
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: null
                  status: string
                  err: string
                  errmsg: string
                responseCode: string
                result: {}
        '500':
          description: >-
            ''INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsInternalServerError'
              example:
                result: {}
                id: string
                ver: string
                params:
                  resmsgid: string
                  msgid: string
                  err: string
                  status: string
                  errmsg: string
                responseCode: {}
      deprecated: false
      security: []
  '/data/v1/report-service/delete/{Report_Id}':
    delete:
      tags:
        - Reports API's
      summary: Delete Report
      description: >-
        This API is associated with deleting a  Report on the Sunbird Platform.


        - The endpoint for search Reports is `/report/delete/{ Report_Id }`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: DeleteReport
      parameters:
        - name: Report_Id
          in: path
          description: Please append a valid Report ID To the Request URL
          required: true
          style: simple
          schema:
            type: string
            example: '{{Report_Id}}'
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:-

            Application/json
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{auth}}'
      responses:
        '200':
          description: SUCCESS. The **Delete Report** operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsSuccess3'
              example:
                id: api.report.delete
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: string
                  status: string
                  err: string
                  errmsg: string
                responseCode: OK
                result:
                  reportId: string
        '404':
          description: Report Not Found with given report Id parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsNoReportFound1'
              example:
                id: api.report.delete
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: string
                  status: string
                  err: null
                  errmsg: no report found
                responseCode: string
                result: {}
        '500':
          description: >-
            ''INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsInternalServerError'
              example:
                result: {}
                id: string
                ver: string
                params:
                  resmsgid: string
                  msgid: string
                  err: string
                  status: string
                  errmsg: string
                responseCode: {}
      deprecated: false
      security: []
  '/data/v1/report-service/update/{Report_Id}':
    patch:
      tags:
        - Reports API's
      summary: Update Report
      description: >-
        This API is associated with updating a  Report on the Sunbird Platform.


        - The endpoint for search Reports is `/report/update/{ Report_Id }`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: UpdateReport
      parameters:
        - name: Report_Id
          in: path
          description: Please append a valid Report ID To the Request URL
          required: true
          style: simple
          schema:
            type: string
            example: '{{Report_Id}}'
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{auth}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reportsUpdateReportRequest'
            example:
              request:
                report: {}
        required: true
      responses:
        '200':
          description: SUCCESS. The **Update Report** operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsSuccess3'
              example:
                id: api.report.update
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: string
                  status: string
                  err: string
                  errmsg: string
                responseCode: OK
                result:
                  reportId: string
        '400':
          description: >-
            'BAD REQUEST. The operation failed. You may have missed input for a
            mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsNoReportFound'
              example:
                id: api.report.update
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: null
                  status: string
                  err: string
                  errmsg: string
                responseCode: string
                result: {}
        '404':
          description: Report Not Found with given report Id parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsNoReportFound1'
              example:
                id: api.report.update
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: string
                  status: string
                  err: null
                  errmsg: no report found
                responseCode: string
                result: {}
        '500':
          description: >-
            ''INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsInternalServerError'
              example:
                result: {}
                id: string
                ver: string
                params:
                  resmsgid: string
                  msgid: string
                  err: string
                  status: string
                  errmsg: string
                responseCode: {}
      deprecated: false
      security: []
  '/data/v1/report-service/publish/{Report_Id}':
    get:
      tags:
        - Reports API's
      summary: Publish Report
      description: >-
        This API is associated with publishing a  Report as live on the Sunbird
        Platform.


        - The endpoint for search Reports is `/report/publish/{ Report_Id }`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: PublishReport
      parameters:
        - name: Report_Id
          in: path
          description: Please append a valid Report ID To the Request URL
          required: true
          style: simple
          schema:
            type: string
            example: '{{Report_Id}}'
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:-

            Application/json
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{auth}}'
      responses:
        '200':
          description: SUCCESS. The **Publish Report** operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsSuccess3'
              example:
                id: api.report.publish
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: string
                  status: string
                  err: string
                  errmsg: string
                responseCode: OK
                result:
                  reportId: string
        '404':
          description: Report Not Found with given report Id parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsNoReportFound1'
              example:
                id: api.report.publish
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: string
                  status: string
                  err: string
                  errmsg: no report found
                responseCode: string
                result: {}
        '500':
          description: >-
            ''INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsInternalServerError'
              example:
                result: {}
                id: string
                ver: string
                params:
                  resmsgid: string
                  msgid: string
                  err: string
                  status: string
                  errmsg: string
                responseCode: {}
      deprecated: false
      security: []
  '/data/v1/report-service/retire/{Report_Id}':
    get:
      tags:
        - Reports API's
      summary: Retire Report
      description: >-
        This API is associated with retiring a  Report on the Sunbird Platform.


        - The endpoint for search Reports is `/report/retire/{Report_Id}`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: RetireReport
      parameters:
        - name: Report_Id
          in: path
          description: Please append a valid Report ID To the Request URL
          required: true
          style: simple
          schema:
            type: string
            example: '{{Report_Id}}'
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:-

            Application/json
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{auth}}'
      responses:
        '200':
          description: SUCCESS. The **Publish Report** operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsSuccess3'
              example:
                id: api.report.publish
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: string
                  status: string
                  err: string
                  errmsg: string
                responseCode: OK
                result:
                  reportId: string
        '404':
          description: Report Not Found with given report Id parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsNoReportFound1'
              example:
                id: api.report.retire
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: string
                  status: string
                  err: null
                  errmsg: no report found
                responseCode: string
                result: {}
        '500':
          description: >-
            ''INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsInternalServerError'
              example:
                result: {}
                id: string
                ver: string
                params:
                  resmsgid: string
                  msgid: string
                  err: string
                  status: string
                  errmsg: string
                responseCode: {}
      deprecated: false
      security: []
  /data/v1/report-service/summary/list:
    post:
      tags:
        - Report-Summary
      summary: list summaries
      description: >-
        This API is associated with viewing and reading out the Report & Chart
        Summaries history on the Sunbird Platform.


        - The endpoint for search Reports is `/report/summary/list`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: listsummaries
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{auth}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reportslistsummariesrequest'
            example:
              request:
                filters:
                  reportid: string
        required: true
      responses:
        '200':
          description: SUCCESS. The **List Report Summaries** operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsSuccess7'
              example:
                id: api.report.summary.list
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: string
                  status: string
                  err: string
                  errmsg: string
                responseCode: string
                result:
                  summaries: []
                  count: 0
        '400':
          description: >-
            'BAD REQUEST. The operation failed. You may have missed input for a
            mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsNoReportFound'
              example:
                id: api.report.summary.list
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: null
                  status: string
                  err: string
                  errmsg: string
                responseCode: string
                result: {}
        '500':
          description: >-
            ''INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsInternalServerError'
              example:
                result: {}
                id: string
                ver: string
                params:
                  resmsgid: string
                  msgid: string
                  err: string
                  status: string
                  errmsg: string
                responseCode: {}
      deprecated: false
      security: []
  /data/v1/report-service/summary/create:
    post:
      tags:
        - Report-Summary
      summary: Create Report Summary
      description: >-
        This API is associated with creating a  Report Summary on the Sunbird
        Platform.


        - The endpoint for search Reports is `/report/summary/create`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: CreateReportSummary
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{auth}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reportsCreateReportSummaryRequest'
            example:
              request:
                summary:
                  reportid: string
                  createdby: string
                  summary: string
        required: true
      responses:
        '200':
          description: SUCCESS. The **Create Report Summary** operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsSuccess8'
              example:
                id: api.report.summary.create
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: string
                  status: string
                  err: string
                  errmsg: string
                responseCode: string
                result:
                  summaryId: string
        '400':
          description: >-
            'BAD REQUEST. The operation failed. You may have missed input for a
            mandatory parameter.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsNoReportFound'
              example:
                id: api.report.summary.create
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: null
                  status: string
                  err: string
                  errmsg: string
                responseCode: string
                result: {}
        '500':
          description: >-
            ''INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsInternalServerError'
              example:
                result: {}
                id: string
                ver: string
                params:
                  resmsgid: string
                  msgid: string
                  err: string
                  status: string
                  errmsg: string
                responseCode: {}
      deprecated: false
      security: []
  '/data/v1/report-service/summary/{Report_Id}':
    get:
      tags:
        - Report-Summary
      summary: Get Latest Report Summary
      description: >-
        This API is associated with viewing and fetching the latest Chart or
        Report summary n the Sunbird Platform.


        - The endpoint for search Reports is `/report/summary/{Report_Id}`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: GetLatestReportSummary
      parameters:
        - name: Report_Id
          in: path
          description: Please append a valid Report ID To the Request URL
          required: true
          style: simple
          schema:
            type: string
            example: '{{Report_Id}}'
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{auth}}'
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:-

            Application/json
          required: true
          style: simple
          schema:
            type: string
            example: application/json
      responses:
        '200':
          description: SUCCESS. The **Read Report Summary** operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsSuccess7'
              example:
                id: api.report.summary.get
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: string
                  status: string
                  err: string
                  errmsg: string
                responseCode: string
                result:
                  summaries: []
                  count: 0
        '500':
          description: >-
            ''INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsInternalServerError'
              example:
                result: {}
                id: string
                ver: string
                params:
                  resmsgid: string
                  msgid: string
                  err: string
                  status: string
                  errmsg: string
                responseCode: {}
      deprecated: false
      security: []
  '/data/v1/report-service/summary/{Report_Id}/{Chart_Id}':
    get:
      tags:
        - Report-Summary
      summary: Get Latest Chart Summary
      description: >-
        This API is associated with viewing and fetching the latest Chart or
        Report summary n the Sunbird Platform.


        - The endpoint for search Reports is
        `/report/summary/{Report_Id}/{Chart_Id}`

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: GetLatestChartSummary
      parameters:
        - name: Report_Id
          in: path
          description: Please append a valid Report ID To the Request URL
          required: true
          style: simple
          schema:
            type: string
            example: '{{Report_Id}}'
        - name: Chart_Id
          in: path
          description: Please append a valid Chart ID To the Request URL
          required: true
          style: simple
          schema:
            type: string
            example: '{{Chart_Id}}'
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{auth}}'
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:-

            Application/json
          required: true
          style: simple
          schema:
            type: string
            example: application/json
      responses:
        '200':
          description: SUCCESS. The **Read Chart Summary** operation was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsSuccess7'
              example:
                id: api.report.summary.get
                ver: 1.0.0
                params:
                  resmsgid: string
                  msgid: string
                  status: string
                  err: string
                  errmsg: string
                responseCode: string
                result:
                  summaries: []
                  count: 0
        '500':
          description: >-
            ''INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reportsInternalServerError'
              example:
                result: {}
                id: string
                ver: string
                params:
                  resmsgid: string
                  msgid: string
                  err: string
                  status: string
                  errmsg: string
                responseCode: {}
      deprecated: false
      security: []
  /chat/bot:
    post:
      tags:
        - Bot API
      summary: Bot interaction for web chat
      description: |-
        This API is used for interacrting with TARA.
           - The endpoint for **Bot** is `/bot`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: '{{host}}/bot'
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains request query from the request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatbotapigenerateBotRequest'
        required: true
      responses:
        '200':
          description: OK ! Successful operation
          content:
            application/json:
              example:
                id: api.bot.response
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: null
                  status: success
                  errmsg: null.
                responseCode: OK
                result:
                  response:
                    type: button
                    data:
                      text: >-
                        Hello, I am Tara!<br>I am your DIKSHA guide<br>Please
                        select your preference from the options I provide or
                        type your query directly
                      buttons:
                        text: Digital content
                        value: 1
        '400':
          description: >-
            BAD REQUEST. The "Bot respond" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatbotapiBotErrorResponse'
              example:
                id: api.otp.generate
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: MANDATORY_PARAMETER_MISSING
                  status: MANDATORY_PARAMETER_MISSING
                responseCode: SERVER_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatbotapiBotErrorResponse'
              example:
                id: api.otp.generate
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: INTERNAL_ERROR
                  status: INTERNAL_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
  /chat/whatsapp:
    post:
      tags:
        - Whatsapp API
      summary: Bot interaction for whats app conversation
      description: |-
        This API is used for interacrting with TARA through whats app.
           - The endpoint for **Bot** is `/whatsapp`
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: '{{host}}/whatsapp'
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains request query from the request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatbotapigenerateBotRequest'
        required: true
      responses:
        '200':
          description: OK ! Successful operation
          content:
            application/json:
              example:
                id: api.bot.response
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: null
                  status: success
                  errmsg: null.
                responseCode: OK
                result:
                  response:
                    type: button
                    data:
                      text: >-
                        Hello, I am Tara!<br>I am your DIKSHA guide<br>Please
                        select your preference from the options I provide or
                        type your query directly
                      buttons:
                        text: Digital content
                        value: 1
        '400':
          description: >-
            BAD REQUEST. The "Bot respond" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatbotapiBotErrorResponse'
              example:
                id: api.otp.generate
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: MANDATORY_PARAMETER_MISSING
                  status: MANDATORY_PARAMETER_MISSING
                responseCode: SERVER_ERROR
                result: {}
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chatbotapiBotErrorResponse'
              example:
                id: api.otp.generate
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: INTERNAL_ERROR
                  status: INTERNAL_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
  /data/v1/role/read:
    get:
      summary: role list
      description: |-
        This API is associated with listing all roles.
           - The **_/role/read_** endpoint executes the "list roles" request based on parameters provided as metadata in the request body
           - Required fields cannot be left null or empty'
      operationId: roleList
      parameters:
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            All roles APIs require authorization for use. Specify the
            authorization key received from the administrator when placing the
            request for use of the API.
          required: true
          schema:
            type: string
        - name: X-authenticated-user-token
          in: header
          description: user jwt token required
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."list object" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleRoleresponse'
        '400':
          description: >-
            BAD REQUEST. The "list object" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roleContentCreateErrorResponse'
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content: {}
  /data/v1/client/logs:
    post:
      tags:
        - V1
      summary: ClientErrorLogAPI
      description: >-
        This API is used to stream the error logs from the portal and mobile
        clients into Elasticsearch. The data allows us to set up dashboards to
        visualise patterns in errors from the clients.
           - The endpoint for ** logging client error logs** is `/client/logs
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: ClientErrorLogAPI
      requestBody:
        description: Represents the body and form data parameters of the client error log
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clientlogapiClientLogRequest'
            example:
              $ref: '#/components/schemas/clientlogapiClientLogRequest/example'
        required: true
      responses:
        '200':
          description: Success example fo logging valid client error using ClientLog API
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientlogapiClientLogAPI-SuccessReponse'
              example:
                id: ekstep.analytics.client-log
                ver: v1
                ts: '2020-11-30T07:17:22.982+00:00  '
                params:
                  resmsgid: 5a7e1ad3-705b-408b-a8f7-d428f094f7a4
                  status: successful
                responseCode: OK
                result:
                  message: Log captured successfully!
        '400':
          description: Bad Request for logging client log API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientlogapiClientLog-FailedResponse'
              examples:
                RequestFieldBodyMissing:
                  summary: With request field missing in request body
                  description: Response example when request body field is missing
                  value:
                    id: ekstep.analytics.client-log
                    ver: v1
                    ts: '2020-11-23 06:42:39:001+0000'
                    params:
                      resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
                      status: failed
                      err: CLIENT_ERROR
                      errorMsg: 'property: request is missing!'
                    responseCode: CLIENT_ERROR
                    result: null
                ContextFieldMissing:
                  summary: With context field missing in request field
                  description: >-
                    Response example when context field in missing in request
                    body
                  value:
                    id: ekstep.analytics.client-log
                    ver: v1
                    ts: '2020-11-23 06:42:39:001+0000'
                    params:
                      resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
                      err: CLIENT_ERROR
                      status: failed
                      errorMsg: 'property: context is missing!'
                    responseCode: CLIENT_ERROR
                    result: null
                ContextDidFieldMissing:
                  summary: With did missing in context field
                  description: >-
                    did field is mandatory. extras and dspec fields are optional
                    in context map
                  value:
                    id: ekstep.analytics.client-log
                    ver: v1
                    ts: '2020-11-23 06:42:39:001+0000'
                    params:
                      resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
                      status: failed
                      err: CLIENT_ERROR
                      errorMsg: 'property: context.did is null or empty!'
                    responseCode: CLIENT_ERROR
                    result: null
                PdataFieldsMissing:
                  summary: With pdata field missing in request field
                  description: 'pid, ver, id fields mandatory in pdata map'
                  value:
                    id: ekstep.analytics.client-log
                    ver: v1
                    ts: '2020-11-23 06:42:39:001+0000'
                    params:
                      resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
                      status: failed
                      err: CLIENT_ERROR
                      errorMsg: 'property: pdata.pid is null or empty!'
                    responseCode: CLIENT_ERROR
                    result: null
                LogsFieldsMissing:
                  summary: With logs field missing in request field
                  description: 'log, ts fields mandatory and id is optional in logs map'
                  value:
                    id: ekstep.analytics.client-log
                    ver: v1
                    ts: '2020-11-23 06:42:39:001+0000'
                    params:
                      resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
                      status: failed
                      err: CLIENT_ERROR
                      errorMsg: 'property: logs.log is null or empty!'
                    responseCode: CLIENT_ERROR
                    result: null
                LogsTsValidation:
                  summary: With ts value 0
                  description: ts field value should always be greater than 0
                  value:
                    id: ekstep.analytics.client-log
                    ver: v1
                    ts: '2020-11-23 06:42:39:001+0000'
                    params:
                      resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
                      status: failed
                      err: CLIENT_ERROR
                      errorMsg: >-
                        property: logs, mandatory fields are missing or type
                        mismatch!
                    responseCode: CLIENT_ERROR
                    result: null
        '500':
          description: Internal Server Error example for client error log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientlogapiClientLog-InternalServerError'
              example:
                id: ekstep.analytics.client-log
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  /certs/v1/generate:
    post:
      tags:
        - Certificate Api
      summary: certificate generation (pdf)
      description: |-
        This API is associated with digitally certificate generation.
           - The **_ /generate_** endpoint executes the "Certificate" request based on parameters provided as metadata in the request body to be replaced by appropriate Id
           - Required fields cannot be left null or empty
           - Request expects, array of data object which includes recipient Name, email, id and phone, Certificate name and description, signatory list, issuer name and url,htmlTemplate(html template zip url)  certificate logo, courseName. If certificate should signed , then pass signKeys(keys.id)
           - Response returns , id ( The unique identifier to this certificate) jsonUrl, pdfUrl, data (raw certificate json), accesCode (code to access the certificate)
           - Backend Route: http://cert-service:9000/v1/certs/generate
           
      operationId: GeneratePost for certs
      parameters:
        - name: X-Channel-ID
          in: header
          description: >-
            It the Unique Id to identify the root organization to which the user
            belongs
          required: false
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
               - Multipart/form-data
               - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for Generating DIAL code.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/certificateApiRequest'
                - $ref: '#/components/schemas/certificateGenerateCertificateRequest'
            examples:
              a:
                summary: Certificate Generate Request
                description: Generate certifiacte request
                value:
                  request:
                    certificate:
                      htmlTemplate: >-
                        https://sunbirddev.blob.core.windows.net/user/cert/File-0130405468231516160.zip
                      issuedDate: '2020-06-11'
                      data:
                        - recipientName: username
                          recipientEmail: emailId
                          recipientPhone: '8951443323'
                          recipientId: 123-123-45555-2344-1333
                          expiry: '2021-09-01T12:52:25Z'
                      courseName: Java Programming Masterclass for Software Developers
                      name: Certificate of Completion in java programming
                      description: Course completion certificate issues by State
                      logo: 'https://certs.example.gov/o/dgt/HJ5327VB1247G'
                      criteria:
                        narrative: course completion certificate
                      tag: 01282612345302220893_0130404959522979845
                      issuer:
                        name: issuer name
                        url: 'https: //gcert.gujarat.gov.in/gcert/'
                      signatoryList:
                        - image: >-
                            https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                          name: sigantory name
                          id: id
                          designation: CEO
              b:
                summary: Mandatory Param htmlTemplate Missing
                value:
                  request:
                    certificate:
                      issuedDate: '2020-06-11'
                      data:
                        - recipientName: username
                          recipientEmail: emailIs
                          recipientPhone: '8951443323'
                          recipientId: 123-123-45555-2344-1333
                          expiry: '2020-09-01T12:52:25Z'
                      courseName: Java Programming Masterclass for Software Developers
                      name: Certificate of Completion in java programming
                      description: Course completion certificate issues by State
                      logo: 'https://certs.example.gov/o/dgt/HJ5327VB1247G'
                      criteria:
                        narrative: course completion certificate
                      tag: 01282612345302220893_0130404959522979845
                      issuer:
                        name: issuer name
                        url: 'https: //gcert.gujarat.gov.in/gcert/'
                      signatoryList:
                        - image: >-
                            https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                          name: sigantory name
                          id: id
                          designation: CEO
              c:
                summary: Adding sign Keys (for signing to cert)
                description: >-
                  For signing to certificate , provide keys.id Keys are Optional
                  generally, If keys is not provided, then the verificationType
                  of the cert is Hosted . if keys are provided with valid value,
                  then the verificationType will be signedBadge. Provide valid
                  sign key id
                value:
                  request:
                    certificate:
                      htmlTemplate: >-
                        https://sunbirddev.blob.core.windows.net/user/cert/File-0130405468231516160.zip
                      issuedDate: '2020-06-11'
                      data:
                        - recipientName: username
                          recipientEmail: emailIs
                          recipientPhone: '8951443323'
                          recipientId: 123-123-45555-2344-1333
                          expiry: '2021-10-01T12:52:25Z'
                      courseName: Java Programming Masterclass for Software Developers
                      name: Certificate of Completion in java programming
                      description: Course completion certificate issues by State
                      logo: 'https://certs.example.gov/o/dgt/HJ5327VB1247G'
                      criteria:
                        narrative: course completion certificate
                      tag: 01282612345302220893_0130404959522979845
                      issuer:
                        name: issuer name
                        url: 'https: //gcert.gujarat.gov.in/gcert/'
                      signatoryList:
                        - image: >-
                            https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                          name: sigantory name
                          id: id
                          designation: CEO
                      keys:
                        id: '23'
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Certificate generation" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificateContentCreateResponse'
              example:
                id: v1.certs.generate
                ver: v1
                ts: '1606196636922'
                params: null
                responseCode: OK
                result:
                  response:
                    - id: b76830e6-6755-4ab9-8244-ed61679de209
                      accessCode: D6P1G2
                      jsonData:
                        id: >-
                          https://staging.open-sunbird.org/certs/01282612345302220893_0130404959522979845/b76830e6-6755-4ab9-8244-ed61679de209
                        type:
                          - Assertion
                          - Extension
                          - 'extensions:CertificateExtension'
                        issuedOn: '2020-06-11T00:00:00Z'
                        recipient:
                          identity: 123-123-45555-2344-1333
                          type:
                            - id
                          hashed: false
                          name: Username
                          '@context': >-
                            https://staging.open-sunbird.org/certs/v1/context.json
                        badge:
                          id: >-
                            https://staging.open-sunbird.org/certs/01282612345302220893_0130404959522979845/Badge.json
                          type:
                            - BadgeClass
                          name: Java Programming Masterclass for Software Developers
                          description: Course completion certificate issues by State
                          image: 'https://certs.example.gov/o/dgt/HJ5327VB1247G'
                          criteria:
                            type:
                              - Criteria
                            narrative: course completion certificate
                          issuer:
                            context: >-
                              https://staging.open-sunbird.org/certs/v1/context.json
                            id: 'https://staging.open-sunbird.org/certs/Issuer.json'
                            type:
                              - Issuer
                            name: >-
                              Gujarat Council of Educational Research and
                              Training
                            url: 'https: //gcert.gujarat.gov.in/gcert/'
                            publicKey: []
                          '@context': >-
                            https://staging.open-sunbird.org/certs/v1/context.json
                        evidence:
                          id: 'https://staging.open-sunbird.org/certs/Evidence.json'
                          type:
                            - Evidence
                            - Extension
                            - 'extensions:TrainingEvidence'
                          name: Java Programming Masterclass for Software Developers
                          '@context': >-
                            https://staging.open-sunbird.org/certs/v1/context.json
                        expires: '2020-09-01T12:52:25Z'
                        verification:
                          type:
                            - hosted
                        revoked: false
                        certificatesignatory:
                          - identity: CEO
                            type:
                              - Extension
                              - 'extensions:SignatoryExtension'
                            hashed: false
                            designation: CEO
                            image: >-
                              https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                            '@context': >-
                              https://staging.open-sunbird.org/certs/v1/extensions/SignatoryExtension/context.json
                        '@context': 'https://staging.open-sunbird.org/certs/v1/context.json'
                      recipientId: 123-123-45555-2344-1333
                      jsonUrl: >-
                        https://staging.open-sunbird.org/certs/01282612345302220893_0130404959522979845/b76830e6-6755-4ab9-8244-ed61679de209.json
                      pdfUrl: >-
                        https://staging.open-sunbird.org/certs/01282612345302220893_0130404959522979845/0a90d9d0-2e18-11eb-aa59-a70abdae46c7.pdf
        '400':
          description: >-
            BAD REQUEST. The "Certificate generation" operation failed ! The
            possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificateContentCreateErrorResponse'
              examples:
                a:
                  summary: Mandatory Param htmlTemplate Missing Res
                  value:
                    id: v1.certs.generate
                    ver: v1
                    ts: '1606199661823'
                    responseCode: CLIENT_ERROR
                    result:
                      message: Mandatory parameter certificate.htmlTemplate is missing.
                b:
                  summary: Mandatory Param signatoryName Missing Res
                  value:
                    id: v1.certs.generate
                    ver: v1
                    ts: '1606199661823'
                    responseCode: CLIENT_ERROR
                    result:
                      message: >-
                        Mandatory parameter certificate.signatoryList.name is
                        missing.
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong. These
            errors are tracked automatically. Try refreshing the page. If the
            problem persists, contact info@sunbird.org. 
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/certificate500ServerError'
              example:
                id: api.certs.registry.validate
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
        - bearer: []
  /certs/v2/generate:
    post:
      tags:
        - Certificate Api
      summary: certificate generation (svg)
      description: |-
        This API is associated with digitally certificate generation.
           - The **_ /v2/generate_** endpoint executes the "Certificate" request based on parameters provided as metadata in the request body to be replaced by appropriate Id
           - Required fields cannot be left null or empty
           - Request expects, array of data object which includes recipient Name, email, id and phone,svgTemplate url, Certificate name and description, signatory list, issuer name and url, certificate logo, courseName. If certificate should signed , then pass signKeys(keys.id)
           - Response returns , id ( The unique identifier to this certificate) jsonUrl, pdfUrl, data (raw certificate json, with materialized svg string **printUri**), accesCode (code to access the certificate)
           - Backend Route: http://cert-service:9000/v2/certs/generate
      operationId: SVGCertificate
      parameters:
        - name: X-Channel-ID
          in: header
          description: >-
            It the Unique Id to identify the root organization to which the user
            belongs
          required: false
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
               - Multipart/form-data
               - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for Generating DIAL code.
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/certificateApiRequest'
                - $ref: '#/components/schemas/certificateGenerateCertificateV2Request'
            examples:
              a:
                summary: Certificate Generate V2 Request
                description: Generate Certificate request
                value:
                  request:
                    certificate:
                      svgTemplate: >-
                        https://ntpstagingall.blob.core.windows.net/user/cert/File-01311849840255795242.svg
                      issuedDate: '2020-06-11'
                      data:
                        - recipientName: username
                          recipientEmail: emailId
                          recipientPhone: '8951443323'
                          recipientId: 123-123-45555-2344-1333
                          expiry: '2021-09-01T12:52:25Z'
                      courseName: Java Programming Masterclass for Software Developers
                      name: Certificate of Completion in java programming
                      description: Course completion certificate issues by State
                      logo: 'https://certs.example.gov/o/dgt/HJ5327VB1247G'
                      criteria:
                        narrative: course completion certificate
                      tag: 01282612345302220893_0130404959522979845
                      issuer:
                        name: issuer name
                        url: 'https: //gcert.gujarat.gov.in/gcert/'
                      signatoryList:
                        - image: >-
                            https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                          name: sigantory name
                          id: id
                          designation: CEO
              b:
                summary: Mandatory Param svgTemplate Missing
                value:
                  request:
                    certificate:
                      issuedDate: '2020-06-11'
                      data:
                        - recipientName: username
                          recipientEmail: emailIs
                          recipientPhone: '8951443323'
                          recipientId: 123-123-45555-2344-1333
                          expiry: '2020-09-01T12:52:25Z'
                      courseName: Java Programming Masterclass for Software Developers
                      name: Certificate of Completion in java programming
                      description: Course completion certificate issues by State
                      logo: 'https://certs.example.gov/o/dgt/HJ5327VB1247G'
                      criteria:
                        narrative: course completion certificate
                      tag: 01282612345302220893_0130404959522979845
                      issuer:
                        name: issuer name
                        url: 'https: //gcert.gujarat.gov.in/gcert/'
                      signatoryList:
                        - image: >-
                            https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                          name: sigantory name
                          id: id
                          designation: CEO
              c:
                summary: Adding sign Keys (for signing to cert)
                description: >-
                  For signing to certificate , provide keys.id Keys are Optional
                  generally, If keys is not provided, then the verificationType
                  of the cert is Hosted . if keys are provided with valid value,
                  then the verificationType will be signedBadge. Provide valid
                  sign key id
                value:
                  request:
                    certificate:
                      svgTemplate: >-
                        https://ntpstagingall.blob.core.windows.net/user/cert/File-01311849840255795242.svg
                      issuedDate: '2020-06-11'
                      data:
                        - recipientName: username
                          recipientEmail: emailIs
                          recipientPhone: '8951443323'
                          recipientId: 123-123-45555-2344-1333
                          expiry: '2021-10-01T12:52:25Z'
                      courseName: Java Programming Masterclass for Software Developers
                      name: Certificate of Completion in java programming
                      description: Course completion certificate issues by State
                      logo: 'https://certs.example.gov/o/dgt/HJ5327VB1247G'
                      criteria:
                        narrative: course completion certificate
                      tag: 01282612345302220893_0130404959522979845
                      issuer:
                        name: issuer name
                        url: 'https: //gcert.gujarat.gov.in/gcert/'
                      signatoryList:
                        - image: >-
                            https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                          name: sigantory name
                          id: id
                          designation: CEO
                      keys:
                        id: '23'
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Certificate generation" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificateCertificateGenerateV2Response'
              example:
                id: v2.certs.generate
                ver: v2
                ts: '1606196636922'
                params: null
                responseCode: OK
                result:
                  response:
                    - id: b76830e6-6755-4ab9-8244-ed61679de209
                      accessCode: D6P1G2
                      jsonData:
                        id: >-
                          https://staging.open-sunbird.org/certs/01282612345302220893_0130404959522979845/b76830e6-6755-4ab9-8244-ed61679de209
                        type:
                          - Assertion
                          - Extension
                          - 'extensions:CertificateExtension'
                        issuedOn: '2020-06-11T00:00:00Z'
                        recipient:
                          identity: 123-123-45555-2344-1333
                          type:
                            - id
                          hashed: false
                          name: Username
                          '@context': >-
                            https://staging.open-sunbird.org/certs/v1/context.json
                        badge:
                          id: >-
                            https://staging.open-sunbird.org/certs/01282612345302220893_0130404959522979845/Badge.json
                          type:
                            - BadgeClass
                          name: Java Programming Masterclass for Software Developers
                          description: Course completion certificate issues by State
                          image: 'https://certs.example.gov/o/dgt/HJ5327VB1247G'
                          criteria:
                            type:
                              - Criteria
                            narrative: course completion certificate
                          issuer:
                            context: >-
                              https://staging.open-sunbird.org/certs/v1/context.json
                            id: 'https://staging.open-sunbird.org/certs/Issuer.json'
                            type:
                              - Issuer
                            name: issuer name
                            url: 'https: //gcert.gujarat.gov.in/gcert/'
                          '@context': >-
                            https://staging.open-sunbird.org/certs/v1/context.json
                        evidence:
                          id: 'https://staging.open-sunbird.org/certs/Evidence.json'
                          type:
                            - Evidence
                            - Extension
                            - 'extensions:TrainingEvidence'
                          name: Java Programming Masterclass for Software Developers
                          '@context': >-
                            https://staging.open-sunbird.org/certs/v1/context.json
                        expires: '2020-09-01T12:52:25Z'
                        printUri: 'data:image/svg+xml,%3Csvg .....'
                        verification:
                          type:
                            - hosted
                        revoked: false
                        certificatesignatory:
                          - identity: CEO
                            type:
                              - Extension
                              - 'extensions:SignatoryExtension'
                            hashed: false
                            designation: CEO
                            image: >-
                              https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                            '@context': >-
                              https://staging.open-sunbird.org/certs/v1/extensions/SignatoryExtension/context.json
                        '@context': 'https://staging.open-sunbird.org/certs/v1/context.json'
                      recipientId: 123-123-45555-2344-1333
                      jsonUrl: >-
                        https://staging.open-sunbird.org/certs/01282612345302220893_0130404959522979845/b76830e6-6755-4ab9-8244-ed61679de209.json
        '400':
          description: >-
            BAD REQUEST. The "Certificate generation" operation failed ! The
            possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificateContentCreateErrorResponse'
              examples:
                a:
                  summary: Mandatory Param svgTemplate Missing Res
                  value:
                    id: v2.certs.generate
                    ver: v2
                    ts: '1606199661823'
                    responseCode: CLIENT_ERROR
                    result:
                      message: Mandatory parameter certificate.htmlTemplate is missing.
                b:
                  summary: Mandatory Param signatoryName Missing Res
                  value:
                    id: v2.certs.generate
                    ver: v2
                    ts: '1606199661823'
                    responseCode: CLIENT_ERROR
                    result:
                      message: >-
                        Mandatory parameter certificate.signatoryList.name is
                        missing.
        '500':
          description: >-
            INTERNAL SERVER ERROR ! Looks like something went wrong! These
            errors are tracked automatically, but if the problem persists feel
            free to contact us. In the meantime, try refreshing.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/certificate500ServerError'
              example:
                id: api.certs.registry.validate
                ver: v1
                ts: '2020-11-23 15:15:18:331+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
        - bearer: []
  /api-manager/v2/consumer/desktop_device/credential/register:
    post:
      tags:
        - Desktop device registry API
      summary: Get API token
      description: |-
        This API is used to get the token.
           - **_/consumer/desktop_device/credential/register/_** endpoint helps to get the token.  
           - Required fields cannot be left null or empty    
      operationId: Get API token
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the
          payload:'            
           - JSON           
          The body is the representation of the resource object to get the token
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/device-registryRequest'
        required: true
      responses:
        '200':
          description: SUCCESS. The operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device-registryGetTokenResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/device-registryGetTokenErrorResponse'
      x-codegen-request-body-name: Body
  /desktop/v1/update:
    post:
      tags:
        - Desktop app update API
      summary: Get desktop app update url
      description: |-
        This API is associated with desktop app update.
           - The **_ /update_** endpoint takes the current version of the application and checks if update is available or not.
           - Required fields cannot be left null or empty
      operationId: Desktop update API
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- 
              - Application/json
              - Multipart/form-data
              - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          'The body parameter refers to the format of the request, the request
          body (payload) takes the following media types to make the
          payload:'            
           - JSON           
          The body is the representation of the resource object to get the
          update url
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/app-updateRequest'
        required: true
      responses:
        '200':
          description: SUCCESS. The operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app-updateGetUpdateResponse'
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app-updateGetUpdateErrorResponse'
      x-codegen-request-body-name: Body
  /data/v1/form/create:
    post:
      tags:
        - Form API(s)
      summary: Create Form
      description: |-
        This API is used to create a form with default fields using meta data
              
          - The internal endpoint for **Create Form** is `/plugin/v1/form/create`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FormCreate
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
               - Multipart/form-data
               - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for creating a form.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/formapiformcreateRequest'
        required: true
      responses:
        '200':
          description: SUCCESS. The "Create Form data" operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/formapicreateResponse'
              examples:
                Course Unit:
                  value: |-
                    {
                        "id": "api.form.create",
                        "params": {
                            "resmsgid": "ae043094-08a8-4eb5-a128-3e42eadf6a06",
                            "msgid": "0f02b637-b4c4-45ed-b9c6-5ec54b591e9c",
                            "status": "successful"
                        },
                        "responseCode": "OK",
                        "result": {
                            "created": "OK"
                        },
                        "ts": "2020-12-09T11:31:12.644Z",
                        "ver": "1.0"
                    }
        '400':
          description: >-
            BAD REQUEST. "Create Form data" operation failed. You may have
            missed input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/formapiFailedResponseHeader'
        '500':
          description: >-
            INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/formapiFailedResponseHeader'
      security:
        - bearer: []
      x-codegen-request-body-name: Body
  /data/v1/form/update:
    post:
      tags:
        - Form API(s)
      summary: Update Form
      description: >-
        This API is used to update the form metadata as per the requirement or
        choice

          - The endpoint for **Update Form** is `/plugin/v1/form/update`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FormUpdate
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
               - Multipart/form-data
               - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for updating a form.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/formapiformcreateRequest'
        required: true
      responses:
        '200':
          description: SUCCESS. The "Update Form" operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/formapicreateResponse'
              examples:
                Update Course Unit:
                  value: |-
                    {
                        "id": "api.form.update",
                        "params": {
                            "resmsgid": "89b226b2-ce80-4a9b-a641-4f47151b7934",
                            "msgid": "131e4aa1-872e-4ab8-aba7-fc2fb39bdcab",
                            "status": "successful"
                        },
                        "responseCode": "OK",
                        "result": {
                            "response": [
                                {
                                    "rootOrgId": "*",
                                    "key": "content.courseunit.unitsave.*",
                                    "status": "SUCCESS"
                                }
                            ]
                        },
                        "ts": "2020-12-09T11:34:47.993Z",
                        "ver": "1.0"
                    }
        '400':
          description: >-
            BAD REQUEST. "Update Form" operation failed. You may have missed
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/formapiFailedResponseHeader'
        '500':
          description: >-
            INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/formapiFailedResponseHeader'
      security:
        - bearer: []
      x-codegen-request-body-name: Body
  /data/v1/form/read:
    post:
      tags:
        - Form API(s)
      summary: Read Form
      description: >-
        This API is used to view and read the form data and other fields of the
        form

          - The endpoint for **Read Form** is `/plugin/v1/form/read`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: FormRead
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
        - name: Content-Type
          in: header
          description: |-
            The Content Type entity is the media type of the resource.
             Possible media types can be:- 
               - Application/json
               - Multipart/form-data
               - Application/x-www-form-urlencoded
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the request for reading a form.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/formapiformReadRequest'
        required: true
      responses:
        '200':
          description: SUCCESS. The "Read Form data" operation was successful!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/formapireadResponse'
              examples:
                Course Unit:
                  value: |-
                    {
                        "id": "api.form.read",
                        "params": {
                            "resmsgid": "b0cbec6a-a602-481b-b1c4-cd4230652c52",
                            "msgid": "c02e139b-07ce-485d-8967-f9eed2bf6bdc",
                            "status": "successful"
                        },
                        "responseCode": "OK",
                        "result": {
                            "form": {
                                "type": "content",
                                "subtype": "courseunit",
                                "action": "unitsave",
                                "component": "*",
                                "framework": "*",
                                "data": {
                                    "templateName": "unitMetaTemplate",
                                    "action": "unitsave",
                                    "fields": [
                                        {
                                            "code": "name",
                                            "dataType": "text",
                                            "description": "Title of the content",
                                            "editable": true,
                                            "index": 1,
                                            "inputType": "text",
                                            "label": "Title",
                                            "name": "Title",
                                            "placeholder": "Enter the Title ",
                                            "renderingHints": {},
                                            "required": true,
                                            "visible": true
                                        },
                                        {
                                            "code": "description",
                                            "dataType": "text",
                                            "description": "Brief description",
                                            "editable": true,
                                            "index": 2,
                                            "inputType": "textarea",
                                            "label": "Description",
                                            "name": "Description",
                                            "placeholder": "Description",
                                            "renderingHints": {},
                                            "required": true,
                                            "visible": true
                                        },
                                        {
                                            "code": "keywords",
                                            "dataType": "list",
                                            "description": "Keywords for the content",
                                            "editable": true,
                                            "index": 3,
                                            "inputType": "keywordsuggestion",
                                            "label": "keywords",
                                            "name": "Keywords",
                                            "placeholder": "Enter Keywords",
                                            "required": true,
                                            "visible": true
                                        },
                                        {
                                            "code": "topic",
                                            "dataType": "list",
                                            "description": "Choose a topic",
                                            "editable": true,
                                            "index": 4,
                                            "inputType": "topicselector",
                                            "label": "Topics",
                                            "name": "Topics",
                                            "placeholder": "Choose Topics",
                                            "renderingHints": {},
                                            "required": false,
                                            "visible": true
                                        }
                                    ]
                                },
                                "created_on": "2020-12-09T11:31:12.565Z",
                                "last_modified_on": "2020-12-09T11:34:46.917Z",
                                "rootOrgId": "*"
                            }
                        },
                        "ts": "2020-12-09T11:36:19.586Z",
                        "ver": "1.0"
                    }
        '400':
          description: >-
            BAD REQUEST. "Read Form data" operation failed. You may have missed
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/formapiFailedResponseHeader'
        '500':
          description: >-
            INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/formapiFailedResponseHeader'
      security:
        - bearer: []
      x-codegen-request-body-name: Body
  '/user/v1/notification/email ':
    post:
      tags:
        - Notification APIs
      summary: ' Notifiying Users'
      description: >-
        This API is associated with notifying a user on the Sunbird Platform. If
        the
         request will contain the mode attribute with value as sms, then the user will be notified
         via sms else the user will be notified with email. During sms notification you can pass list of phone number or list of phone number and userid both. 

        - The **_/email/_** endpoint executes the notification request based on
        parameters
          provided as metadata in the request body.
        - It is mandatory to provide values for parameters marked with * . 

        - Mandatory fields cannot be null or empty.
      operationId: '{{host}}/user/v1/notification/email '
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: |-
          The body refers to the format of the request.
            - The body contains metadata about the notification to be sent.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notificationapiemailRequest'
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Notifying User" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notificationapiContentCreateResponse'
              example:
                id: api.notification.email
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: null
                  status: success
                  errmsg: null.
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            BAD REQUEST. The "Notifying User" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notificationapiContentCreateErrorResponse'
              example:
                id: api.otp.generate
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: INVALID_PARAMETER_VALUE
                  status: INVALID_PARAMETER_VALUE
                  errmsg: >-
                    Invalid value 5ee4a77c-4600-46de-a938-dsdsdsdb for parameter
                    recipientUserIds. Please provide a valid value.
                responseCode: SERVER_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notificationapiContentCreateErrorResponse'
              example:
                id: api.notification.email
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: INTERNAL_ERROR
                  status: INTERNAL_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
  '/course/v1/hierarchy/{course-id}':
    get:
      tags:
        - Course Hierarchy APIs
      summary: Get Course Hierarchy
      description: >-
        - This API is associated with fetching the course hierarchy using a
        specific course ID on the Sunbird Platform.

        - The endpoint for Get Course Hierarchy is /hierarchy/{Course_ID}

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: GetCourseHierarchy
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible
            media types can be:- \n  - application/json
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request 
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{api-key}}'
        - name: x-authenticated-user-token
          in: header
          description: The alphanumeric string to access the API
          required: false
          style: simple
          schema:
            type: string
            example: '{{authToken}}'
        - name: course-id
          in: path
          description: identifier of course to get hierarchy
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: SUCCESS. The course get hierarchy operation was successful!
          headers: {}
          content:
            application/json; charset=utf-8:
              schema:
                $ref: >-
                  #/components/schemas/coursehierarchyapiCoursegethierarchy-Success
              example:
                id: api.course.hierarchy
                ver: 1
                ts: 2020-12-31T05:40:05.182Z
                params:
                  resmsgid: a27e2de0-4b2a-11eb-9b0c-abcfbdf41bc3
                  msgid: a27c5920-4b2a-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  content:
                    ownershipType:
                      - createdBy
                    copyright: Sunbird
                    keywords:
                      - Traingle Inequality
                      - Perimeter
                    channel: b00bc992ef25f1a9a8d63291e20efc8d
                    downloadUrl: >-
                      https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1131680608828047361113/test-course-8-dec_1607429540479_do_1131680608828047361113_1.0_spine.ecar
                    organisation:
                      - Sunbird
                    language:
                      - English
                    mimeType: application/vnd.ekstep.content-collection
                    variants:
                      online:
                        ecarUrl: >-
                          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1131680608828047361113/test-course-8-dec_1607429540833_do_1131680608828047361113_1.0_online.ecar
                        size: 6598
                      spine:
                        ecarUrl: >-
                          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1131680608828047361113/test-course-8-dec_1607429540479_do_1131680608828047361113_1.0_spine.ecar
                        size: 109650
                    leafNodes:
                      - do_1126972421999820801361
                      - do_1126972168312832001322
                      - do_112835336960000000152
                    c_sunbird_dev_private_batch_count: 0
                    objectType: Content
                    appIcon: >-
                      https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_1131680608828047361113/artifact/indian-home-as-per-vastu-1366x768.thumb.jpg
                    children:
                      - ownershipType:
                          - createdBy
                        parent: do_1131680608828047361113
                        code: 92a1e47b-36d7-407c-9dbd-1d5277a58b1b
                        credentials:
                          enabled: 'No'
                        channel: b00bc992ef25f1a9a8d63291e20efc8d
                        language:
                          - English
                        mimeType: application/vnd.ekstep.content-collection
                        idealScreenSize: normal
                        createdOn: 2020-12-08T12:12:03.749Z
                        objectType: Content
                        primaryCategory: Course Unit
                        children:
                          - ownershipType:
                              - createdBy
                            copyright: Sunbird
                            previewUrl: 'https://www.youtube.com/watch?v=dQxczxQmV_k'
                            subject:
                              - Math
                            downloadUrl: >-
                              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_112835336960000000152/basic-geometrical-ideas_1566813767133_do_112835336960000000152_1.0.ecar
                            channel: b00bc992ef25f1a9a8d63291e20efc8d
                            questions: []
                            organisation:
                              - Sunbird
                            showNotification: true
                            language:
                              - English
                            variants:
                              spine:
                                ecarUrl: >-
                                  https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_112835336960000000152/basic-geometrical-ideas_1566813767294_do_112835336960000000152_1.0_spine.ecar
                                size: 38726
                            mimeType: video/x-youtube
                            apoc_text: APOC
                            gradeLevel:
                              - Grade 6
                            appIcon: >-
                              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_112835336960000000152/artifact/06_maths_book_1566813333849.thumb.jpg
                            primaryCategory: Explanation Content
                            appId: dev.sunbird.portal
                            usesContent: []
                            artifactUrl: 'https://www.youtube.com/watch?v=dQxczxQmV_k'
                            contentEncoding: identity
                            me_totalPlaySessionCount: '{"portal":5}'
                            lockKey: 6ed43a33-b998-4df0-aac6-2b763c016c13
                            contentType: Resource
                            apoc_num: 1
                            lastUpdatedBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
                            identifier: do_112835336960000000152
                            audience:
                              - Student
                            visibility: Default
                            author: b00bc992ef25f1a9a8d63291e20efc8d
                            consumerId: 4e525af6-2362-4edc-acf5-9ef9d3f72b3b
                            mediaType: content
                            itemSets: []
                            osId: org.ekstep.quiz.app
                            lastPublishedBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
                            version: 1
                            pragma:
                              - external
                            prevState: Review
                            license: Standard YouTube License
                            size: 38726
                            lastPublishedOn: 2019-08-26T10:02:47.128Z
                            concepts: []
                            name: Basic Geometrical ideas
                            status: Live
                            code: 6a3b478c-0665-4069-b7a4-d93902e4c721
                            apoc_json: '{"batch": true}'
                            methods: []
                            streamingUrl: 'https://www.youtube.com/watch?v=dQxczxQmV_k'
                            medium:
                              - English
                            posterImage: >-
                              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_112835334818643968148/artifact/06_maths_book_1566813333849.jpg
                            idealScreenSize: normal
                            createdOn: 2019-08-26T09:59:53.750Z
                            contentDisposition: online
                            lastUpdatedOn: 2019-08-26T10:02:46.685Z
                            SYS_INTERNAL_LAST_UPDATED_ON: 2020-02-25T12:33:40.719Z
                            dialcodeRequired: 'No'
                            creator: Creation
                            lastStatusChangedOn: 2019-08-26T10:02:47.592Z
                            createdFor:
                              - ORG_001
                            os:
                              - All
                            libraries: []
                            pkgVersion: 1
                            versionKey: 1566813766685
                            me_totalTimeSpent: '{"portal":137}'
                            idealScreenDensity: hdpi
                            s3Key: >-
                              ecar_files/do_112835336960000000152/basic-geometrical-ideas_1566813767133_do_112835336960000000152_1.0.ecar
                            framework: NCFCOPY
                            lastSubmittedOn: 2019-08-26T10:00:23.026Z
                            createdBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
                            compatibilityLevel: 4
                            board: CBSE
                            resourceType: Learn
                            index: 1
                            depth: 2
                            parent: do_1131680626585518081116
                            objectType: Content
                        contentDisposition: inline
                        lastUpdatedOn: 2020-12-08T12:12:19.561Z
                        contentEncoding: gzip
                        contentType: CourseUnit
                        dialcodeRequired: 'No'
                        trackable:
                          enabled: 'No'
                          autoBatch: 'No'
                        identifier: do_1131680626585518081116
                        lastStatusChangedOn: 2020-12-08T12:12:03.749Z
                        audience:
                          - Student
                        os:
                          - All
                        visibility: Parent
                        index: 1
                        mediaType: content
                        osId: org.ekstep.launcher
                        languageCode:
                          - en
                        version: 2
                        versionKey: 1607429523749
                        license: CC BY 4.0
                        idealScreenDensity: hdpi
                        framework: NCFCOPY
                        depth: 1
                        compatibilityLevel: 1
                        name: Untitled Course Unit
                        status: Live
                        lastPublishedOn: 2020-12-08T12:12:20.303Z
                        pkgVersion: 1
                        leafNodesCount: 1
                        leafNodes:
                          - do_112835336960000000152
                        downloadUrl: >-
                          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1131680608828047361113/test-course-8-dec_1607429540479_do_1131680608828047361113_1.0_spine.ecar
                        variants: >-
                          {"online":{"ecarUrl":"https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1131680608828047361113/test-course-8-dec_1607429540833_do_1131680608828047361113_1.0_online.ecar","size":6598.0},"spine":{"ecarUrl":"https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1131680608828047361113/test-course-8-dec_1607429540479_do_1131680608828047361113_1.0_spine.ecar","size":109650.0}}
                      - ownershipType:
                          - createdBy
                        parent: do_1131680608828047361113
                        copyright: Sunbird
                        code: b409d492-97ec-484c-bcb1-a51bbae9c917
                        credentials:
                          enabled: 'No'
                        channel: b00bc992ef25f1a9a8d63291e20efc8d
                        language:
                          - English
                        mimeType: application/vnd.ekstep.content-collection
                        idealScreenSize: normal
                        createdOn: 2020-12-08T12:12:03.748Z
                        objectType: Content
                        primaryCategory: Course Unit
                        children:
                          - ownershipType:
                              - createdFor
                            previewUrl: 'https://www.youtube.com/watch?v=BiagrTl2y4o'
                            keywords:
                              - Traingle Inequality
                            subject:
                              - Mathematics
                            downloadUrl: >-
                              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1126972168312832001322/traingle-inequality_1549953441448_do_1126972168312832001322_1.0.ecar
                            channel: b00bc992ef25f1a9a8d63291e20efc8d
                            questions: []
                            organisation:
                              - Sunbird
                              - QA ORG
                            showNotification: true
                            language:
                              - English
                            variants:
                              spine:
                                ecarUrl: >-
                                  https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1126972168312832001322/traingle-inequality_1549953441719_do_1126972168312832001322_1.0_spine.ecar
                                size: 17143
                            mimeType: video/x-youtube
                            apoc_text: APOC
                            appIcon: >-
                              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_1126972168312832001322/artifact/math_1549943542752.thumb.jpg
                            gradeLevel:
                              - Grade 3
                            primaryCategory: Explanation Content
                            appId: dev.sunbird.portal
                            usesContent: []
                            artifactUrl: 'https://www.youtube.com/watch?v=BiagrTl2y4o'
                            contentEncoding: identity
                            lockKey: 9cb2c75d-6712-4829-853b-ce2a0714dca3
                            contentType: Resource
                            apoc_num: 1
                            lastUpdatedBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
                            identifier: do_1126972168312832001322
                            audience:
                              - Student
                            visibility: Default
                            author: b00bc992ef25f1a9a8d63291e20efc8d
                            consumerId: 9393568c-3a56-47dd-a9a3-34da3c821638
                            mediaType: content
                            itemSets: []
                            osId: org.ekstep.quiz.app
                            lastPublishedBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
                            pragma:
                              - external
                            prevState: Review
                            license: Standard YouTube License
                            lastPublishedOn: 2019-02-12T06:37:21.448Z
                            size: 17141
                            concepts: []
                            name: Traingle Inequality
                            status: Live
                            code: 6aeb10a0-3333-4214-a834-ed98c32ab5eb
                            apoc_json: '{"batch": true}'
                            methods: []
                            streamingUrl: 'https://www.youtube.com/watch?v=BiagrTl2y4o'
                            medium:
                              - English
                            posterImage: >-
                              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_1126971374955151361222/artifact/math_1549943542752.jpg
                            idealScreenSize: normal
                            createdOn: 2019-02-12T06:33:46.475Z
                            contentDisposition: online
                            lastUpdatedOn: 2019-02-12T06:37:20.761Z
                            SYS_INTERNAL_LAST_UPDATED_ON: 2019-02-12T06:37:22.237Z
                            dialcodeRequired: 'No'
                            owner: QA ORG
                            creator: Creation
                            createdFor:
                              - ORG_001
                              - 0123653943740170242
                            os:
                              - All
                            libraries: []
                            pkgVersion: 1
                            versionKey: 1549953440766
                            idealScreenDensity: hdpi
                            s3Key: >-
                              ecar_files/do_1126972168312832001322/traingle-inequality_1549953441448_do_1126972168312832001322_1.0.ecar
                            framework: NCFCOPY
                            lastSubmittedOn: 2019-02-12T06:34:32.580Z
                            createdBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
                            compatibilityLevel: 4
                            ownedBy: 0123653943740170242
                            board: CBSE
                            resourceType: Learn
                            index: 1
                            depth: 2
                            parent: do_1131680626585436161114
                            objectType: Content
                        contentDisposition: inline
                        lastUpdatedOn: 2020-12-08T12:12:19.561Z
                        contentEncoding: gzip
                        contentType: CourseUnit
                        dialcodeRequired: 'No'
                        trackable:
                          enabled: 'No'
                          autoBatch: 'No'
                        identifier: do_1131680626585436161114
                        lastStatusChangedOn: 2020-12-08T12:12:03.748Z
                        audience:
                          - Student
                        os:
                          - All
                        visibility: Parent
                        index: 2
                        mediaType: content
                        osId: org.ekstep.launcher
                        languageCode:
                          - en
                        version: 2
                        versionKey: 1607429523748
                        license: CC BY 4.0
                        idealScreenDensity: hdpi
                        framework: NCFCOPY
                        depth: 1
                        compatibilityLevel: 1
                        name: Untitled Course Unit
                        status: Live
                        lastPublishedOn: 2020-12-08T12:12:20.303Z
                        pkgVersion: 1
                        leafNodesCount: 1
                        leafNodes:
                          - do_1126972168312832001322
                        downloadUrl: >-
                          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1131680608828047361113/test-course-8-dec_1607429540479_do_1131680608828047361113_1.0_spine.ecar
                        variants: >-
                          {"online":{"ecarUrl":"https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1131680608828047361113/test-course-8-dec_1607429540833_do_1131680608828047361113_1.0_online.ecar","size":6598.0},"spine":{"ecarUrl":"https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1131680608828047361113/test-course-8-dec_1607429540479_do_1131680608828047361113_1.0_spine.ecar","size":109650.0}}
                      - ownershipType:
                          - createdBy
                        parent: do_1131680608828047361113
                        copyright: Sunbird
                        code: cbb27b2a-5e52-4e7e-b22a-e90e388b7a4d
                        credentials:
                          enabled: 'No'
                        channel: b00bc992ef25f1a9a8d63291e20efc8d
                        language:
                          - English
                        mimeType: application/vnd.ekstep.content-collection
                        idealScreenSize: normal
                        createdOn: 2020-12-08T12:12:03.750Z
                        objectType: Content
                        primaryCategory: Course Unit
                        children:
                          - ownershipType:
                              - createdFor
                            previewUrl: 'https://www.youtube.com/watch?v=JAy_CETEyUM'
                            keywords:
                              - Perimeter
                            subject:
                              - Mathematics
                            downloadUrl: >-
                              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1126972421999820801361/perimeter_1549956428598_do_1126972421999820801361_1.0.ecar
                            channel: b00bc992ef25f1a9a8d63291e20efc8d
                            questions: []
                            organisation:
                              - Sunbird
                              - QA ORG
                            showNotification: true
                            language:
                              - English
                            variants:
                              spine:
                                ecarUrl: >-
                                  https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1126972421999820801361/perimeter_1549956428849_do_1126972421999820801361_1.0_spine.ecar
                                size: 17132
                            mimeType: video/x-youtube
                            apoc_text: APOC
                            appIcon: >-
                              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_1126972421999820801361/artifact/math_1549943542752.thumb.jpg
                            gradeLevel:
                              - Grade 7
                            primaryCategory: Explanation Content
                            appId: dev.sunbird.portal
                            usesContent: []
                            artifactUrl: 'https://www.youtube.com/watch?v=JAy_CETEyUM'
                            contentEncoding: identity
                            lockKey: a16c52b4-35c3-473b-a678-fedf12ef8dcc
                            contentType: Resource
                            apoc_num: 1
                            lastUpdatedBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
                            identifier: do_1126972421999820801361
                            audience:
                              - Student
                            visibility: Default
                            author: b00bc992ef25f1a9a8d63291e20efc8d
                            consumerId: 9393568c-3a56-47dd-a9a3-34da3c821638
                            mediaType: content
                            itemSets: []
                            osId: org.ekstep.quiz.app
                            lastPublishedBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
                            pragma:
                              - external
                            prevState: Review
                            license: Standard YouTube License
                            size: 17132
                            lastPublishedOn: 2019-02-12T07:27:08.597Z
                            concepts: []
                            name: Perimeter
                            status: Live
                            code: ad588332-34e1-4b49-a419-9226980bd19c
                            apoc_json: '{"batch": true}'
                            methods: []
                            streamingUrl: 'https://www.youtube.com/watch?v=JAy_CETEyUM'
                            medium:
                              - English
                            posterImage: >-
                              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_1126971374955151361222/artifact/math_1549943542752.jpg
                            idealScreenSize: normal
                            createdOn: 2019-02-12T07:25:23.239Z
                            contentDisposition: online
                            lastUpdatedOn: 2019-02-12T07:27:07.975Z
                            SYS_INTERNAL_LAST_UPDATED_ON: 2019-02-12T07:27:09.330Z
                            dialcodeRequired: 'No'
                            owner: QA ORG
                            creator: Creation
                            createdFor:
                              - ORG_001
                              - 0123653943740170242
                            os:
                              - All
                            libraries: []
                            pkgVersion: 1
                            versionKey: 1549956427975
                            idealScreenDensity: hdpi
                            s3Key: >-
                              ecar_files/do_1126972421999820801361/perimeter_1549956428598_do_1126972421999820801361_1.0.ecar
                            framework: NCFCOPY
                            lastSubmittedOn: 2019-02-12T07:25:59.766Z
                            createdBy: 874ed8a5-782e-4f6c-8f36-e0288455901e
                            compatibilityLevel: 4
                            ownedBy: 0123653943740170242
                            board: CBSE
                            resourceType: Learn
                            index: 1
                            depth: 2
                            parent: do_1131680626585600001118
                            objectType: Content
                        contentDisposition: inline
                        lastUpdatedOn: 2020-12-08T12:12:19.561Z
                        contentEncoding: gzip
                        contentType: CourseUnit
                        dialcodeRequired: 'No'
                        trackable:
                          enabled: 'No'
                          autoBatch: 'No'
                        identifier: do_1131680626585600001118
                        lastStatusChangedOn: 2020-12-08T12:12:03.750Z
                        audience:
                          - Student
                        os:
                          - All
                        visibility: Parent
                        index: 3
                        mediaType: content
                        osId: org.ekstep.launcher
                        languageCode:
                          - en
                        version: 2
                        versionKey: 1607429523750
                        license: CC BY 4.0
                        idealScreenDensity: hdpi
                        framework: NCFCOPY
                        depth: 1
                        compatibilityLevel: 1
                        name: Untitled Course Unit
                        status: Live
                        lastPublishedOn: 2020-12-08T12:12:20.303Z
                        pkgVersion: 1
                        leafNodesCount: 1
                        leafNodes:
                          - do_1126972421999820801361
                        downloadUrl: >-
                          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1131680608828047361113/test-course-8-dec_1607429540479_do_1131680608828047361113_1.0_spine.ecar
                        variants: >-
                          {"online":{"ecarUrl":"https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1131680608828047361113/test-course-8-dec_1607429540833_do_1131680608828047361113_1.0_online.ecar","size":6598.0},"spine":{"ecarUrl":"https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_1131680608828047361113/test-course-8-dec_1607429540479_do_1131680608828047361113_1.0_spine.ecar","size":109650.0}}
                    primaryCategory: Course
                    appId: dev.dock.portal
                    contentEncoding: gzip
                    collaborators:
                      - 8454cb21-3ce9-4e30-85b5-fade097880d8
                    lockKey: d5b2627c-1aea-479b-8970-ad2af62eba58
                    totalCompressedSize: 72999
                    mimeTypesCount: >-
                      {"application/vnd.ekstep.content-collection":3,"video/x-youtube":3}
                    contentType: Course
                    contentCredits:
                      - id: 0123653943740170242
                        name: QA ORG
                        type: user
                    trackable:
                      enabled: 'Yes'
                      autoBatch: 'Yes'
                    identifier: do_1131680608828047361113
                    lastUpdatedBy: 8454cb21-3ce9-4e30-85b5-fade097880d8
                    audience:
                      - Student
                    toc_url: >-
                      https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_1131680608828047361113/artifact/do_1131680608828047361113_toc.json
                    visibility: Default
                    contentTypesCount: '{"CourseUnit":3,"Resource":3}'
                    consumerId: 273f3b18-5dda-4a27-984a-060c7cd398d3
                    childNodes:
                      - do_1131680626585600001118
                      - do_1126972421999820801361
                      - do_1126972168312832001322
                      - do_112835336960000000152
                      - do_1131680626585518081116
                      - do_1131680626585436161114
                    mediaType: content
                    osId: org.ekstep.quiz.app
                    lastPublishedBy: Ekstep
                    version: 2
                    license: CC BY 4.0
                    prevState: Draft
                    size: 109650
                    lastPublishedOn: 2020-12-08T12:12:20.303Z
                    name: Test Course - 8 Dec
                    status: Live
                    code: org.sunbird.F9fB1d
                    credentials:
                      enabled: 'Yes'
                    prevStatus: Processing
                    description: Enter description for Course
                    posterImage: >-
                      https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_113115644844154880184/artifact/indian-home-as-per-vastu-1366x768.jpg
                    idealScreenSize: normal
                    createdOn: 2020-12-08T12:08:26.985Z
                    batches:
                      - createdFor:
                          - ORG_001
                        endDate: null
                        name: Test Course - 8 Dec
                        batchId: 0131680642631516160
                        enrollmentType: open
                        enrollmentEndDate: null
                        startDate: 2020-12-08T00:00:00.000Z
                        status: 1
                      - createdFor: []
                        endDate: 2021-12-30T00:00:00.000Z
                        name: test cert scalability
                        batchId: 0131680712715878401
                        enrollmentType: open
                        enrollmentEndDate: 2021-12-29T00:00:00.000Z
                        startDate: 2020-12-08T00:00:00.000Z
                        status: 1
                    copyrightYear: 2020
                    contentDisposition: inline
                    lastUpdatedOn: 2020-12-08T12:12:19.561Z
                    SYS_INTERNAL_LAST_UPDATED_ON: 2020-12-08T12:12:21.180Z
                    dialcodeRequired: 'No'
                    lastStatusChangedOn: 2020-12-08T12:12:21.173Z
                    createdFor:
                      - ORG_001
                    creator: Mentor First User
                    os:
                      - All
                    pkgVersion: 1
                    versionKey: 1607429539561
                    idealScreenDensity: hdpi
                    framework: NCFCOPY
                    depth: 0
                    s3Key: >-
                      ecar_files/do_1131680608828047361113/test-course-8-dec_1607429540479_do_1131680608828047361113_1.0_spine.ecar
                    createdBy: 8454cb21-3ce9-4e30-85b5-fade097880d8
                    compatibilityLevel: 4
                    leafNodesCount: 3
                    userConsent: 'Yes'
                    board: NCERT
                    resourceType: Course
                    c_sunbird_dev_open_batch_count: 2
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursehierarchyapiCoursegethierarchy-404NotFound
              example:
                id: api.course.hierarchy
                ver: 1
                ts: 2020-12-31T08:04:30.467Z
                params:
                  resmsgid: cf67bd30-4b3e-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: RESOURCE_NOT_FOUND
                  errmsg: 'rootId {{course-id-invalid}} does not exist'
                responseCode: RESOURCE_NOT_FOUND
                result: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursehierarchyapiUpdateCourseHierarchy-500InternalServerError
              example:
                id: app.error
                ver: 1
                ts: '2020-12-31 12:36:40:598+0000'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /course/v1/hierarchy/update:
    patch:
      tags:
        - Course Hierarchy APIs
      summary: Update Course Hierarchy
      description: >-
        - This API is associated with course hierarchy update on the Sunbird
        Platform.

        - The endpoint for update course hierarchy is /hierarchy/update

        - The fields marked with an asterisk (*) are mandatory. They cannot be
        null or empty.
      operationId: UpdateCourseHierarchy
      parameters:
        - name: Content-Type
          in: header
          description: >-
            The Content Type entity is the media type of the resource.Possible\
            \ media types can be:- \n  - application/json
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request 
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{api-key}}'
        - name: X-Authenticated-User-Token
          in: header
          description: The alphanumeric string to access the API
          required: true
          style: simple
          schema:
            type: string
            example: '{{authToken}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/coursehierarchyapiUpdateCourseHierarchyRequest
            example:
              request:
                data:
                  nodesModified:
                    b9a50833-eff6-4ef5-a2a4-2413f2d51f6c:
                      isNew: true
                      root: false
                      metadata:
                        mimeType: application/vnd.ekstep.content-collection
                        contentType: TextBookUnit
                        code: kp.citrus
                        name: Test_CourseUnit_1
                        description: Test_CourseUnit_desc_1
                        primaryCategory: Textbook Unit
                        additionalCategories:
                          - Textbook
                    b9a50833-eff6-4ef5-a2a4-2413f2d51f6d:
                      isNew: true
                      root: false
                      metadata:
                        mimeType: application/vnd.ekstep.content-collection
                        contentType: TextBookUnit
                        code: kp.citrus
                        name: Test_Course_SubUnit_name_1
                        description: Test_CourseSubUnit_desc_1
                        primaryCategory: Textbook Unit
                        additionalCategories:
                          - Textbook
                  hierarchy:
                    do_113115600734994432116:
                      children:
                        - b9a50833-eff6-4ef5-a2a4-2413f2d51f6d
                        - b9a50833-eff6-4ef5-a2a4-2413f2d51f6c
                      root: true
                    b9a50833-eff6-4ef5-a2a4-2413f2d51f6c:
                      children:
                        - do_1131147758996520961332
                      root: false
        required: true
      responses:
        '200':
          description: SUCCESS. The Course Update Hierarchy was successful!
          headers: {}
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursehierarchyapiUpdateCourseHierarchy-success
              example:
                id: api.course.hierarchy.update
                ver: 3
                ts: '2020-12-31T12:03:39ZZ'
                params:
                  resmsgid: 300dfe2f-715c-4291-ba36-fe2f3e454722
                  msgid: null
                  err: null
                  status: successful
                  errmsg: null
                responseCode: OK
                result:
                  content_id: do_113115600734994432116
                  identifiers:
                    b9a50833-eff6-4ef5-a2a4-2413f2d51f6c: do_1131843376694067201190
                    b9a50833-eff6-4ef5-a2a4-2413f2d51f6d: do_1131843376676208641188
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursehierarchyapiUpdateCourseHierarchy-404NotFound
              example:
                id: api.course.hierarchy.update
                ver: 3
                ts: '2020-12-31T12:22:25ZZ'
                params:
                  resmsgid: eb3acb81-f54d-48f5-88e2-67417f0c9d56
                  msgid: null
                  err: NOT_FOUND
                  status: failed
                  errmsg: >-
                    Error! Node(s) doesn't Exists. | [Invalid Node Id.]:
                    do_113115600734994432116-123
                responseCode: RESOURCE_NOT_FOUND
                result:
                  messages: null
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/coursehierarchyapiUpdateCourseHierarchy-500InternalServerError
              example:
                id: api.course.hierarchy.update
                ver: 3
                ts: '2020-12-31T12:03:39ZZ'
                params:
                  resmsgid: null
                  msgid: null
                  err: INTERNAL_ERROR
                  status: SERVER_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security:
        - bearer: []
  /user/feed/v1/create:
    post:
      tags:
        - User-Feed API's
      summary: Create Feed
      description: |-
        This API is used to create feed for the user
           - The endpoint for **Create User** is `/user/feed/v1/create`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Create-Feed
      parameters:
        - name: x-authenticated-user-token
          in: header
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: Authorization
          in: header
          description: >-
            To make use of any User-Feed API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: ts
          in: header
          required: false
          style: simple
          schema:
            type: string
          description: Timestamp at which given API request is sent.
        - name: X-msgid
          in: header
          required: false
          style: simple
          schema:
            type: string
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
      requestBody:
        description: >-
          - The body payload comprises of the metadata of the user feed being
          created. - The body parameter refers to the format of the request, the
          request body (payload) takes the following media types to make the
          payload:
               - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/feedapiCreate-Feed-Request'
            example:
              request:
                userId: 37634e84-70db-421e-898e-06e6554c4483
                category: user-feed
                priority: 1
                data:
                  dataValue: 'yes'
        required: true
      responses:
        '200':
          description: SUCCESS. The **Create-Feed** operation was successful.
          headers:
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 22
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            content-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 246
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Thu, 19 Nov 2020 05:37:08 GMT'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedapiCreate_Feed_With_Success'
              example:
                id: api.user.feed.create
                ver: v1
                ts: '2020-11-19 11:07:08:428+0530'
                params:
                  resmsgid: null
                  msgid: 0a5ba3fb-554f-4ef6-a5dc-15b97d18e39a
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            BAD REQUEST. The **Create User Feed** operation failed. You may have
            missed input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedapiDelete_Feed_With_400_Response'
              example:
                id: api.user.feed.create
                ver: v1
                ts: '2020-11-19 11:09:27:659+0530'
                params:
                  resmsgid: null
                  msgid: 659e36df-9ccf-4657-bdad-c836abfeb7e1
                  err: MANDATORY_PARAMETER_MISSING
                  status: MANDATORY_PARAMETER_MISSING
                  errmsg: Mandatory parameter category is missing.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedapiRead_Feed_With_500_Server_Error'
              example:
                id: api.user.feed.create
                ver: v1
                ts: '2020-11-19 15:58:19:713+0530'
                params:
                  resmsgid: null
                  msgid: c9bd2899-0c46-4bec-8ef0-759e352d9363
                  err: null
                  status: SERVER_ERROR
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  /user/feed/v1/update:
    patch:
      tags:
        - User-Feed API's
      summary: Update Feed
      description: >-
        This API is used to to update the user-related feed based on the
        feed-id, category and userId
           - The endpoint for **Update user feed** is `/user/feed/v1/update`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      operationId: Update-Feed
      parameters:
        - name: x-authenticated-user-token
          in: header
          description: >-
            It is a unique token/key to authenticate the user-feed each time an
            API is called. For corresponding sessions this token is used, not
            your actual username/password
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: ts
          in: header
          required: false
          style: simple
          schema:
            type: string
          description: Timestamp at which given API request is sent.
        - name: X-msgid
          in: header
          required: false
          style: simple
          schema:
            type: string
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
      requestBody:
        description: >-
          - The body payload comprises of the metadata of the user feed being
          updated. - The body parameter refers to the format of the request, the
          request body (payload) takes the following media types to make the
          payload:
               - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/feedapiUpdate-Feed-Request'
            example:
              request:
                userId: 37634e84-70db-421e-898e-06e6554c4483
                category: user-feed
                feedId: 22ba004f-3b07-429e-bb9a-0bd3dfb21d2b
        required: true
      responses:
        '200':
          description: SUCCESS. The **Update-Feed** operation was successful.
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Thu, 19 Nov 2020 11:52:08 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 242
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29997
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 22
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 2719
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 61
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedapiUpdate_Feed_With_Success_Response'
              example:
                id: api.user.feed.update
                ver: v1
                ts: '2020-11-19 11:52:08:786+0000'
                params:
                  resmsgid: null
                  msgid: f4c94ce48d50877ab32bd6e46fb3a315
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            BAD REQUEST. The **Update User Feed** operation failed. You may have
            missed input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedapiDelete_Feed_With_400_Response'
              example:
                id: api.user.feed.update
                ver: v1
                ts: '2020-11-19 12:11:27:977+0000'
                params:
                  resmsgid: null
                  msgid: 696b179ccac2e0f94b5d39ee111e8c6d
                  err: MANDATORY_PARAMETER_MISSING
                  status: MANDATORY_PARAMETER_MISSING
                  errmsg: Mandatory parameter category is missing.
                responseCode: CLIENT_ERROR
                result: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedapiDelete_Feed_With_400_Response'
              example:
                id: api.user.feed.update
                ver: v1
                ts: '2020-11-19 11:50:07:319+0000'
                params:
                  resmsgid: null
                  msgid: e0d0790e5c1e1fb2b59761b6d6281c98
                  err: UNAUTHORIZED_USER
                  status: UNAUTHORIZED_USER
                  errmsg: You are not authorized.
                responseCode: UNAUTHORIZED
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedapiRead_Feed_With_500_Server_Error'
              example:
                id: api.user.feed.update
                ver: v1
                ts: '2020-11-19 15:58:19:713+0530'
                params:
                  resmsgid: null
                  msgid: c9bd2899-0c46-4bec-8ef0-759e352d9363
                  err: null
                  status: SERVER_ERROR
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  '/user/v1/feed/{userId}':
    get:
      tags:
        - User-Feed API's
      summary: Get user feed by User ID
      description: |-
        This API is used to to read the user-related feed based on the user-id
           - The endpoint for **Read user feed** is `/user/v1/feed/{userId}`  
      operationId: Read-Feed
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: X-Authenticated-User-Token
          in: header
          description: >-
            It is a unique token/key to authenticate the user-feed each time an
            API is called. For corresponding sessions this token is used, not
            your actual username/password
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: ts
          in: header
          required: false
          style: simple
          schema:
            type: string
          description: Timestamp at which given API request is sent.
        - name: X-msgid
          in: header
          required: false
          style: simple
          schema:
            type: string
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
        - name: userId
          in: path
          description: ''
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: SUCCESS. The **Get User by User ID** operation was successful.
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Fri, 20 Nov 2020 05:57:53 GMT'
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Accept-Encoding
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29999
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 533
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 26
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 10
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
            Content-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: gzip
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedapiRead_Feed_With_Success_Response'
              example:
                id: api.user.feed
                ver: v1
                ts: '2020-11-20 05:57:53:209+0000'
                params:
                  resmsgid: null
                  msgid: 02119170c396bfff28a5beed2c67bf51
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response:
                    userFeed:
                      - identifier: a92cd18a-9e5a-406b-ade0-ccf465e85076
                        data:
                          dataValue: 'yes'
                        id: a92cd18a-9e5a-406b-ade0-ccf465e85076
                        category: user-feed
                        priority: 1
                        userId: 37634e84-70db-421e-898e-06e6554c4483
                        createdOn: 1605787188737
                        status: unread
                      - identifier: be330602-5ed7-400b-a9ad-c0182ec06492
                        data:
                          dataValue: 'yes'
                        id: be330602-5ed7-400b-a9ad-c0182ec06492
                        category: user-feed
                        priority: 1
                        userId: 37634e84-70db-421e-898e-06e6554c4483
                        createdOn: 1605787210529
                        status: unread
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedapiDelete_Feed_With_400_Response'
              example:
                id: api.user.feed
                ver: v1
                ts: '2020-11-19 15:38:09:622+0530'
                params:
                  resmsgid: null
                  msgid: fda3921a-def3-41d9-a094-6769b6c3849d
                  err: UNAUTHORIZED_USER
                  status: UNAUTHORIZED_USER
                  errmsg: You are not authorized.
                responseCode: UNAUTHORIZED
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedapiRead_Feed_With_500_Server_Error'
              example:
                id: api.user.feed
                ver: v1
                ts: '2020-11-19 15:58:19:713+0530'
                params:
                  resmsgid: null
                  msgid: c9bd2899-0c46-4bec-8ef0-759e352d9363
                  err: null
                  status: SERVER_ERROR
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  /user/feed/v1/delete:
    post:
      tags:
        - User-Feed API's
      summary: Delete   Feed
      description: |-
        This API is used to to delete the user-related feed based on the feed-id
           - The endpoint for **Delete user feed** is `/user/feed/v1/delete`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.Delete-Feed api
      operationId: Delete-Feed
      parameters:
        - name: Authorization
          in: header
          description: >-
            To make use of any User API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          required: true
          style: simple
          schema:
            type: string
            example: '{{authorization}}'
        - name: X-Authenticated-User-Token
          in: header
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          required: true
          style: simple
          schema:
            type: string
            example: '{{user_token}}'
        - name: ts
          in: header
          required: false
          style: simple
          schema:
            type: string
          description: Timestamp at which given API request is sent.
        - name: X-msgid
          in: header
          required: false
          style: simple
          schema:
            type: string
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
      requestBody:
        description: >-
          - The body payload comprises of the metadata of the user feed being
          deleted. - The body parameter refers to the format of the request, the
          request body (payload) takes the following media types to make the
          payload:
               - JSON
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/feedapiDelete-Feed-Request'
            example:
              request:
                userId: 37634e84-70db-421e-898e-06e6554c4483
                category: user-feed
                feedId: 22ba004f-3b07-429e-bb9a-0bd3dfb21d2b
        required: true
      responses:
        '200':
          description: SUCCESS. The **Delete-Feed** operation was successful.
          headers:
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'Thu, 19 Nov 2020 12:21:22 GMT'
            Content-Length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 242
            Connection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: keep-alive
            X-RateLimit-Limit-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 30000
            X-RateLimit-Remaining-hour:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 29998
            Referrer-Policy:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 'origin-when-cross-origin, strict-origin-when-cross-origin'
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: DENY
            X-XSS-Protection:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 1; mode=block
            x-response-length:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 22
            X-Content-Type-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: nosniff
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                  example: '*'
            X-Permitted-Cross-Domain-Policies:
              content:
                text/plain:
                  schema:
                    type: string
                  example: master-only
            X-Kong-Upstream-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 14
            X-Kong-Proxy-Latency:
              content:
                text/plain:
                  schema:
                    type: string
                  example: 35
            Via:
              content:
                text/plain:
                  schema:
                    type: string
                  example: kong/0.14.1
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedapiDelete_Feed_With_Success_Response'
              example:
                id: api.user.feed.delete
                ver: v1
                ts: '2020-11-19 12:21:22:090+0000'
                params:
                  resmsgid: null
                  msgid: 008b91a183c2d15f6c0cf9285b6b1f01
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  response: SUCCESS
        '400':
          description: >-
            BAD REQUEST. The **Delete User Feed** operation failed. You may have
            missed input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedapiDelete_Feed_With_400_Response'
              example:
                id: api.user.feed.delete
                ver: v1
                ts: '2020-11-19 12:20:09:062+0000'
                params:
                  resmsgid: null
                  msgid: 68353252308d3c652589faaa505349d2
                  err: MANDATORY_PARAMETER_MISSING
                  status: MANDATORY_PARAMETER_MISSING
                  errmsg: Mandatory parameter category is missing.
                responseCode: CLIENT_ERROR
                result: {}
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/feedapiRead_Feed_With_500_Server_Error'
              example:
                id: api.user.feed.delete
                ver: v1
                ts: '2020-11-19 15:58:19:713+0530'
                params:
                  resmsgid: null
                  msgid: c9bd2899-0c46-4bec-8ef0-759e352d9363
                  err: null
                  status: SERVER_ERROR
                  errmsg: null
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
      security: []
  /lock/v1/list:
    post:
      tags:
        - Lock List
      summary: lock list
      operationId: lock list
      description: >-
        This API searches for a list of Locked resource by a user or system or
        service.
           - The **_lock/v1/list_** endpoint searches the list of  Locked resource.
           - All fields marked with an * are mandatory
           - Required fields cannot be null or empty
           - Backend Route: http://knowledge-mw-service:5000/v1/lock/list
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: This represents the list request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/locklistrequest'
            example:
              request:
                filters:
                  resourceId:
                    - do_11319479631000371211
                    - do_11319851826161254418
                    - do_113107812356022272164
                    - do_1131983093687828481353
                    - do_113197939102253056140
                    - do_113197917149233152139
                    - do_113197913444737024138
                    - do_113197844509425664130
                    - do_113197903995772928137
        required: true
      responses:
        '200':
          description: This represents the list response success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/lockLocklist200'
              example:
                id: api.lock.list
                ver: 1
                ts: 2021-01-21T09:44:03.248Z
                params:
                  resmsgid: 32228b00-5bcd-11eb-9b0c-abcfbdf41bc3
                  msgid: 3247615a-0095-9236-9b6b-357d7b130b6e
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  count: 1
                  data:
                    - lockId: 1d767439-a517-4433-bf46-fb0cca148d31
                      resourceId: do_11319479631000371211
                      resourceType: Content
                      resourceInfo: >-
                        {"contentType":"TextBook","framework":"ekstep_ncert_k-12","identifier":"do_11319479631000371211","mimeType":"application/vnd.ekstep.content-collection"}
                      createdBy: 5a587cc1-e018-4859-a0a8-e842650b9d64
                      creatorInfo: >-
                        {"name":"N11","id":"5a587cc1-e018-4859-a0a8-e842650b9d64"}
                      createdOn: 2021-01-21T09:22:12.577Z
                      deviceId: ad8ed16beb09e7c91534c2af80a1a41e
                      expiresAt: 2021-01-21T10:26:27.591Z
        '500':
          description: This represents the Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locklist500'
              example:
                id: api.lock.list
                ver: 1
                ts: 2021-01-21T12:59:12.456Z
                params:
                  resmsgid: 755de480-5be8-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_LISTING_LOCK_FAILED
                  errmsg: Listing lock failed
                responseCode: SERVER_ERROR
                result: {}
      deprecated: false
  /lock/v1/retire:
    delete:
      tags:
        - Lock Retire
      summary: Lock retire
      operationId: Lock retire
      description: >-
        This API used to retire the Locked resource by a user or system or
        service.
           - The **_lock/v1/retire_** endpoint used to retire  the Locked resource by a user or system or service.
           - All fields marked with an * are mandatory
           - Required fields cannot be null or empty
           - Backend Route: http://knowledge-mw-service:5000/v1/lock/retire
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: This represents the retire success response
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/lockretire200'
              example:
                id: api.lock.retire
                ver: 1
                ts: 2021-01-21T11:07:24.864Z
                params:
                  resmsgid: d7549400-5bd8-11eb-9b0c-abcfbdf41bc3
                  msgid: eb729276-769e-8db2-477a-91548152908b
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result: {}
        '400':
          description: This represents the retire Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lockretire400'
              example:
                id: api.lock.retire
                ver: 1
                ts: 2021-01-21T11:08:43.618Z
                params:
                  resmsgid: 0645ca40-5bd9-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_LOCK_RETIRING_FAILED
                  errmsg: Resource is not locked
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
  /lock/v1/create:
    post:
      tags:
        - Lock Create
      summary: Lock create
      operationId: Lock create
      description: >-
        This API used to create the Lock resource by a user or system or
        service.
           - The **_lock/v1/create_** endpoint search the bulk job approve of the content.
           - All fields marked with an * are mandatory
           - Required fields cannot be null or empty
           - Backend Route: http://knowledge-mw-service:5000/v1/lock/create
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: This represents create request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lockcreaterequest'
            example:
              request:
                resourceId: do_11319479631000371211
                resourceType: Content
                resourceInfo: >-
                  {"contentType":"TextBook","framework":"ekstep_ncert_k-12","identifier":"do_11319479631000371211","mimeType":"application/vnd.ekstep.content-collection"}
                creatorInfo: '{"name":"N11","id":"5a587cc1-e018-4859-a0a8-e842650b9d64"}'
                createdBy: 5a587cc1-e018-4859-a0a8-e842650b9d64
                isRootOrgAdmin: true
        required: true
      responses:
        '200':
          description: This represents the create response body 200
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/lockCreatelock200'
              example:
                id: api.lock.create
                ver: 1
                ts: 2021-01-21T11:14:46.643Z
                params:
                  resmsgid: dea6b430-5bd9-11eb-9b0c-abcfbdf41bc3
                  msgid: 33e7b5d4-7662-bab6-1c06-72e71b8b8221
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  lockKey: bad55f24-8081-4d03-baab-364296062b47
                  expiresAt: 2021-01-21T12:14:46.594Z
                  expiresIn: 60
        '400':
          description: This represents the create response Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/locklockcreate400'
              example:
                id: api.lock.create
                ver: 1
                ts: 2021-01-21T13:09:44.935Z
                params:
                  resmsgid: ee5a8770-5be9-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_LOCK_CREATION_FIELDS_MISSING
                  errmsg: '"resourceInfo" is required'
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
  /lock/v1/refresh:
    patch:
      tags:
        - Lock Refresh
      summary: Lock Refresh
      operationId: refresh
      description: >-
        This API used to refresh the Locked resource by a user or system or
        service.
           - The **_lock/v1/refresh_** endpoint refresh the Locked resource by a user or system or service.
           - All fields marked with an * are mandatory
           - Required fields cannot be null or empty
           - Backend Route: http://knowledge-mw-service:5000/v1/lock/refresh
      parameters:
        - name: Content-Type
          in: header
          description: The Content Type entity is the media type of the resource
          required: true
          style: simple
          schema:
            type: string
            example: application/json
        - name: Authorization
          in: header
          description: >-
            To make use of the API, you require authorization. Raise a request
            to the administrator for the use of the API. You will receive the
            authorization key. Specify the key received, here.
          required: true
          schema:
            type: string
      requestBody:
        description: This represents the refresh request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lockrefreshrequest'
            example:
              request:
                resourceId: do_11316513466772684811649
                resourceType: Content
                lockId: 0e6b1631-93e6-4726-9dcf-0debdba37aa1
        required: true
      responses:
        '200':
          description: This represents the refresh response 200
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/lockrefresh200'
              example:
                id: api.v1.refresh
                ver: 1
                ts: 2021-01-21T11:24:31.981Z
                params:
                  resmsgid: 3b8a31d0-5bdb-11eb-9b0c-abcfbdf41bc3
                  msgid: 3a33a280-5bdb-11eb-9b0c-abcfbdf41bc3
                  status: successful
                  err: null
                  errmsg: null
                responseCode: OK
                result:
                  lockKey: 0e6b1631-93e6-4726-9dcf-0debdba37aa1
                  expiresAt: 2021-01-21T12:24:29.738Z
                  expiresIn: 60
        '400':
          description: This represents the refresh response for Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lockrefresh400'
              example:
                id: api.v1.refresh
                ver: 1
                ts: 2021-01-21T11:27:46.193Z
                params:
                  resmsgid: af4c9810-5bdb-11eb-9b0c-abcfbdf41bc3
                  msgid: null
                  status: failed
                  err: ERR_LOCK_REFRESHING_FIELDS_MISSING
                  errmsg: '"resourceId" is required'
                responseCode: CLIENT_ERROR
                result: {}
      deprecated: false
  /group/v1/create:
    post:
      description: |-
        This API is used to create a group
           - The endpoint for **Create Group** is `/group/v1/create`  
           - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      summary: Create Group
      tags:
        - Group APIs
      operationId: Create Group
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            To make use of any Group API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          required: false
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          schema:
            type: string
        - name: x-authenticated-for
          in: header
          required: false
          description: >-
            Managed User token of registered MUA user performing given API
            request.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupapiCreateGroupRequest'
            examples:
              a:
                summary: Create Group
                value:
                  request:
                    name: Study Group
                    description: This groups belongs to  group study
              b:
                summary: Create group with member
                value:
                  request:
                    name: Maths Group
                    description: This group belongs for studying maths
                    members:
                      - userId: userid
        description: >-
          - The body payload comprises of the metadata of the group being
          created - The body parameter refers to the format of the request, the
          request body (payload) takes the following media types to make the
          payload:
             - JSON
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Create Group" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupCreateResponse'
              example:
                id: api.group.create
                ver: v1
                ts: '2020-12-01 20:52:25:226+0000'
                params: null
                result:
                  groupId: 682473c2-12ba-4a89-b8db-67c2c65ca97a
                responseCode: 200
        '400':
          description: >-
            BAD REQUEST. The "Create Group" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.create
                ver: null
                ts: '2020-12-02 11:09:52:748+0530'
                params:
                  resmsgid: null
                  msgid": 6da747d8-c19f-40cb-9938-fcf0913e301f
                  err: INVALID_REQUESTED_DATA
                  status: INVALID_REQUESTED_DATA
                  errmsg: MANDATORY PARAM request.name IS MISSING
                result: {}
                responseCode: 400
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.create
                ver: null
                ts: '2020-12-02 05:53:25:361+0000'
                params:
                  resmsgid: null
                  msgid: f5e58ea069e93de16e721d0312a195dc
                  err: UNAUTHORIZED
                status: UNAUTHORIZED
                errmsg: You are not authorized.
                result: {}
                responseCode: 401
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.create
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: INTERNAL_ERROR
                  status: INTERNAL_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
        - bearer: []
  /group/v1/update:
    patch:
      description: >-
        This API is used for updating the group related details. This can also
        be used to add/edit/remove members of a group and also to add/remove
        activitties of a group. This API can add details partially as well, for
        example, one member in the request could not be added, because that
        member is inactive or id doesn't exist, still other properties in the
        request is updated. If a member is not added, only the status of that
        will be shown in the “errors” array in response.
          - The endpoint for **Update Group** is `/group/v1/update`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - Once group suspended following operation can only be performed :-
            1. All member are eligible to leave the group. 
            2. Creator will be able to delete the group.
            3. Admin will be able to reactivate the group.
            4. All other operations are not permitted once group is suspended.
      summary: Update Group
      tags:
        - Group APIs
      operationId: Update Group
      parameters:
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          schema:
            type: string
        - name: X-Authenticated-User-Token
          in: header
          required: true
          description: Access token of registered user performing given API request.
          schema:
            type: string
        - name: x-authenticated-for
          in: header
          required: false
          description: >-
            Managed User token of registered MUA user performing given API
            request.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/groupapiUpdateGroupRequest'
            examples:
              a:
                summary: Group Details Update Request
                value:
                  request:
                    groupId: groupid
                    name: Demo Group
                    description: Group name is changed for demo purpose
              b:
                summary: Suspend Group
                value:
                  request:
                    groupId: groupid
                    status: suspended
              c:
                summary: Delete group
                value:
                  request:
                    groupId: groupid
                    status: inactive
              d:
                summary: Add Activities
                value:
                  request:
                    groupId: groupid
                    activities:
                      add:
                        - id: do_activity_id
                          type: Textbook
              e:
                summary: Remove Activities
                value:
                  request:
                    groupId: groupid
                    activities:
                      remove:
                        - do_Activity_id
              f:
                summary: Add Member
                value:
                  request:
                    groupId: groupid
                    members:
                      add:
                        - userId: userid
              g:
                summary: Edit Member
                value:
                  request:
                    groupId: groupid
                    members:
                      edit:
                        - userId: userid
                          role: admin
              h:
                summary: Remove Member
                value:
                  request:
                    groupId: groupid
                    members:
                      remove:
                        - userid
        description: >-
          - The body payload comprises of the metadata about the group to be
          updated. - The body parameter refers to the format of the request, the
          request body (payload) takes the following media types to make the
          payload:
             - JSON
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Update Group" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiUpdateGroupResponse'
              examples:
                a:
                  summary: Update Group Response
                  value:
                    id: d1232323
                    ver: '3.0'
                    ets: '139832389023'
                    responseCode: '200'
                    result:
                      response: success
        '400':
          description: >-
            BAD REQUEST. The "Update Group" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.update
                ver: null
                ts: '2020-12-02 11:09:52:748+0530'
                params:
                  resmsgid: null
                  msgid": 6da747d8-c19f-40cb-9938-fcf0913e301f
                  err: INVALID_REQUESTED_DATA
                  status: INVALID_REQUESTED_DATA
                  errmsg: MANDATORY PARAM request.groupId IS MISSING
                result: {}
                responseCode: 400
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.update
                ver: null
                ts: '2020-12-02 05:53:25:361+0000'
                params:
                  resmsgid: null
                  msgid: f5e58ea069e93de16e721d0312a195dc
                  err: UNAUTHORIZED
                status: UNAUTHORIZED
                errmsg: You are not authorized.
                result: {}
                responseCode: 401
        '404':
          description: >-
            Resource not found. The "Update Group" operation failed ! The
            possible reason for failure is that requested resource not found.
            here resource is group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.update
                ver: null
                ts: '2020-12-02 11:40:57:348+0530'
                params:
                  resmsgid: null
                  msgid: ed1c0b7c-8f10-4a35-9f42-93966d8d97f6
                  err: GROUP_NOT_FOUND
                  status: GROUP_NOT_FOUND
                  errmsg: group does not exist with this group Id sdsds.
                result: {}
                responseCode: 400
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.update
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: INTERNAL_ERROR
                  status: INTERNAL_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
  '/group/v1/read/{groupId}':
    get:
      description: >-
        This API is used for getting a specific group, it is based on the unique
        ID of the group
          - The endpoint for **Get Group by Group ID** is `/group/v1/read/{groupId}`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          - User can pass an optional query parameter 'fields'. The value is a comma separated list of fields whose information is required in response. e.g. fields=members,activities
          - 'members' is to return all the members of the group.
          - 'activities' is to return all the activities of the group along with activity information from search service.
      summary: Get Group by Group ID
      tags:
        - Group APIs
      operationId: Get Group by Group ID
      parameters:
        - in: path
          name: groupId
          required: true
          description: Please append a valid Group Id To the Request URL
          schema:
            type: string
        - in: query
          name: fields
          required: false
          description: >-
            If user need any specific values like, members and activities of the
            group append 'fields' as QueryParam. Ex: fields=members,activities
          schema:
            type: string
        - name: ts
          in: header
          required: false
          description: Timestamp at which given API request is sent.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
        - name: Authorization
          in: header
          required: true
          description: >-
            Specify authorization key (format: Bearer api-key) received from
            administrator when performing given API request.
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          required: true
          description: Access token of registered user performing given API request.
          schema:
            type: string
        - name: x-authenticated-for
          in: header
          required: false
          description: >-
            Managed User token of registered MUA user performing given API
            request.
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK ! Successful operation."Get Group by Group ID" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGetGroupResponse'
              example:
                id: api.group.read
                ver: v1
                ts: '2020-12-02 12:15:30:633+0530'
                params: null
                result:
                  membershipType: moderated
                  updatedBy: 27b9d2ae-3e07-4ebf-909c-985e217417a2
                  createdBy: 27b9d2ae-3e07-4ebf-909c-985e217417a2
                  activities:
                    - id: do_212691674291134464114382
                      type: Course
                  members:
                    - userId: 39c1cdf3-57c6-4614-b96d-27e29d757085
                      groupId: 298eb021-fe35-4448-a97e-ca1987ea0768
                      role: admin
                      status: active
                      createdOn: '2020-10-16 05:29:26:371+0000'
                      createdBy: 39c1cdf3-57c6-4614-b96d-27e29d757085
                      updatedOn: null
                      updatedBy: null
                      removedOn: null
                      removedBy: null
                      visited: null
                      name: satish Nirmalkar
                  name: 17july
                  id: 90e70ade-260d-48d6-a8b0-fd5f3e45b4f6
                  updatedOn: '2020-07-22 10:24:42:316+0530'
                  createdOn: '2020-07-17 13:43:55:561+0530'
                  status: active
                  responseCode: 200
        '400':
          description: >-
            BAD REQUEST,"Get Group by Group ID" operation failed ! The possible
            reason for failure is that you may have given the wrong id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.read
                ver: null
                ts: '2020-12-02 11:09:52:748+0530'
                params:
                  resmsgid: null
                  msgid": 6da747d8-c19f-40cb-9938-fcf0913e301f
                  err: GROUP_NOT_FOUND
                  status: GROUP_NOT_FOUND
                  errmsg: group does not exist with this group Id d.
                result: {}
                responseCode: 400
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.read
                ver: null
                ts: '2020-12-02 05:53:25:361+0000'
                params:
                  resmsgid: null
                  msgid: f5e58ea069e93de16e721d0312a195dc
                  err: UNAUTHORIZED
                status: UNAUTHORIZED
                errmsg: You are not authorized.
                result: {}
                responseCode: 401
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.update
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: INTERNAL_ERROR
                  status: INTERNAL_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
  /group/v1/list:
    post:
      description: |-
        This API is used for listing groups of a particular user.
          - The endpoint for **List Group** is `/group/v1/list`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      summary: List Groups by User
      tags:
        - Group APIs
      operationId: List Groups by User
      parameters:
        - name: Authorization
          in: header
          required: true
          description: >-
            To make use of any Group API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          required: true
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          schema:
            type: string
        - name: x-authenticated-for
          in: header
          required: false
          description: >-
            Managed User token of registered MUA user performing given API
            request. From this LUA and MUA id are seperated and LUA is validated
            against user_id in x-authenticated-user-token
          schema:
            type: string
        - name: ts
          in: header
          required: false
          description: >-
            Timestamp is a sequence of characters or encoded information
            identifying when the list group API call occurred, usually it gives
            date and time of day, mostly accurate to a small fraction of a
            second.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupapiListGroupRequest'
            examples:
              a:
                summary: List Groups
                value:
                  reuqest:
                    userId: userid
        description: >-
          - The body payload comprises of metadata of the groups of the user
          being listed - The body parameter refers to the format of the request,
          the request body (payload) takes the following media types to make the
          payload:
             - JSON
           **Note**: You can list the groups based on user id
            - The userId can be passed inside the filters of the request payload
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."List Group" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiListGroupResponse'
              example:
                id: api.group.list
                ts: '2020-12-02 12:57:58:595+0530'
                ver: v1
                params: null
                result:
                  group:
                    - activities:
                        - id: do_2130548011728240641164
                          type: Course
                        - id: do_21301074192677273611434
                          type: Course
                      createdBy: ab467e6e-1f32-453c-b1d8-c6b5fa6c7b9e
                      createdOn: '2020-07-14 15:04:14:075+0530'
                      id: 01460efa-ee58-4c3a-b171-810999128b8c
                      memberRole: admin
                      membershipType: invite_only
                      name: Maths class 2
                      status: active
                      updatedBy: ab467e6e-1f32-453c-b1d8-c6b5fa6c7b9e
                      updatedOn: '2020-07-17 18:07:53:603+0530'
                    - activities:
                        - id: do_21308363397050368012
                          type: Course
                      createdBy: ab467e6e-1f32-453c-b1d8-c6b5fa6c7b9e
                      createdOn: '2020-08-11 10:56:14:680+0530'
                      description: do_21308363397050368012
                      id: 1481a7d2-00fb-43d3-915b-5251a328e08c
                      memberRole: admin
                      membershipType: invite_only
                      name: Vk-3.2NestedCourse
                      responseCode: 200
                      status: active
                      updatedBy: ab467e6e-1f32-453c-b1d8-c6b5fa6c7b9e
                      updatedOn: '2020-08-11 10:57:13:052+0530'
        '400':
          description: >-
            BAD REQUEST. The "List Group" operation failed ! The possible reason
            for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.list
                ver: null
                ts: '2020-12-02 11:09:52:748+0530'
                params:
                  resmsgid: null
                  msgid": 6da747d8-c19f-40cb-9938-fcf0913e301f
                  err: INVALID_REQUESTED_DATA
                  status: INVALID_REQUESTED_DATA
                  errmsg: MISSING_MANDATORY_PARAMS
                result: {}
                responseCode: 400
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.list
                ver: null
                ts: '2020-12-02 05:53:25:361+0000'
                params:
                  resmsgid: null
                  msgid: f5e58ea069e93de16e721d0312a195dc
                  err: UNAUTHORIZED
                status: UNAUTHORIZED
                errmsg: You are not authorized.
                result: {}
                responseCode: 401
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.list
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: INTERNAL_ERROR
                  status: INTERNAL_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
  /group/v1/delete:
    post:
      description: |-
        This API is used for deleting the groups .
          - The endpoint for **Delete Group** is `/group/v1/delete`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
          
      summary: Delete Group by User
      tags:
        - Group APIs
      operationId: Delete Group by User
      parameters:
        - name: Authorization
          in: header
          required: true
          description: >-
            To make use of any Group API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          required: true
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          schema:
            type: string
        - name: x-authenticated-for
          in: header
          required: false
          description: >-
            Managed User token of registered MUA user performing given API
            request. From this LUA and MUA id are seperated and LUA is validated
            against user_id in x-authenticated-user-token
          schema:
            type: string
        - name: ts
          in: header
          required: false
          description: >-
            Timestamp is a sequence of characters or encoded information
            identifying when the list group API call occurred, usually it gives
            date and time of day, mostly accurate to a small fraction of a
            second.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupapiDeleteGroupRequest'
            example:
              request:
                groupId: 6da747d8-c19f-40cb-9938-fcf0913e301f
        description: >-
          - The body payload comprises of metadata of the groups of the user
          being listed - The body parameter refers to the format of the request,
          the request body (payload) takes the following media types to make the
          payload:
             - JSON
           **Note**: Only creator can  only delete the group 
            - The groupId should be passed on request payload to delete the group
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Delete Group" operation was successfully
            executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiDeleteGroupResponse'
              example:
                id: api.group.delete
                ver: null
                ts: '2020-12-02 11:09:52:748+0530'
                params: null
                result:
                  response: SUCCESS
                responseCode: 200
        '400':
          description: >-
            BAD REQUEST. The "Delete Group" operation failed ! The possible
            reason for failure is that you may have missed providing input for a
            mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.delete
                ver: null
                ts: '2020-12-02 11:09:52:748+0530'
                params:
                  resmsgid: null
                  msgid": 6da747d8-c19f-40cb-9938-fcf0913e301f
                  err: INVALID_REQUESTED_DATA
                  status: INVALID_REQUESTED_DATA
                  errmsg: MANDATORY PARAM request.groupId IS MISSING
                result: {}
                responseCode: 400
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.delete
                ver: null
                ts: '2020-12-02 05:53:25:361+0000'
                params:
                  resmsgid: null
                  msgid: f5e58ea069e93de16e721d0312a195dc
                  err: UNAUTHORIZED
                status: UNAUTHORIZED
                errmsg: You are not authorized.
                result: {}
                responseCode: 401
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.delete
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: INTERNAL_ERROR
                  status: INTERNAL_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
      security:
        - bearer: []
  /group/membership/v1/update:
    post:
      description: >-
        This API is used for updating membership, Currently it supports only to
        update visited flag to verify that user has already visited the group
        once.
          - The endpoint for **Membership Update Group** is `/group/membership/v1/update`
          - The fields marked with an asterisk (*) are mandatory. They cannot be null or empty.
      summary: Group Membership Update by User
      tags:
        - Group APIs
      operationId: Group Membership update by User
      parameters:
        - name: Authorization
          in: header
          required: true
          description: >-
            To make use of any Group API, you require authorization. Raise a
            request to the administrator for the use of the API. You will
            receive the authorization key. Specify the key received, here.
          schema:
            type: string
        - name: x-authenticated-user-token
          in: header
          required: true
          description: >-
            It is a unique token/key to authenticate the user each time an API
            is called. For corresponding sessions this token is used, not your
            actual username/password
          schema:
            type: string
        - name: x-authenticated-for
          in: header
          required: false
          description: >-
            Managed User token of registered MUA user performing given API
            request. From this LUA and MUA id are seperated and LUA is validated
            against user_id in x-authenticated-user-token
          schema:
            type: string
        - name: ts
          in: header
          required: false
          description: >-
            Timestamp is a sequence of characters or encoded information
            identifying when the list group API call occurred, usually it gives
            date and time of day, mostly accurate to a small fraction of a
            second.
          schema:
            type: string
        - name: X-msgid
          in: header
          required: false
          description: >-
            This ID uniquely identifies a request if the same API is executed
            multiple times.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupapiGroupMembershipRequest'
            example:
              request:
                userId: userid
                groups:
                  - groupId: groupid
                    visited: true
        description: >-
          - The body payload comprises of metadata of the groups of the user
          being listed - The body parameter refers to the format of the request,
          the request body (payload) takes the following media types to make the
          payload:
             - JSON
           **Note**: You can delete the group created by a user
            - The groupId should be passed on request payload to delete the group
        required: true
      responses:
        '200':
          description: >-
            OK ! Successful operation."Group Membership Update" operation was
            successfully executed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupMembershipResponse'
              example:
                id: api.group.membership.update
                ver: null
                ts: '2020-12-02 11:09:52:748+0530'
                params: null
                result:
                  response: SUCCESS
                responseCode: 200
        '400':
          description: >-
            BAD REQUEST. The "Group Membership Update" operation failed ! The
            possible reason for failure is that you may have missed providing
            input for a mandatory parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.membership.update
                ver: null
                ts: '2020-12-02 11:09:52:748+0530'
                params:
                  resmsgid: null
                  msgid": 6da747d8-c19f-40cb-9938-fcf0913e301f
                  err: INVALID_REQUESTED_DATA
                  status: INVALID_REQUESTED_DATA
                  errmsg: MANDATORY PARAM request.group IS MISSING
                result: {}
                responseCode: 400
        '401':
          description: Unauthorized User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.membership.update
                ver: null
                ts: '2020-12-02 05:53:25:361+0000'
                params:
                  resmsgid: null
                  msgid: f5e58ea069e93de16e721d0312a195dc
                  err: UNAUTHORIZED
                status: UNAUTHORIZED
                errmsg: You are not authorized.
                result: {}
                responseCode: 401
        '500':
          description: >-
            'INTERNAL SERVER ERROR. We track these errors automatically and try
            to set it right at the earliest. Try refreshing the page. If the
            problem persists contact us at info@sunbird.org.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupapiGroupErrorResponse'
              example:
                id: api.group.membership.update
                ver: v1
                ts: '2020-12-01 10:49:01:948+0000'
                params:
                  resmsgid: null
                  msgid: 12eb0ca45ce4c776fab994d120bedd41
                  err: INTERNAL_ERROR
                  status: INTERNAL_ERROR
                  errmsg: 'Process failed,please try again later.'
                responseCode: SERVER_ERROR
                result: {}
components:
  schemas:
    issuecertificateapiIssueCertificateRequests:
      title: Issue certificate request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/issuecertificateapiRequest'
    issuecertificateapiRequest:
      title: Request
      required:
        - batchId
        - certificate
        - courseId
      type: object
      properties:
        courseId:
          type: string
          description: Course identifier
        batchId:
          type: string
          description: Batch identifier
        certificate:
          type: string
          description: Name of the certificate to be issued
        filters:
          $ref: '#/components/schemas/issuecertificateapiUserCoursesFilter'
    issuecertificateapiUserCoursesFilter:
      title: Issue Certificate Filter
      type: object
      properties:
        status:
          type: string
          description: User's course status
        completionPercentage:
          type: string
          description: Course progress percentage
    issuecertificateapiIssueCertificateResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            courseId:
              type: string
              description: The course identifier
            batchId:
              type: string
              description: The batch identifier
            certificate:
              type: string
              description: The name of the certificate to be issued
            status:
              type: string
              description: The certificate issue status
          description: response details
      description: Issue certificate Response
    issuecertificateapiResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timestamp
        params:
          $ref: '#/components/schemas/issuecertificateapiResponseParams'
        responseCode:
          type: object
          properties: {}
          description: 'API response code '
    issuecertificateapiResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Represents the response Message ID
        msgid:
          type: string
          description: Represents the error Message ID
        err:
          type: string
          description: Represents the Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    issuecertificateapiEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    issuecertificateapiIssueCertificateErrorResponse:
      title: Create Content Error Response
      allOf:
        - $ref: '#/components/schemas/issuecertificateapiEmptyResult'
        - $ref: '#/components/schemas/issuecertificateapiResponseHeader'
    issuecertificateapiApiRequest:
      type: object
      properties:
        id:
          type: string
          description: Represents an API uniquely
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since EPOCH
          format: int64
        params:
          type: object
          properties:
            msgid:
              type: string
              description: Represents the unique ID of the message being sent
            did:
              type: string
              description: Represents the device UUID from which API is called
    issuecertificateapiissuecertificateapiApiResponse:
      required:
        - ets
        - id
        - params
        - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since EPOCH
          format: int64
        params:
          required:
            - msgid
            - resmsgid
            - status
          type: object
          properties:
            msgid:
              type: string
              description: Represents the ID of the message sent
            resmsgid:
              type: string
              description: Represents the ID of the response message
            status:
              type: string
              enum:
                - success
                - error
        responseCode:
          type: string
    otpapigenerateOtpRequest:
      title: Request structure for sending OTP
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/otpapigenOtpRequest'
      example:
        request:
          userId: 372175df-7f44-48df-8aa5-4t6228996b06s
          key: amit@gmail.com
          type: email
    otpapigenOtpRequest:
      title: Request
      required:
        - key
        - type
      type: object
      properties:
        userId:
          type: string
          description: Recipient name to whom mail is sending
        key:
          type: string
          description: Subject of mail
        type:
          type: string
          description: Contents of mail body
    otpapiverifyOtpRequest:
      title: Request structure for verifying OTP
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/otpapiverOtpRequest'
      example:
        request:
          userId: 372175df-7f44-48df-8aa5-4t6228996b06s
          key: amit@gmail.com
          type: email
          otp: '79562'
    otpapiverOtpRequest:
      title: Request
      required:
        - key
        - otp
        - type
      type: object
      properties:
        userId:
          type: string
          description: Recipient name to whom mail is sending
        key:
          type: string
          description: Subject of mail
        type:
          type: string
          description: Contents of mail body
        otp:
          type: string
          description: OTP
    otpapiContentCreateResponse:
      description: Create Content Response
      allOf:
        - $ref: '#/components/schemas/otpapiResultWithNodeId'
        - $ref: '#/components/schemas/otpapiResponseHeader'
    otpapiResultWithNodeId:
      title: Result Body
      type: object
      properties:
        result:
          $ref: '#/components/schemas/otpapiSendOtpResult'
    otpapiResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/otpapiResponseParams'
        responseCode:
          type: object
          properties: {}
          description: 'API response code '
    otpapiSendOtpResult:
      title: Send Otp Result
      type: object
      properties:
        response:
          type: string
          description: >-
            It will contain "SUCCESS" as a value,if the Otp is generated and
            send successfully to the user otherwise user id with reason of
            failure.
    otpapiResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    otpapiContentCreateErrorResponse:
      title: Create Content Error Response
      allOf:
        - $ref: '#/components/schemas/otpapiEmptyResult'
        - $ref: '#/components/schemas/otpapiResponseHeader'
    otpapiEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    groupactivityapiGroupActivityAggRequest:
      title: GroupActivityAggRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/groupactivityapiRequest'
      example:
        request:
          groupId: '{{group-id}}'
          activityId: '{{activity-id}}'
          activityType: Course
    groupactivityapiRequest:
      title: Request
      required:
        - groupId
        - activityId
        - activityType
      type: object
      properties:
        groupId:
          type: string
        activityId:
          type: string
        activityType:
          type: string
      example:
        groupId: '{{group-id}}'
        activityId: '{{activity-id}}'
        activityType: Course
    groupactivityapiGroupActivityAgg-withinvalidactivity-d:
      title: GroupActivityAgg-withinvalidactivity-d
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/groupactivityapigroupactivityapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/groupactivityapigroupactivityapiResult'
      example:
        id: api.group.activity.agg
        ver: v1
        ts: '2020-11-27 16:29:46:161+0000'
        params:
          resmsgid: null
          msgid: 849f418c-7f6e-4a10-9c5c-16b15f8ea86e
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          activity:
            id: '{{activity-id-invalid}}'
            type: Course
            agg:
              - metric: enrolmentCount
                lastUpdatedOn: 1606494586160
                value: 0
          groupId: b0c4a645-807e-41c7-972e-5c48c5b5e5e7
          members: []
    groupactivityapigroupactivityapiParams:
      title: Params
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
          nullable: true
        status:
          type: string
        errmsg:
          type: string
          nullable: true
      example:
        resmsgid: null
        msgid: 849f418c-7f6e-4a10-9c5c-16b15f8ea86e
        err: null
        status: success
        errmsg: null
    groupactivityapigroupactivityapiResult:
      title: Result
      required:
        - activity
        - groupId
        - members
      type: object
      properties:
        activity:
          $ref: '#/components/schemas/groupactivityapiActivity'
        groupId:
          type: string
        members:
          type: array
          items:
            type: string
          description: ''
      example:
        activity:
          id: '{{activity-id-invalid}}'
          type: Course
          agg:
            - metric: enrolmentCount
              lastUpdatedOn: 1606494586160
              value: 0
        groupId: b0c4a645-807e-41c7-972e-5c48c5b5e5e7
        members: []
    groupactivityapiActivity:
      title: Activity
      required:
        - id
        - type
        - agg
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        agg:
          type: array
          items:
            $ref: '#/components/schemas/groupactivityapiAgg'
          description: ''
      example:
        id: '{{activity-id-invalid}}'
        type: Course
        agg:
          - metric: enrolmentCount
            lastUpdatedOn: 1606494586160
            value: 0
    groupactivityapiAgg:
      title: Agg
      required:
        - metric
        - lastUpdatedOn
        - value
      type: object
      properties:
        metric:
          type: string
        lastUpdatedOn:
          type: integer
          format: int64
        value:
          type: integer
          format: int32
      example:
        metric: enrolmentCount
        lastUpdatedOn: 1606494586160
        value: 0
    groupactivityapiGroupActivityAgg-Errorwhilefetchinggroupmembersrecord:
      title: GroupActivityAgg-Errorwhilefetchinggroupmembersrecord
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/groupactivityapigroupactivityapiParams1'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.group.activity.agg
        ver: v1
        ts: '2020-11-27 16:28:59:243+0000'
        params:
          resmsgid: null
          msgid: 28d26091-d6ee-44da-8ea0-01dd71c9dba3
          err: null
          status: SERVER_ERROR
          errmsg: Error while fetching group members record.
        responseCode: SERVER_ERROR
        result: {}
    groupactivityapigroupactivityapiParams1:
      title: Params1
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
          nullable: true
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: null
        msgid: 28d26091-d6ee-44da-8ea0-01dd71c9dba3
        err: null
        status: SERVER_ERROR
        errmsg: Error while fetching group members record.
    systemsettingssetrequest:
      title: setrequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/systemsettingsRequest'
      example:
        request:
          id: userTnc
          field: userTnc
          value: '{"latestVersion":"3.5.0"}'
    systemsettingsRequest:
      title: Request
      required:
        - id
        - field
        - value
      type: object
      properties:
        id:
          type: string
        field:
          type: string
        value:
          type: string
    systemsettingssystemsettingsParams:
      title: Params
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
    systemsettingsSuccessResponse:
      title: SuccessResponse
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/systemsettingssystemsettingsParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/systemsettingssystemsettingsResult'
      example:
        id: api.system.settings.set
        ver: v1
        ts: '2020-12-01 10:47:16:629+0000'
        params:
          resmsgid: null
          msgid: 340d4ef3f113f5db5e81859e18663214
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
          id: userTnc
    systemsettingssystemsettingsResult:
      title: Result
      required:
        - response
        - id
      type: object
      properties:
        response:
          type: string
        id:
          type: string
    systemsettingsResourceDoesnotExist:
      title: ResourceDoesnotExist
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/systemsettingssystemsettingsParams'
        responseCode:
          type: string
        result:
          type: object
    systemsettingsUserNotAuthorized:
      title: UserNotAuthorized
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/systemsettingssystemsettingsParams'
        responseCode:
          type: string
        result:
          type: object
    systemsettingsSuccessResponse1:
      title: SuccessResponse1
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/systemsettingssystemsettingsParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/systemsettingssystemsettingsResult'
    systemsettingssystemsettingsResponse:
      title: Response
      required:
        - id
        - field
        - value
      type: object
      properties:
        id:
          type: string
        field:
          type: string
        value:
          type: string
    systemsettingsm401:
      title: m401
      required:
        - message
      type: object
      properties:
        message:
          type: string
    systemsettingsm500:
      title: m500
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/systemsettingssystemsettingsParams'
        responseCode:
          type: string
        result:
          type: object
    systemsettingsm200:
      title: m200
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/systemsettingssystemsettingsParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/systemsettingsResults'
    systemsettingsResults:
      title: Results
      required:
        - response
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/systemsettingssystemsettingsResponse'
          description: ''
    datasyncapisyncrequest:
      title: Data sync request
      required:
        - params
        - request
      type: object
      properties:
        params:
          type: object
          properties: {}
          description: ''
        request:
          $ref: '#/components/schemas/datasyncapiRequest'
    datasyncapiRequest:
      title: Request
      required:
        - objectType
      type: object
      properties:
        objectType:
          type: string
          description: >-
            Object type that we need to sync,possible object types are
            {user,organisation,batch,user_course}.Object will be sync from
            cassandra to elasticsearch
        objectIds:
          type: array
          description: >-
            provide list of those ids that need to be sync.This is optional, if
            not provided then it will sync all stored ids of provided
            object.incase if data volumn is huge, better to pass objectIds. 
          items:
            type: string
    datasyncapiContentCreateResponse:
      description: Data sync response
      allOf:
        - $ref: '#/components/schemas/datasyncapiResultWithNodeId'
        - $ref: '#/components/schemas/datasyncapiResponseHeader'
    datasyncapiResultWithNodeId:
      title: Result Containing Node Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/datasyncapiNodeId'
    datasyncapiResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/datasyncapiResponseParams'
        responseCode:
          type: object
          properties: {}
          description: 'API response code '
    datasyncapiNodeId:
      title: Node Id
      type: object
      properties:
        node_id:
          type: string
          description: Node Identifier
    datasyncapiResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    datasyncapiContentCreateErrorResponse:
      title: Create Content Error Response
      allOf:
        - $ref: '#/components/schemas/datasyncapiEmptyResult'
        - $ref: '#/components/schemas/datasyncapiResponseHeader'
    datasyncapiEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    questionCreateQuestionRequest:
      title: Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/questionQuestionCreateRequestQuestion'
    questionQuestionCreateRequestQuestion:
      title: Question
      required:
        - question
      type: object
      properties:
        question:
          $ref: '#/components/schemas/questionQuestionCreateRequestQuestionObject'
    questionQuestionCreateRequestQuestionObject:
      title: Object
      required:
        - code
        - mimeType
        - name
        - primaryCategory
      type: object
      properties:
        name:
          type: string
          description: Represents the name of the question
        code:
          type: string
          description: Represents the unique code for the question
        mimeType:
          type: string
          description: Question mime type
        primaryCategory:
          type: string
          description: PrimaryCategory agains which question schema will be validated
    questionUpdateQuestionRequest:
      title: Request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/questionQuestionUpdateRequestQuestion'
      required:
        - request
    questionQuestionUpdateRequestQuestion:
      title: Question
      type: object
      properties:
        question:
          $ref: '#/components/schemas/questionQuestionUpdateRequestQuestionObject'
      required:
        - question
    questionQuestionUpdateRequestQuestionObject:
      title: Object
      required:
        - versionKey
      type: object
      properties:
        versionKey:
          type: string
          description: Represents the transaction update version key of the Question
        description:
          type: string
          description: Represents the description for the Question
    questionCreateQuestionsetRequest:
      title: Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/questionQuestionsetCreateRequestQuestionset'
    questionQuestionsetCreateRequestQuestionset:
      title: Questionset
      required:
        - questionset
      type: object
      properties:
        questionset:
          $ref: >-
            #/components/schemas/questionQuestionsetCreateRequestQuestionsetObject
    questionQuestionsetCreateRequestQuestionsetObject:
      title: Object
      required:
        - code
        - mimeType
        - name
        - primaryCategory
      type: object
      properties:
        name:
          type: string
          description: Represents the name of the questionset
        code:
          type: string
          description: Represents the unique code for the questionset
        mimeType:
          type: string
          description: questionset mime type
        primaryCategory:
          type: string
          description: PrimaryCategory agains which questionset schema will be validated
    questionUpdateQuestionsetRequest:
      title: Request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/questionQuestionsetUpdateRequestQuestionset'
      required:
        - request
    questionQuestionsetUpdateRequestQuestionset:
      title: Questionset
      type: object
      properties:
        questionset:
          $ref: >-
            #/components/schemas/questionQuestionsetUpdateRequestQuestionsetObject
      required:
        - question
    questionQuestionsetUpdateRequestQuestionsetObject:
      title: Object
      required:
        - versionKey
      type: object
      properties:
        versionKey:
          type: string
          description: Represents the transaction update version key of the Questionset
        description:
          type: string
          description: Represents the description for the Questionset
    questionUpdateHierarchyQuestionsetRequest:
      title: Request
      type: object
      properties:
        request:
          $ref: >-
            #/components/schemas/questionQuestionsetUpdateHierarchyRequestQuestionset
      required:
        - request
    questionQuestionsetUpdateHierarchyRequestQuestionset:
      title: Data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/questionQuestionsetUpdateHierarchyRequest'
      required:
        - data
    questionQuestionsetUpdateHierarchyRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/questionQuestionsetNodesModifiedRequest'
        - $ref: '#/components/schemas/questionQuestionsetHierarchyObjectRequest'
    questionQuestionsetNodesModifiedRequest:
      title: NodesModified
      type: object
      properties:
        nodesModified:
          description: objects details to be created or updated
          type: object
      required:
        - nodesModified
    questionQuestionsetHierarchyObjectRequest:
      title: Hierarchy
      type: object
      properties:
        hierarchy:
          description: objects hierarchy details
          type: object
      required:
        - hierarchy
    questionQuestionCreateSuccessResponse:
      description: Response
      type: object
      allOf:
        - $ref: '#/components/schemas/questionResultWithQuestionId'
        - $ref: '#/components/schemas/questionResponseHeader'
    questionResultWithQuestionId:
      title: Result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/questionQuestionId'
    questionQuestionId:
      title: Result
      type: object
      properties:
        identifier:
          type: string
          description: Question Identifier
        versionKey:
          type: string
          description: Question versionKey
    questionQuestionReadSuccessResponse:
      description: Response
      type: object
      allOf:
        - $ref: '#/components/schemas/questionResultWithQuestionMetadata'
        - $ref: '#/components/schemas/questionResponseHeader'
    questionResultWithQuestionMetadata:
      title: Result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/questionResultWithQuestion'
    questionResultWithQuestion:
      title: Question
      type: object
      properties:
        question:
          $ref: '#/components/schemas/questionQuestionWithMetadata'
    questionQuestionWithMetadata:
      title: Object
      type: object
      properties:
        identifier:
          type: string
          description: Question Identifier
        name:
          type: string
          description: Question name
        versionKey:
          type: string
          description: Question versionKey
        code:
          type: string
          description: Question code
        lastStatusChangedOn:
          type: string
          description: Last status changed time
        visibility:
          type: string
          description: Question visibility
        mimeType:
          type: string
          description: Question mimeType
        createdOn:
          type: string
          description: Question createdOn
        objectType:
          type: string
          description: Question objectType
        primaryCategory:
          type: string
          description: Question primaryCategory
        lastUpdatedOn:
          type: string
          description: Question lastUpdatedOn
        status:
          type: string
          description: Question status
    questionQuestionPublishSuccessResponse:
      description: Response
      type: object
      allOf:
        - $ref: '#/components/schemas/questionPublishResultWithQuestion'
        - $ref: '#/components/schemas/questionResponseHeader'
    questionPublishResultWithQuestion:
      title: Result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/questionPublishQuestion'
    questionPublishQuestion:
      title: Result
      type: object
      properties:
        identifier:
          type: string
          description: Question Identifier
        message:
          type: string
          description: Publish message
    questionQuestionsetCreateSuccessResponse:
      description: Response
      type: object
      allOf:
        - $ref: '#/components/schemas/questionResultWithQuestionsetId'
        - $ref: '#/components/schemas/questionResponseHeader'
    questionResultWithQuestionsetId:
      title: Result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/questionQuestionsetId'
    questionQuestionsetId:
      title: Result
      type: object
      properties:
        identifier:
          type: string
          description: Questionset Identifier
        versionKey:
          type: string
          description: Questionset versionKey
    questionQuestionsetReadSuccessResponse:
      description: Response
      type: object
      allOf:
        - $ref: '#/components/schemas/questionResultWithQuestionsetMetadata'
        - $ref: '#/components/schemas/questionResponseHeader'
    questionResultWithQuestionsetMetadata:
      title: Result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/questionResultWithQuestionset'
    questionResultWithQuestionset:
      title: Questionset
      type: object
      properties:
        question:
          $ref: '#/components/schemas/questionQuestionsetWithMetadata'
    questionQuestionsetWithMetadata:
      title: Object
      type: object
      properties:
        identifier:
          type: string
          description: Questionset Identifier
        name:
          type: string
          description: Questionset name
        versionKey:
          type: string
          description: Questionset versionKey
        code:
          type: string
          description: Questionset code
        lastStatusChangedOn:
          type: string
          description: Last status changed time
        visibility:
          type: string
          description: Questionset visibility
        mimeType:
          type: string
          description: Questionset mimeType
        createdOn:
          type: string
          description: Questionset createdOn
        objectType:
          type: string
          description: Questionset objectType
        primaryCategory:
          type: string
          description: Questionset primaryCategory
        lastUpdatedOn:
          type: string
          description: Questionset lastUpdatedOn
        status:
          type: string
          description: Questionset status
    questionQuestionsetPublishSuccessResponse:
      description: Response
      type: object
      allOf:
        - $ref: '#/components/schemas/questionPublishResultWithQuestionset'
        - $ref: '#/components/schemas/questionResponseHeader'
    questionPublishResultWithQuestionset:
      title: Result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/questionPublishQuestionset'
    questionPublishQuestionset:
      title: Result
      type: object
      properties:
        identifier:
          type: string
          description: Questionset Identifier
        message:
          type: string
          description: Publish message
    questionQuestionsetUpdateHierarchySuccessResponse:
      description: Response
      type: object
      allOf:
        - $ref: '#/components/schemas/questionResultWithQuestionsetHierarchy'
        - $ref: '#/components/schemas/questionResponseHeader'
    questionResultWithQuestionsetHierarchy:
      title: Result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/questionQuestionsetHierarchy'
    questionQuestionsetHierarchy:
      title: Result
      type: object
      properties:
        identifier:
          type: string
          description: Questionset Identifier
        identifiers:
          type: object
          description: Object mapping i.e. created or updated
    questionQuestionsetReadHierarchySuccessResponse:
      description: Response
      type: object
      allOf:
        - $ref: '#/components/schemas/questionResultWithQuestionsetHierarchyMetadata'
        - $ref: '#/components/schemas/questionResponseHeader'
    questionResultWithQuestionsetHierarchyMetadata:
      title: Result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/questionResultWithQuestionsetReadHierarchy'
    questionResultWithQuestionsetReadHierarchy:
      title: Questionset
      type: object
      properties:
        questionset:
          $ref: '#/components/schemas/questionQuestionsetWithMetadataHierarchy'
    questionQuestionsetWithMetadataHierarchy:
      title: Object
      type: object
      properties:
        identifier:
          type: string
          description: Questionset Identifier
        name:
          type: string
          description: Questionset name
        versionKey:
          type: string
          description: Questionset versionKey
        code:
          type: string
          description: Questionset code
        lastStatusChangedOn:
          type: string
          description: Last status changed time
        visibility:
          type: string
          description: Questionset visibility
        mimeType:
          type: string
          description: Questionset mimeType
        createdOn:
          type: string
          description: Questionset createdOn
        objectType:
          type: string
          description: Questionset objectType
        primaryCategory:
          type: string
          description: Questionset primaryCategory
        lastUpdatedOn:
          type: string
          description: Questionset lastUpdatedOn
        status:
          type: string
          description: Questionset status
        children:
          type: object
          description: Children of Questionset
    questionQuestionErrorResponse:
      description: Error Response
      type: object
      allOf:
        - $ref: '#/components/schemas/questionEmptyResult'
        - $ref: '#/components/schemas/questionResponseHeader'
    questionQuestionsetErrorResponse:
      description: Error Response
      type: object
      allOf:
        - $ref: '#/components/schemas/questionEmptyResult'
        - $ref: '#/components/schemas/questionResponseHeader'
    questionEmptyResult:
      title: Result
      type: object
      properties:
        result:
          type: object
          description: Result
    questionResponseHeader:
      title: Response
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/questionResponseParams'
        responseCode:
          type: string
          description: 'API response code '
    questionResponseParams:
      title: Params
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    questionListQuestionRequest:
      title: Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/questionQuestionListRequestQuestion'
    questionQuestionListRequestQuestion:
      title: search
      required:
        - search
      type: object
      properties:
        search:
          $ref: '#/components/schemas/questionQuestionListRequestQuestionObject'
    questionQuestionListRequestQuestionObject:
      title: identifier
      required:
        - identifier
      type: array
      items:
        type: string
        description: This is single identifer of a question
    questionQuestionListSuccessResponse:
      description: Response
      type: object
      allOf:
        - $ref: '#/components/schemas/questionListResult'
        - $ref: '#/components/schemas/questionResponseHeader'
    questionListResult:
      title: result
      type: object
      properties:
        questions:
          type: array
          items:
            type: object
            properties:
              mimeType:
                type: string
              idealScreenSize:
                type: string
              audience:
                type: array
                items: {}
                example:
                  - Student
              mediaType:
                type: string
              idealScreenDensity:
                type: string
              dialcodeRequired:
                type: string
              lastStatusChangedOn:
                type: string
              osId:
                type: string
              createdBy:
                type: string
              compatibilityLevel:
                type: integer
              language:
                type: array
                items: {}
                example:
                  - English
              lastUpdatedOn:
                type: string
              contentType:
                type: string
              name:
                type: string
              version:
                type: integer
              license:
                type: string
              framework:
                type: string
              code:
                type: string
              objectType:
                type: string
              identifier:
                type: string
              languageCode:
                type: array
                items: {}
                example:
                  - en
              channel:
                type: string
              contentDisposition:
                type: string
              visibility:
                type: string
              versionKey:
                type: string
              status:
                type: string
              ownershipType:
                type: array
                items: {}
                example:
                  - createdBy
              credentials:
                type: object
                properties:
                  enabled:
                    type: string
              os:
                type: array
                items: {}
                example:
                  - All
              createdOn:
                type: string
              primaryCategory:
                type: string
              contentEncoding:
                type: string
              consumerId:
                type: string
        count:
          type: integer
    licenseCreateLicenseRequest:
      title: Request Object
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/licenseLicenseCreateRequestLicense'
    licenseLicenseCreateRequestLicense:
      title: Request
      required:
        - license
      type: object
      properties:
        license:
          $ref: '#/components/schemas/licenseLicenseCreateRequestLicenseObject'
    licenseLicenseCreateRequestLicenseObject:
      title: License
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: Represents the name of the license
    licenseUpdateLicenserequest:
      title: Update License Request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/licenseLicenseUpdateRequestLicense'
      required:
        - request
    licenseLicenseUpdateRequestLicense:
      title: LicenseUpdateRequestLicense
      type: object
      required:
        - license
      properties:
        license:
          $ref: '#/components/schemas/licenseLicenseUpdateRequestLicenseObject'
    licenseLicenseUpdateRequestLicenseObject:
      title: License
      type: object
      properties:
        description:
          type: string
          description: Represents the description for the license
    licenseLicenseCreateSuccessResponse:
      description: Create License Response
      type: object
      allOf:
        - $ref: '#/components/schemas/licenseResultWithLicenseId'
        - $ref: '#/components/schemas/licenseResponseHeader'
    licenseResultWithLicenseId:
      title: Result Containing License Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/licenseCreateLicense'
    licenseCreateLicense:
      title: Create License
      type: object
      properties:
        node_id:
          type: string
          description: License Identifier
        identifier:
          type: string
          description: License Identifier
    licenseLicenseCreateErrorResponse:
      description: Create License Error Response
      type: object
      allOf:
        - $ref: '#/components/schemas/licenseEmptyResult'
        - $ref: '#/components/schemas/licenseResponseHeader'
    licenseEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          description: Empty Result
    licenseResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/licenseResponseParams'
        responseCode:
          type: string
          description: 'API response code '
    licenseResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    licenseLicenseGetSuccessResponse:
      description: Get Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/licenseResultWithLicenseMetadata'
        - $ref: '#/components/schemas/licenseResponseHeader'
    licenseResultWithLicenseMetadata:
      title: Result With License
      type: object
      properties:
        result:
          $ref: '#/components/schemas/licenseResultWithLicense'
    licenseResultWithLicense:
      title: Result With License
      type: object
      properties:
        license:
          $ref: '#/components/schemas/licenseLicenseMetadata'
    licenseLicenseMetadata:
      title: License Metadata
      type: object
      properties:
        identifier:
          type: string
          description: License Identifier
        name:
          type: string
          description: License name
        description:
          type: string
          description: License description
        versionKey:
          type: string
          description: License version key
        url:
          type: string
          description: License url link
    licenseLicenseRetireSuccessResponse:
      description: License Retire Response
      type: object
      allOf:
        - $ref: '#/components/schemas/licenseRetireResultWithLicenseId'
        - $ref: '#/components/schemas/licenseResponseHeader'
    licenseRetireResultWithLicenseId:
      title: Retire Result Containing License
      type: object
      properties:
        result:
          $ref: '#/components/schemas/licenseRetireLicense'
    licenseRetireLicense:
      title: Retire License
      type: object
      properties:
        node_id:
          type: string
          description: License Identifier
        identifier:
          type: string
          description: License Identifier
    locationapiCreate-Location-Request:
      title: Create-Location-Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/locationapiLocationCreateRequest'
      example:
        request:
          code: APCODE1
          name: APSTATE
          type: state
    locationapiLocationCreateRequest:
      title: LocationCreateRequest
      required:
        - code
        - name
        - type
      type: object
      properties:
        code:
          type: string
          description: >-
            The alphanumeric string to represent a unique code of the location
            and the code can be either the code of state , district or any
            location type and it must be unique. for system AP, ap ,Ap,aP all
            four will be treated as some code.
        name:
          type: string
          description: The name of the location
        type:
          type: string
          description: 'type refer to valid location types: state,district,block,cluster '
      example:
        code: APCODE1
        name: APSTATE
        type: state
    locationapilocationapiParams:
      title: Params
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
          description: The ID uniquely identifies the response Message
        msgid:
          type: string
          description: The ID uniquely identifies the message in reponse
        err:
          type: string
          description: Represents the Error Code in case an errors occurs
        status:
          type: string
          description: Represents the response status of the request sent
        errmsg:
          type: string
          description: Represent the error message which comes as the API is executed
      example:
        resmsgid: null
        msgid: 80755429-318c-47df-82a6-282a72e52a7b
        err: ALREADY_EXISTS
        status: ALREADY_EXISTS
        errmsg: A code with APCODE already exists. Please retry with a unique value.
    locationapiCreate_Location_With_Success_Response:
      title: Create_Location_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/locationapiLocationParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/locationapilocationapiResult'
      example:
        id: api.location.create
        ver: v1
        ts: '2020-11-20 07:09:36:098+0000'
        params:
          resmsgid: null
          msgid: f794b084-d4e9-4ce3-9795-82c88ada6b66
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
          id: 6824e3d3-5512-4344-a481-7bac011edaa8
    locationapiLocationParams:
      title: LocationParams
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
          description: The ID uniquely identifies the response Message
        msgid:
          type: string
          description: The ID uniquely identifies the message in reponse
        err:
          type: string
          nullable: true
          description: Represents the Error Code in case an errors occurs
        status:
          type: string
          description: Represents the response status of the request sent
        errmsg:
          type: string
          nullable: true
          description: Represent the error message which comes as the API is executed
      example:
        resmsgid: null
        msgid: f794b084-d4e9-4ce3-9795-82c88ada6b66
        err: null
        status: success
        errmsg: null
    locationapilocationapiResult:
      title: Result
      required:
        - response
        - id
      type: object
      properties:
        response:
          type: string
        id:
          type: string
      example:
        response: SUCCESS
        id: 6824e3d3-5512-4344-a481-7bac011edaa8
    locationapiSearch-Location-Request:
      title: Search-Location-Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/locationapiLocationSearchRequest'
      example:
        request:
          filters:
            code: APCODE1
    locationapiLocationSearchRequest:
      title: LocationSearchRequest
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/locationapilocationapiFilters'
        limit:
          description: Used to set the limit of the result
          type: integer
          format: int32
        offset:
          type: integer
          description: The offset after which user want to read the records
      example:
        filters:
          code: APCODE1
    locationapilocationapiFilters:
      title: Filters
      type: object
      properties:
        code:
          type: string
          description: >-
            The alphanumeric string to represent a unique code of the location
            and the code can be either the code of state , district or any
            location type
        parentId:
          type: string
          description: >-
            This is a system generated ID that uniquely identifies the parent
            organization (location) for example: For a district, state ID will
            be the parent ID
        type:
          type: string
          description: >-
            Represents any valid key, value that can be passed as single string
            or an array 
      example:
        code: APCODE1
    locationapiSearch_Location_With_Success_Response:
      title: Search_Location_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/locationapiLocationParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/locationapiSearchResult'
      example:
        id: api.location.search
        ver: v1
        ts: '2020-11-20 07:20:43:770+0000'
        params:
          resmsgid: null
          msgid: 2d12c998-96c4-43d6-8937-4ebbb8b68d02
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response:
            - identifier: 6824e3d3-5512-4344-a481-7bac011edaa8
              code: APCODE
              name: APSTATE
              id: 6824e3d3-5512-4344-a481-7bac011edaa8
              type: state
          count: 1
    locationapiSearchResult:
      title: SearchResult
      required:
        - response
        - count
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/locationapilocationapiResponse'
          description: ''
        count:
          type: integer
          format: int32
      example:
        response:
          - identifier: 6824e3d3-5512-4344-a481-7bac011edaa8
            code: APCODE
            name: APSTATE
            id: 6824e3d3-5512-4344-a481-7bac011edaa8
            type: state
        count: 1
    locationapilocationapiResponse:
      title: Response
      required:
        - identifier
        - code
        - name
        - id
        - type
      type: object
      properties:
        identifier:
          type: string
        code:
          type: string
        name:
          type: string
        id:
          type: string
        type:
          type: string
      example:
        identifier: 6824e3d3-5512-4344-a481-7bac011edaa8
        code: APCODE
        name: APSTATE
        id: 6824e3d3-5512-4344-a481-7bac011edaa8
        type: state
    locationapiUpdate-Location-Request:
      title: Update-Location-Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/locationapiLocationUpdateRequest'
      example:
        request:
          name: APSTATE1
          id: e4e60956-277c-439e-bbf7-5c99730341f3
    locationapiLocationUpdateRequest:
      title: LocationUpdateRequest
      required:
        - name
        - id
      type: object
      properties:
        name:
          type: string
        id:
          type: string
      example:
        name: APSTATE1
        id: e4e60956-277c-439e-bbf7-5c99730341f3
    locationapiUpdate_Location_With_Success:
      title: Update_Location_With_Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/locationapiLocationParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/locationapiLocationResult'
      example:
        id: api.location.update
        ver: v1
        ts: '2020-11-20 12:58:11:871+0000'
        params:
          resmsgid: null
          msgid: 9e447000-03f7-43ee-9e3e-342c4a6d5acf
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
    locationapiLocationResult:
      title: LocationResult
      required:
        - response
      type: object
      properties:
        response:
          type: string
      example:
        response: SUCCESS
    locationapiDelete_Location_With_Success_Response:
      title: Delete_Location_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/locationapiLocationParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/locationapiLocationResult'
      example:
        id: api.location.delete
        ver: v1
        ts: '2020-11-20 13:17:44:741+0000'
        params:
          resmsgid: null
          msgid: c549ef41-faa8-4db2-9136-3490a6ee2607
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
    locationapiDelete-Location_With_Invalid_locationId_Error:
      title: Delete-Location_With_Invalid_locationId_Error
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/locationapilocationapiParams'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.location.delete
        ver: v1
        ts: '2020-11-20 13:18:24:671+0000'
        params:
          resmsgid: null
          msgid: 134c9776-641a-48be-9e36-102cf18e3175
          err: INVALID_PARAMETER
          status: INVALID_PARAMETER
          errmsg: Please provide valid locationId.
        responseCode: CLIENT_ERROR
        result: {}
    locationapi500_Server_Error:
      title: 500_Server_Error
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/locationapilocationapiParams'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.location.create
        ver: v1
        ts: '2020-11-20 13:18:24:671+0000'
        params:
          resmsgid: null
          msgid: 134c9776-641a-48be-9e36-102cf18e3175
          err: null
          status: SERVER_ERROR
          errmsg: null
        responseCode: SERVER_ERROR
        result: {}
    orgapiAddressCreateRequest:
      type: object
      properties:
        addType:
          type: string
          description: 'Type of address. E.g. Present, Permanent etc.'
        addressLine1:
          type: string
          description: First line of address
        addressLine2:
          type: string
          description: Second line of address
        city:
          type: string
          description: City
        state:
          type: string
          description: State
        zipcode:
          type: string
          description: Zip code
        country:
          type: string
          description: Country
      description: Request of Sunbird API containing an address
    orgapiOrgCreateRequest:
      title: Organisation Create API request format
      allOf:
        - type: object
          properties:
            request:
              $ref: '#/components/schemas/orgapiOrgReqV1'
          example:
            request:
              orgName: Diksha Org Name
              channel: dikshaChannel
              description: Diksha Description
              externalId: dikshaExtId
              isRootOrg: true
              email: info@diksha.org
              isSSOEnabled: true
    orgapiOrgReqV1:
      required:
        - channel
        - orgName
      type: object
      properties:
        channel:
          type: string
          description: >-
            Name identifying a tenant (e.g. APEKX). Channel is mandatory for a
            root organisation if channel is not passed it will take custodian
            channel.
        description:
          type: string
          description: Organisation description
        externalId:
          type: string
          description: >-
            Organisation specific ID. This parameter is required if provider is
            given.
        isRootOrg:
          type: boolean
          description: Set to true for root organisation only
        locationIds:
          type: array
          description: >-
            ID of location returned using Location Create API , you can either
            pass locationIds or locationCode
          items:
            type: string
        locationCode:
          type: array
          description: >-
            Code of created state,district,block etc, you can either pass
            locationIds or locationCode.
          items:
            type: string
            description: '["BH"]'
        provider:
          type: string
          description: >-
            Specified by sub-organisations to identify channel of root
            organisation.  This parameter is required if externalId is given.
        orgName:
          type: string
          description: Organisation name
        orgType:
          type: string
          description: Organisation type
        orgTypeId:
          type: string
          description: ID of organisation type returned using Organisation Type Create API
        rootOrgId:
          type: string
          description: Root organisation ID
        email:
          type: string
          description: Contact email of organisation
        license:
          type: string
          description: >-
            This attribute will be used for rootOrg create/update time only.
            License attribute will be used for content creation time. User will
            be always part of one rootOrg, so during content creation time
            he/she can see what license value set by his/her rootOrg.
        isSSOEnabled:
          type: boolean
          description: >-
            This attribute is applicable for rootOrg only. If for any root org
            SSO is enabled then pass this attribute with value true. incase of
            disable pass this as false
        address:
          $ref: '#/components/schemas/orgapiAddressCreateRequest'
    orgapiOrgCreateResponse:
      title: Organisation Create API response format
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties:
                organisationId:
                  type: string
                  description: ID of the newly created organisation
                response:
                  type: string
                  description: Response message for successfully created organisation
          example:
            id: api.org.create
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: null
              status: success
              errmsg: null
            responseCode: OK
            result:
              organisationId: 0131636612466278400
              response: SUCCESS
    orgapiOrgCreateErrorResponse:
      title: Server error response for create Organisation API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.create
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INTERNAL_ERROR
              status: INTERNAL_ERROR
              errmsg: 'Process failed,please try again later.'
            responseCode: SERVER_ERROR
            result: {}
    orgapiOrgCreateClientErrorResponse:
      title: Client error response for create Organisation API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.create
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INVALID_CHANNEL
              status: INVALID_CHANNEL
              errmsg: Channel value is invalid.
            responseCode: CLIENT_ERROR
            result: {}
    orgapiOrgGetRequest:
      title: Organisation Get API request format
      allOf:
        - type: object
          properties:
            request:
              $ref: '#/components/schemas/orgapiOrgReadReq'
          example:
            request:
              organisationId: '0131630445447741440'
    orgapiOrgReadReq:
      required:
        - organisationId
      type: object
      properties:
        organisationId:
          type: string
          description: ID of the organisation whose details to be viewed
    orgapiOrganisation:
      type: object
      properties:
        addressId:
          type: string
          description: ID of the organisation address
        channel:
          type: string
          description: Name identifying a tenant (e.g. APEKX).
        contactDetail:
          type: array
          description: Organisation contact details
          items:
            type: object
            properties:
              phone:
                type: string
                description: Organisation phone contact
              email:
                type: string
                description: Organisation email contact
        createdBy:
          type: string
          description: Identifier of user who created organisation
        createdDate:
          type: string
          description: Date and time when organisation is created
        description:
          type: string
          description: Organisation description
        externalId:
          type: string
          description: Organisation specific ID
        hashTagId:
          type: string
          description: Same as organisation ID
        homeUrl:
          type: string
          description: Organisation homepage URL
        id:
          type: string
          description: Same as organisation ID
        identifier:
          type: string
          description: Same as organisation ID
        imgUrl:
          type: string
          description: Organisation image URL
        isRootOrg:
          type: boolean
          description: Set to true for root organisation
        locationId:
          type: string
          description: ID of location
        noOfMembers:
          type: integer
          description: Number of users in root organisatio
        orgName:
          type: string
          description: Organisation name
        orgType:
          type: string
          description: Organisation type
        orgTypeId:
          type: string
          description: ID of organisation type
        parentOrgId:
          type: string
          description: Parent organisation ID
        preferredLanguage:
          type: string
          description: Preferred language
        provider:
          type: string
          description: >-
            Specified by sub-organisations to identify channel of root
            organisation
        rootOrgId:
          type: string
          description: Root organisation ID
        slug:
          type: string
          description: Used to create URL for a root organisation
        status:
          type: integer
          description: 'Organisation status (0: inactive, 1: active, 2: blocked, 3: retired)'
        thumbnail:
          type: string
          description: Organisation thumbnail URL
        updatedBy:
          type: string
          description: Identifier of user who updated organisation
        updatedDate:
          type: string
          description: Date and time when organisation is updated
        email:
          type: string
          description: Contact email of organisation
        isSSOEnabled:
          type: boolean
          description: >-
            This is optional attribute and applicable for root org only. if
            attribute is present with value true then only it's indicate this
            rootOrg is using SSO, for all other cases SSO is disabled.
    orgapiOrgGetResponse:
      title: Organisation Get API response format
      allOf:
        - type: object
          properties:
            result:
              type: object
              properties:
                response:
                  $ref: '#/components/schemas/orgapiOrganisation'
              example:
                id: api.org.read
                ver: v1
                ts: '2020-11-23 10:03:39:935+0000'
                params:
                  resmsgid: null
                  msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
                  err: null
                  status: success
                  errmsg: null
                responseCode: OK
                result:
                  dateTime: null
                  preferredLanguage: null
                  keys: {}
                  channel": dikshaChannelNew
                  approvedBy: null
                  description: Updated Description
                  updatedDate: '2020-12-01 10:29:49:496+0000'
                  addressId: 0131630420489011201
                  orgType: null
                  provider: dikshachannelnew
                  orgCode: null
                  locationId: null
                  theme: null
                  id: '0131630445447741440'
                  isApproved: null
                  communityId: null
                  slug: dikshachannelnew
                  email: info@diksha.org
                  isSSOEnabled: false
                  identifier: '0131630445447741440'
                  thumbnail: null
                  updatedBy": null
                  orgName: Diksha Org Name
                  address: {}
                  externalId: dikshaextid
                  isRootOrg: true
                  rootOrgId: '0131630445447741440'
                  imgUrl: null
                  approvedDate: null
                  orgTypeId: null
                  homeUrl: null
                  isDefault: null
                  createdDate: '2020-12-01 09:52:46:962+0000'
                  parentOrgId: null
                  createdBy: null
                  hashTagId: '0131630445447741440'
                  noOfMembers: null
                  status: 0
                  locationIds:
                    - bc75cc99-9205-463e-a722-5326857838f8
                    - aecac7ab-15e4-45c9-ac7b-d716444cd652
                    - 3f286755-a36f-45bb-9505-ffeeee5aa723
    orgapiOrgReadClientErrorResponse:
      title: Client error response for get Organisation Details API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.read
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: MANDATORY_PARAMETER_MISSING
              status: MANDATORY_PARAMETER_MISSING
              errmsg: Mandatory parameter organisationId is missing.
            responseCode: CLIENT_ERROR
            result: {}
    orgapiOrgReadNotFoundResponse:
      title: Not Found error response for read Organisation API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.read
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: ORG_NOT_EXIST
              status: ORG_NOT_EXIST
              errmsg: Requested organisation does not exist.
            responseCode: RESOURCE_NOT_FOUND
            result: {}
    orgapiOrgReadServerErrorResponse:
      title: Server error response for read Organisation API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.read
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INTERNAL_ERROR
              status: INTERNAL_ERROR
              errmsg: 'Process failed,please try again later.'
            responseCode: SERVER_ERROR
            result: {}
    orgapiOrgUpdateRequest:
      title: Organisation Update API request format
      allOf:
        - type: object
          properties:
            request:
              $ref: '#/components/schemas/orgapiOrgUpdateReq'
          example:
            request:
              organisationId: '0131630445447741440,'
              description: 'updated description,'
              orgName: 'Updated Org Name,'
              locationIds:
                - 3f286755-a36f-45bb-9505-ffeeee5aa723
                - aecac7ab-15e4-45c9-ac7b-d716444cd652
    orgapiOrgUpdateReq:
      required:
        - organisationId
      type: object
      properties:
        organisationId:
          type: string
          description: >-
            ID of organisation(mandatory) whose details are required to be
            updated
        description:
          type: string
          description: Organisation description
        locationIds:
          type: array
          description: >-
            ID of location returned using Location Create API , you can either
            pass locationIds or locationCode.During update you need to pass
            complete data, it will directly replace with stored locations
          items:
            type: string
        orgName:
          type: string
          description: Organisation name
        email:
          type: string
          description: Contact email of organisation
        license:
          type: string
          description: >-
            This attribute will be used for rootOrg create/update time only.
            License attribute will be used for content creation time. User will
            be always part of one rootOrg, so during content creation time
            he/she can see what license value set by his/her rootOrg.
        isSSOEnabled:
          type: boolean
          description: >-
            This attribute is used for root org only. if any rootOrg is suing
            sso then they can update this attribute value as true
    orgapiOrgUpdateResponse:
      title: Organisation Update API response format
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties:
                organisationId:
                  type: string
                  description: ID of the updated organisation
                response:
                  type: string
                  description: Response message for successfully updated organisation
          example:
            id: api.org.update
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: null
              status: success
              errmsg: null
            responseCode: OK
            result:
              organisationId: 0131636612466278400
              response: SUCCESS
    orgapiOrgUpdateClientErrorResponse:
      title: Client error response for get Organisation Details API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.update
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INVALID_REQUESTED_DATA
              status: INVALID_REQUESTED_DATA
              errmsg: Requested data for this operation is not valid.
            responseCode: CLIENT_ERROR
            result: {}
    orgapiOrgUpdateServerErrorResponse:
      title: Server error response for read Organisation API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.update
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INTERNAL_ERROR
              status: INTERNAL_ERROR
              errmsg: 'Process failed,please try again later.'
            responseCode: SERVER_ERROR
            result: {}
    orgapiOrgStatusUpdateRequest:
      title: Organisation Status Update API request format
      allOf:
        - type: object
          properties:
            request:
              $ref: '#/components/schemas/orgapiOrgStatusUpdateReq'
          example:
            request:
              filters:
                organisationId: '0131630445447741440'
                status: 0
    orgapiOrgStatusUpdateReq:
      required:
        - organisationId
        - status
      type: object
      properties:
        organisationId:
          type: string
          description: ID of organisation whose details are required to be updated
        status:
          type: integer
          description: 'Organisation status (0: inactive, 1: active, 2: blocked, 3: retired)'
    orgapiOrgStatusUpdateResponse:
      title: Organisation Status Update API response format
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties:
                organisationId:
                  type: string
                  description: ID of the updated organisation
                response:
                  type: string
                  description: >-
                    Response message for successfully updated organisation
                    status
          example:
            id: api.org.status.update
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: null
              status: success
              errmsg: null
            responseCode: OK
            result:
              organisationId: 0131636612466278400
              response: SUCCESS
    orgapiOrgUStatusUpdateClientErrorResponse:
      title: Client error response for get Organisation Details API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.status.update
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INVALID_REQUESTED_DATA
              status: INVALID_REQUESTED_DATA
              errmsg: Requested data for this operation is not valid.
            responseCode: CLIENT_ERROR
            result: {}
    orgapiOrgStatusUpdateServerErrorResponse:
      title: Server error response for read Organisation API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.status.update
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INTERNAL_ERROR
              status: INTERNAL_ERROR
              errmsg: 'Process failed,please try again later.'
            responseCode: SERVER_ERROR
            result: {}
    orgapiOrgAssignKeyRequest:
      title: Organisation Assign Key API request format
      allOf:
        - type: object
          properties:
            request:
              $ref: '#/components/schemas/orgapiOrgAssignKeyReq'
          example:
            request:
              id: '0131630445447741440'
              signKeys:
                - S1
                - S2
              encKeys:
                - E1
                - E2
    orgapiOrgAssignKeyReq:
      required:
        - id
        - signKeys
        - encKeys
      type: object
      properties:
        id:
          type: string
          description: ID of organisation whose details are required to be updated
        signKeys:
          type: string
          description: signed keys
        encKeys:
          type: string
          description: encryption keys
    orgapiOrgAssignKeyResponse:
      title: Organisation Assign Key API response format
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties:
                response:
                  type: string
                  description: >-
                    Response message for successfully updated organisation
                    status
          example:
            id: api.org.assign.key
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: null
              status: success
              errmsg: null
            responseCode: OK
            result:
              response: SUCCESS
    orgapiOrgAssignKeyClientErrorResponse:
      title: Client error response for get Organisation Details API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.assign.key
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INVALID_REQUESTED_DATA
              status: INVALID_REQUESTED_DATA
              errmsg: INVALID_ORG_ID
            responseCode: CLIENT_ERROR
            result: {}
    orgapiOrgAssignKeyServerErrorResponse:
      title: Server error response for read Organisation API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.assign.key
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INTERNAL_ERROR
              status: INTERNAL_ERROR
              errmsg: 'Process failed,please try again later.'
            responseCode: SERVER_ERROR
            result: {}
    orgapiOrgTypeCreateRequest:
      title: Organisation Type Create API request format
      allOf:
        - type: object
          properties:
            request:
              $ref: '#/components/schemas/orgapiOrgTypeCreateReq'
          example:
            request:
              name: Higher Secondary School
    orgapiOrgTypeCreateReq:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: Organisation type name
    orgapiOrgTypeListResponse:
      title: Organisation Type List API response format
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties:
                response:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Organisation type ID
                      name:
                        type: string
                        description: Organisation type name
          example:
            id: api.org.type.list
            ver: v1
            ts: '2020-11-23 09:16:58:628+0000'
            params:
              resmsgid: null
              msgid: ad7135b8-ef64-44bd-adaa-0b131a657689
              err: null
              status: success
              errmsg: null
            responseCode: OK
            result:
              response:
                - id: '126489256548895649'
                  name: Higher Secondary School
    orgapiTenantInformationResponse:
      title: Tenant information API response format
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties:
                response:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Organisation type ID
                      name:
                        type: string
                        description: Organisation type name
          example:
            id: api.tenant.info
            ver: '1.0'
            ts: '2020-12-11 04:23:38:772+0000'
            params:
              resmsgid: a4848d40-3b68-11eb-bb20-69fba69624fc
              msgid: null
              err: null
              status: successful
              errmsg: null
            responseCode: OK
            result:
              response:
                - appLogo: 'https://staging.sunbirded.org/assets/images/sunbird_logo.png'
                  favicon: 'https://staging.sunbirded.org/assets/images/favicon.ico'
                  logo: 'https://staging.sunbirded.org/assets/images/sunbird_logo.png'
                  poster: 'https://staging.sunbirded.org/assets/images/sunbird_logo.png'
                  titleName: sunbird
    orgapiOrgTypeListServerErrorResponse:
      title: Server error response for read Organisation API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.type.list
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INTERNAL_ERROR
              status: INTERNAL_ERROR
              errmsg: 'Process failed,please try again later.'
            responseCode: SERVER_ERROR
            result: {}
    orgapiTenantInfoServerErrorResponse:
      title: Server error response for read Organisation API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.tenant.info
            ver: '1.0'
            ts: '2020-12-11 04:06:01:620+0000'
            params:
              msgid: null
              resmsgid: 2e67f540-3b66-11eb-bb20-69fba69624fc
              err: INTERNAL_ERROR
              status: INTERNAL_ERROR
              errmsg: 'Process failed,please try again later.'
            responseCode: SERVER_ERROR
            result: {}
    orgapiOrgTypeUpdateRequest:
      title: Organisation Type Update API request format
      allOf:
        - type: object
          properties:
            request:
              $ref: '#/components/schemas/orgapiOrgTypeUpdateReq'
          example:
            request:
              id: '0131630445447741440'
              name: Secondary School
    orgapiOrgTypeUpdateReq:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: ID of organisation type whose name is required to be updated
        name:
          type: string
          description: Organisation type name
    orgapiOrgAddUserRequest:
      title: Organisation Add User API request format
      allOf:
        - type: object
          properties:
            request:
              $ref: '#/components/schemas/orgapiOrgAddMemberReq'
          example:
            request:
              userId: 91b4a9e5-2eb1-4aa0-8f0a-ce171ed5ff3e
              organisationId: '0131630445447741440'
              roles:
                - ADMIN
                - BOOK_CREATOR
    orgapiOrgAddMemberReq:
      required:
        - organisationId
        - userId
      type: object
      properties:
        organisationId:
          type: string
          description: ID of organisation to which user is required to be added
        provider:
          type: string
          description: '?. This parameter is mandatory if userId is not provided.'
        roles:
          type: array
          description: >-
            List of roles. in capital letters EX.PUBLIC list of roles availaible
            at
            http://docs.sunbird.org/latest/features-documentation/admin_assigning_users/index.html
          items:
            type: string
        userId:
          type: string
          description: >-
            ID of user who is required to be added if we are not providing the
            userId then we need to provide
            userExternalId,userProvider,userIdType
    orgapiOrgAddMemberResponse:
      title: Add Member to Organisation API response format
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties:
                response:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Organisation type ID
                      name:
                        type: string
                        description: Organisation type name
          example:
            id: api.org.member.add
            ver: v1
            ts: '2020-11-23 09:16:58:628+0000'
            params:
              resmsgid: null
              msgid: ad7135b8-ef64-44bd-adaa-0b131a657689
              err: null
              status: success
              errmsg: null
            responseCode: OK
            result:
              response: SUCCESS
    orgapiOrgAddMemberClientErrorResponse:
      title: Client error response for get Organisation Details API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.member.add
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INVALID_ORGANIZATION_DATA
              status: INVALID_ORGANIZATION_DATA
              errmsg: >-
                Given Organization Data doesn't exist in our records. Please
                provide a valid one
            responseCode: CLIENT_ERROR
            result: {}
    orgapiOrgAddMemberServerErrorResponse:
      title: Server error response for read Organisation API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.member.add
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INTERNAL_ERROR
              status: INTERNAL_ERROR
              errmsg: 'Process failed,please try again later.'
            responseCode: SERVER_ERROR
            result: {}
    orgapiOrgRemoveUserRequest:
      title: Organisation Remove User API request format
      allOf:
        - type: object
          properties:
            request:
              $ref: '#/components/schemas/orgapiOrgRemoveMemberReq'
          example:
            request:
              userId: 91b4a9e5-2eb1-4aa0-8f0a-ce171ed5ff3e
              organisationId: '0131630445447741440'
    orgapiOrgRemoveMemberReq:
      required:
        - organisationId
        - userId
      type: object
      properties:
        organisationId:
          type: string
          description: ID of organisation from which user is required to be removed
        userId:
          type: string
          description: ID of user who is required to be removed
    orgapiOrgRemoveMemberClientErrorResponse:
      title: Client error response for get Organisation Details API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.member.remove
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INVALID_ORGANIZATION_DATA
              status: INVALID_ORGANIZATION_DATA
              errmsg: >-
                Given Organization Data doesn't exist in our records. Please
                provide a valid one
            responseCode: CLIENT_ERROR
            result: {}
    orgapiOrgRemoveMemberResponse:
      title: Add Member to Organisation API response format
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties:
                response:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Organisation type ID
                      name:
                        type: string
                        description: Organisation type name
          example:
            id: api.org.member.remove
            ver: v1
            ts: '2020-11-23 09:16:58:628+0000'
            params:
              resmsgid: null
              msgid: ad7135b8-ef64-44bd-adaa-0b131a657689
              err: null
              status: success
              errmsg: null
            responseCode: OK
            result:
              response: SUCCESS
    orgapiOrgRemoveMemberServerErrorResponse:
      title: Server error response for read Organisation API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.member.remove
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INTERNAL_ERROR
              status: INTERNAL_ERROR
              errmsg: 'Process failed,please try again later.'
            responseCode: SERVER_ERROR
            result: {}
    orgapiOrgSuccessResponse:
      title: Common success response for an Organisation Management API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties:
                response:
                  type: string
                  description: Response message for successfully performed request
    orgapiOrgErrorResponse:
      title: Common error response for any Organisation Management API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
    orgapiOrgSearchRequest:
      title: Organisation Search API request format
      allOf:
        - type: object
          properties:
            request:
              $ref: '#/components/schemas/orgapiOrgSearchReq'
          example:
            request:
              filters:
                id: '0131630445447741440'
    orgapiOrgSearchReq:
      required:
        - filters
      type: object
      properties:
        filters:
          type: object
          description: >-
            Organisation search filters inside filters map you can put the
            attributes required for your search
        limit:
          type: integer
          description: 'Limit on the number of results '
        offset:
          type: integer
          description: this is used get the result starting from the offset value
    orgapiOrgSearchResponse:
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/orgapiorgapiApiResponse'
      example:
        id: api.org.search
        ver: v1
        ts: '2020-11-23 09:16:58:628+0000'
        params:
          resmsgid: null
          msgid: ad7135b8-ef64-44bd-adaa-0b131a657689
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response:
            count: 1
            content:
              - dateTime: null
                preferredLanguage: null
                keys: {}
                channel": dikshaChannelNew
                approvedBy: null
                description: Updated Description
                updatedDate: '2020-12-01 10:29:49:496+0000'
                addressId: 0131630420489011201
                orgType: null
                provider: dikshachannelnew
                orgCode: null
                locationId: null
                theme: null
                id: '0131630445447741440'
                isApproved: null
                communityId: null
                slug: dikshachannelnew
                email: info@diksha.org
                isSSOEnabled: false
                identifier: '0131630445447741440'
                thumbnail: null
                updatedBy": null
                orgName: Diksha Org Name
                address: {}
                externalId: dikshaextid
                isRootOrg: true
                rootOrgId: '0131630445447741440'
                imgUrl: null
                approvedDate: null
                orgTypeId: null
                homeUrl: null
                isDefault: null
                createdDate: '2020-12-01 09:52:46:962+0000'
                parentOrgId: null
                createdBy: null
                hashTagId: '0131630445447741440'
                noOfMembers: null
                status: 0
                locationIds:
                  - bc75cc99-9205-463e-a722-5326857838f8
                  - aecac7ab-15e4-45c9-ac7b-d716444cd652
                  - 3f286755-a36f-45bb-9505-ffeeee5aa723
    orgapiOrgSearchClientErrorResponse:
      title: Client error response for get Organisation Details API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.search
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: MANDATORY_PARAMETER_MISSING
              status: MANDATORY_PARAMETER_MISSING
              errmsg: Mandatory parameter filters is missing.
            responseCode: CLIENT_ERROR
            result: {}
    orgapiOrgSearchServerErrorResponse:
      title: Server error response for read Organisation API
      allOf:
        - $ref: '#/components/schemas/orgapiorgapiApiResponse'
        - type: object
          properties:
            result:
              type: object
              properties: {}
          example:
            id: api.org.search
            ver: v1
            ts: '2020-11-23 10:03:39:935+0000'
            params:
              resmsgid: null
              msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
              err: INTERNAL_ERROR
              status: INTERNAL_ERROR
              errmsg: 'Process failed,please try again later.'
            responseCode: SERVER_ERROR
            result: {}
    orgapiorgapiApiResponse:
      required:
        - ets
        - id
        - params
        - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since EPOCH
          format: int64
        params:
          required:
            - msgid
            - resmsgid
            - status
          type: object
          properties:
            msgid:
              type: string
              description: Represents the ID of the message sent
            resmsgid:
              type: string
              description: Represents the ID of the response message
            status:
              type: string
              enum:
                - success
                - error
        responseCode:
          type: string
    pagesapiCreatePagerequest:
      title: create pageRequest
      required:
        - id
        - params
        - request
        - ts
      type: object
      properties:
        id:
          type: string
          description: ''
          example: unique API ID
        ts:
          type: string
          description: ''
          example: '2013/10/15 16:16:39'
        params:
          type: object
          properties: {}
          description: ''
          example: {}
        request:
          $ref: '#/components/schemas/pagesapiRequest'
      example:
        id: api.page.create
        ts: '2020/12/11 16:16:39'
        params: {}
        request:
          name: Resources
          organisationId: >-
            id of organisation, if you want to create page for your org only. if
            not pass then page will be created for all org.
          portalMap:
            - id: 1228383082462412800
              index: 1
              group: 1
            - id: 1228383384379392000
              index: 1
              group: 2
          appMap:
            - id: 1228383082462412800
              index: 1
              group: 1
            - id: 1228383384379392000
              index: 1
              group: 2
    pagesapiRequest:
      title: Request
      required:
        - appMap
        - name
        - portalMap
      type: object
      properties:
        name:
          type: string
          description: name of your page
          example: Resources
        organisationId:
          type: string
          description: 'your organisation id '
        portalMap:
          type: array
          description: ''
          example:
            - id: 1228383082462412800
              index: 1
              group: 1
            - id: 1228383384379392000
              index: 1
              group: 2
          items:
            $ref: '#/components/schemas/pagesapiPortalMap'
        appMap:
          type: array
          description: ''
          example:
            - id: 1228383082462412800
              index: 1
              group: 1
            - id: 1228383384379392000
              index: 1
              group: 2
          items:
            $ref: '#/components/schemas/pagesapiAppMap'
      example:
        name: Resources
        portalMap:
          - id: 1228383082462412800
            index: 1
            group: 1
          - id: 1228383384379392000
            index: 1
            group: 2
        appMap:
          - id: 1228383082462412800
            index: 1
            group: 1
          - id: 1228383384379392000
            index: 1
            group: 2
    pagesapiPortalMap:
      title: PortalMap
      required:
        - group
        - id
        - index
      type: object
      properties:
        id:
          type: string
          description: ''
          example: 1228383082462412800
        index:
          type: integer
          description: ''
          format: int32
          example: 1
        group:
          type: integer
          description: ''
          format: int32
          example: 1
      example:
        id: 1228383082462412800
        index: 1
        group: 1
    pagesapiAppMap:
      title: AppMap
      required:
        - group
        - id
        - index
      type: object
      properties:
        id:
          type: string
          description: ''
          example: 1228383082462412800
        index:
          type: integer
          description: ''
          format: int32
          example: 1
        group:
          type: integer
          description: ''
          format: int32
          example: 1
      example:
        id: 1228383082462412800
        index: 1
        group: 1
    pagesapiCreatePageSectionrequest:
      title: create page sectionRequest
      required:
        - id
        - params
        - request
        - ts
      type: object
      properties:
        id:
          type: string
          description: ''
          example: unique API ID
        ts:
          type: string
          description: ''
          example: '2013/10/15 16:16:39'
        params:
          type: object
          properties: {}
          description: ''
          example: {}
        request:
          $ref: '#/components/schemas/pagesapiRequest5'
      example:
        id: unique API ID
        ts: '2013/10/15 16:16:39'
        params: {}
        request:
          name: Recommended TextBook
          searchQuery:
            request:
              query: ''
              filters:
                language:
                  - English
                contentType:
                  - TextBook
              limit: 10
              sort_by:
                lastUpdatedOn: desc
          sectionDataType: course
          display:
            name:
              en: popular story
              hi: '????????'
    pagesapiRequest5:
      title: Request5
      required:
        - display
        - name
        - searchQuery
        - sectionDataType
      type: object
      properties:
        name:
          type: string
          description: unique name of your section. it will refer to your page
          example: Recommended TextBook
        searchQuery:
          $ref: '#/components/schemas/pagesapiSearchQuery'
        sectionDataType:
          type: string
          description: ''
          example: course
        display:
          $ref: '#/components/schemas/pagesapiDisplay'
      example:
        name: Recommended TextBook
        searchQuery:
          request:
            query: ''
            filters:
              language:
                - English
              contentType:
                - TextBook
            limit: 10
            sort_by:
              lastUpdatedOn: desc
        sectionDataType: course
        display:
          name:
            en: popular story
            hi: '????????'
    pagesapiSearchQuery:
      title: SearchQuery
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/pagesapiRequest7'
      example:
        request:
          query: ''
          filters:
            language:
              - English
            contentType:
              - TextBook
          limit: 10
          sort_by:
            lastUpdatedOn: desc
    pagesapiRequest7:
      title: Request7
      required:
        - filters
        - limit
        - query
        - sort_by
      type: object
      properties:
        query:
          type: string
          description: ''
        filters:
          $ref: '#/components/schemas/pagesapiFilters'
        limit:
          type: integer
          description: ''
          format: int32
          example: 10
        sort_by:
          $ref: '#/components/schemas/pagesapiSortBy'
      example:
        query: ''
        filters:
          language:
            - English
          contentType:
            - TextBook
        limit: 10
        sort_by:
          lastUpdatedOn: desc
    pagesapiFilters:
      title: Filters
      required:
        - contentType
        - language
      type: object
      properties:
        language:
          type: array
          description: ''
          example:
            - English
          items:
            type: string
        contentType:
          type: array
          description: ''
          example:
            - TextBook
          items:
            type: string
      example:
        language:
          - English
        contentType:
          - TextBook
    pagesapiSortBy:
      title: SortBy
      required:
        - lastUpdatedOn
      type: object
      properties:
        lastUpdatedOn:
          type: string
          description: ''
          example: desc
      example:
        lastUpdatedOn: desc
    pagesapiDisplay:
      title: Display
      required:
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/pagesapiName'
      example:
        name:
          en: popular story
          hi: '????????'
    pagesapiName:
      title: Name
      required:
        - en
        - hi
      type: object
      properties:
        en:
          type: string
          description: ''
          example: popular story
        hi:
          type: string
          description: ''
          example: '????????'
      example:
        en: popular story
        hi: '????????'
    pagesapiUpdatePageSectionInforequest:
      title: update page section infoRequest
      required:
        - id
        - params
        - request
        - ts
      type: object
      properties:
        id:
          type: string
          description: ''
          example: unique API ID
        ts:
          type: string
          description: ''
          example: '2013/10/15 16:16:39'
        params:
          type: object
          properties: {}
          description: ''
          example: {}
        request:
          $ref: '#/components/schemas/pagesapiRequest13'
      example:
        id: unique API ID
        ts: '2013/10/15 16:16:39'
        params: {}
        request:
          id: 122662435116892160
          name: Popular Course
          searchQuery:
            request:
              query: ''
              filters:
                objectType:
                  - Content
                mimeType:
                  - application/vnd.ekstep.html-archive
                status:
                  - Draft
                  - Live
              offset: 0
              limit: 5
          sectionDataType: course
          display:
            name:
              en: popular Course
              hi: '????????'
    pagesapiRequest13:
      title: Request13
      required:
        - display
        - id
        - name
        - searchQuery
        - sectionDataType
      type: object
      properties:
        id:
          type: string
          description: ''
          example: 122662435116892160
        name:
          type: string
          description: ''
          example: Popular Course
        searchQuery:
          $ref: '#/components/schemas/pagesapiSearchQuery14'
        sectionDataType:
          type: string
          description: ''
          example: course
        display:
          $ref: '#/components/schemas/pagesapiDisplay'
      example:
        id: 122662435116892160
        name: Popular Course
        searchQuery:
          request:
            query: ''
            filters:
              objectType:
                - Content
              mimeType:
                - application/vnd.ekstep.html-archive
              status:
                - Draft
                - Live
            offset: 0
            limit: 5
        sectionDataType: course
        display:
          name:
            en: popular Course
            hi: '????????'
    pagesapiSearchQuery14:
      title: SearchQuery14
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/pagesapiRequest15'
      example:
        request:
          query: ''
          filters:
            objectType:
              - Content
            mimeType:
              - application/vnd.ekstep.html-archive
            status:
              - Draft
              - Live
          offset: 0
          limit: 5
    pagesapiRequest15:
      title: Request15
      required:
        - filters
        - limit
        - offset
        - query
      type: object
      properties:
        query:
          type: string
          description: ''
        filters:
          $ref: '#/components/schemas/pagesapiFilters16'
        offset:
          type: integer
          description: ''
          format: int32
          example: 0
        limit:
          type: integer
          description: ''
          format: int32
          example: 5
      example:
        query: ''
        filters:
          objectType:
            - Content
          mimeType:
            - application/vnd.ekstep.html-archive
          status:
            - Draft
            - Live
        offset: 0
        limit: 5
    pagesapiFilters16:
      title: Filters16
      required:
        - mimeType
        - objectType
        - status
      type: object
      properties:
        objectType:
          type: array
          description: ''
          example:
            - Content
          items:
            type: string
        mimeType:
          type: array
          description: ''
          example:
            - application/vnd.ekstep.html-archive
          items:
            type: string
        status:
          type: array
          description: ''
          example:
            - Draft
            - Live
          items:
            type: string
      example:
        objectType:
          - Content
        mimeType:
          - application/vnd.ekstep.html-archive
        status:
          - Draft
          - Live
    pagesapiUpdatePageInforequest:
      title: update page infoRequest
      required:
        - id
        - params
        - request
        - ts
      type: object
      properties:
        id:
          type: string
          description: ''
          example: unique API ID
        ts:
          type: string
          description: ''
          example: '2013/10/15 16:16:39'
        params:
          type: object
          properties: {}
          description: ''
          example: {}
        request:
          $ref: '#/components/schemas/pagesapiRequest20'
      example:
        id: unique API ID
        ts: '2013/10/15 16:16:39'
        params: {}
        request:
          name: Resourcessss
          id: 1228394137835929600
          portalMap:
            - id: 1228383082462412800
              index: 1
              group: 1
            - id: 1228383384379392000
              index: 1
              group: 2
          appMap:
            - id: 1228383082462412800
              index: 1
              group: 1
            - id: 1228383384379392000
              index: 1
              group: 2
    pagesapiRequest20:
      title: Request20
      required:
        - appMap
        - id
        - name
        - portalMap
      type: object
      properties:
        name:
          type: string
          description: ''
          example: Resourcessss
        id:
          type: string
          description: ''
          example: 1228394137835929600
        portalMap:
          type: array
          description: ''
          example:
            - id: 1228383082462412800
              index: 1
              group: 1
            - id: 1228383384379392000
              index: 1
              group: 2
          items:
            $ref: '#/components/schemas/pagesapiPortalMap'
        appMap:
          type: array
          description: ''
          example:
            - id: 1228383082462412800
              index: 1
              group: 1
            - id: 1228383384379392000
              index: 1
              group: 2
          items:
            $ref: '#/components/schemas/pagesapiAppMap'
      example:
        name: Resourcessss
        id: 1228394137835929600
        portalMap:
          - id: 1228383082462412800
            index: 1
            group: 1
          - id: 1228383384379392000
            index: 1
            group: 2
        appMap:
          - id: 1228383082462412800
            index: 1
            group: 1
          - id: 1228383384379392000
            index: 1
            group: 2
    pagesapiGetPageAssemblerequest:
      title: get page assembleRequest
      required:
        - id
        - params
        - request
        - ts
      type: object
      properties:
        id:
          type: string
          description: ''
          example: unique API ID
        ts:
          type: string
          description: ''
          example: '2013/10/15 16:16:39'
        params:
          type: object
          properties: {}
          description: ''
          example: {}
        request:
          $ref: '#/components/schemas/pagesapiRequest24'
      example:
        id: unique API ID
        ts: '2013/10/15 16:16:39'
        params: {}
        request:
          source: web
          name: page
          organisationId: id of the organisation optional
          filters:
            objectType:
              - Content
    pagesapiRequest24:
      title: Request24
      required:
        - name
        - source
      type: object
      properties:
        source:
          type: string
          description: possible values are app or web
          example: web
        name:
          type: string
          description: name of your page
          example: page
        organisationId:
          type: object
          description: >-
            if you pass the organisation id then system will try to match page
            name created by that organisation . if you have not created any page
            then don not pass organisationid key , you will get default creaetd
            page
        filters:
          $ref: '#/components/schemas/pagesapiFilters25'
      example:
        source: web
        name: page
        filters:
          objectType:
            - Content
    pagesapiFilters25:
      title: Filters25
      required:
        - objectType
      type: object
      properties:
        objectType:
          type: array
          description: ''
          example:
            - Content
          items:
            type: string
      example:
        objectType:
          - Content
    pagesapiResultWithNodeId:
      title: Result Containing Node Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/pagesapiNodeId'
    pagesapiContentCreateResponse:
      description: Create Content Response
      allOf:
        - $ref: '#/components/schemas/pagesapiResultWithNodeId'
        - $ref: '#/components/schemas/pagesapiResponseHeader'
    pagesapiPageReadResponse:
      description: Page Read Response
      allOf:
        - $ref: '#/components/schemas/pagesapiResponseHeader'
        - $ref: '#/components/schemas/pagesapiEmptyResult'
    pagesapiResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/pagesapiResponseParams'
        responseCode:
          type: object
          properties: {}
          description: 'API response code '
    pagesapiResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    pagesapiEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    pagesapiNodeId:
      title: Node Id
      type: object
      properties:
        node_id:
          type: string
          description: Node Identifier
    pagesapiContentCreateErrorResponse:
      title: Create Content Error Response
      allOf:
        - $ref: '#/components/schemas/pagesapiResponseHeader'
        - $ref: '#/components/schemas/pagesapiEmptyResult'
    pagesapi500ServerError:
      title: 500ServerError
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          type: string
        responseCode:
          type: string
        result:
          type: object
          properties:
            message:
              type: string
    dialapiGenerateDialcoderequest:
      title: Generate dialcodeRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/dialapiRequest'
      example:
        request:
          dialcodes:
            count: 1
            publisher: Sunbird
    dialapiRequest:
      title: Request
      required:
        - dialcodes
      type: object
      properties:
        dialcodes:
          $ref: '#/components/schemas/dialapiDialcodes'
      example:
        dialcodes:
          count: 1
          publisher: Sunbird
    dialapiDialcodes:
      title: Dialcodes
      required:
        - count
      type: object
      properties:
        count:
          type: integer
          description: ''
          format: int32
          example: 1
        publisher:
          type: string
          description: Represents the entity who  who owns the DIAL code
          example: Sunbird
        batchCode:
          type: string
          description: Represents a set of dialcode for specific purpose
          example: batch101
    dialapiCreatePublisherRequest:
      title: Create publisherRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/dialapiRequest4'
      example:
        request:
          publisher:
            identifier: Sunbird
            name: Sunbird Portal
    dialapiRequest4:
      title: Request4
      required:
        - publisher
      type: object
      properties:
        publisher:
          $ref: '#/components/schemas/dialapiPublisher'
      example:
        publisher:
          identifier: Sunbird
          name: Sunbird Portal
    dialapiPublisher:
      title: Publisher
      required:
        - identifier
        - name
      type: object
      properties:
        identifier:
          type: string
          description: Alphanumeric DIAL code generated by platform
          example: Sunbird
        name:
          type: string
          description: ''
          example: Sunbird Portal
      example:
        identifier: Sunbird
        name: Sunbird Portal
    dialapiGetDialcoderequest:
      title: Get dialcodeRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/dialapiRequest7'
    dialapiRequest7:
      title: Request7
      required:
        - dialcode
      type: object
      properties:
        dialcode:
          $ref: '#/components/schemas/dialapiDialcode'
    dialapiDialcodeGenerate:
      title: Dialcode Generate
      type: object
      properties:
        dialcodes:
          type: array
          description: List of generated dialcodes
          items:
            type: string
            description: generated dialcode id
        count:
          type: number
          description: Number of generated dialcodes
        batchcode:
          type: string
          description: Batch code against which dialcode is generated
        publisher:
          type: string
          description: Publisher who owns dialcodes
    dialapiDialcodeUpdate:
      title: Dialcode Update
      type: object
      properties:
        identifier:
          type: string
          description: Identifier of dialcode
    dialapiDialcodePublish:
      title: Dialcode Publish
      type: object
      properties:
        identifier:
          type: string
          description: Identifier of dialcode
    dialapiPublisherUpdate:
      title: Publisher Update
      type: object
      properties:
        identifier:
          type: string
          description: Identifier of Publisher
    dialapiDialcodeGet:
      title: Dialcode Get
      type: object
      properties:
        identifier:
          type: string
          description: Represents identifier of dialcode
        channel:
          type: number
          description: represents channel under which dialdoe is generated
        status:
          type: string
          description: Status of the dialcode
        publisher:
          type: string
          description: Publisher who owns dialcodes
        generatedOn:
          type: string
          description: Timestamp at which dialcode is generated
        metadata:
          type: string
          description: Additional metadata of dialcode
    dialapiPublisherGet:
      title: Publisher Get
      type: object
      properties:
        publisher:
          type: object
          properties:
            identifier:
              type: string
              description: Represents identifier of dialcode
            name:
              type: number
              description: Name of the publisher
            channel:
              type: string
              description: Channel under which prublisher is created
            createdOn:
              type: string
              description: Timestamp at which publisher is created
            updatedOn:
              type: string
              description: Timestamp at which publisher is updated
    dialapiPublisherCreate:
      title: Publisher Create
      type: object
      properties:
        identifier:
          type: string
          description: Identifier of the publisher
    dialapiSearchDialcode:
      title: Search Dialcode
      type: object
      properties:
        dialcodes:
          type: array
          description: list of dialcode with metadata
          items:
            type: object
        count:
          type: number
          description: number of dialcode object returned in response
    dialapiResponseReserveDialcode:
      title: Reserve Dialcode Response
      type: object
      properties:
        reservedDialcodes:
          type: object
          description: Map of generated dialcode and its sequence
        count:
          type: number
          description: number of dialcode object returned in response
        node_id:
          type: string
          description: Identifier of the contnet against which dialcodes are reserved
        versionKey:
          type: string
          description: Current Version Key of content
    dialapiProcessStatus:
      title: Process Status
      type: object
      properties:
        status:
          type: string
          description: Process status of the dialcode generation QR code image link
        url:
          type: string
          description: QR code image url link
    dialapiUpdateDialcoderequest:
      title: update dialcodeRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/dialapiRequest10'
    dialapiRequest10:
      title: Request10
      required:
        - dialcode
      type: object
      properties:
        dialcode:
          $ref: '#/components/schemas/dialapiDialcode11'
    dialapiDialcode11:
      title: Dialcode11
      type: object
      properties:
        publisher:
          type: string
          description: ' Represents the entity who owns the DIAL code.'
          example: Sunbird
        metadata:
          type: object
          description: Additional metadata of dialcode
    dialapiUpdatePublisherrequest:
      title: Update publisherRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/dialapiRequest13'
    dialapiRequest13:
      title: Request13
      required:
        - publisher
      type: object
      properties:
        publisher:
          $ref: '#/components/schemas/dialapiPublisher14'
    dialapiPublisher14:
      title: Publisher14
      type: object
      properties:
        name:
          type: string
          description: Name of Publisher
    dialapiPublishDialcoderequest:
      title: Publish dialcodeRequest
      required:
        - request
      type: object
      properties:
        request:
          type: object
          properties: {}
          description: ''
          example: {}
      example:
        request: {}
    dialapiLinkDialcoderequest:
      title: Link dialcodeRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/dialapiRequest17'
    dialapiRequest17:
      title: Request17
      required:
        - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/dialapiContent'
    dialapiContent:
      title: Content
      required:
        - dialcode
        - identifier
      type: object
      properties:
        identifier:
          type: array
          description: List of content ids with which dialcode has to be linked
          items:
            type: string
        dialcode:
          type: array
          description: List of dialcode ids which have to be linked with content
          items:
            type: string
    dialapiSearchDialcoderequest:
      title: Search Dialcode Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/dialapiRequest20'
    dialapiReserveDialcodeRequest:
      title: Reserve Dialcode Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/dialapiReserveDialcode'
    dialapiRequest20:
      title: Request20
      required:
        - search
      type: object
      properties:
        search:
          $ref: '#/components/schemas/dialapiSearch'
    dialapiReserveDialcode:
      title: Reserve Dialcoe
      required:
        - dialcodes
      type: object
      properties:
        dialcodes:
          $ref: '#/components/schemas/dialapiRequestReserveDialcode'
    dialapiRequestReserveDialcode:
      title: Reserve Dialcode Request
      required:
        - count
      type: object
      properties:
        count:
          type: number
    dialapiSearch:
      title: Search
      type: object
      properties:
        status:
          type: string
          description: Status of dialcode
        publisher:
          type: string
          description: Publisher of dialcode
        identifier:
          type: string
          description: Identifier of dialcode
    dialapiResultDialcodeGenerate:
      title: Result containing Dialcode
      type: object
      properties:
        result:
          $ref: '#/components/schemas/dialapiDialcodeGenerate'
    dialapiResultDialcodeUpdate:
      title: Result containing Dialcode
      type: object
      properties:
        result:
          $ref: '#/components/schemas/dialapiDialcodeUpdate'
    dialapiResultDialcodePublish:
      title: Result containing Dialcode
      type: object
      properties:
        result:
          $ref: '#/components/schemas/dialapiDialcodePublish'
    dialapiResultPublisherUpdate:
      title: Result containing Publisher
      type: object
      properties:
        result:
          $ref: '#/components/schemas/dialapiPublisherUpdate'
    dialapiResultDialcodeGet:
      title: Result containing Dialcode
      type: object
      properties:
        result:
          $ref: '#/components/schemas/dialapiDialcodeGet'
    dialapiResultPublisherGet:
      title: Result containing Publisher
      type: object
      properties:
        result:
          $ref: '#/components/schemas/dialapiPublisherGet'
    dialapiResultLinkDialcode:
      title: Result containing Link Dialcode Response
      type: object
      properties:
        result:
          type: object
    dialapiResultSearchDialcode:
      title: Result containing Search Dialcode Response
      type: object
      properties:
        result:
          $ref: '#/components/schemas/dialapiSearchDialcode'
    dialapiResultReserveDialcode:
      title: Result containing Reserve Dialcode Response
      type: object
      properties:
        result:
          $ref: '#/components/schemas/dialapiResponseReserveDialcode'
    dialapiResultPublisherCreate:
      title: Result containing Publisher
      type: object
      properties:
        result:
          $ref: '#/components/schemas/dialapiPublisherCreate'
    dialapiResultProcessStatus:
      title: Result Process status
      type: object
      properties:
        result:
          $ref: '#/components/schemas/dialapiProcessStatus'
    dialapiDialcodeGenerateResponse:
      description: Generate Dialcode Response
      allOf:
        - $ref: '#/components/schemas/dialapiResultDialcodeGenerate'
        - $ref: '#/components/schemas/dialapiResponseHeader'
    dialapiDialcodeUpdateResponse:
      description: Update Dialcode Response
      allOf:
        - $ref: '#/components/schemas/dialapiResultDialcodeUpdate'
        - $ref: '#/components/schemas/dialapiResponseHeader'
    dialapiDialcodePublishResponse:
      description: Update Dialcode Response
      allOf:
        - $ref: '#/components/schemas/dialapiResultDialcodePublish'
        - $ref: '#/components/schemas/dialapiResponseHeader'
    dialapiPublisherUpdateResponse:
      description: Update Publisher Response
      allOf:
        - $ref: '#/components/schemas/dialapiResultPublisherUpdate'
        - $ref: '#/components/schemas/dialapiResponseHeader'
    dialapiPublisherCreateResponse:
      description: Create Publisher Response
      allOf:
        - $ref: '#/components/schemas/dialapiResultPublisherCreate'
        - $ref: '#/components/schemas/dialapiResponseHeader'
    dialapiProcessStatusResponse:
      description: Process status Response
      allOf:
        - $ref: '#/components/schemas/dialapiResultProcessStatus'
        - $ref: '#/components/schemas/dialapiResponseHeader'
    dialapiGetDialcodeResponse:
      description: Get Dialcode Response
      allOf:
        - $ref: '#/components/schemas/dialapiResultDialcodeGet'
        - $ref: '#/components/schemas/dialapiResponseHeader'
    dialapiGetPublisherResponse:
      description: Get Publisher Response
      allOf:
        - $ref: '#/components/schemas/dialapiResultPublisherGet'
        - $ref: '#/components/schemas/dialapiResponseHeader'
    dialapiLinkDialcodeResponse:
      description: Link Dialcode Response
      allOf:
        - $ref: '#/components/schemas/dialapiResultLinkDialcode'
        - $ref: '#/components/schemas/dialapiResponseHeader'
    dialapiSearchDialcodeResponse:
      description: Search Dialcode Response
      allOf:
        - $ref: '#/components/schemas/dialapiResultSearchDialcode'
        - $ref: '#/components/schemas/dialapiResponseHeader'
    dialapiReserveDialcodeResponse:
      description: Reserve Dialcode Response
      allOf:
        - $ref: '#/components/schemas/dialapiResultReserveDialcode'
        - $ref: '#/components/schemas/dialapiResponseHeader'
    dialapiResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/dialapiResponseParams'
        responseCode:
          type: string
          description: API response code
    dialapiResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Represents the response Message ID
        msgid:
          type: string
          description: Represents the error Message ID
        err:
          type: string
          description: Represents the Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    dialapiEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    dialapiDialcode:
      title: Dialcode
      type: object
      properties:
        identifier:
          type: string
          description: Node Identifier
    dialapiDialcodeErrorResponse:
      title: Dialcode Error Response
      allOf:
        - $ref: '#/components/schemas/dialapiEmptyResult'
        - $ref: '#/components/schemas/dialapiResponseHeader'
    druidreportapiParams:
      title: Params
      required:
        - resmsgid
        - err
        - status
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        err:
          type: string
        status:
          type: string
    druidreportapiReportConfig:
      title: ReportConfig
      required:
        - id
        - queryType
        - dateRange
        - metrics
        - labels
        - output
      type: object
      properties:
        id:
          type: string
        queryType:
          type: string
        store:
          type: string
        container:
          type: string
        key:
          type: string
        dateRange:
          $ref: '#/components/schemas/druidreportapiDateRange'
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/druidreportapiMetrics'
        labels:
          $ref: '#/components/schemas/druidreportapiLabels'
        output:
          type: array
          items:
            $ref: '#/components/schemas/druidreportapiOutput'
      example:
        id: district_monthly
        queryType: groupBy
        dateRange:
          staticInterval: LastMonth
          granularity: all
        metrics:
          metric: totalUniqueDevices
          label: Total Unique Devices
          druidQuery:
            queryType: groupBy
            dataSource: telemetry-events
            intervals: LastMonth
          aggregations:
            name: total_unique_devices
            type: cardinality
            fieldName: context_did
          dimensions:
            - fieldName: derived_loc_state
              aliasName: state
            - fieldName: derived_loc_district
              aliasName: district
          filters:
            - type: in
              dimension: context_pdata_id
              values:
                - sunbirdddev.diksha.portal
                - sunbirddev.diksha.app
            - type: isnotnull
              dimension: derived_loc_state
            - type: isnotnull
              dimension: derived_loc_district
          descending: 'false'
          labels:
            state: State
            district: District
            total_unique_devices: Number of Unique Devices
          output:
            - type: csv
            - metrics:
                - total_unique_devices
            - dims:
                - state
          fileParameters:
            - id
            - dims
    druidreportapiDruidConfig:
      title: DruidConfig
      required:
        - reportConfig
        - store
        - container
        - key
      type: object
      properties:
        reportConfig:
          type: object
          items:
            $ref: '#/components/schemas/druidreportapiReportConfig'
        store:
          type: string
          description: 'Options : azure/local/s3'
        container:
          type: string
        key:
          type: string
      example:
        reportConfig:
          $ref: '#/components/schemas/druidreportapiReportConfig/example'
        store: azure
        key: folder-name/
        container: container-name
    druidreportapiInterval:
      title: Interval
      required:
        - startDate
        - endDate
      type: object
      properties:
        startDate:
          type: string
        endDate:
          type: string
      example:
        startDate: '2020-10-11'
        endDate: '2020-11-11'
    druidreportapiDateRange:
      title: DateRange
      required:
        - staticInterval
        - interval
        - granularity
      type: object
      properties:
        staticInterval:
          type: string
          nullable: true
        granularity:
          type: string
        interval:
          $ref: '#/components/schemas/druidreportapiInterval'
      example:
        interval:
          startDate: '2020-10-01'
          endDate: '2020-10-02'
        staticInterval: LastMonth
        granularity: Day
    druidreportapiMetrics:
      title: Metrics
      required:
        - metric
        - label
        - druidQuery
      type: object
      properties:
        metric:
          type: string
        label:
          type: string
        druidQuery:
          $ref: '#/components/schemas/druidreportapiDruidQuery'
      example:
        druidQuery: ''
        metric: totalUniqueDevices
        label: Total Unique Devices
    druidreportapiDruidQuery:
      title: DruidQuery
      required:
        - queryType
        - dataSource
        - intervals
        - descending
      type: object
      properties:
        queryType:
          type: string
        dataSource:
          type: string
        intervals:
          type: string
        descending:
          type: boolean
        filters:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/druidreportapiFilters'
        dimensions:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/druidreportapiDimensions'
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/druidreportapiAggregations'
      example:
        queryType: groupBy
        dataSource: telemetry-events
        intervals: 2020-09-01/2020-09-04
    druidreportapiFilters:
      title: Filters
      required:
        - type
        - dimension
      type: object
      properties:
        type:
          type: string
          description: Filter type - and/or/in etc
        dimension:
          type: string
          description: Druid dimension name
        values:
          type: array
          items:
            type: string
      example:
        type: in//or/and
        dimension: context_pdata_id
        values:
          - test.diksha.portal
    druidreportapiDimensions:
      title: Dimensions
      required:
        - fieldName
      type: object
      properties:
        aliasName:
          nullable: true
          type: string
          description: Alias name for druid dimension name
        fieldName:
          type: string
          description: Druid dimension name
      example:
        fieldName: derived_loc_district
        aliasName: district
    druidreportapiAggregations:
      title: Aggregations
      required:
        - name
        - type
        - fieldName
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          description: Aggregation type- count/cardinality etc
        fieldName:
          type: string
      example:
        name: total_unique_devices
        type: cardinality
        fieldName: context_did
    druidreportapiSubmitReportRequest:
      title: SubmitDruidReport
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/druidreportapiReport-Request'
      example:
        request:
          reportId: district_monthly
          requestedBy: analytics
          description: Unique Device district wise monthly
          reportSchedule: reportSchedule
          config:
            id: district_monthly
        queryType: groupBy
        dateRange:
          staticInterval: LastMonth
          granularity: all
        metrics:
          metric: totalUniqueDevices
          label: Total Unique Devices
          druidQuery:
            queryType: groupBy
            dataSource: telemetry-events
            intervals: LastMonth
          aggregations:
            name: total_unique_devices
            type: cardinality
            fieldName: context_did
          dimensions:
            - fieldName: derived_loc_state
              aliasName: state
            - fieldName: derived_loc_district
              aliasName: district
          filters:
            - type: in
              dimension: context_pdata_id
              values:
                - sunbirdddev.diksha.portal
                - sunbirddev.diksha.app
            - type: isnotnull
              dimension: derived_loc_state
            - type: isnotnull
              dimension: derived_loc_district
          descending: 'false'
          labels:
            state: State
            district: District
            total_unique_devices: Number of Unique Devices
          output:
            - type: csv
            - metrics:
                - total_unique_devices
            - dims:
                - state
          fileParameters:
            - id
            - dims
    druidreportapiLabels:
      title: Labels
      type: object
      properties:
        '{{label-key}}':
          type: string
          description: >-
            key value pairs for changing druid columns to desired names for
            report
      example:
        total_unique_devices: Number of Unique Devices
        state: State
    druidreportapiOutput:
      title: Output
      type: object
      required:
        - type
        - metrics
        - dims
        - fileParameters
      properties:
        type:
          type: string
          description: Output type csv or json
        metrics:
          type: array
          description: List of metrics names from aggregations and post aggregations
          items:
            type: string
        dims:
          type: array
          description: List of dimensions for the report folders
          items:
            type: string
        fileParameters:
          type: array
          description: Parameters like filename etcs
          items:
            type: string
    druidreportapiReport-Request:
      title: Report-Request
      required:
        - reportId
        - requestedBy
        - description
        - reportSchedule
        - config
      type: object
      properties:
        reportId:
          type: string
          description: This identifier uniquely identifies a report
        requestedBy:
          type: string
          description: This represents the user who request the report
          example: analytics
        reportSchedule:
          type: string
          description: This represents short description about the report
          example: MONTHLY
        description:
          type: string
          description: Short description about report
          example: Unique Device district wise monthly
        config:
          $ref: '#/components/schemas/druidreportapiDruidConfig'
      example:
        reportId: district_monthly
        requestedBy: analytics
        description: Unique Device district wise monthly
        reportSchedule: reportSchedule
        config: ''
    druidreportapiListDruidReportRequest:
      title: ListDruidReportRequest
      required:
        - request
      type: object
      properties:
        request:
          type: object
          description: Request to get all active or inactive reports
          properties:
            filter:
              type: object
              properties:
                status:
                  type: array
                  items:
                    type: string
      example:
        request:
          filters:
            status:
              - INACTIVE
    druidreportapiDruidReport-BadRequestResponse:
      title: DruidReport-BadRequestResponse
      description: DruidReport-BadRequestResponse- All Missing Fields
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/druidreportapiParams'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: ekstep.analytics.report.submit
        ver: v1
        ts: '2020-11-30T09:01:46.049+00:00'
        params:
          resmsgid: f434f2ea-56a2-4142-92ce-1023d229142a
          err: CLIENT_ERROR
          status: failed
        responseCode: CLIENT_ERROR
        result:
          request.config: Config should not be empty
          request.description: Report Description should not empty
          status: failed
          request.createdBy: Created By should not be empty
          request.reportId: Report Id should not be  empty
    druidreportapiDruidReportAPI-InternalServerError:
      title: DruidReportAPI-InternalServerError
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/druidreportapiParams'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: ekstep.analytics.report.submit
        ver: v1
        ts: '2020-11-23 15:15:18:331+0000'
        params:
          resmsgid: null
          msgid: null
          err: INTERNAL_ERROR
          status: SERVER_ERROR
          errmsg: 'Process failed,please try again later.'
        responseCode: SERVER_ERROR
        result: {}
    druidreportapiSubmitDruidReport-SuccessResponse:
      title: SubmitDruidReport-SuccessResponse
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/druidreportapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/druidreportapiReport-Request'
      example:
        id: ekstep.analytics.report.submit
        ver: v1
        ts: '2020-11-23 06:42:39:001+0000'
        params:
          resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
          status: successful
        responseCode: OK
        result:
          $ref: '#/components/examples/reportexample'
    druidreportapiUpdateDruidReport-SuccessResponse:
      title: UpdateDruidReport-SuccessResponse
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/druidreportapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/druidreportapiReport-Request'
      example:
        id: ekstep.analytics.report.update
        ver: v1
        ts: '2020-11-23 06:42:39:001+0000'
        params:
          resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
          status: successful
        responseCode: OK
        result:
          $ref: '#/components/examples/reportexample'
    druidreportapiGetDruidReport-SuccessResponse:
      title: UpdateDruidReport-SuccessResponse
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/druidreportapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/druidreportapiReport-Request'
      example:
        id: ekstep.analytics.report.update
        ver: v1
        ts: '2020-11-23 06:42:39:001+0000'
        params:
          resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
          status: successful
        responseCode: OK
        result:
          $ref: '#/components/examples/reportexample'
    druidreportapiListDruidReport-SuccessResponse:
      title: ListDruidReport-SuccessResponse
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/druidreportapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/druidreportapiListReports-Response'
      example:
        id: ekstep.analytics.report.get
        ver: v1
        ts: '2020-11-23 06:42:39:001+0000'
        params:
          resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
          status: successful
        responseCode: OK
        result:
          $ref: '#/components/schemas/druidreportapiListReports-Response/example'
    druidreportapiListReports-Response:
      title: ListReports-Response
      required:
        - count
        - reports
      type: object
      properties:
        count:
          type: integer
        reports:
          type: array
          items:
            $ref: '#/components/schemas/druidreportapiReport-Request'
      example:
        count: 1
        reports:
          - $ref: '#/components/examples/reportexample'
    druidreportapiDeactivateDruidReport-SuccessResponse:
      title: DeactivateDruidReport-SuccessResponse
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/druidreportapiParams'
        responseCode:
          type: string
        result:
          type: object
          properties:
            result:
              type: string
      example:
        id: ekstep.analytics.report.delete
        ver: v1
        ts: '2020-11-23 06:42:39:001+0000'
        params:
          resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
          status: successful
        responseCode: OK
        result:
          result: Successfully DeActivated the Report
    bulkserviceapiSuccess-UploadUsersinBulk:
      title: Success-UploadUsersinBulk
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/bulkserviceapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/bulkserviceapiUserBulkUploadResult'
      example:
        id: api.user.upload
        ver: v1
        ts: '2020-12-01 16:24:35:250+0000'
        params:
          resmsgid: null
          msgid: bf2d6e695e927a885eaae649c45b84b4
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          processId: 01316323485186457631
    bulkserviceapiParams:
      title: Params
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
          nullable: true
        status:
          type: string
        errmsg:
          type: string
          nullable: true
      example:
        resmsgid: null
        msgid: bf2d6e695e927a885eaae649c45b84b4
        err: null
        status: success
        errmsg: null
    bulkserviceapiUserBulkUploadResult:
      title: UserBulkUploadResult
      required:
        - processId
      type: object
      properties:
        processId:
          type: string
      example:
        processId: 01316323485186457631
    bulkserviceapiFailureParams:
      title: FailureParams
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: null
        msgid: 1b4f72063d1b43ef397e9b6ded1dbd90
        err: UNAUTHORIZED_USER
        status: SERVER_ERROR
        errmsg: You are not authorized.
    bulkserviceapiUploadShadowUsersinBulk:
      title: UploadShadowUsersinBulk
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/bulkserviceapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/bulkserviceapiShadowUserBulkUploadResult'
      example:
        id: api.bulk.user.upload
        ver: v2
        ts: '2020-12-04 06:45:24:931+0000'
        params:
          resmsgid: null
          msgid: 5f18f128b083e50a09b137dbac323845
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          processId: 013165071979683840148
          response: SUCCESS
    bulkserviceapiShadowUserBulkUploadResult:
      title: ShadowUserBulkUploadResult
      required:
        - processId
        - response
      type: object
      properties:
        processId:
          type: string
        response:
          type: string
      example:
        processId: 013165071979683840148
        response: SUCCESS
    bulkserviceapiBulk-uploadself-declaredusers:
      title: Bulk-uploadself-declaredusers
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/bulkserviceapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/bulkserviceapiShadowUserBulkUploadResult'
      example:
        id: api.bulk.user.upload
        ver: v2
        ts: '2020-12-04 06:45:45:157+0000'
        params:
          resmsgid: null
          msgid: 0b7d0768cf7086a921cdaa48f6414564
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          processId: 013165079212539904150
          response: SUCCESS
    bulkserviceapiCheckUploadStatus-Success:
      title: CheckUploadStatus-Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/bulkserviceapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/bulkserviceapiCheckUploadStatusResult'
      example:
        id: api.upload.status
        ver: v1
        ts: '2020-12-01 17:13:43:230+0000'
        params:
          resmsgid: null
          msgid: ff70ec24aae247f1a2b21fae2c200f6c
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response:
            - failureResult: []
              processId: 01316326144873267234
              successResult:
                - code: APDIST1
                  parentCode: APCODE
                  name: APDIST1
                  type: district
                  parentId: 6824e3d3-5512-4344-a481-7bac011edaa8
                  id: 333a45f6-ce34-491c-b63b-2187c2df367a
                  operation: create
                - code: APDIST2
                  parentCode: APCODE
                  name: APDIST2
                  type: district
                  parentId: 6824e3d3-5512-4344-a481-7bac011edaa8
                  id: 97287c81-f439-4f69-85fe-d1cf6fca3003
                  operation: create
              message: Operation is completed.
              objectType: location
              status: COMPLETED
    bulkserviceapiCheckUploadStatusResult:
      title: CheckUploadStatusResult
      required:
        - response
      type: object
      properties:
        response:
          type: array
          items:
            $ref: '#/components/schemas/bulkserviceapiResponse'
          description: ''
      example:
        response:
          - failureResult: []
            processId: 01316326144873267234
            successResult:
              - code: APDIST1
                parentCode: APCODE
                name: APDIST1
                type: district
                parentId: 6824e3d3-5512-4344-a481-7bac011edaa8
                id: 333a45f6-ce34-491c-b63b-2187c2df367a
                operation: create
              - code: APDIST2
                parentCode: APCODE
                name: APDIST2
                type: district
                parentId: 6824e3d3-5512-4344-a481-7bac011edaa8
                id: 97287c81-f439-4f69-85fe-d1cf6fca3003
                operation: create
            message: Operation is completed.
            objectType: location
            status: COMPLETED
    bulkserviceapiResponse:
      title: Response
      required:
        - failureResult
        - processId
        - successResult
        - message
        - objectType
        - status
      type: object
      properties:
        failureResult:
          type: array
          items:
            type: string
          description: ''
        processId:
          type: string
        successResult:
          type: array
          items:
            $ref: '#/components/schemas/bulkserviceapiSuccessResult'
          description: ''
        message:
          type: string
        objectType:
          type: string
        status:
          type: string
      example:
        failureResult: []
        processId: 01316326144873267234
        successResult:
          - code: APDIST1
            parentCode: APCODE
            name: APDIST1
            type: district
            parentId: 6824e3d3-5512-4344-a481-7bac011edaa8
            id: 333a45f6-ce34-491c-b63b-2187c2df367a
            operation: create
          - code: APDIST2
            parentCode: APCODE
            name: APDIST2
            type: district
            parentId: 6824e3d3-5512-4344-a481-7bac011edaa8
            id: 97287c81-f439-4f69-85fe-d1cf6fca3003
            operation: create
        message: Operation is completed.
        objectType: location
        status: COMPLETED
    bulkserviceapiSuccessResult:
      title: SuccessResult
      required:
        - code
        - parentCode
        - name
        - type
        - parentId
        - id
        - operation
      type: object
      properties:
        code:
          type: string
        parentCode:
          type: string
        name:
          type: string
        type:
          type: string
        parentId:
          type: string
        id:
          type: string
        operation:
          type: string
      example:
        code: APDIST1
        parentCode: APCODE
        name: APDIST1
        type: district
        parentId: 6824e3d3-5512-4344-a481-7bac011edaa8
        id: 333a45f6-ce34-491c-b63b-2187c2df367a
        operation: create
    bulkserviceapiSuccess-UploadLocationDatainBulk:
      title: Success-UploadLocationDatainBulk
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/bulkserviceapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/bulkserviceapiUserBulkUploadResult'
      example:
        id: api.bulk.location.upload
        ver: v1
        ts: '2020-12-01 17:13:28:034+0000'
        params:
          resmsgid: null
          msgid: 0eef8c3ff45390894ecd98c146248792
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          processId: 01316326144873267234
    bulkserviceapiUploadOrganisationsinBulk-BadRequest:
      title: UploadOrganisationsinBulk-BadRequest
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/bulkserviceapiFailureParams'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.org.upload
        ver: v1
        ts: '2020-12-07 06:14:05:979+0000'
        params:
          resmsgid: null
          msgid: 6f50eb71cd56b52a65aea643df42e80b
          err: MANDATORY_PARAMETER_MISSING
          status: MANDATORY_PARAMETER_MISSING
          errmsg: Mandatory parameter orgName is missing.
        responseCode: CLIENT_ERROR
        result: {}
    bulkserviceapiUploadOrganisationsinBulk-Suceess:
      title: UploadOrganisationsinBulk-Suceess
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/bulkserviceapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/bulkserviceapiUserBulkUploadResult'
      example:
        id: api.org.upload
        ver: v1
        ts: '2020-12-04 06:51:24:413+0000'
        params:
          resmsgid: null
          msgid: 54f533acafefddb758704fb75caad1f9
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          processId: 0131650814782423040
    coursebatchcertificateapi500ServerError:
      title: 500ServerError
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          type: string
        responseCode:
          type: string
        result:
          type: object
          properties:
            message:
              type: string
    coursebatchcertificateapiAddCertificateTemplateRequest:
      title: AddCertificateTemplateRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: >-
            #/components/schemas/coursebatchcertificateapiAddCourseBatchTemplateRequest
    coursebatchcertificateapiAddCourseBatchTemplateRequest:
      title: AddCourseBatchTemplateRequest
      required:
        - batch
      type: object
      properties:
        batch:
          $ref: '#/components/schemas/coursebatchcertificateapiAddCourseBatchTemplate'
    coursebatchcertificateapiAddCourseBatchTemplate:
      title: AddCourseBatchTemplate
      required:
        - batchId
        - courseId
        - template
      type: object
      properties:
        courseId:
          type: string
          description: The course identifier
        batchId:
          type: string
          description: The batch identifier
        template:
          $ref: '#/components/schemas/coursebatchcertificateapiAddBatchTemplate'
    coursebatchcertificateapiAddBatchTemplate:
      title: AddBatchTemplate
      required:
        - criteria
        - identifier
        - issuer
        - signatoryList
      type: object
      properties:
        identifier:
          type: string
          description: The template identifier
        criteria:
          type: object
          properties:
            enrollment:
              type: object
              properties:
                status:
                  type: string
                  example: '2'
          description: The filter for the template
        signatoryList:
          type: array
          description: The list of signatories
          items:
            type: object
            required:
              - name
              - id
              - designation
              - image
            properties:
              name:
                type: string
                description: The signatory name
              id:
                type: string
                description: The identifier for the signatory
              designation:
                type: string
                description: The designation of the signatory
                example: CEO
              image:
                type: string
                description: image of the signatory signature
        issuer:
          type: object
          required:
            - name
            - url
          properties:
            name:
              type: string
              description: The issuer name
            url:
              type: string
              description: The issuer URL
            publicKey:
              type: array
              description: The public keys
              example:
                - 7
                - 8
              items:
                type: integer
                format: int64
          description: The filter for the template
    coursebatchcertificateapiRemoveCertificateTemplateRequest:
      title: RemoveCertificateTemplateRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: >-
            #/components/schemas/coursebatchcertificateapiRemoveCourseBatchTemplateRequest
    coursebatchcertificateapiRemoveCourseBatchTemplateRequest:
      title: RemoveCourseBatchTemplateRequest
      required:
        - batch
      type: object
      properties:
        batch:
          $ref: >-
            #/components/schemas/coursebatchcertificateapiRemoveCourseBatchTemplate
    coursebatchcertificateapiRemoveCourseBatchTemplate:
      title: RemoveCourseBatchTemplate
      required:
        - batchId
        - courseId
        - template
      type: object
      properties:
        courseId:
          type: string
          description: The course identifier
        batchId:
          type: string
          description: The batch identifier
        template:
          $ref: '#/components/schemas/coursebatchcertificateapiRemoveBatchTemplate'
    coursebatchcertificateapiRemoveBatchTemplate:
      title: RemoveBatchTemplate
      required:
        - templateId
      type: object
      properties:
        templateId:
          type: string
          description: The template identifier
    coursebatchcertificateapiIssueCertificateRequest:
      title: Issue certificate request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/coursebatchcertificateapiRequest'
    coursebatchcertificateapiRequest:
      title: Request
      required:
        - batchId
        - courseId
      type: object
      properties:
        courseId:
          type: string
          description: The course identifier
        batchId:
          type: string
          description: The batch identifier
        userIds:
          type: array
          description: The optional User IDs
          items:
            type: string
    coursebatchcertificateapiIssueCertificateResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            courseId:
              type: string
              description: The course identifier
            batchId:
              type: string
              description: The batch identifier
            status:
              type: string
              description: The certificate issue status
              example: >-
                Certificates issue action for Course Batch Id
                0128821148183429120 submitted Successfully!
          description: The response details
      description: Issue certificate Response
    coursebatchcertificateapiResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: The API Identifier
        ver:
          type: string
          description: The API version information
        ts:
          type: string
          description: The API execution timestamp
        params:
          $ref: '#/components/schemas/coursebatchcertificateapiResponseParams'
        responseCode:
          type: string
          description: The API response code
          example: CLIENT_ERROR
    coursebatchcertificateapiResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Represents the response message ID
        msgid:
          type: string
          description: Represents the error message ID
        err:
          type: string
          description: Represents the error code
        status:
          type: string
          description: The response status
        errmsg:
          type: string
          description: Error Message
          example: No such batchId exists
    coursebatchcertificateapiEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    coursebatchcertificateapiIssueCertificateErrorResponse:
      title: Create Content Error Response
      allOf:
        - $ref: '#/components/schemas/coursebatchcertificateapiResponseHeader'
        - $ref: '#/components/schemas/coursebatchcertificateapiEmptyResult'
    coursebatchcertificateapiSuccessResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            response:
              type: string
              example: SUCCESS
      description: Contains the success response
    coursebatchcertificateapiAddCertificateTemplateErrorResponse:
      title: Create cerrtificate error response
      allOf:
        - $ref: '#/components/schemas/coursebatchcertificateapiResponseHeader'
        - $ref: '#/components/schemas/coursebatchcertificateapiEmptyResult'
    coursebatchcertificateapiRemoveCertificateTemplateErrorResponse:
      title: Remove certificate error response
      allOf:
        - $ref: '#/components/schemas/coursebatchcertificateapiResponseHeader'
        - $ref: '#/components/schemas/coursebatchcertificateapiEmptyResult'
    coursebatchcertificateapiApiRequest:
      type: object
      properties:
        id:
          type: string
          description: Represents an API uniquely
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since EPOCH
          format: int64
        params:
          type: object
          properties:
            msgid:
              type: string
              description: Represents the unique ID of the message being sent
            did:
              type: string
              description: Represents the device UUID from which API is called
    coursebatchcertificateapiApiResponse:
      required:
        - ets
        - id
        - params
        - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since EPOCH
          format: int64
        params:
          required:
            - msgid
            - resmsgid
            - status
          type: object
          properties:
            msgid:
              type: string
              description: Represents the ID of the message sent
            resmsgid:
              type: string
              description: Represents the ID of the response message
            status:
              type: string
              enum:
                - success
                - error
        responseCode:
          type: string
    contentapiCreateContentRequest:
      title: Request Object
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/contentapiContentCreateRequestContent'
    contentapiContentCreateRequestContent:
      title: Request
      required:
        - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/contentapiContentCreateRequestContentObject'
    contentapiContentCreateRequestContentObject:
      title: Content
      required:
        - code
        - mimeType
        - name
        - contentType
        - createdBy
      type: object
      properties:
        name:
          type: string
          description: Represents the name of the content
        code:
          type: string
          description: Represents the unique code for the content
        mimeType:
          type: string
          description: Content mime type
        contentType:
          type: string
          description: 'Content Type. eg- TextBook, Resource, etc'
        createdBy:
          type: string
          description: ID of the user who created Content
    contentapiFetchUrlMetadataRequest:
      title: Request Object
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/contentapiFetchUrlMetadataRequestUrl'
    contentapiFetchUrlMetadataRequestUrl:
      title: Request
      required:
        - url
      type: object
      properties:
        url:
          type: string
          description: Url for which metadat is required
    contentapiUpdateContentrequest:
      title: Update ContentRequest
      type: object
      properties:
        request:
          $ref: '#/components/schemas/contentapiContentUpdateRequestContent'
      required:
        - request
    contentapiContentUpdateRequestContent:
      title: ContentUpdateRequestContent
      type: object
      properties:
        content:
          $ref: '#/components/schemas/contentapiContentUpdateRequestContentObject'
      required:
        - content
    contentapiContentUpdateRequestContentObject:
      title: Content
      required:
        - versionKey
      type: object
      properties:
        versionKey:
          type: string
          description: Represents the transaction update version key of the content
        description:
          type: string
          description: Represents the description for the content
    contentapiPublishContentRequest:
      title: Publish ContentRequest
      type: object
      properties:
        request:
          $ref: '#/components/schemas/contentapiContentPublishRequestContent'
      required:
        - request
    contentapiContentPublishRequestContent:
      title: ContentPublishRequestContent
      type: object
      properties:
        content:
          $ref: '#/components/schemas/contentapiContentPublishRequestContentObject'
      required:
        - content
    contentapiContentPublishRequestContentObject:
      title: ContentPublishRequestContentObject
      type: object
      properties:
        lastPublishedBy:
          description: user id who published the content
          type: string
      required:
        - lastPublishedBy
    contentapiFlagAcceptContentRequest:
      title: Flag Accept ContentRequest
      type: object
      properties:
        request:
          $ref: '#/components/schemas/contentapiContentFlagAcceptRequestContent'
      required:
        - request
    contentapiContentFlagAcceptRequestContent:
      title: ContentFlagAcceptRequestContent
      type: object
      properties:
        versionKey:
          description: versionKey of content
          type: string
      required:
        - versionKey
    contentapiCopyContentRequest:
      title: Copy Content Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/contentapiContentCopyRequestContent'
    contentapiContentCopyRequestContent:
      title: Content Copy Request Content
      required:
        - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/contentapiContentCopyRequestContentObject'
    contentapiContentCopyRequestContentObject:
      title: Content Copy Request Content Object
      required:
        - createdBy
        - createdFor
        - organisation
        - framework
      type: object
      properties:
        createdBy:
          type: string
          description: Represents the creator of the content
        createdFor:
          type: string
          description: Represents for whom content is created
        organisation:
          type: string
          description: Represents for which organisation content is created
        framework:
          type: string
          description: Represents framework with which content is tagged
    contentapiImportContentRequest:
      title: Import Content Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/contentapiContentImportRequestContent'
    contentapiContentImportRequestContent:
      title: Content Import Request Content
      required:
        - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/contentapiContentImportRequestContentObject'
    contentapiContentImportRequestContentObject:
      title: Content Import Request Content Object
      type: object
      properties:
        stage:
          type: string
          description: Represents the creator of the content
        source:
          type: string
          description: Represents for whom content is created
        metadata:
          type: object
          description: Represents for which organisation content is created
        collection:
          type: array
          description: Represents framework with which content is tagged
          items:
            type: object
            description: >-
              Represents collection and unit ids with which imported content has
              to be linked
    contentapiUploadUrlContentRequest:
      title: Upload Url Content Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/contentapiContentUploadUrlRequestContent'
    contentapiContentUploadUrlRequestContent:
      title: Content Upload Url Request Content
      required:
        - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/contentapiContentUploadUrlRequestContentObject'
    contentapiContentUploadUrlRequestContentObject:
      title: Content Upload Url Request Content Object
      required:
        - fileName
      type: object
      properties:
        fileName:
          type: string
          description: >-
            Represents the name of the file against which url has to be
            generated.
    contentapiContentCreateSuccessResponse:
      description: Create Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiResultWithContentId'
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiResultWithContentId:
      title: Result Containing Content Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/contentapiContentId'
    contentapiContentId:
      title: Content Id
      type: object
      properties:
        node_id:
          type: string
          description: Content Identifier
        content_id:
          type: string
          description: Content Identifier
        versionKey:
          type: string
          description: Content versionKey
    contentapiUrlFetchMetadataSuccessResponse:
      description: Url Fetch Metadata Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiResultWithUrlMetadata'
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiResultWithUrlMetadata:
      title: Result Containing Url Metadata
      type: object
      properties:
        result:
          $ref: '#/components/schemas/contentapiUrlMetadata'
    contentapiUrlMetadata:
      title: Url Metadata
      type: object
      properties:
        url:
          type: string
          description: Url link
        canonical:
          type: string
          description: Url link
        title:
          type: string
          description: Title of the url
        image:
          type: string
          description: Content versionKey
        author:
          type: string
          description: Author of the link
        description:
          type: string
          description: Description about the url
        keywords:
          type: string
          description: Keyword associated with url
        source:
          type: string
          description: Source of the link
        'og:url':
          type: string
        'og:locale':
          type: string
        'og:locale:alternate':
          type: string
        'og:title':
          type: string
        'og:type':
          type: string
        'og:description':
          type: string
        'og:determiner':
          type: string
        'og:site_name':
          type: string
        'og:image':
          type: string
        'og:image:secure_url':
          type: string
        'og:image:type':
          type: string
        'og:image:width':
          type: string
        'og:image:height':
          type: string
        price:
          type: string
        priceCurrency:
          type: string
        availability:
          type: string
    contentapiContentUploadSuccessResponse:
      description: Upload Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiUploadResultWithContentId'
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiUploadResultWithContentId:
      title: Result Containing Content Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/contentapiContentId'
    contentapiUploadContentId:
      title: Content Id
      type: object
      properties:
        node_id:
          type: string
          description: Content Identifier
        content_id:
          type: string
          description: Content Identifier
        versionKey:
          type: string
          description: Content versionKey
        artifactUrl:
          type: string
          description: Content uploaded file url link
        content_url:
          type: string
          description: Content uploaded file url link
    contentapiContentGetSuccessResponse:
      description: Get Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiResultWithContentMetadata'
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiResultWithContentMetadata:
      title: Result Containing Content Id and other metadata
      type: object
      properties:
        result:
          $ref: '#/components/schemas/contentapiContentIdWithMetadata'
    contentapiContentIdWithMetadata:
      title: Content Metadata
      type: object
      properties:
        identifier:
          type: string
          description: Content Identifier
        name:
          type: string
          description: Content name
        versionKey:
          type: string
          description: Content versionKey
    contentapiContentPublishSuccessResponse:
      description: Publish Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiPublishResultWithContentId'
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiPublishResultWithContentId:
      title: Result Containing Content Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/contentapiPublishContentId'
    contentapiPublishContentId:
      title: Content Id
      type: object
      properties:
        content_id:
          type: string
          description: Content Identifier
        publishStatus:
          type: string
          description: Status of the publish event
    contentapiContentRejectSuccessResponse:
      description: Reject Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiRejectResultWithContentId'
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiRejectResultWithContentId:
      title: Reject Result Containing Content Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/contentapiRejectContentId'
    contentapiRejectContentId:
      title: Reject Content Id
      type: object
      properties:
        node_id:
          type: string
          description: Content Identifier
        versionKey:
          type: string
          description: Content versionKey
    contentapiContentFlagSuccessResponse:
      description: Flag Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiFlagResultWithContentId'
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiFlagResultWithContentId:
      title: Reject Result Containing Content Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/contentapiFlagContentId'
    contentapiFlagContentId:
      title: Reject Content Id
      type: object
      properties:
        node_id:
          type: string
          description: Content Identifier
        identifier:
          type: string
          description: Content Identifier
        versionKey:
          type: string
          description: Content versionKey
    contentapiContentRetireSuccessResponse:
      description: Create Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiRetireResultWithContentId'
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiRetireResultWithContentId:
      title: Retire Result Containing Content Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/contentapiRetireContentId'
    contentapiRetireContentId:
      title: Content Id
      type: object
      properties:
        node_id:
          type: string
          description: Content Identifier
        identifier:
          type: string
          description: Content Identifier
    contentapiContentCopySuccessResponse:
      description: Create Copy Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiResultCopyContent'
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiResultCopyContent:
      title: Result Copy Content
      type: object
      properties:
        result:
          $ref: '#/components/schemas/contentapiCopyContent'
    contentapiCopyContent:
      title: Copy Content
      type: object
      properties:
        node_id:
          type: object
          description: Origin and copyied content ampping
        versionKey:
          type: string
          description: Content versionKey
    contentapiContentImportSuccessResponse:
      description: Create Import Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiResultImportContent'
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiResultImportContent:
      title: Result Import Content
      type: object
      properties:
        result:
          $ref: '#/components/schemas/contentapiImportContent'
    contentapiImportContent:
      title: Import Content
      type: object
      properties:
        processId:
          type: object
          description: Represents Process id against which content import process started
    contentapiContentUploadUrlSuccessResponse:
      description: Upload URL Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiUploadUrlResultWithContentId'
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiUploadUrlResultWithContentId:
      title: Upload Url Result WithC ontentId
      type: object
      properties:
        result:
          $ref: '#/components/schemas/contentapiUploadUrlContentId'
    contentapiUploadUrlContentId:
      title: Upload Url ContentId
      type: object
      properties:
        identifier:
          type: string
          description: Content Identifier
        url_expiry:
          type: string
          description: Url expiry time
        pre_signed_url:
          type: string
          description: pre-signed url link
    contentapiContentCreateErrorResponse:
      description: Create Content Error Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiEmptyResult'
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          description: Empty Result
    contentapiUrlFetchMetadataErrorResponse:
      description: Url Fetch Metadata Error Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/contentapiResponseParams'
        responseCode:
          type: string
          description: 'API response code '
    contentapiResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    contentapiContentSearchRequest:
      description: Composite Search Request
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiContentSearchRequestRequest'
    contentapiContentSearchRequestRequest:
      title: Composite Search Request
      required:
        - request
      type: object
      properties:
        query:
          type: string
          description: Data to be searched in object's metadata
        filters:
          type: object
          description: Criteria on which data has to be fetched
        limit:
          type: number
          description: Number of objects to be returned
        fields:
          type: array
          description: Fields to be fetched for each object
          items:
            type: string
        sort_by:
          type: object
          description: Fields on which object response has to be sorted
        facets:
          type: array
          description: Fields on which data has to be grouped
          items:
            type: string
        exists:
          type: array
          description: Fields which must be available in the object
          items:
            type: string
    contentapiContentSearchSuccessResponse:
      description: Content Search Success Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiResultWithContentSearch'
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiResultWithContentSearch:
      title: Result Containing Content Search
      type: object
      properties:
        result:
          $ref: '#/components/schemas/contentapiContentSearch'
    contentapiContentSearch:
      title: Content Search
      type: object
      properties:
        count:
          type: number
          description: Number of object
        objectType:
          type: object
          description: Set of object metadata
        facets:
          type: array
          description: List of objects group by field value
          items:
            type: object
            description: Grouping on field value
    contentapiContentSearchErrorResponse:
      description: Content Search Error Response
      type: object
      allOf:
        - $ref: '#/components/schemas/contentapiErrorSearchResult'
        - $ref: '#/components/schemas/contentapiResponseHeader'
    contentapiErrorSearchResult:
      title: Error Search Result
      type: object
      properties:
        result:
          type: object
    frameworkCreateFrameworkRequest:
      description: This is the create framework request body
      allOf:
        - $ref: '#/components/schemas/frameworkRequestFrameworkCreate'
    frameworkRequestFrameworkCreate:
      type: object
      properties:
        request:
          type: object
          properties:
            framework:
              type: object
              properties:
                name:
                  type: string
                  description: Represents the name of the framework
                code:
                  type: string
                  description: Represents the unique code of the framework
                description:
                  type: string
                  description: It is the description of the framework
                type:
                  type: string
                  description: Represents the type of framework
                channels:
                  type: array
                  description: Represents the channels associated with the framework
                  items:
                    type: object
                    properties: {}
                translations:
                  type: object
                  properties: {}
                  description: >-
                    Represents the translation of framework name in different
                    language
      description: Request body for create framework
    frameworkUpdateFrameworkRequest:
      description: Request body for update Framework
      allOf:
        - $ref: '#/components/schemas/frameworkRequestFrameworkUpdate'
    frameworkRequestFrameworkUpdate:
      type: object
      properties:
        request:
          type: object
          properties:
            framework:
              type: object
              properties:
                name:
                  type: string
                  description: Represents the name of the framework
                description:
                  type: string
                  description: It is the description of the framework
                type:
                  type: string
                  description: Represents the type of framework
                channels:
                  type: array
                  description: Represents the channels associated with the framework
                  items:
                    type: object
                    properties: {}
                categories:
                  type: array
                  description: Represents the categories associated with the framework
                  items:
                    type: object
                    properties: {}
                translations:
                  type: object
                  properties: {}
                  description: >-
                    Represents the translation of framework name in different
                    language
      description: Request body of update framework
    frameworkRequestChannelCreate:
      type: object
      properties:
        request:
          type: object
          properties:
            channel:
              type: object
              properties:
                name:
                  type: string
                  description: Represents the name of the channel
                code:
                  type: string
                  description: Represents the unique code of the channel
      description: Request body of create channel
    frameworkRequestChannelUpdate:
      type: object
      properties:
        request:
          type: object
          properties:
            channel:
              type: object
              properties:
                name:
                  type: string
                  description: Represents the name of the channel
                description:
                  type: string
                  description: It is the description of the channel
      description: Request body of update channel
    frameworkChannelCreateRequest:
      description: Request body of the create channel
      allOf:
        - $ref: '#/components/schemas/frameworkRequestChannelCreate'
    frameworkChannelUpdateRequest:
      description: Request body of the create channel
      allOf:
        - $ref: '#/components/schemas/frameworkRequestChannelUpdate'
    frameworkResponseChannelCreate200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: string
              description: Represents the identifier of the channel created
            identifier:
              type: string
              description: Represents the identifier of the channel created
    frameworkResponseChannelCreate400:
      type: object
      properties:
        responseCode:
          type: string
          description: Represents the Error code of the api response.
        result:
          type: object
          properties: {}
          description: Represents the empty response code.
      description: Response of the create channel on client error.
    frameworkChannelCreate200Response:
      description: Request body of the  create response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseChannelCreate200'
    frameworkChannelCreate400Response:
      description: Channel create response for 400.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseChannelCreate400'
    frameworkChannelObj:
      type: object
      properties:
        identifier:
          type: string
          description: Represents the Unique ID of the channel across sunbird installations
        code:
          type: string
          description: The code is same as the unique ID of the channel
        description:
          type: string
          description: Description of the channel
        defaultFramework:
          type: string
          description: >-
            A framework identifier which can be used fetch categories for
            create/update/search other objects
        frameworks:
          type: object
          properties: {}
          description: List of frameworks subscribed by this channel
        suggested_frameworks:
          type: array
          description: List of frameworks available in platform to subscribe
          items:
            type: object
            properties: {}
    frameworkResponseChannelGet200:
      type: object
      properties:
        result:
          type: object
          properties:
            channel:
              $ref: '#/components/schemas/frameworkChannelObj'
      description: Response of the channel get
    frameworkChannelGet200Response:
      description: Channel get response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseChannelGet200'
    frameworkChannelGet400Response:
      description: Channel get response for 400.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseChannelCreate400'
    frameworkFrameworkGet400Response:
      description: Framework get response for 400.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkCreate400'
    frameworkResponseFrameworkCreate400:
      type: object
      properties:
        responseCode:
          type: string
          description: Represents the error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the framework create on client error
    frameworkFrameworkCreate200Response:
      description: Framework create response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkCreate200'
    frameworkResponseFrameworkCreate200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: string
              description: Unique identifier of the framework created
            versionKey:
              type: string
              description: Represents the version key of the current framework object
      description: Response body of create framework
    frameworkFrameworkObj:
      type: object
      properties:
        identifier:
          type: string
          description: >-
            Represents the unique ID of the framework across sunbird
            installations
        name:
          type: string
          description: Represents the name of the framework
        code:
          type: string
          description: This is same as identifier
        description:
          type: string
          description: Description of the framework
        consumerId:
          type: string
          description: Represents the consumerId
        channel:
          type: string
          description: Channel by which the framework was created
        type:
          type: string
          description: Type of the framework
        createdOn:
          type: string
          description: Creation date of the framework
        versionKey:
          type: string
          description: Version key of the framework
        channels:
          type: array
          description: Creation date of the framework
          items:
            type: object
            properties: {}
        appId:
          type: string
          description: Represents the AppId of the framework
        lastUpdatedOn:
          type: string
          description: Represents the last Updation date of the framework
        status:
          type: string
          description: Represents the status of the framework
        categories:
          type: array
          description: Represents the categories in a framework
          items:
            type: object
            properties: {}
        translations:
          type: object
          properties: {}
          description: Represents the translation of framework name in different language.
    frameworkResponseFrameworkGet200:
      type: object
      properties:
        result:
          type: object
          properties:
            framework:
              $ref: '#/components/schemas/frameworkFrameworkObj'
      description: Response of the Framework get.
    frameworkFrameworkGet200Response:
      description: Framework get response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkGet200'
    frameworkFrameworkUpdate400Response:
      description: Framework Update response for 400.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkUpdate400'
    frameworkResponseFrameworkUpdate400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the framewrk update on client error.
    frameworkFrameworkUpdate200Response:
      description: Framework update response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkUpdate200'
    frameworkResponseFrameworkUpdate200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: string
              description: Identifier of the framework update.
            versionKey:
              type: string
              description: >-
                Version key of the current framework object. This is used for
                all update calls of the same object
      description: Response of the framework update.
    frameworkRequestFrameworkList:
      type: object
      properties:
        request:
          type: object
          properties:
            search:
              type: object
              properties: {}
      description: Request map of framework list api
    frameworkFrameworkListRequest:
      description: Framework List request.
      allOf:
        - $ref: '#/components/schemas/frameworkRequestFrameworkList'
    frameworkFrameworkList400Response:
      description: Framework List response for 400.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkList400'
    frameworkResponseFrameworkList400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the framewrk list on client error
    frameworkFrameworkList200Response:
      description: Framework list response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkList200'
    frameworkResponseFrameworkList200:
      type: object
      properties:
        result:
          type: object
          properties:
            frameworks:
              type: array
              description: List of frameworks
              items:
                type: object
                properties: {}
            count:
              type: number
              description: Number of frameworks searched
      description: Response of the framework list.
    frameworkCopyFrameworkRequest:
      description: Framework copy request
      allOf:
        - $ref: '#/components/schemas/frameworkRequestFrameworkCopy'
    frameworkRequestFrameworkCopy:
      type: object
      properties:
        request:
          type: object
          properties:
            framework:
              type: object
              properties:
                code:
                  type: string
                  description: Unique code of the framework
      description: Request map of framework copy api
    frameworkFrameworkCopy400Response:
      description: Framework Copy response for 400.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkCopy400'
    frameworkResponseFrameworkCopy400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the framework copy on client error
    frameworkFrameworkCopy200Response:
      description: Framework copy response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkCopy200'
    frameworkResponseFrameworkCopy200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: string
              description: Identifier of the Framework update.
      description: Response of the framework copy
    frameworkCreateCategoryInstanceRequest:
      description: Category Instance create Request
      allOf:
        - $ref: '#/components/schemas/frameworkRequestCategoryInstanceCreate'
    frameworkRequestCategoryInstanceCreate:
      type: object
      properties:
        request:
          type: object
          properties:
            category:
              type: object
              properties:
                code:
                  type: string
                  description: Unique code of the category
                name:
                  type: string
                  description: Name of the category
      description: Request map of CategoryInstance Create api.
    frameworkCategoryInstanceCreate400Response:
      description: CategoryInstance Create response for 400.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseCategoryInstanceCreate400'
    frameworkResponseCategoryInstanceCreate400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the CategoryInstance Create on client error.
    frameworkCategoryInstanceCreate200Response:
      description: CategoryInstance Create response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseCategoryInstanceCreate200'
    frameworkResponseCategoryInstanceCreate200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: string
              description: Identifier of the category instance
            versionKey:
              type: string
              description: versionKey of the category instance
      description: Response of the CategoryInstance Create.
    frameworkCategoryInstanceObj:
      type: object
      properties:
        identifier:
          type: string
          description: Unique id of the category instance across sunbird installations
        name:
          type: string
          description: Name of the category instance
        code:
          type: string
          description: This is same as identifier
        description:
          type: string
          description: Description of the category instance
        consumerId:
          type: string
          description: consumerId.
        channel:
          type: string
          description: Channel who created this category instance
        createdOn:
          type: string
          description: Creation date of the category instance
        versionKey:
          type: string
          description: Version key of the category instance
        appId:
          type: string
          description: AppId of the category instance
        lastUpdatedOn:
          type: string
          description: Last Updation date of the category instance
        status:
          type: string
          description: Status of the category instance
        frameworks:
          type: array
          description: Frameworks with which category instance is associated
          items:
            type: object
            properties: {}
        channels:
          type: array
          description: Channels with which category instance is associated
          items:
            type: object
            properties: {}
        terms:
          type: array
          description: Terms associated with category.
          items:
            type: object
            properties: {}
        translations:
          type: object
          properties: {}
          description: Represents the translation of category name in different language
    frameworkResponseCategoryInstanceGet200:
      type: object
      properties:
        result:
          type: object
          properties:
            category:
              $ref: '#/components/schemas/frameworkCategoryInstanceObj'
      description: Response of the CategoryInstance get
    frameworkCategoryInstanceGet200Response:
      description: CategoryInstance get response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseCategoryInstanceGet200'
    frameworkCategoryInstanceGet400Response:
      description: CategoryInstance Get response for 400.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseCategoryInstanceGet400'
    frameworkResponseCategoryInstanceGet400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the CategoryInstance Get on client error
    frameworkUpdateCategoryInstanceRequest:
      description: CategoryInstance update request
      allOf:
        - $ref: '#/components/schemas/frameworkRequestCategoryInstanceUpdate'
    frameworkRequestCategoryInstanceUpdate:
      type: object
      properties:
        request:
          type: object
          properties:
            framework:
              type: object
              properties:
                description:
                  type: string
                  description: Description of the Category Instance
                translations:
                  type: object
                  properties: {}
                  description: >-
                    Represents the translation of category name in different
                    language.
      description: Request map of CategoryInstance update API
    frameworkCategoryInstanceUpdate400Response:
      description: CategoryInstance Update response for 400.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseCategoryInstanceUpdate400'
    frameworkResponseCategoryInstanceUpdate400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the CategoryInstance Update on client error.
    frameworkCategoryInstanceUpdate200Response:
      description: CategoryInstance Update response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseCategoryInstanceUpdate200'
    frameworkResponseCategoryInstanceUpdate200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: string
              description: Identifier of the CategoryInstance.
            versionKey:
              type: string
              description: versionKey of the Category Instance
      description: Response of the CategoryInstance Update.
    frameworkRequestCategoryInstanceSearch:
      type: object
      properties:
        request:
          type: object
          properties:
            search:
              type: object
              properties: {}
      description: Request map of CategoryInstance search api.
    frameworkCategoryInstanceSearchRequest:
      description: CategoryInstance Search request.
      allOf:
        - $ref: '#/components/schemas/frameworkRequestCategoryInstanceSearch'
    frameworkCategoryInstanceSearch400Response:
      description: CategoryInstance Search response for 400.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseCategoryInstanceSearch400'
    frameworkResponseCategoryInstanceSearch400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the CategoryInstance Search on client error.
    frameworkCategoryInstanceSearch200Response:
      description: CategoryInstance Search response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseCategoryInstanceSearch200'
    frameworkResponseCategoryInstanceSearch200:
      type: object
      properties:
        result:
          type: object
          properties:
            categories:
              type: array
              description: List of CategoryInstance
              items:
                type: object
                properties: {}
            count:
              type: number
              description: Number of CategoryInstance searched
      description: Response of the CategoryInstance Search.
    frameworkCreateFrameworkTermRequest:
      description: Framework Term create Request
      allOf:
        - $ref: '#/components/schemas/frameworkRequestFrameworkTermCreate'
    frameworkRequestFrameworkTermCreate:
      type: object
      properties:
        request:
          type: object
          properties:
            term:
              type: object
              properties:
                code:
                  type: string
                  description: Unique code of the term
                name:
                  type: string
                  description: Name of the term.
      description: Request map of FrameworkTerm Create API
    frameworkFrameworkTermCreate400Response:
      description: Framework Term Create response for 400.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkTermCreate400'
    frameworkResponseFrameworkTermCreate400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the FrameworkTerm Create on client error.
    frameworkFrameworkTermCreate200Response:
      description: Framework Term Create response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkTermCreate200'
    frameworkResponseFrameworkTermCreate200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: array
              description: List of Identifiers of the Framework Term
              items:
                type: string
      description: Response of the FrameworkTerm Create.
    frameworkFrameworkTermObj:
      type: object
      properties:
        identifier:
          type: string
          description: Unique ID of the Framework Term
        name:
          type: string
          description: Represents the name of the Framework Term
        code:
          type: string
          description: Unique ID of the Framework Term
        description:
          type: string
          description: Description of the Framework Term
        consumerId:
          type: string
          description: Represents the consumerId
        channel:
          type: string
          description: Represents the channel that created the Framework Term
        createdOn:
          type: string
          description: Represents the creation date of the Framework Term
        versionKey:
          type: string
          description: Represents the version key of the Framework Term
        appId:
          type: string
          description: Represents the AppId of the Framework Term
        lastUpdatedOn:
          type: string
          description: Represents the last updated date of the Framework Term
        status:
          type: string
          description: Represents the status of the Framework Term
        categories:
          type: array
          description: >-
            Represents the category instances with which Framework Term is
            associated
          items:
            type: object
            properties: {}
        parents:
          type: array
          description: Parent terms
          items:
            type: object
            properties: {}
        associationswith:
          type: array
          description: Represents the Terms to which the current term is associated
          items:
            type: object
            properties: {}
        children:
          type: array
          description: Child terms of the current term
          items:
            type: object
            properties: {}
        associations:
          type: array
          description: Represents other terms associated with the current term
          items:
            type: object
            properties: {}
        translations:
          type: object
          properties: {}
          description: Represents the translation of term name in different language
    frameworkResponseFrameworkTermGet200:
      type: object
      properties:
        result:
          type: object
          properties:
            term:
              $ref: '#/components/schemas/frameworkFrameworkTermObj'
      description: Response body of the get Framework Term
    frameworkFrameworkTermGet200Response:
      description: FrameworkTerm get response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkTermGet200'
    frameworkFrameworkTermGet400Response:
      description: FrameworkTerm Get response for 400.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkTermGet400'
    frameworkResponseFrameworkTermGet400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the FrameworkTerm Get on client error.
    frameworkUpdateFrameworkTermRequest:
      description: Framework Term update request
      allOf:
        - $ref: '#/components/schemas/frameworkRequestFrameworkTermUpdate'
    frameworkRequestFrameworkTermUpdate:
      type: object
      properties:
        request:
          type: object
          properties:
            term:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the framework term
                description:
                  type: string
                  description: Description of the framework term
                categories:
                  type: array
                  description: Category instances with which framework term is associated
                  items:
                    type: object
                    properties: {}
                parents:
                  type: array
                  description: Parent terms
                  items:
                    type: object
                    properties: {}
                associationswith:
                  type: array
                  description: Terms to which the current term is associated
                  items:
                    type: object
                    properties: {}
                children:
                  type: array
                  description: Represents the child terms associated to current term
                  items:
                    type: object
                    properties: {}
                associations:
                  type: array
                  description: Represents the terms associated with the current term
                  items:
                    type: object
                    properties: {}
                translations:
                  type: object
                  properties: {}
                  description: >-
                    Represents the translation of term name in different
                    language
      description: Request map of framework term update api.
    frameworkFrameworkTermUpdate400Response:
      description: FrameworkTerm Update response for 400.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkTermUpdate400'
    frameworkResponseFrameworkTermUpdate400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the Framework Term Update (error)
    frameworkFrameworkTermUpdate200Response:
      description: CategoryInstance Update response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkTermUpdate200'
    frameworkResponseFrameworkTermUpdate200:
      type: object
      properties:
        result:
          type: object
          properties:
            node_id:
              type: string
              description: Represents the Identifier of the Framework Term
            versionKey:
              type: string
              description: Represents the versionKey of the Framework Term
      description: Response of the update Framework Term
    frameworkRequestFrameworkTermSearch:
      type: object
      properties:
        request:
          type: object
          properties:
            search:
              type: object
              properties: {}
      description: Request map of FrameworkTerm search api.
    frameworkFrameworkTermSearchRequest:
      description: FrameworkTerm Search request.
      allOf:
        - $ref: '#/components/schemas/frameworkRequestFrameworkTermSearch'
    frameworkFrameworkTermSearch400Response:
      description: FrameworkTerm Search response for 400.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkTermSearch400'
    frameworkResponseFrameworkTermSearch400:
      type: object
      properties:
        responseCode:
          type: string
          description: Error code of the api response.
        result:
          type: object
          properties: {}
          description: Empty response code.
      description: Response of the FrameworkTerm Search on client error.
    frameworkFrameworkTermSearch200Response:
      description: FrameworkTerm Search response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkTermSearch200'
    frameworkResponseFrameworkTermSearch200:
      type: object
      properties:
        result:
          type: object
          properties:
            terms:
              type: array
              description: Represents the list of Framework Terms
              items:
                type: object
                properties: {}
            count:
              type: number
              description: Represents the number of Framework Term searched
      description: Response of the FrameworkTerm Search.
    frameworkPublishFrameworkRequest:
      description: Request body of Copy Framework
      allOf:
        - $ref: '#/components/schemas/frameworkRequestFrameworkPublish'
    frameworkRequestFrameworkPublish:
      type: object
      properties:
        request:
          type: object
          properties: {}
      description: Request body of publish framework
    frameworkFrameworkPublish200Response:
      description: Framework copy response on success.
      allOf:
        - $ref: '#/components/schemas/frameworkframeworkApiResponse'
        - $ref: '#/components/schemas/frameworkResponseFrameworkPublish200'
    frameworkResponseFrameworkPublish200:
      type: object
      properties:
        result:
          type: object
          properties:
            publishStatus:
              type: string
              description: response status of the publish operation
              example: >-
                Publish Operation for Content Id 'test_300_framework' Started
                Successfully!
      description: Response body of copy framework
    frameworkframeworkApiResponse:
      required:
        - ts
        - id
        - params
        - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ts:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since EPOCH
          format: int64
        params:
          required:
            - msgid
            - resmsgid
            - status
            - err
            - errmsg
          type: object
          properties:
            msgid:
              type: string
              description: Represents the ID of the message sent
            resmsgid:
              type: string
              description: Represents the ID of the response message
            status:
              type: string
              enum:
                - successful
                - failed
            err:
              type: string
              description: Represents the response error code
            errmsg:
              type: string
              description: Represents the response error message
        responseCode:
          type: string
    dataexhaustapidataRequestBody:
      title: DataExhaust - Data Request
      required:
        - id
        - params
        - request
        - ts
        - ver
      type: object
      properties:
        id:
          type: string
          description: unique API ID=data_exhaust_dataset_service
          x-go-name: ID
        ver:
          type: string
          description: API version=1.0
          x-go-name: Ver
        ts:
          type: string
          description: 'request timestamp in format: YYYY-MM-DDThh:mm:ss+/-nn:nn'
          x-go-name: Ts
        params:
          $ref: '#/components/schemas/dataexhaustapiRequestParams'
        request:
          $ref: '#/components/schemas/dataexhaustapiDataExhaustRequest'
    dataexhaustapiDataExhaustJobStats:
      title: JobState
      type: object
      properties:
        dtJobSubmitted:
          type: integer
          description: DateTime when the job is submitted
        dtJobCompleted:
          type: integer
          description: DateTime when the job is complete
        executionTime:
          type: integer
          description: Total time taken for processing request
    dataexhaustapidataExhaustResponse:
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/dataexhaustapiResponseParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/dataexhaustapidataExhaustResult'
    dataexhaustapiRequestParams:
      title: Params
      type: object
      properties:
        msgid:
          type: string
          description: 'unique request message id, UUID, for handling API idempotency'
          x-go-name: MsgID
    dataexhaustapiDataExhaustRequest:
      title: Request
      required:
        - tag
        - dataset
        - datasetConfig
      type: object
      properties:
        tag:
          type: string
          description: >-
            Unique identifier to identify request submitted. e.g.:
            CourseId/BatchId
        requestedBy:
          type: string
          description: Requester id for submitted request
        dataset:
          type: string
          description: >-
            The job/dataset id the request is for. Available ids:
            progress-exhaust, userinfo-exhaust & response-exhaust
        datasetConfig:
          type: string
          description: Dataset config to fetch the data.
        encryptionKey:
          type: string
          description: Encryption key for the data exhaust file.
    dataexhaustapiJobListResponse:
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/dataexhaustapiResponseParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/dataexhaustapiJobListResult'
    dataexhaustapiJobInfoResponse:
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/dataexhaustapiResponseParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/dataexhaustapidataExhaustResult'
    dataexhaustapidataExhaustResult:
      type: object
      properties:
        requestId:
          type: string
        tag:
          type: string
        dataset:
          type: string
        requestedBy:
          type: string
        requestedChannel:
          type: string
        status:
          type: string
        lastUpdated:
          type: integer
        datasetConfig:
          type: object
        downloadUrls:
          type: array
          items:
            type: string
        expiresAt:
          type: integer
        jobStats:
          $ref: '#/components/schemas/dataexhaustapiDataExhaustJobStats'
        attempts:
          type: integer
    dataexhaustapiResponseParams:
      type: object
      properties:
        resmsgid:
          type: string
          description: unique response message id (UUID)
          x-go-name: ResMsgId
        msgid:
          type: string
          description: message id of the request
          x-go-name: MsgId
        status:
          type: string
          description: 'status of request e.g: success, failed etc'
          x-go-name: Status
        err:
          type: string
          description: error code if any
          x-go-name: ErrorCode
        errmsg:
          type: string
          description: default English error message
          x-go-name: ErrorMessage
      x-go-package: ecosystem-platform-api/api
    dataexhaustapiJobListResult:
      type: object
      properties:
        count:
          type: integer
        jobs:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/dataexhaustapidataExhaustResult'
    dataexhaustapiDatasetResponse:
      title: DatasetGetResponse
      allOf:
        - $ref: '#/components/schemas/dataexhaustapiApiResponse'
        - $ref: '#/components/schemas/dataexhaustapiDatasetResult'
    dataexhaustapiDatasetResult:
      type: object
      properties:
        files:
          type: array
          items:
            type: string
        periodWiseFiles:
          type: object
        expiresAt:
          type: integer
          description: Represents expire EPOCH (UTC) timestamp in milliseconds
    dataexhaustapiApiResponse:
      required:
        - ts
        - id
        - params
        - ver
      type: object
      properties:
        id:
          type: string
          description: unique API ID=data_exhaust_dataset_service
          x-go-name: ID
        ver:
          type: string
          description: API version=1.0
          x-go-name: Ver
        ts:
          type: string
          description: 'request timestamp in format: YYYY-MM-DDThh:mm:ss+/-nn:nn'
          x-go-name: Ts
        params:
          $ref: '#/components/schemas/dataexhaustapiResponseParams'
        responseCode:
          type: string
    opensaberapiAddRegistryRecordRequest:
      title: AddRegistryRecordRequest
      description: >-
        Contains schema representation for entity available such as
        **Teacher.json, Person.json** available by default in **public/_schema**
        directory under resources folder. Teacher or Person will represent the
        entity and other fields under Teacher or Person will represent the
        schema definition.A new entity can be added by adding
        **`<ENTITY>.json`** under schema directory by following the json schema
        definition.
      required:
        - id
        - request
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ets:
          type: string
        params:
          $ref: '#/components/schemas/opensaberapiParams'
        request:
          oneOf:
            - $ref: '#/components/schemas/opensaberapiTeacherRequest'
            - $ref: '#/components/schemas/opensaberapiPersonRequest'
    opensaberapiParams:
      title: Params
      type: object
      properties:
        did:
          type: string
        key:
          type: string
        msgid:
          type: string
      example:
        did: deviceId
        key: key
        msgid: msgid
    opensaberapiTeacherRequest:
      title: TeacherRequest
      required:
        - Teacher
      type: object
      properties:
        opensaberapiTeacher:
          $ref: '#/components/schemas/opensaberapiTeacher'
    opensaberapiPersonRequest:
      title: PersonRequest
      required:
        - Person
      type: object
      properties:
        opensaberapiPerson:
          $ref: '#/components/schemas/opensaberapiPerson'
    opensaberapiTeacher:
      title: Teacher
      required:
        - signatures
        - serialNum
        - teacherCode
        - nationalIdentifier
        - teacherName
        - gender
        - birthDate
        - socialCategory
        - highestAcademicQualification
        - highestTeacherQualification
        - yearOfJoiningService
        - teachingRole
        - inServiceTeacherTrainingFromBRC
        - inServiceTeacherTrainingFromCRC
        - inServiceTeacherTrainingFromDIET
        - inServiceTeacherTrainingFromOthers
        - nonTeachingAssignmentsForAcademicCalendar
        - basicProficiencyLevel
        - disabilityType
        - trainedForChildrenSpecialNeeds
        - trainedinUseOfComputer
      type: object
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/opensaberapiSignature'
          description: ''
        serialNum:
          type: integer
          format: int32
        teacherCode:
          type: string
        nationalIdentifier:
          type: string
        teacherName:
          type: string
        gender:
          type: string
        birthDate:
          type: string
        socialCategory:
          type: string
        highestAcademicQualification:
          type: string
        highestTeacherQualification:
          type: string
        yearOfJoiningService:
          type: string
        teachingRole:
          $ref: '#/components/schemas/opensaberapiTeachingRole'
        inServiceTeacherTrainingFromBRC:
          $ref: '#/components/schemas/opensaberapiInServiceTeacherTrainingFromBRC'
        inServiceTeacherTrainingFromCRC:
          $ref: '#/components/schemas/opensaberapiInServiceTeacherTrainingFromCRC'
        inServiceTeacherTrainingFromDIET:
          $ref: '#/components/schemas/opensaberapiInServiceTeacherTrainingFromDIET'
        inServiceTeacherTrainingFromOthers:
          $ref: '#/components/schemas/opensaberapiInServiceTeacherTrainingFromOthers'
        nonTeachingAssignmentsForAcademicCalendar:
          $ref: >-
            #/components/schemas/opensaberapiNonTeachingAssignmentsForAcademicCalendar
        basicProficiencyLevel:
          type: array
          items:
            $ref: '#/components/schemas/opensaberapiBasicProficiencyLevel'
          description: ''
        disabilityType:
          type: string
        trainedForChildrenSpecialNeeds:
          type: string
        trainedinUseOfComputer:
          type: string
      example:
        serialNum: 8
        teacherCode: 1223h4d
        nationalIdentifier: 1234567890123456
        teacherName: Marvin Pande
        gender: GenderTypeCode-MALE
        birthDate: 1990-12-06T00:00:00.000Z
        socialCategory: SocialCategoryTypeCode-GENERAL
        highestAcademicQualification: AcademicQualificationTypeCode-PHD
        highestTeacherQualification: TeacherQualificationTypeCode-MED
        yearOfJoiningService: 2014
        disabilityType: DisabilityCode-NA
        trainedForChildrenSpecialNeeds: YesNoCode-YES
        trainedinUseOfComputer: YesNoCode-YES
    opensaberapiPerson:
      title: Person
      required:
        - nationalIdentifier
        - name
        - gender
        - dob
      type: object
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/opensaberapiSignature'
          description: ''
        nationalIdentifier:
          type: string
        name:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - OTHER
        photo:
          type: string
        dob:
          type: string
        hasDrivingLicense:
          type: boolean
        vehicles:
          type: array
          items:
            $ref: '#/components/schemas/opensaberapiVehicle'
      example:
        nationalIdentifier: 1234567890123456
        name: John
        gender: MALE
        photo: image.png
        dob: '1990-12-01'
        hasDrivingLicense: true
    opensaberapiVehicle:
      title: Vehicle
      required:
        - registrationNumber
        - yearManufactured
        - model
        - manufacturer
      type: object
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/opensaberapiSignature'
          description: ''
        registrationNumber:
          type: string
        model:
          type: string
        manufacturer:
          type: string
          enum:
            - Hero
            - Honda
            - Bajaj
            - Suzuki
            - Kawasaki
            - Other
        yearManufactured:
          type: string
        kerbWeight:
          type: number
      example:
        registrationNumber: Kg-12333
        model: Honda BS-1V
        manufacturer: Hero
        yearManufactured: '2016'
        kerbWeight: 130.5
    opensaberapiSignature:
      title: Signature
      required:
        - '@type'
        - signatureFor
        - creator
        - created
        - nonce
        - signatureValue
      type: object
      properties:
        '@type':
          type: string
        signatureFor:
          type: string
        creator:
          type: string
        created:
          type: string
        nonce:
          type: string
        signatureValue:
          type: string
      example:
        '@type': 'sc:GraphSignature2012'
        signatureFor: 'http://localhost:8080/serialNum'
        creator: 'https://example.com/i/pat/keys/5'
        created: 2017-09-23T20:21:34.000Z
        nonce: 2bbgh3dgjg2302d-d2b3gi423d42
        signatureValue: eyiOiJKJ0eXA...OEjgFWFXk
    opensaberapiTeachingRole:
      title: TeachingRole
      required:
        - '@type'
        - teacherType
        - appointmentType
        - classesTaught
        - appointedForSubjects
        - mainSubjectsTaught
        - appointmentYear
      type: object
      properties:
        '@type':
          type: string
        teacherType:
          type: string
        appointmentType:
          type: string
        classesTaught:
          type: string
        appointedForSubjects:
          type: string
        mainSubjectsTaught:
          type: array
          items:
            type: string
          description: ''
        appointmentYear:
          type: string
      example:
        '@type': TeachingRole
        teacherType: TeacherTypeCode-HEAD
        appointmentType: TeacherAppointmentTypeCode-REGULAR
        classesTaught: ClassTypeCode-SECONDARYANDHIGHERSECONDARY
        appointedForSubjects: SubjectCode-ENGLISH
        mainSubjectsTaught:
          - SubjectCode-SOCIALSTUDIES
          - SubjectCode-ENGLISH
        appointmentYear: 2015
    opensaberapiInServiceTeacherTrainingFromBRC:
      title: InServiceTeacherTrainingFromBRC
      required:
        - daysOfInServiceTeacherTraining
      type: object
      properties:
        daysOfInServiceTeacherTraining:
          type: string
      example:
        daysOfInServiceTeacherTraining: '10'
    opensaberapiInServiceTeacherTrainingFromCRC:
      title: InServiceTeacherTrainingFromCRC
      required:
        - daysOfInServiceTeacherTraining
      type: object
      properties:
        daysOfInServiceTeacherTraining:
          type: string
      example:
        daysOfInServiceTeacherTraining: '2'
    opensaberapiInServiceTeacherTrainingFromDIET:
      title: InServiceTeacherTrainingFromDIET
      required:
        - daysOfInServiceTeacherTraining
      type: object
      properties:
        daysOfInServiceTeacherTraining:
          type: string
      example:
        daysOfInServiceTeacherTraining: '5.5'
    opensaberapiInServiceTeacherTrainingFromOthers:
      title: InServiceTeacherTrainingFromOthers
      required:
        - '@type'
        - daysOfInServiceTeacherTraining
      type: object
      properties:
        '@type':
          type: string
        daysOfInServiceTeacherTraining:
          type: string
      example:
        '@type': InServiceTeacherTrainingFromOthers
        daysOfInServiceTeacherTraining: '3.5'
    opensaberapiNonTeachingAssignmentsForAcademicCalendar:
      title: NonTeachingAssignmentsForAcademicCalendar
      required:
        - '@type'
        - daysOfNonTeachingAssignments
      type: object
      properties:
        '@type':
          type: string
        daysOfNonTeachingAssignments:
          type: integer
          format: int32
      example:
        '@type': NonTeachingAssignmentsForAcademicCalendar
        daysOfNonTeachingAssignments: 6
    opensaberapiBasicProficiencyLevel:
      title: BasicProficiencyLevel
      required:
        - '@type'
        - proficiencySubject
        - proficiencyAcademicQualification
      type: object
      properties:
        '@type':
          type: string
        proficiencySubject:
          type: string
        proficiencyAcademicQualification:
          type: string
      example:
        '@type': BasicProficiencyLevel
        proficiencySubject: SubjectCode-MATH
        proficiencyAcademicQualification: AcademicQualificationTypeCode-PHD
    opensaberapiAddRegistryRecord:
      title: AddRegistryRecord
      required:
        - id
        - ver
        - ets
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ets:
          type: string
        params:
          $ref: '#/components/schemas/opensaberapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/opensaberapiResult'
    opensaberapiResult:
      title: Result
      required:
        - Teacher
      type: object
      properties:
        opensaberapiTeacher:
          $ref: '#/components/schemas/opensaberapiAddTeacherResponseSchema'
    opensaberapiAddTeacherResponseSchema:
      title: AddTeacherResponseSchema
      required:
        - osid
      type: object
      properties:
        osid:
          type: string
    opensaberapiReadRegistryRecordRequest:
      title: ReadRegistryRecordRequest
      required:
        - id
        - request
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ets:
          type: string
        params:
          $ref: '#/components/schemas/opensaberapiParams'
        request:
          oneOf:
            - $ref: '#/components/schemas/opensaberapiTeacherReadRequest'
            - $ref: '#/components/schemas/opensaberapiPersonReadRequest'
    opensaberapiTeacherReadRequest:
      title: TeacherRequest
      required:
        - Teacher
      type: object
      properties:
        opensaberapiTeacher:
          $ref: '#/components/schemas/opensaberapiTeacherRead'
    opensaberapiTeacherRead:
      title: TeacherRead
      required:
        - osid
      type: object
      properties:
        osid:
          type: string
        includeSignatures:
          type: boolean
      example:
        osid: 1-610ffc0f-6d91-4bc6-a039-087d4a881164
        includeSignatures: true
    opensaberapiPersonReadRequest:
      title: PersonRequest
      required:
        - Person
      type: object
      properties:
        opensaberapiPerson:
          $ref: '#/components/schemas/opensaberapiPersonR'
    opensaberapiPersonR:
      title: Person
      required:
        - osid
      type: object
      properties:
        osid:
          type: string
      example:
        osid: 1-610ffc0f-6d91-4bc6-a039-087d4a881164
    opensaberapiReadRegistryRecord:
      title: ReadRegistryRecord
      required:
        - id
        - ver
        - ets
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ets:
          type: string
        params:
          $ref: '#/components/schemas/opensaberapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/opensaberapiResult'
    opensaberapiResult1:
      title: Result1
      required:
        - Teacher
      type: object
      properties:
        opensaberapiTeacher:
          $ref: '#/components/schemas/opensaberapiTeacher3'
      example:
        opensaberapiTeacher:
          disabilityType: DisabilityCode-NA
          highestTeacherQualification: TeacherQualificationTypeCode-MED
          gender: GenderTypeCode-MALE
          socialCategory: SocialCategoryTypeCode-GENERAL
          inServiceTeacherTrainingFromCRC:
            osid: 1-03414440-9467-411c-93cc-b028e2006eee
            osUpdatedAt: 2020-11-23T09:58:56.559Z
            osCreatedAt: 2020-11-23T09:58:56.559Z
            daysOfInServiceTeacherTraining: 2
          inServiceTeacherTrainingFromBRC:
            osid: 1-f7ceeb46-22d5-4687-9989-fc8c0a29f24f
            osUpdatedAt: 2020-11-23T09:58:56.559Z
            osCreatedAt: 2020-11-23T09:58:56.559Z
            daysOfInServiceTeacherTraining: 10
          osid: 1-d6844c76-b128-43cc-bbba-74edfd09c716
          yearOfJoiningService: 2014
          signatures:
            - signatureFor: 'http://localhost:8080/serialNum'
              osUpdatedAt: 2020-11-23T09:58:56.559Z
              creator: 'https://example.com/i/pat/keys/5'
              osCreatedAt: 2020-11-23T09:58:56.559Z
              created: 2017-09-23T20:21:34.000Z
              osid: 1-e019c0fd-2060-451c-9d61-f7d9b5034ac4
              nonce: 2bbgh3dgjg2302d-d2b3gi423d42
              signatureValue: eyiOiJKJ0eXA...OEjgFWFXk
          teachingRole:
            osid: 1-c8d28fca-1cdf-4958-9d0c-bc94e0927e8b
            teacherType: TeacherTypeCode-HEAD
            appointmentType: TeacherAppointmentTypeCode-REGULAR
            osUpdatedAt: 2020-11-23T09:58:56.559Z
            osCreatedAt: 2020-11-23T09:58:56.559Z
            mainSubjectsTaught:
              - SubjectCode-SOCIALSTUDIES
              - SubjectCode-ENGLISH
            appointmentYear: 2015
            classesTaught: ClassTypeCode-SECONDARYANDHIGHERSECONDARY
            appointedForSubjects: SubjectCode-ENGLISH
          osUpdatedAt: 2020-11-23T09:58:56.559Z
          serialNum: 4
          teacherName: Marvin Pande
          basicProficiencyLevel:
            - osUpdatedAt: 2020-11-23T09:58:56.559Z
              proficiencySubject: SubjectCode-MATH
              proficiencyAcademicQualification: AcademicQualificationTypeCode-PHD
              osCreatedAt: 2020-11-23T09:58:56.559Z
              osid: 1-03f2c43c-e275-4c33-b4d4-630c979dfa84
            - osUpdatedAt: 2020-11-23T09:58:56.559Z
              proficiencySubject: SubjectCode-ENGLISH
              proficiencyAcademicQualification: AcademicQualificationTypeCode-HIGHERSECONDARY
              osCreatedAt: 2020-11-23T09:58:56.559Z
              osid: 1-e3a5b8ff-755e-49d6-9033-e5c7f7eed24e
            - osUpdatedAt: 2020-11-23T09:58:56.559Z
              proficiencySubject: SubjectCode-SOCIALSTUDIES
              proficiencyAcademicQualification: AcademicQualificationTypeCode-SECONDARY
              osCreatedAt: 2020-11-23T09:58:56.559Z
              osid: 1-f5bf3d90-08b5-4bc1-b1b9-6eb14110566d
          nonTeachingAssignmentsForAcademicCalendar:
            osid: 1-888ce05c-3a1d-424f-9779-5c8c6651f05d
            osUpdatedAt: 2020-11-23T09:58:56.559Z
            osCreatedAt: 2020-11-23T09:58:56.559Z
            daysOfNonTeachingAssignments: 6
          trainedinUseOfComputer: YesNoCode-YES
          osCreatedAt: 2020-11-23T09:58:56.559Z
          highestAcademicQualification: AcademicQualificationTypeCode-PHD
          inServiceTeacherTrainingFromOthers:
            osid: 1-5eca91c4-1cdf-43cd-ad8e-f3da71e19679
            osUpdatedAt: 2020-11-23T09:58:56.559Z
            osCreatedAt: 2020-11-23T09:58:56.559Z
            daysOfInServiceTeacherTraining: 3.5
          inServiceTeacherTrainingFromDIET:
            osid: 1-0125f68e-2117-4796-87d8-53b93136370a
            osUpdatedAt: 2020-11-23T09:58:56.559Z
            osCreatedAt: 2020-11-23T09:58:56.559Z
            daysOfInServiceTeacherTraining: 5.5
          trainedForChildrenSpecialNeeds: YesNoCode-YES
    opensaberapiTeacher3:
      title: Teacher3
      required:
        - disabilityType
        - highestTeacherQualification
        - gender
        - socialCategory
        - inServiceTeacherTrainingFromCRC
        - inServiceTeacherTrainingFromBRC
        - osid
        - yearOfJoiningService
        - signatures
        - teachingRole
        - osUpdatedAt
        - serialNum
        - teacherName
        - basicProficiencyLevel
        - nonTeachingAssignmentsForAcademicCalendar
        - trainedinUseOfComputer
        - osCreatedAt
        - highestAcademicQualification
        - inServiceTeacherTrainingFromOthers
        - inServiceTeacherTrainingFromDIET
        - trainedForChildrenSpecialNeeds
      type: object
      properties:
        disabilityType:
          type: string
        highestTeacherQualification:
          type: string
        gender:
          type: string
        socialCategory:
          type: string
        inServiceTeacherTrainingFromCRC:
          $ref: '#/components/schemas/opensaberapiInServiceTeacherTrainingFromCRC1'
        inServiceTeacherTrainingFromBRC:
          $ref: '#/components/schemas/opensaberapiInServiceTeacherTrainingFromBRC1'
        osid:
          type: string
        yearOfJoiningService:
          type: string
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/opensaberapiSignature1'
          description: ''
        teachingRole:
          $ref: '#/components/schemas/opensaberapiTeachingRole1'
        osUpdatedAt:
          type: string
        serialNum:
          type: integer
          format: int32
        teacherName:
          type: string
        basicProficiencyLevel:
          type: array
          items:
            $ref: '#/components/schemas/opensaberapiBasicProficiencyLevel1'
          description: ''
        nonTeachingAssignmentsForAcademicCalendar:
          $ref: >-
            #/components/schemas/opensaberapiNonTeachingAssignmentsForAcademicCalendar1
        trainedinUseOfComputer:
          type: string
        osCreatedAt:
          type: string
        highestAcademicQualification:
          type: string
        inServiceTeacherTrainingFromOthers:
          $ref: '#/components/schemas/opensaberapiInServiceTeacherTrainingFromOthers1'
        inServiceTeacherTrainingFromDIET:
          $ref: '#/components/schemas/opensaberapiInServiceTeacherTrainingFromDIET1'
        trainedForChildrenSpecialNeeds:
          type: string
      example:
        disabilityType: DisabilityCode-NA
        highestTeacherQualification: TeacherQualificationTypeCode-MED
        gender: GenderTypeCode-MALE
        socialCategory: SocialCategoryTypeCode-GENERAL
        inServiceTeacherTrainingFromCRC:
          osid: 1-03414440-9467-411c-93cc-b028e2006eee
          osUpdatedAt: 2020-11-23T09:58:56.559Z
          osCreatedAt: 2020-11-23T09:58:56.559Z
          daysOfInServiceTeacherTraining: 2
        inServiceTeacherTrainingFromBRC:
          osid: 1-f7ceeb46-22d5-4687-9989-fc8c0a29f24f
          osUpdatedAt: 2020-11-23T09:58:56.559Z
          osCreatedAt: 2020-11-23T09:58:56.559Z
          daysOfInServiceTeacherTraining: 10
        osid: 1-d6844c76-b128-43cc-bbba-74edfd09c716
        yearOfJoiningService: 2014
        signatures:
          - signatureFor: 'http://localhost:8080/serialNum'
            osUpdatedAt: 2020-11-23T09:58:56.559Z
            creator: 'https://example.com/i/pat/keys/5'
            osCreatedAt: 2020-11-23T09:58:56.559Z
            created: 2017-09-23T20:21:34.000Z
            osid: 1-e019c0fd-2060-451c-9d61-f7d9b5034ac4
            nonce: 2bbgh3dgjg2302d-d2b3gi423d42
            signatureValue: eyiOiJKJ0eXA...OEjgFWFXk
        teachingRole:
          osid: 1-c8d28fca-1cdf-4958-9d0c-bc94e0927e8b
          teacherType: TeacherTypeCode-HEAD
          appointmentType: TeacherAppointmentTypeCode-REGULAR
          osUpdatedAt: 2020-11-23T09:58:56.559Z
          osCreatedAt: 2020-11-23T09:58:56.559Z
          mainSubjectsTaught:
            - SubjectCode-SOCIALSTUDIES
            - SubjectCode-ENGLISH
          appointmentYear: 2015
          classesTaught: ClassTypeCode-SECONDARYANDHIGHERSECONDARY
          appointedForSubjects: SubjectCode-ENGLISH
        osUpdatedAt: 2020-11-23T09:58:56.559Z
        serialNum: 4
        teacherName: Marvin Pande
        basicProficiencyLevel:
          - osUpdatedAt: 2020-11-23T09:58:56.559Z
            proficiencySubject: SubjectCode-MATH
            proficiencyAcademicQualification: AcademicQualificationTypeCode-PHD
            osCreatedAt: 2020-11-23T09:58:56.559Z
            osid: 1-03f2c43c-e275-4c33-b4d4-630c979dfa84
          - osUpdatedAt: 2020-11-23T09:58:56.559Z
            proficiencySubject: SubjectCode-ENGLISH
            proficiencyAcademicQualification: AcademicQualificationTypeCode-HIGHERSECONDARY
            osCreatedAt: 2020-11-23T09:58:56.559Z
            osid: 1-e3a5b8ff-755e-49d6-9033-e5c7f7eed24e
          - osUpdatedAt: 2020-11-23T09:58:56.559Z
            proficiencySubject: SubjectCode-SOCIALSTUDIES
            proficiencyAcademicQualification: AcademicQualificationTypeCode-SECONDARY
            osCreatedAt: 2020-11-23T09:58:56.559Z
            osid: 1-f5bf3d90-08b5-4bc1-b1b9-6eb14110566d
        nonTeachingAssignmentsForAcademicCalendar:
          osid: 1-888ce05c-3a1d-424f-9779-5c8c6651f05d
          osUpdatedAt: 2020-11-23T09:58:56.559Z
          osCreatedAt: 2020-11-23T09:58:56.559Z
          daysOfNonTeachingAssignments: 6
        trainedinUseOfComputer: YesNoCode-YES
        osCreatedAt: 2020-11-23T09:58:56.559Z
        highestAcademicQualification: AcademicQualificationTypeCode-PHD
        inServiceTeacherTrainingFromOthers:
          osid: 1-5eca91c4-1cdf-43cd-ad8e-f3da71e19679
          osUpdatedAt: 2020-11-23T09:58:56.559Z
          osCreatedAt: 2020-11-23T09:58:56.559Z
          daysOfInServiceTeacherTraining: 3.5
        inServiceTeacherTrainingFromDIET:
          osid: 1-0125f68e-2117-4796-87d8-53b93136370a
          osUpdatedAt: 2020-11-23T09:58:56.559Z
          osCreatedAt: 2020-11-23T09:58:56.559Z
          daysOfInServiceTeacherTraining: 5.5
        trainedForChildrenSpecialNeeds: YesNoCode-YES
    opensaberapiInServiceTeacherTrainingFromCRC1:
      title: InServiceTeacherTrainingFromCRC1
      required:
        - osid
        - osUpdatedAt
        - osCreatedAt
        - daysOfInServiceTeacherTraining
      type: object
      properties:
        osid:
          type: string
        osUpdatedAt:
          type: string
        osCreatedAt:
          type: string
        daysOfInServiceTeacherTraining:
          type: string
      example:
        osid: 1-03414440-9467-411c-93cc-b028e2006eee
        osUpdatedAt: 2020-11-23T09:58:56.559Z
        osCreatedAt: 2020-11-23T09:58:56.559Z
        daysOfInServiceTeacherTraining: 2
    opensaberapiInServiceTeacherTrainingFromBRC1:
      title: InServiceTeacherTrainingFromBRC1
      required:
        - osid
        - osUpdatedAt
        - osCreatedAt
        - daysOfInServiceTeacherTraining
      type: object
      properties:
        osid:
          type: string
        osUpdatedAt:
          type: string
        osCreatedAt:
          type: string
        daysOfInServiceTeacherTraining:
          type: string
      example:
        osid: 1-f7ceeb46-22d5-4687-9989-fc8c0a29f24f
        osUpdatedAt: 2020-11-23T09:58:56.559Z
        osCreatedAt: 2020-11-23T09:58:56.559Z
        daysOfInServiceTeacherTraining: 10
    opensaberapiSignature1:
      title: Signature1
      required:
        - signatureFor
        - osUpdatedAt
        - creator
        - osCreatedAt
        - created
        - osid
        - nonce
        - signatureValue
      type: object
      properties:
        signatureFor:
          type: string
        osUpdatedAt:
          type: string
        creator:
          type: string
        osCreatedAt:
          type: string
        created:
          type: string
        osid:
          type: string
        nonce:
          type: string
        signatureValue:
          type: string
      example:
        signatureFor: 'http://localhost:8080/serialNum'
        osUpdatedAt: 2020-11-23T09:58:56.559Z
        creator: 'https://example.com/i/pat/keys/5'
        osCreatedAt: 2020-11-23T09:58:56.559Z
        created: 2017-09-23T20:21:34.000Z
        osid: 1-e019c0fd-2060-451c-9d61-f7d9b5034ac4
        nonce: 2bbgh3dgjg2302d-d2b3gi423d42
        signatureValue: eyiOiJKJ0eXA...OEjgFWFXk
    opensaberapiTeachingRole1:
      title: TeachingRole1
      required:
        - osid
        - teacherType
        - appointmentType
        - osUpdatedAt
        - osCreatedAt
        - mainSubjectsTaught
        - appointmentYear
        - classesTaught
        - appointedForSubjects
      type: object
      properties:
        osid:
          type: string
        teacherType:
          type: string
        appointmentType:
          type: string
        osUpdatedAt:
          type: string
        osCreatedAt:
          type: string
        mainSubjectsTaught:
          type: array
          items:
            type: string
          description: ''
        appointmentYear:
          type: string
        classesTaught:
          type: string
        appointedForSubjects:
          type: string
      example:
        osid: 1-c8d28fca-1cdf-4958-9d0c-bc94e0927e8b
        teacherType: TeacherTypeCode-HEAD
        appointmentType: TeacherAppointmentTypeCode-REGULAR
        osUpdatedAt: 2020-11-23T09:58:56.559Z
        osCreatedAt: 2020-11-23T09:58:56.559Z
        mainSubjectsTaught:
          - SubjectCode-SOCIALSTUDIES
          - SubjectCode-ENGLISH
        appointmentYear: 2015
        classesTaught: ClassTypeCode-SECONDARYANDHIGHERSECONDARY
        appointedForSubjects: SubjectCode-ENGLISH
    opensaberapiBasicProficiencyLevel1:
      title: BasicProficiencyLevel1
      required:
        - osUpdatedAt
        - proficiencySubject
        - proficiencyAcademicQualification
        - osCreatedAt
        - osid
      type: object
      properties:
        osUpdatedAt:
          type: string
        proficiencySubject:
          type: string
        proficiencyAcademicQualification:
          type: string
        osCreatedAt:
          type: string
        osid:
          type: string
      example:
        osUpdatedAt: 2020-11-23T09:58:56.559Z
        proficiencySubject: SubjectCode-MATH
        proficiencyAcademicQualification: AcademicQualificationTypeCode-PHD
        osCreatedAt: 2020-11-23T09:58:56.559Z
        osid: 1-03f2c43c-e275-4c33-b4d4-630c979dfa84
    opensaberapiNonTeachingAssignmentsForAcademicCalendar1:
      title: NonTeachingAssignmentsForAcademicCalendar1
      required:
        - osid
        - osUpdatedAt
        - osCreatedAt
        - daysOfNonTeachingAssignments
      type: object
      properties:
        osid:
          type: string
        osUpdatedAt:
          type: string
        osCreatedAt:
          type: string
        daysOfNonTeachingAssignments:
          type: integer
          format: int32
      example:
        osid: 1-888ce05c-3a1d-424f-9779-5c8c6651f05d
        osUpdatedAt: 2020-11-23T09:58:56.559Z
        osCreatedAt: 2020-11-23T09:58:56.559Z
        daysOfNonTeachingAssignments: 6
    opensaberapiInServiceTeacherTrainingFromOthers1:
      title: InServiceTeacherTrainingFromOthers1
      required:
        - osid
        - osUpdatedAt
        - osCreatedAt
        - daysOfInServiceTeacherTraining
      type: object
      properties:
        osid:
          type: string
        osUpdatedAt:
          type: string
        osCreatedAt:
          type: string
        daysOfInServiceTeacherTraining:
          type: string
      example:
        osid: 1-5eca91c4-1cdf-43cd-ad8e-f3da71e19679
        osUpdatedAt: 2020-11-23T09:58:56.559Z
        osCreatedAt: 2020-11-23T09:58:56.559Z
        daysOfInServiceTeacherTraining: 3.5
    opensaberapiInServiceTeacherTrainingFromDIET1:
      title: InServiceTeacherTrainingFromDIET1
      required:
        - osid
        - osUpdatedAt
        - osCreatedAt
        - daysOfInServiceTeacherTraining
      type: object
      properties:
        osid:
          type: string
        osUpdatedAt:
          type: string
        osCreatedAt:
          type: string
        daysOfInServiceTeacherTraining:
          type: string
      example:
        osid: 1-0125f68e-2117-4796-87d8-53b93136370a
        osUpdatedAt: 2020-11-23T09:58:56.559Z
        osCreatedAt: 2020-11-23T09:58:56.559Z
        daysOfInServiceTeacherTraining: 5.5
    opensaberapiUpdateRegistryRecordRequest:
      title: UpdateRegistryRecordRequest
      required:
        - id
        - request
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ets:
          type: string
        params:
          $ref: '#/components/schemas/opensaberapiParams'
        request:
          $ref: '#/components/schemas/opensaberapiupdaterequest'
      example:
        id: open-saber.registry.update
        ver: 1
        ets: 11234
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapientity:
            osid: 1-d6844c76-b128-43cc-bbba-74edfd09c716
            propertyName: <Value>
    opensaberapiupdaterequest:
      title: updaterequest
      required:
        - entity
      type: object
      properties:
        opensaberapientity:
          $ref: '#/components/schemas/opensaberapientity'
    opensaberapientity:
      title: entity
      required:
        - osid
        - propertyName
      type: object
      properties:
        osid:
          type: string
      example:
        osid: 1-d6844c76-b128-43cc-bbba-74edfd09c716
        propertyName: <Value>
    opensaberapiUpdateRegistryRecord:
      title: UpdateRegistryRecord
      required:
        - id
        - responseCode
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ets:
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/opensaberapiParams'
        responseCode:
          type: string
      example:
        id: open-saber.registry.update
        ver: 1
        ets: 1606197586959
        params:
          resmsgid: ''
          msgid: cf9ccce8-d460-4259-8a9c-3ace6f6f187d
          err: ''
          status: SUCCESSFUL
          errmsg: ''
        responseCode: OK
    opensaberapiDeleteRegistryRecordRequest:
      title: DeleteRegistryRecordRequest
      required:
        - id
        - request
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ets:
          type: string
        params:
          $ref: '#/components/schemas/opensaberapiParams'
        request:
          $ref: '#/components/schemas/opensaberapiPersonR'
      example:
        id: open-saber.registry.delete
        ver: '1.0'
        ets: '11234'
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapiPerson:
            osid: 1-d6844c76-b128-43cc-bbba-74edfd09c716
    opensaberapiDeleteRegistryRecord:
      title: DeleteRegistryRecord
      required:
        - id
        - ver
        - ets
        - params
        - responseCode
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ets:
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/opensaberapiParams'
        responseCode:
          type: string
      example:
        id: open-saber.registry.delete
        ver: 1
        ets: 1606197786469
        params:
          resmsgid: ''
          msgid: 1bed3e39-4898-4511-9a16-0c7089287618
          err: ''
          status: SUCCESSFUL
          errmsg: ''
        responseCode: OK
    opensaberapiSearchRegistryRecordsRequest:
      title: SearchRegistryRecordsRequest
      required:
        - id
        - request
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ets:
          type: string
        params:
          $ref: '#/components/schemas/opensaberapiParams'
        request:
          $ref: '#/components/schemas/opensaberapiSearchRequest'
      example:
        id: open-saber.registry.search
        ver: 1
        ets: 11234
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapientityType:
            - Teacher
          opensaberapifilters:
            gender:
              eq: GenderTypeCode-MALE
    opensaberapiSearchRequest:
      title: SearchRequest
      required:
        - entityType
        - filters
      type: object
      properties:
        opensaberapientityType:
          type: array
          items:
            type: string
          description: ''
        opensaberapifilters:
          $ref: '#/components/schemas/opensaberapiFilters'
      example:
        opensaberapientityType:
          - Teacher
        opensaberapifilters:
          gender:
            eq: GenderTypeCode-MALE
    opensaberapiFilters:
      title: Filters
      type: object
      properties:
        fieldName:
          $ref: '#/components/schemas/opensaberapioperator'
      example:
        fieldName:
          opensaberapioperator: fieldValue
    opensaberapioperator:
      title: operator
      type: object
      properties:
        opensaberapioperator:
          type: string
    opensaberapiSearchRegistryRecords:
      title: SearchRegistryRecords
      required:
        - id
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ets:
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/opensaberapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/opensaberapiSearchRegistryResponseSchema'
      example:
        id: open-saber.registry.search
        ver: 1
        ets: 1606198791762
        params:
          resmsgid: ''
          msgid: adee64ca-fe1a-4477-9572-ce91c9d876af
          err: ''
          status: SUCCESSFUL
          errmsg: ''
        responseCode: OK
        result:
          opensaberapiTeacher:
            - disabilityType: DisabilityCode-NA
              highestTeacherQualification: TeacherQualificationTypeCode-MED
              gender: GenderTypeCode-MALE
              '@type': Teacher
              socialCategory: SocialCategoryTypeCode-GENERAL
              inServiceTeacherTrainingFromCRC:
                osid: 1-e3e67444-709e-4313-8f36-3f46e1ad0abf
              inServiceTeacherTrainingFromBRC:
                osid: 1-1503fc79-39c8-4bd5-ba46-610daffa6126
              osid: 1-610ffc0f-6d91-4bc6-a039-087d4a881164
              yearOfJoiningService: 2014
              signatures:
                osid: 1-b0191ff7-bf78-4215-8cc2-10d7d08a4885
              teachingRole:
                osid: 1-be05a8c1-69a0-4e9a-9954-6711e0ab1728
              osUpdatedAt: 2020-11-23T08:13:15.749Z
              serialNum: 6
              teacherName: Marvin Pande
              basicProficiencyLevel:
                osid: 1-e2ce3153-cd10-48df-a697-8068c06876f6
              nonTeachingAssignmentsForAcademicCalendar:
                osid: 1-aaf08a22-12e5-4b3b-ae92-cdf61e2d21bf
              trainedinUseOfComputer: YesNoCode-YES
              osCreatedAt: 2020-11-23T08:13:15.749Z
              highestAcademicQualification: AcademicQualificationTypeCode-PHD
              inServiceTeacherTrainingFromOthers:
                osid: 1-32a28ea4-8b61-403a-bc83-0daee216c9f5
              inServiceTeacherTrainingFromDIET:
                osid: 1-0a1c5283-74f4-47b7-b7c3-3a15e0e30d84
              trainedForChildrenSpecialNeeds: YesNoCode-YES
            - disabilityType: DisabilityCode-NA
              highestTeacherQualification: TeacherQualificationTypeCode-MED
              gender: GenderTypeCode-MALE
              '@type': Teacher
              socialCategory: SocialCategoryTypeCode-GENERAL
              inServiceTeacherTrainingFromCRC:
                osid: 1-60a64a04-c497-4009-87c2-2d90f166f57a
              inServiceTeacherTrainingFromBRC:
                osid: 1-f3e1bcaf-fdea-425a-a349-455540f0221b
              osid: 1-54a7b32a-c748-4c47-b3f1-63aa3598eb0a
              yearOfJoiningService: 2014
              signatures:
                osid: 1-a2d24e9d-468d-45b1-bc50-73e1dc6ded36
              teachingRole:
                osid: 1-967e61b7-65f6-404b-8140-fc88ea3352bf
              osUpdatedAt: 2020-11-24T06:14:36.429Z
              serialNum: 8
              teacherName: Marvin Pande
              basicProficiencyLevel:
                osid: 1-08920f83-58a9-4321-be6e-9cde5d343f26
              nonTeachingAssignmentsForAcademicCalendar:
                osid: 1-2716f567-d7ec-418a-a25c-da1d12c40794
              trainedinUseOfComputer: YesNoCode-YES
              osCreatedAt: 2020-11-24T06:14:36.429Z
              highestAcademicQualification: AcademicQualificationTypeCode-PHD
              inServiceTeacherTrainingFromOthers:
                osid: 1-917519aa-a859-4d33-bb9e-67282dd6b4c2
              inServiceTeacherTrainingFromDIET:
                osid: 1-ffb13cec-ce2f-475d-9d91-c19274448702
              trainedForChildrenSpecialNeeds: YesNoCode-YES
    opensaberapiSearchRegistryResponseSchema:
      title: SearchRegistryResponseSchema
      required:
        - entityType
      type: object
      properties:
        opensaberapientityType:
          type: array
          items:
            $ref: '#/components/schemas/opensaberapientityType'
          description: ''
    opensaberapientityType:
      title: entityTypeObject
      type: object
    opensaberapiSearchAuditRecordsRequest:
      title: SearchAuditRecordsRequest
      required:
        - id
        - request
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ets:
          type: string
        params:
          $ref: '#/components/schemas/opensaberapiParams'
        request:
          $ref: '#/components/schemas/opensaberapiSearchRequestFilter'
      example:
        id: open-saber.registry.audit
        ver: 1
        ets: 11234
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapientityType:
            opensaberapifilters:
              fieldName:
                opensaberapioperator: fieldValue
    opensaberapiSearchRequestFilter:
      title: SearchRequestFilter
      required:
        - entityType
      type: object
      properties:
        opensaberapientityType:
          $ref: '#/components/schemas/opensaberapifilters'
      example:
        opensaberapiTeacher: null
    opensaberapifilters:
      title: filter
      required:
        - filters
      type: object
      properties:
        opensaberapifilters:
          type: object
        limit:
          type: integer
        offset:
          type: integer
      example:
        opensaberapifilters:
          field:
            opensaberapioperator: value
        limit: '1,'
        offset: 0
    opensaberapiAuditResponseSchema:
      title: AuditResponseSchema
      required:
        - Teacher_Audit
      type: object
      properties:
        Teacher_Audit:
          type: array
          items:
            $ref: '#/components/schemas/opensaberapiTeacherAudit'
          description: ''
      example:
        Teacher_Audit:
          - recordId: 610ffc0f-6d91-4bc6-a039-087d4a881164
            auditId: cd65e340-899b-4ae9-9595-d14d0c9f6ba5
            auditInfo:
              - op: READ
                path: /Teacher
            osUpdatedAt: 2020-11-24T07:31:19.304Z
            osCreatedAt: 2020-11-24T07:31:19.304Z
            '@type': Teacher_Audit
            opensaberapientityType: Teacher
            action: READ
            osid: 1-5e37fc11-1c97-49b5-8449-8ead99f40302
            transactionId:
              - 970121863
            timestamp: 1606203079255
    opensaberapiTeacherAudit:
      title: TeacherAudit
      required:
        - recordId
        - auditId
        - auditInfo
        - osUpdatedAt
        - osCreatedAt
        - '@type'
        - entityType
        - action
        - osid
        - transactionId
        - timestamp
      type: object
      properties:
        recordId:
          type: string
        auditId:
          type: string
        auditInfo:
          type: array
          items:
            $ref: '#/components/schemas/opensaberapiAuditInfo'
          description: ''
        osUpdatedAt:
          type: string
        osCreatedAt:
          type: string
        '@type':
          type: string
        opensaberapientityType:
          type: string
        action:
          type: string
        osid:
          type: string
        transactionId:
          type: array
          items:
            type: integer
            format: int32
          description: ''
        timestamp:
          type: string
      example:
        recordId: 610ffc0f-6d91-4bc6-a039-087d4a881164
        auditId: cd65e340-899b-4ae9-9595-d14d0c9f6ba5
        auditInfo:
          - op: READ
            path: /Teacher
        osUpdatedAt: 2020-11-24T07:31:19.304Z
        osCreatedAt: 2020-11-24T07:31:19.304Z
        '@type': Teacher_Audit
        opensaberapientityType: Teacher
        action: READ
        osid: 1-5e37fc11-1c97-49b5-8449-8ead99f40302
        transactionId:
          - 970121863
        timestamp: 1606203079255
    opensaberapiAuditInfo:
      title: AuditInfo
      required:
        - op
        - path
      type: object
      properties:
        op:
          type: string
        path:
          type: string
      example:
        op: READ
        path: /Teacher
    coursebatchmanapiCourseBatchRead-200OK:
      title: CourseBatchRead-200OK
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/coursebatchmanapiParams1'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/coursebatchmanapiResult'
      example:
        id: api.course.batch.read
        ver: v1
        ts: '2020-11-23 04:48:35:260+0000'
        params:
          resmsgid: null
          msgid: 16824a40-389e-4008-aecc-f1d86be693c9
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response:
            identifier: 0131439667998310406
            createdFor: []
            endDate: 2020-12-30T00:00:00.000Z
            description: batch description1
            updatedDate: null
            cert_templates:
              Test_Template_4:
                identifier: Test_Template_4
                criteria:
                  enrollment:
                    status: 2
                name: Test_Template_4
                notifyTemplate:
                  emailTemplateType: defaultCertTemp
                  subject: Completion certificate
                  stateImgUrl: >-
                    https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
                  regards: Minister of Gujarat
                  regardsperson: Chairperson
                issuer:
                  name: Gujarat Council of Educational Research and Training
                  url: 'https://gcert.gujarat.gov.in/gcert/'
                url: >-
                  https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_4/artifact/cbse.svg
                signatoryList:
                  - image: >-
                      https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                    name: CEO Gujarat
                    id: CEO
                    designation: CEO
              Test_Template_prad:
                identifier: Test_Template_prad
                criteria:
                  enrollment:
                    status: 2
                name: Updated Asset
                notifyTemplate:
                  emailTemplateType: defaultCertTemp
                  subject: Completion certificate
                  stateImgUrl: >-
                    https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
                  regards: Minister of Gujarat
                  regardsperson: Chairperson
                issuer:
                  name: Gujarat Council of Educational Research and Training
                  url: 'https://gcert.gujarat.gov.in/gcert/'
                url: >-
                  https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_prad/artifact/file-0130860005482086401.svg
                signatoryList:
                  - image: >-
                      https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                    name: CEO Gujarat
                    id: CEO
                    designation: CEO
              template_01_dev_001:
                identifier: template_01_dev_001
                criteria:
                  enrollment:
                    status: 2
                name: Course merit certificate
                notifyTemplate:
                  emailTemplateType: defaultCertTemp
                  subject: Completion certificate
                  stateImgUrl: >-
                    https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
                  regards: Minister of Gujarat
                  regardsperson: Chairperson
                issuer:
                  name: Gujarat Council of Educational Research and Training
                  url: 'https://gcert.gujarat.gov.in/gcert/'
                url: ''
                signatoryList:
                  - image: >-
                      https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                    name: CEO Gujarat
                    id: CEO
                    designation: CEO
            batchId: 0131439667998310406
            tandc: null
            createdDate: '2020-11-04 10:54:31:731+0000'
            createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
            mentors: []
            name: test cert scalability
            id: 0131439667998310406
            enrollmentType: open
            enrollmentEndDate: null
            courseId: do_1131396442662912001425
            collectionId: do_1131396442662912001425
            startDate: 2020-11-04T00:00:00.000Z
            status: 1
    coursebatchmanapiCourseBatchRead-200InvalidBatchID:
      title: CourseBatchRead-200InvalidBatchID
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/coursebatchmanapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/coursebatchmanapiResult'
      example:
        id: api.course.batch.read
        ver: v1
        ts: '2020-11-23 15:10:45:215+0000'
        params:
          resmsgid: null
          msgid: aa240e09-4481-4cbd-a832-617a15e8e872
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: {}
    coursebatchmanapiParams:
      title: Params
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
          nullable: true
        status:
          type: string
        errmsg:
          type: string
          nullable: true
      example:
        resmsgid: null
        msgid: aa240e09-4481-4cbd-a832-617a15e8e872
        err: null
        status: success
        errmsg: null
    coursebatchmanapiResult:
      title: Result
      required:
        - response
      type: object
      properties:
        response:
          type: object
      example:
        response: {}
    coursebatchmanapiParams1:
      title: Params1
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
    coursebatchmanapiCourseBatchUpdateRequest:
      title: CourseBatchUpdateRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/coursebatchmanapiRequest'
      example:
        request:
          enrollmentType: open
          startDate: '2020-11-23'
          enrollmentEndDate: '2021-12-30'
          status: 1
          courseId: '{{course-id}}'
          id: '{{batch-id}}'
    coursebatchmanapiRequest:
      title: Request
      required:
        - startDate
        - status
        - courseId
        - id
      type: object
      properties:
        enrollmentType:
          type: string
          description: 'possible values are {invite-only and open}'
        startDate:
          type: string
          description: Batch start date
        enrollmentEndDate:
          type: string
          description: Batch enrollment end date
        status:
          type: integer
          format: int32
          description: 'Status of batch possible values are {0, 1 or 2}'
        courseId:
          type: string
          description: Course id for which the user wants to update the batch
        id:
          type: string
          description: Batch id which the user wants to update
        endDate:
          description: Batch end date can be updated if end date hasnt expired
          type: string
      example:
        enrollmentType: open
        startDate: '2020-11-23'
        enrollmentEndDate: '2021-12-30'
        status: 1
        courseId: '{{course-id}}'
        id: '{{batch-id}}'
    coursebatchmanapiParams2:
      title: Params2
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
          nullable: true
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
    coursebatchmanapiCourseBatchUpdate-200OK:
      title: CourseBatchUpdate-200OK
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/coursebatchmanapiParams'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.course.batch.update
        ver: v1
        ts: '2020-11-23 06:59:52:152+0000'
        params:
          resmsgid: null
          msgid: 8e27cbf5-e299-43b0-bca7-8347f7e5abcf
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result: {}
    coursebatchmanapiCourseBatchSearchRequest:
      title: CourseBatchSearchRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/coursebatchmanapiRequest1'
      example:
        request:
          filters:
            courseId: '{{course-id}}'
          limit: 2
    coursebatchmanapiRequest1:
      title: Request1
      required:
        - filters
      type: object
      properties:
        query:
          type: string
          description: 'any text, it will do free text search eg. creatorDetails&orgDetails'
        filters:
          $ref: '#/components/schemas/coursebatchmanapiFilters'
        limit:
          type: integer
          description: Number of batch user want in response
          format: int32
      example:
        filters:
          courseId: '{{course-id}}'
        limit: 2
    coursebatchmanapiFilters:
      title: Filters
      required:
        - courseId
      type: object
      description: here you can pass the attribute and values
      properties:
        courseId:
          type: string
      example:
        courseId: '{{course-id}}'
    coursebatchmanapiCourseBatchSearch-200OK:
      title: CourseBatchSearch-200OK
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/coursebatchmanapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/coursebatchmanapiResult1'
      example:
        id: api.course.batch.search
        ver: v1
        ts: '2020-11-23 15:31:47:895+0000'
        params:
          resmsgid: null
          msgid: 3b07f74d-59af-494c-8d41-c8b665fa75ea
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response:
            count: 15
            content:
              - identifier: 0131440087048683528
                createdFor: []
                endDate: '2020-11-30'
                description: batch description1
                updatedDate: null
                cert_templates:
                  Test_Template_prad:
                    identifier: Test_Template_prad
                    criteria:
                      enrollment:
                        status: 2
                    name: Updated Asset
                    notifyTemplate:
                      emailTemplateType: defaultCertTemp
                      subject: Completion certificate
                      stateImgUrl: >-
                        https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
                      regards: Minister of Gujarat
                      regardsperson: Chairperson
                    issuer:
                      name: Gujarat Council of Educational Research and Training
                      url: 'https://gcert.gujarat.gov.in/gcert/'
                    url: >-
                      https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_prad/artifact/file-0130860005482086401.svg
                    signatoryList:
                      - image: >-
                          https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                        name: CEO Gujarat
                        id: CEO
                        designation: CEO
                batchId: 0131440087048683528
                tandc: null
                createdDate: '2020-11-04 12:26:38:668+0000'
                createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
                mentors: []
                name: test cert scalability
                id: 0131440087048683528
                enrollmentType: open
                enrollmentEndDate: null
                courseId: do_1131396442662912001425
                collectionId: do_1131396442662912001425
                startDate: '2020-11-04'
                status: 1
              - identifier: 0131439524674273284
                createdFor: []
                endDate: '2020-12-30'
                description: batch description1
                updatedDate: null
                cert_templates:
                  Test_Template_prad:
                    identifier: Test_Template_prad
                    criteria:
                      enrollment:
                        status: 2
                    name: Updated Asset
                    notifyTemplate:
                      emailTemplateType: defaultCertTemp
                      subject: Completion certificate
                      stateImgUrl: >-
                        https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
                      regards: Minister of Gujarat
                      regardsperson: Chairperson
                    issuer:
                      name: Gujarat Council of Educational Research and Training
                      url: 'https://gcert.gujarat.gov.in/gcert/'
                    url: >-
                      https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_prad/artifact/file-0130860005482086401.svg
                    signatoryList:
                      - image: >-
                          https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                        name: CEO Gujarat
                        id: CEO
                        designation: CEO
                batchId: 0131439524674273284
                tandc: null
                createdDate: '2020-11-04 10:24:25:778+0000'
                createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
                mentors: []
                name: test cert scalability
                id: 0131439524674273284
                enrollmentType: open
                enrollmentEndDate: null
                courseId: do_1131396442662912001425
                collectionId: do_1131396442662912001425
                startDate: '2020-11-04'
                status: 1
    coursebatchmanapiResult1:
      title: Result1
      required:
        - response
      type: object
      properties:
        response:
          $ref: '#/components/schemas/coursebatchmanapiResponse'
      example:
        response:
          count: 15
          content:
            - identifier: 0131440087048683528
              createdFor: []
              endDate: '2020-11-30'
              description: batch description1
              updatedDate: null
              cert_templates:
                Test_Template_prad:
                  identifier: Test_Template_prad
                  criteria:
                    enrollment:
                      status: 2
                  name: Updated Asset
                  notifyTemplate:
                    emailTemplateType: defaultCertTemp
                    subject: Completion certificate
                    stateImgUrl: >-
                      https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
                    regards: Minister of Gujarat
                    regardsperson: Chairperson
                  issuer:
                    name: Gujarat Council of Educational Research and Training
                    url: 'https://gcert.gujarat.gov.in/gcert/'
                  url: >-
                    https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_prad/artifact/file-0130860005482086401.svg
                  signatoryList:
                    - image: >-
                        https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                      name: CEO Gujarat
                      id: CEO
                      designation: CEO
              batchId: 0131440087048683528
              tandc: null
              createdDate: '2020-11-04 12:26:38:668+0000'
              createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
              mentors: []
              name: test cert scalability
              id: 0131440087048683528
              enrollmentType: open
              enrollmentEndDate: null
              courseId: do_1131396442662912001425
              collectionId: do_1131396442662912001425
              startDate: '2020-11-04'
              status: 1
            - identifier: 0131439524674273284
              createdFor: []
              endDate: '2020-12-30'
              description: batch description1
              updatedDate: null
              cert_templates:
                Test_Template_prad:
                  identifier: Test_Template_prad
                  criteria:
                    enrollment:
                      status: 2
                  name: Updated Asset
                  notifyTemplate:
                    emailTemplateType: defaultCertTemp
                    subject: Completion certificate
                    stateImgUrl: >-
                      https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
                    regards: Minister of Gujarat
                    regardsperson: Chairperson
                  issuer:
                    name: Gujarat Council of Educational Research and Training
                    url: 'https://gcert.gujarat.gov.in/gcert/'
                  url: >-
                    https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_prad/artifact/file-0130860005482086401.svg
                  signatoryList:
                    - image: >-
                        https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                      name: CEO Gujarat
                      id: CEO
                      designation: CEO
              batchId: 0131439524674273284
              tandc: null
              createdDate: '2020-11-04 10:24:25:778+0000'
              createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
              mentors: []
              name: test cert scalability
              id: 0131439524674273284
              enrollmentType: open
              enrollmentEndDate: null
              courseId: do_1131396442662912001425
              collectionId: do_1131396442662912001425
              startDate: '2020-11-04'
              status: 1
    coursebatchmanapiResponse:
      title: Response
      required:
        - count
        - content
      type: object
      properties:
        count:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/coursebatchmanapiContent'
          description: ''
      example:
        count: 15
        content:
          - identifier: 0131440087048683528
            createdFor: []
            endDate: '2020-11-30'
            description: batch description1
            updatedDate: null
            cert_templates:
              Test_Template_prad:
                identifier: Test_Template_prad
                criteria:
                  enrollment:
                    status: 2
                name: Updated Asset
                notifyTemplate:
                  emailTemplateType: defaultCertTemp
                  subject: Completion certificate
                  stateImgUrl: >-
                    https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
                  regards: Minister of Gujarat
                  regardsperson: Chairperson
                issuer:
                  name: Gujarat Council of Educational Research and Training
                  url: 'https://gcert.gujarat.gov.in/gcert/'
                url: >-
                  https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_prad/artifact/file-0130860005482086401.svg
                signatoryList:
                  - image: >-
                      https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                    name: CEO Gujarat
                    id: CEO
                    designation: CEO
            batchId: 0131440087048683528
            tandc: null
            createdDate: '2020-11-04 12:26:38:668+0000'
            createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
            mentors: []
            name: test cert scalability
            id: 0131440087048683528
            enrollmentType: open
            enrollmentEndDate: null
            courseId: do_1131396442662912001425
            collectionId: do_1131396442662912001425
            startDate: '2020-11-04'
            status: 1
          - identifier: 0131439524674273284
            createdFor: []
            endDate: '2020-12-30'
            description: batch description1
            updatedDate: null
            cert_templates:
              Test_Template_prad:
                identifier: Test_Template_prad
                criteria:
                  enrollment:
                    status: 2
                name: Updated Asset
                notifyTemplate:
                  emailTemplateType: defaultCertTemp
                  subject: Completion certificate
                  stateImgUrl: >-
                    https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
                  regards: Minister of Gujarat
                  regardsperson: Chairperson
                issuer:
                  name: Gujarat Council of Educational Research and Training
                  url: 'https://gcert.gujarat.gov.in/gcert/'
                url: >-
                  https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_prad/artifact/file-0130860005482086401.svg
                signatoryList:
                  - image: >-
                      https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                    name: CEO Gujarat
                    id: CEO
                    designation: CEO
            batchId: 0131439524674273284
            tandc: null
            createdDate: '2020-11-04 10:24:25:778+0000'
            createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
            mentors: []
            name: test cert scalability
            id: 0131439524674273284
            enrollmentType: open
            enrollmentEndDate: null
            courseId: do_1131396442662912001425
            collectionId: do_1131396442662912001425
            startDate: '2020-11-04'
            status: 1
    coursebatchmanapiContent:
      title: Content
      required:
        - identifier
        - createdFor
        - endDate
        - description
        - updatedDate
        - cert_templates
        - batchId
        - tandc
        - createdDate
        - createdBy
        - mentors
        - name
        - id
        - enrollmentType
        - enrollmentEndDate
        - courseId
        - collectionId
        - startDate
        - status
      type: object
      properties:
        identifier:
          type: string
        createdFor:
          type: array
          items:
            type: string
          description: ''
        endDate:
          type: string
        description:
          type: string
        updatedDate:
          type: string
          nullable: true
        cert_templates:
          $ref: '#/components/schemas/coursebatchmanapiCertTemplates'
        batchId:
          type: string
        tandc:
          type: string
          nullable: true
        createdDate:
          type: string
        createdBy:
          type: string
        mentors:
          type: array
          items:
            type: string
          description: ''
        name:
          type: string
        id:
          type: string
        enrollmentType:
          type: string
        enrollmentEndDate:
          type: string
          nullable: true
        courseId:
          type: string
        collectionId:
          type: string
        startDate:
          type: string
        status:
          type: integer
          format: int32
      example:
        identifier: 0131440087048683528
        createdFor: []
        endDate: '2020-11-30'
        description: batch description1
        updatedDate: null
        cert_templates:
          Test_Template_prad:
            identifier: Test_Template_prad
            criteria:
              enrollment:
                status: 2
            name: Updated Asset
            notifyTemplate:
              emailTemplateType: defaultCertTemp
              subject: Completion certificate
              stateImgUrl: >-
                https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
              regards: Minister of Gujarat
              regardsperson: Chairperson
            issuer:
              name: Gujarat Council of Educational Research and Training
              url: 'https://gcert.gujarat.gov.in/gcert/'
            url: >-
              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_prad/artifact/file-0130860005482086401.svg
            signatoryList:
              - image: >-
                  https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                name: CEO Gujarat
                id: CEO
                designation: CEO
        batchId: 0131440087048683528
        tandc: null
        createdDate: '2020-11-04 12:26:38:668+0000'
        createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
        mentors: []
        name: test cert scalability
        id: 0131440087048683528
        enrollmentType: open
        enrollmentEndDate: null
        courseId: do_1131396442662912001425
        collectionId: do_1131396442662912001425
        startDate: '2020-11-04'
        status: 1
    coursebatchmanapiCertTemplates:
      title: CertTemplates
      required:
        - Test_Template_prad
      type: object
      properties:
        Test_Template_prad:
          $ref: '#/components/schemas/coursebatchmanapiTestTemplatePrad'
      example:
        Test_Template_prad:
          identifier: Test_Template_prad
          criteria:
            enrollment:
              status: 2
          name: Updated Asset
          notifyTemplate:
            emailTemplateType: defaultCertTemp
            subject: Completion certificate
            stateImgUrl: >-
              https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
            regards: Minister of Gujarat
            regardsperson: Chairperson
          issuer:
            name: Gujarat Council of Educational Research and Training
            url: 'https://gcert.gujarat.gov.in/gcert/'
          url: >-
            https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_prad/artifact/file-0130860005482086401.svg
          signatoryList:
            - image: >-
                https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
              name: CEO Gujarat
              id: CEO
              designation: CEO
    coursebatchmanapiTestTemplatePrad:
      title: TestTemplatePrad
      required:
        - identifier
        - criteria
        - name
        - notifyTemplate
        - issuer
        - url
        - signatoryList
      type: object
      properties:
        identifier:
          type: string
        criteria:
          $ref: '#/components/schemas/coursebatchmanapiCriteria'
        name:
          type: string
        notifyTemplate:
          $ref: '#/components/schemas/coursebatchmanapiNotifyTemplate'
        issuer:
          $ref: '#/components/schemas/coursebatchmanapiIssuer'
        url:
          type: string
        signatoryList:
          type: array
          items:
            $ref: '#/components/schemas/coursebatchmanapiSignatoryList'
          description: ''
      example:
        identifier: Test_Template_prad
        criteria:
          enrollment:
            status: 2
        name: Updated Asset
        notifyTemplate:
          emailTemplateType: defaultCertTemp
          subject: Completion certificate
          stateImgUrl: >-
            https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
          regards: Minister of Gujarat
          regardsperson: Chairperson
        issuer:
          name: Gujarat Council of Educational Research and Training
          url: 'https://gcert.gujarat.gov.in/gcert/'
        url: >-
          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/test_template_prad/artifact/file-0130860005482086401.svg
        signatoryList:
          - image: >-
              https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
            name: CEO Gujarat
            id: CEO
            designation: CEO
    coursebatchmanapiCriteria:
      title: Criteria
      required:
        - enrollment
      type: object
      properties:
        enrollment:
          $ref: '#/components/schemas/coursebatchmanapiEnrollment'
      example:
        enrollment:
          status: 2
    coursebatchmanapiEnrollment:
      title: Enrollment
      required:
        - status
      type: object
      properties:
        status:
          type: integer
          format: int32
      example:
        status: 2
    coursebatchmanapiNotifyTemplate:
      title: NotifyTemplate
      required:
        - emailTemplateType
        - subject
        - stateImgUrl
        - regards
        - regardsperson
      type: object
      properties:
        emailTemplateType:
          type: string
        subject:
          type: string
        stateImgUrl:
          type: string
        regards:
          type: string
        regardsperson:
          type: string
      example:
        emailTemplateType: defaultCertTemp
        subject: Completion certificate
        stateImgUrl: >-
          https://sunbirddev.blob.core.windows.net/orgemailtemplate/img/File-0128212938260643843.png
        regards: Minister of Gujarat
        regardsperson: Chairperson
    coursebatchmanapiIssuer:
      title: Issuer
      required:
        - name
        - url
      type: object
      properties:
        name:
          type: string
        url:
          type: string
      example:
        name: Gujarat Council of Educational Research and Training
        url: 'https://gcert.gujarat.gov.in/gcert/'
    coursebatchmanapiSignatoryList:
      title: SignatoryList
      required:
        - image
        - name
        - id
        - designation
      type: object
      properties:
        image:
          type: string
        name:
          type: string
        id:
          type: string
        designation:
          type: string
      example:
        image: >-
          https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
        name: CEO Gujarat
        id: CEO
        designation: CEO
    coursebatchmanapiCourseBatchCreateRequest:
      title: CourseBatchCreateRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/coursebatchmanapiCourseBatchCreate-Request'
      example:
        request:
          courseId: '{{course-id}}'
          name: test cert scalability
          description: batch description1
          enrollmentType: open
          startDate: '2020-11-23'
          endDate: '2021-12-30'
    coursebatchmanapiCourseBatchCreate-Request:
      title: CourseBatchCreate-Request
      required:
        - courseId
        - name
        - description
        - enrollmentType
        - startDate
        - endDate
      type: object
      properties:
        courseId:
          type: string
          description: Content id for which user want to create a course
        name:
          type: string
          description: Name of the course
        description:
          type: string
          description: About courses
        enrollmentType:
          type: string
          description: 'Possible values are {invite-only and open}'
        startDate:
          type: string
          description: Start data of the batch valid format is yyyy-mm-dd
        endDate:
          type: string
          description: End data of batch valid format is yyyy-mm-dd
        createdFor:
          type: array
          description: >-
            This will hold list of organisations id. This is mandatory in case
            of invite-only badge
          items:
            type: string
        mentors:
          type: array
          description: List of user id who will take care of course
          items:
            type: string
      example:
        courseId: '{{course-id}}'
        name: test cert scalability
        description: batch description1
        enrollmentType: open
        startDate: '2020-11-23'
        endDate: '2021-12-30'
    coursebatchmanapiCourseBatchCreate-400BadRequest-InvalidCourseId:
      title: CourseBatchCreate-400BadRequest-InvalidCourseId
      description: CourseBatchCreate-400BadRequest-InvalidCourseId
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/coursebatchmanapiParams1'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.course.batch.create
        ver: v1
        ts: '2020-11-23 06:40:48:878+0000'
        params:
          resmsgid: null
          msgid: e85a4592-7458-4506-a3e3-0dc00d923616
          err: INVALID_COURSE_ID
          status: INVALID_COURSE_ID
          errmsg: Course doesnot exist. Please provide a valid course identifier
        responseCode: CLIENT_ERROR
        result: {}
    coursebatchmanapiCourseBatchCreate-500InternalServerError:
      title: CourseBatchCreate-500InternalServerError
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/coursebatchmanapiParams2'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.course.batch.create
        ver: v1
        ts: '2020-11-23 15:15:18:331+0000'
        params:
          resmsgid: null
          msgid: null
          err: INTERNAL_ERROR
          status: SERVER_ERROR
          errmsg: 'Process failed,please try again later.'
        responseCode: SERVER_ERROR
        result: {}
    coursebatchmanapiCourseBatchCreate-200OK:
      title: CourseBatchCreate-200OK
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/coursebatchmanapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/coursebatchmanapiCourseBatchCreate-Result'
      example:
        id: api.course.batch.create
        ver: v1
        ts: '2020-11-23 06:42:39:001+0000'
        params:
          resmsgid: null
          msgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
          batchId: 01315728917531852810
    coursebatchmanapiCourseBatchCreate-Result:
      title: Result2
      required:
        - response
        - batchId
      type: object
      properties:
        response:
          type: string
        batchId:
          type: string
      example:
        response: SUCCESS
        batchId: 01315728917531852810
    certificateregistryapiReadCertificateRes404:
      title: ReadCertificateRes(404)
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          type: string
          nullable: true
        responseCode:
          type: string
          default: RESOURCE_NOT_FOUND
        result:
          type: object
          properties:
            message:
              type: string
              example:
                message: Certificate not found
      example:
        id: api.certs.registry.read
        ver: v1
        ts: 1601006936286
        params: null
        responseCode: RESOURCE_NOT_FOUND
        result:
          message: Certificate not found
    certificateregistryapiCertificateDownloadRequest:
      title: Certificate Download request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/certificateregistryapiRequest'
    certificateregistryapiCertificateSearchRequest:
      title: Certificate Search request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/certificateregistryapisearchRequest'
    certificateregistryapisearchRequest:
      required:
        - query
      type: object
      properties:
        query:
          type: object
          properties:
            match_phrase:
              type: object
              properties:
                recipient.id:
                  type: string
                related.type:
                  type: string
                recipient.type:
                  type: string
                id:
                  type: string
          description: The relative URL of the generated pdf certificate
    certificateregistryapiRequest:
      required:
        - pdfUrl
      type: object
      properties:
        pdfUrl:
          type: string
          description: The relative URL of the generated pdf certificate
    certificateregistryapiCertificateDownloadResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            signedUrl:
              type: string
              description: The complete URL of the certificate pdf file
    certificateregistryapiCertificateDownloadV2Response:
      type: object
      properties:
        result:
          type: object
          properties:
            printUri:
              type: string
              description: Materialised svg String
    certificateregistryapiCertificateValidateRequest:
      title: Certificate Validate request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/certificateregistryapivalidateRequest'
    certificateregistryapiCertificateVerifyRequest:
      title: Certificate Verify request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/certificateregistryapiverifyRequest'
    certificateregistryapiverifyRequest:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The certificate's URL (jsonUrl) to be used as the ID
        data:
          type: object
          properties: {}
          description: The raw data of the certificate
      description: >-
        Contains ither the data or ID of the certificate. This is required to
        verify the certificate
    certificateregistryapivalidateRequest:
      required:
        - accessCode
        - certId
      type: object
      properties:
        certId:
          type: string
          description: The certificate ID
        accessCode:
          type: string
          description: The certificate access code
    certificateregistryapiCertificateAddRequest:
      title: Certificate Add request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/certificateregistryapiaddRequest'
    certificateregistryapiCertificateReadResponse:
      type: object
      properties:
        id:
          type: string
          default: api.certs.registry.read
        ver:
          type: string
          default: v1
        responseCode:
          type: string
          default: OK
        result:
          type: object
          properties:
            response:
              type: object
              properties:
                id:
                  type: string
                  description: unique id generated while creating certificate
                recipient:
                  $ref: '#/components/schemas/certificateregistryapiRecipient'
                related:
                  $ref: '#/components/schemas/certificateregistryapiRelated'
                pdfUrl:
                  type: string
                jsonUrl:
                  type: string
                accessCode:
                  type: string
                createdAt:
                  type: string
                  description: timestamp
    certificateregistryapiRelated:
      title: Related
      required:
        - courseId
        - type
        - batchId
      type: object
      properties:
        courseId:
          type: string
        type:
          type: string
        batchId:
          type: string
      example:
        courseId: string
        type: string
        batchId: string
    certificateregistryapiRecipient:
      title: Recipient
      required:
        - name
        - id
        - type
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        type:
          type: string
      example:
        name: string
        id: string
        type: string
    certificateregistryapiCertificateSearchResponse:
      title: Certificate Add request
      type: object
      properties:
        result:
          type: object
          properties:
            response:
              type: object
              properties:
                hits:
                  type: array
                  items:
                    $ref: '#/components/schemas/certificateregistryapiaddRequest'
    certificateregistryapiaddRequest:
      required:
        - accessCode
        - id
        - pdfUrl
        - jsonData
      type: object
      properties:
        recipientId:
          type: string
          description: >-
            Specify either the email address, phone number, user ID, or User
            External ID, that uniquely identifies the recipient
        recipientName:
          type: string
          description: The recipient's name
        id:
          type: string
          description: >-
            The certificate ID. This is an auto-generated identifier when the
            certificate is generated
        oldId:
          type: string
          description: 'If the certificate should be reissued , provide old certificate id.'
        accessCode:
          type: string
          description: >-
            The certificate access code. This is returned in response when the
            certificate is generated
        recipientType:
          type: string
          description: >-
            The type of certificate recipient. This can only either be
            individual(for recipient) or entity(for organisation)
          enum:
            - individual
            - entity
        pdfUrl:
          type: string
          description: The relative URL of the generated pdf file
        jsonUrl:
          type: string
          description: The relative json URL of the generated pdf file
        revoked:
          type: boolean
          description: Check to understand if the user certificate has been revoked
        reason:
          type: string
          description: The reason why the user certificate has been revoked
        jsonData:
          type: object
          properties: {}
          description: The raw certificate json data used to generate the certificate
        related:
          type: object
          required:
            - type
          properties:
            type:
              type: string
            courseId:
              type: string
            batchId:
              type: string
          description: >-
            The raw property bag to store identifiable information about
            certificates. This is used for reporting and search functions.
    certificateregistryapiaddV2Request:
      required:
        - accessCode
        - id
        - jsonUrl
        - jsonData
      type: object
      properties:
        recipientId:
          type: string
          description: >-
            Specify either the email address, phone number, user ID, or User
            External ID, that uniquely identifies the recipient
        recipientName:
          type: string
          description: The recipient's name
        id:
          type: string
          description: >-
            The certificate ID. This is an auto-generated identifier when the
            certificate is generated
        accessCode:
          type: string
          description: >-
            The certificate access code. This is returned in response when the
            certificate is generated
        oldId:
          type: string
          description: 'If the certificate should be reissued , provide old certificate id.'
        recipientType:
          type: string
          description: >-
            The type of certificate recipient. This can only either be
            individual(for recipient) or entity(for organisation)
          enum:
            - individual
            - entity
        pdfUrl:
          type: string
          description: The relative URL of the generated pdf file
        jsonUrl:
          type: string
          description: The relative json URL of the generated pdf file
        revoked:
          type: boolean
          description: Check to understand if the user certificate has been revoked
        reason:
          type: string
          description: The reason why the user certificate has been revoked
        jsonData:
          type: object
          properties: {}
          description: The raw certificate json data used to generate the certificate
        related:
          type: object
          required:
            - type
          properties:
            type:
              type: string
            courseId:
              type: string
            batchId:
              type: string
          description: >-
            The raw property bag to store identifiable information about
            certificates. This is used for reporting and search functions.
    certificateregistryapiCertificateValidateResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            pdf:
              type: string
              description: The url of the pdf certificate
            json:
              type: object
              properties: {}
              description: The raw json data to generate the certificate
            related:
              type: object
              properties: {}
              description: The name of the certificate to be issued
          description: The response details
      description: Certificate validate Response
    certificateregistryapiCertificateVerifyResponse:
      type: object
      properties:
        response:
          type: object
          properties:
            pdf:
              type: string
              description: The url of the pdf certificate
            json:
              type: object
              properties: {}
              description: The raw json data to generate the certificate
            related:
              type: object
              properties: {}
              description: The name of the certificate to be validated
          description: The response details
      description: Certificate verify response
    certificateregistryapiCertificateAddResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            id:
              type: string
              description: The certificate ID is returned in response
          description: The response details
      description: Certificate add response
    certificateregistryapiResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: The API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timestamp
        params:
          $ref: '#/components/schemas/certificateregistryapiResponseParams'
        responseCode:
          type: string
          description: 'API response code '
    certificateregistryapiResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Represents the response Message ID
        msgid:
          type: string
          description: Represents the error Message ID
        err:
          type: string
          description: Represents the Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    certificateregistryapiBadRequestResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            message:
              type: string
              description: >-
                The message string. If the message ID is provided, the string is
                picked up from the existing .
    certificateregistryapiEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties:
            message:
              type: string
          description: Empty Result
    certificateregistryapiIssueCertificateErrorResponse:
      title: Create Content Error Response
      allOf:
        - $ref: '#/components/schemas/certificateregistryapiEmptyResult'
        - $ref: '#/components/schemas/certificateregistryapiResponseHeader'
    certificateregistryapi500ServerError:
      title: 500ServerError
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          type: string
        responseCode:
          type: string
        result:
          type: object
          properties:
            message:
              type: string
    certificateregistryapiApiResponse:
      required:
        - ets
        - id
        - params
        - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since EPOCH
          format: int64
        params:
          required:
            - msgid
            - resmsgid
            - status
          type: object
          properties:
            msgid:
              type: string
              description: Represents the ID of the message sent
            resmsgid:
              type: string
              description: Represents the ID of the response message
            status:
              type: string
              enum:
                - success
                - error
        responseCode:
          type: string
    certificateregistryapiAddCertificateV2Request:
      title: AddCertificateV2Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/certificateregistryapiaddV2Request'
      example:
        request:
          id: 8a6d6cc2-16ee-4e7a-a4d1-de74d75234243
          accessCode: H9W9S4
          recipientType: individual
          recipientId: 8a6d6cc2-16ee-4e7a-a4d1-d74d752344343
          recipientName: UserName
          oldId: 8a6d6cc2-16ee-4e7a-a4d1-d74d7523424
          related:
            courseId: course-ids
            type: course-completion
            batchId: batchId
            templateId: templateId
            completionUrl: completionUrl
          jsonData:
            id: >-
              https://staging.open-sunbird.org/certs/0125450863553740809/cc9eccab-56a1-47ba-ab10-27565f864243
            type:
              - Assertion
              - Extension
              - 'extensions:CertificateExtension'
            issuedOn: 2019-08-21T00:00:00.000Z
            recipient:
              type:
                - id
              hashed: false
              name: userName
              '@context': 'https://staging.open-sunbird.org/certs/v1/context.json'
            badge:
              id: >-
                https://staging.open-sunbird.org/certs/0125450863553740809/Badge.json
              type:
                - BadgeClass
              name: Course Name
              criteria:
                type:
                  - Criteria
                narrative: course completion certificate
              issuer:
                context: 'https://staging.open-sunbird.org/certs/v1/context.json'
                id: 'https://staging.open-sunbird.org/certs/Issuer.json'
                type:
                  - Issuer
                name: issuer name
                url: 'https://gcert.gujarat.gov.in/gcert/'
                publicKey: []
              '@context': 'https://staging.open-sunbird.org/certs/v1/context.json'
            evidence:
              id: 'https://staging.open-sunbird.org/certs/Evidence.json'
              type:
                - Evidence
                - Extension
                - 'extensions:TrainingEvidence'
              name: CourseName
              '@context': 'https://staging.open-sunbird.org/certs/v1/context.json'
            verification:
              type:
                - hosted
            revoked: false
            signatory:
              - identity: CEO
                type:
                  - Extension
                  - 'extensions:SignatoryExtension'
                hashed: false
                designation: CEO
                image: >-
                  https://cdn.pixabay.com/photo/2014/11/09/08/06/signature-523237__340.jpg
                '@context': >-
                  https://staging.open-sunbird.org/certs/v1/extensions/SignatoryExtension/context.json
            printUri: ''
            '@context': 'https://staging.open-sunbird.org/certs/v1/context.json'
          jsonUrl: >-
            https://staging.open-sunbird.org/certs/0125450863553740809/cc9eccab-56a1-47ba-ab10-27565f864243.json
    userapiUser-Create-Request:
      title: User-Create-Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userapiUserReqV1'
      example:
        request:
          firstName: selfdeclaredev5
          userName: selfdeclaredev5
          email: selfdeclaredev5@yopmail.com
          lastName: selfdeclaredev5
          emailVerified: true
          password: Pass@1
    userapiUserReqV1:
      title: User Request Object
      required:
        - firstName
        - userName
        - email
        - phone
        - password
      type: object
      properties:
        email:
          type: string
          description: The email of the user
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        avatar:
          type: string
        language:
          type: array
          items:
            type: string
            description: 'The langauages known to the user '
        gender:
          type: string
        phone:
          type: string
        phoneVerified:
          type: boolean
          description: >-
            This key is required with value as true, if you pass both the values
            for phone and provider - But incases of create user either email or
            phone is required
        subject:
          type: array
          items:
            type: string
        channel:
          type: string
          description: >-
            'Represents the channel value received while creating a rootOrg. -
            if a channel value is provided, then the user is associated with
            that particular root organization - if the channel is not provided
            in the request body, the system reads the value of the custodian
            channel from the system setting, else reads it from the environment
            variable and uses it to associate the user with that root
            organization. - if the channel value is not provided in either the
            request or the envronment variables, then user creation fails.'
        externalIds:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/userapiExternalId'
        profileSummary:
          type: string
        userName:
          type: string
        dob:
          type: string
          format: date
          example: '2001-02-27'
        grade:
          type: string
        location:
          type: string
          description: Represents the current location of the  user
        education:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/userapiEducation'
        profileVisibility:
          type: object
          description: >-
            Represents the user's profile visibility. It is a map that uses any
            user attribute as the key. The value of the field can be either
            public or private
        address:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/userapiAddress'
          description: The user's address. It contains a list of address objects
        jobProfile:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/userapiJobProfile'
        webPages:
          type: object
          properties:
            type:
              type: string
            url:
              type: string
        userType:
          type: string
          description: Represent the type of User
          example: 'Administrator, Guardian, Student, Teacher'
        userSubType:
          type: string
          description: >-
            Represent the sub type User belongs to provided by state against
            each user type
      example:
        firstName: selfdeclaredev5
        userName: selfdeclaredev5
        email: selfdeclaredev5@yopmail.com
        lastName: selfdeclaredev5
        emailVerified: true
    userapiEducation:
      title: Education
      type: object
      properties:
        name:
          description: ' The name of educational institution'
          type: string
        degree:
          description: The name of user's highest qualification
          type: string
        yearOfPassing:
          description: ' The year in which the user obtained the qualification in format YYYY'
          type: integer
          format: int32
        courseName:
          description: Represents the name of the course for which the user is enrolled.
          type: string
        boardOrUniversity:
          description: ' The name of board or university'
          type: string
        address:
          $ref: '#/components/schemas/userapiAddress'
        percentage:
          description: ''
          type: number
          format: double
        grade:
          description: The name of the user's grade
          type: string
      required:
        - degree
        - name
        - boardOrUniversity
    userapiAddress:
      title: Address
      type: object
      properties:
        addType:
          description: >-
            Represents the address type and its value must be either
            permanent,current,office ,home
          type: string
        addressLine1:
          description: ''
          type: string
        addressLine2:
          description: ''
          type: string
        city:
          description: ''
          type: string
        state:
          description: ''
          type: string
        zipCode:
          description: ''
          type: string
      required:
        - addType
        - addressLine1
        - city
        - state
    userapiJobProfile:
      title: JobProfile
      type: object
      properties:
        jobName:
          description: ' The job of the user'
          type: string
        role:
          description: ' The hierarchial position of a user within an organization'
          type: string
        joiningDate:
          description: ' The date on which the user joined the organization in format YYYY-MM-DD'
          type: string
        endDate:
          description: ' The date on which the user was relieved from the job in format YYYY-MM-DD'
          type: string
        orgId:
          description: The identifier for the organization.
          type: string
        orgName:
          description: The name of the organization.
          type: string
        subject:
          description: ''
          type: array
          items:
            type: string
        address:
          $ref: '#/components/schemas/userapiAddress'
      required:
        - jobName
        - role
        - joiningDate
        - orgName
    userapiUser_Create_V1_With_Success:
      title: User_Create_V1_With_Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiResult'
      example:
        id: api.user.create
        ver: v1
        ts: '2020-11-23 10:03:39:935+0000'
        params:
          resmsgid: null
          msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          userId: f5863f60-2b21-47dc-aa9c-2f9822bae9bd
          response: SUCCESS
          errors: []
    userapiParams:
      title: Params
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
          nullable: true
        status:
          type: string
        errmsg:
          type: string
          nullable: true
      example:
        resmsgid: null
        msgid: 5398bdd7-f80d-4a9e-9c13-90ae3c6bbcb0
        err: null
        status: success
        errmsg: null
    userapiResult:
      title: Result
      required:
        - userId
        - response
        - errors
      type: object
      properties:
        userId:
          type: string
        response:
          type: string
        errors:
          type: array
          items:
            type: string
          description: ''
      example:
        userId: f5863f60-2b21-47dc-aa9c-2f9822bae9bd
        response: SUCCESS
        errors: []
    userapiParams1:
      title: Params1
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: null
        msgid: 9874c6b2-4bc6-4c4e-8e95-6d56499de337
        err: MANDATORY_PARAMETER_MISSING
        status: MANDATORY_PARAMETER_MISSING
        errmsg: Mandatory parameter userName is missing.
    userapiUser-Create-V2-Request:
      title: User-Create-V2-Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userapiUserReqV2'
      example:
        request:
          firstName: selfdeclaredev2
          password: Password@1
          email: selfdeclaredev2@yopmail.com
          lastName: selfdeclaredev2
          emailVerified: true
    userapiUserReqV2:
      title: User Request V2 Object
      type: object
      properties:
        email:
          type: string
          description: ' The email address of the user'
        emailVerified:
          type: boolean
          description: >-
            This key is required with value as true, if you pass the values for
            email - But incase of create user either email or phone is required
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        organisationId:
          type: string
        avatar:
          type: string
        language:
          type: array
          items:
            type: string
            description: Represents the langauages known to the user
        gender:
          type: string
        phone:
          type: string
        phoneVerified:
          type: boolean
          description: >-
            This key is required with value as true, if you pass the values for
            both phone and provider But while creating a user, either the email
            or phone is required
        subject:
          type: array
          items:
            type: string
        channel:
          type: string
          description: '''Represents the channel value received while creating a rootOrg'''
        externalIds:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/userapiExternalId'
        profileSummary:
          type: string
        userName:
          type: string
        dob:
          type: string
          format: date
          example: '2001-02-27'
        grade:
          type: string
        location:
          type: string
          description: Represents the current location of the  user
        education:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/userapiEducation'
        profileVisibility:
          type: object
          description: >-
            Represents the user's profile visibility. It is a map that uses any
            user attribute as the key. The value of the field can be either
            public or private
        address:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/userapiAddress'
          description: 'Represents the address, it contains list of address object'
        jobProfile:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/userapiJobProfile'
        webPages:
          type: object
          properties:
            type:
              type: string
            url:
              type: string
        userType:
          type: string
          description: Represent the type of User
          example: 'Administrator, Guardian, Student, Teacher'
        userSubType:
          type: string
          description: >-
            Represent the sub type User belongs to provided by state against
            each user type
      required:
        - firstName
        - password
        - email
        - phone
        - channel
    userapiUser_Create_V2_With_Success:
      title: User_Create_V2_With_Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiResult'
      example:
        id: api.user.create
        ver: v2
        ts: '2020-11-23 06:47:27:960+0000'
        params:
          resmsgid: null
          msgid: e271bd1c-cf1c-43d1-811c-cf845e507870
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
          userId: 0019f27d-68f4-48d6-a2d8-dbe00099e8f3
          errors: []
    userapiUser-Create-V3-Request:
      title: User-Create-V3-Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userapiUserReqV2'
      example:
        request:
          firstName: selfdeclaredev4
          email: selfdeclaredev4@yopmail.com
          lastName: selfdeclaredev4
          emailVerified: true
          channel: somechannel
    userapiUser_Create_V3_With_Success_Response:
      title: User_Create_V3_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiResult'
      example:
        id: api.user.create
        ver: v3
        ts: '2020-11-23 06:59:16:472+0000'
        params:
          resmsgid: null
          msgid: a9ee7e03-6034-47b7-8499-0fb4dc86fb1a
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          userId: 0e59b33f-d829-459f-a043-03ea726bf91c
          response: SUCCESS
          errors: []
    userapiUser-Create-V4-Request:
      title: User-Create-V4-Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userapiUserReqV4'
      example:
        request:
          firstName: selfdeclaredev4child1
          managedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
    userapiUserReqV4:
      title: UserReqV4
      required:
        - firstName
        - managedBy
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        managedBy:
          type: string
      example:
        firstName: selfdeclaredev4child1
        managedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
    userapiUser_Search_Request:
      title: User_Search_Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userapiUserSearch'
      example:
        request:
          filters:
            email: neworgadmin@yopmail.com
    userapiUserSearch:
      title: UserSearch
      description: Search user request
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/userapiFilters'
        limit:
          description: ''
          type: integer
          format: int32
      example:
        filters:
          email: neworgadmin@yopmail.com
    userapiFilters:
      title: Filters
      required:
        - userAttribute
      type: object
      properties:
        userAttribute:
          description: |-
            Represents the user attributes. It can be any attribute of the user.
              - For a single attribute, pass only the string
              - To get response based on same key multiple values, pass the values as an array that can be done inside the filter. You can pass multiple attributes with multiple values'
          type: array
          items:
            type: string
        $or:
          type: object
          description: This new attribute will support user search with an 'or' condition.
      example:
        email: neworgadmin@yopmail.com
    userapiUser_Search_With_Success_Response:
      title: User_Search_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiUserSearchResult'
      example:
        id: api.user.search
        ver: v1
        ts: '2020-11-23 09:16:58:628+0000'
        params:
          resmsgid: null
          msgid: ad7135b8-ef64-44bd-adaa-0b131a657689
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response:
            count: 1
            content:
              - webPages: []
                tcStatus: null
                maskedPhone: null
                rootOrgName: Pre-prod Custodian Organization
                subject: []
                channel: dikshapreprodcustodian
                language: []
                updatedDate: null
                managedBy: null
                flagsValue: 2
                id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                recoveryEmail: ''
                identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                thumbnail: null
                updatedBy: null
                accesscode: null
                locationIds: []
                registryId: null
                rootOrgId: 0126796199493140480
                prevUsedEmail: ''
                firstName: selfdeclaredev4
                tncAcceptedOn: null
                allTncAccepted: {}
                phone: ''
                dob: null
                grade: []
                currentLoginTime: null
                userType: TEACHER
                userSubType: null
                status: 1
                lastName: selfdeclaredev4
                gender: null
                roles:
                  - PUBLIC
                prevUsedPhone: ''
                stateValidated: false
                isDeleted: false
                organisations:
                  - updatedBy: null
                    organisationId: 0126796199493140480
                    orgName: Pre-prod Custodian Organization
                    addedByName: null
                    addedBy: null
                    roles:
                      - PUBLIC
                    approvedBy: null
                    updatedDate: null
                    userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                    approvaldate: null
                    isDeleted: false
                    hashTagId: 0126796199493140480
                    isRejected: null
                    position: null
                    id: 3157455573689335
                    orgjoindate: '2020-11-23 07:02:43:194+0000'
                    isApproved: null
                    orgLeftDate: null
                provider: null
                countryCode: null
                maskedEmail: se*************@yopmail.com
                tempPassword: null
                email: se*************@yopmail.com
                profileSummary: null
                phoneVerified: false
                tcUpdatedDate: null
                recoveryPhone: ''
                avatar: null
                userName: selfdeclaredev4
                lastLoginTime: null
                emailVerified: true
                framework: {}
                createdDate: '2020-11-23 07:02:36:155+0000'
                createdBy: null
                location: null
                tncAcceptedVersion: null
    userapiUserSearchResult:
      title: UserSearchResult
      required:
        - response
      type: object
      properties:
        response:
          $ref: '#/components/schemas/userapiResponse'
      example:
        response:
          count: 1
          content:
            - webPages: []
              tcStatus: null
              maskedPhone: null
              rootOrgName: Pre-prod Custodian Organization
              subject: []
              channel: dikshapreprodcustodian
              language: []
              updatedDate: null
              managedBy: null
              flagsValue: 2
              id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
              recoveryEmail: ''
              identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
              thumbnail: null
              updatedBy: null
              accesscode: null
              locationIds: []
              registryId: null
              rootOrgId: 0126796199493140480
              prevUsedEmail: ''
              firstName: selfdeclaredev4
              tncAcceptedOn: null
              allTncAccepted: {}
              phone: ''
              dob: null
              grade: []
              currentLoginTime: null
              userType: TEACHER
              userSubType: null
              status: 1
              lastName: selfdeclaredev4
              gender: null
              roles:
                - PUBLIC
              prevUsedPhone: ''
              stateValidated: false
              isDeleted: false
              organisations:
                - updatedBy: null
                  organisationId: 0126796199493140480
                  orgName: Pre-prod Custodian Organization
                  addedByName: null
                  addedBy: null
                  roles:
                    - PUBLIC
                  approvedBy: null
                  updatedDate: null
                  userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                  approvaldate: null
                  isDeleted: false
                  hashTagId: 0126796199493140480
                  isRejected: null
                  position: null
                  id: 3157455573689335
                  orgjoindate: '2020-11-23 07:02:43:194+0000'
                  isApproved: null
                  orgLeftDate: null
              provider: null
              countryCode: null
              maskedEmail: se*************@yopmail.com
              tempPassword: null
              email: se*************@yopmail.com
              profileSummary: null
              phoneVerified: false
              tcUpdatedDate: null
              recoveryPhone: ''
              avatar: null
              userName: selfdeclaredev4
              lastLoginTime: null
              emailVerified: true
              framework: {}
              createdDate: '2020-11-23 07:02:36:155+0000'
              createdBy: null
              location: null
              tncAcceptedVersion: null
    userapiResponse:
      title: Response
      required:
        - count
        - content
      type: object
      properties:
        count:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/userapiContent'
          description: ''
      example:
        count: 1
        content:
          - webPages: []
            tcStatus: null
            maskedPhone: null
            rootOrgName: Pre-prod Custodian Organization
            subject: []
            channel: dikshapreprodcustodian
            language: []
            updatedDate: null
            managedBy: null
            flagsValue: 2
            id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            recoveryEmail: ''
            identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            thumbnail: null
            updatedBy: null
            accesscode: null
            locationIds: []
            registryId: null
            rootOrgId: 0126796199493140480
            prevUsedEmail: ''
            firstName: selfdeclaredev4
            tncAcceptedOn: null
            allTncAccepted: {}
            phone: ''
            dob: null
            grade: []
            currentLoginTime: null
            userType: TEACHER
            userSubType: null
            status: 1
            lastName: selfdeclaredev4
            gender: null
            roles:
              - PUBLIC
            prevUsedPhone: ''
            stateValidated: false
            isDeleted: false
            organisations:
              - updatedBy: null
                organisationId: 0126796199493140480
                orgName: Pre-prod Custodian Organization
                addedByName: null
                addedBy: null
                roles:
                  - PUBLIC
                approvedBy: null
                updatedDate: null
                userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                approvaldate: null
                isDeleted: false
                hashTagId: 0126796199493140480
                isRejected: null
                position: null
                id: 3157455573689335
                orgjoindate: '2020-11-23 07:02:43:194+0000'
                isApproved: null
                orgLeftDate: null
            provider: null
            countryCode: null
            maskedEmail: se*************@yopmail.com
            tempPassword: null
            email: se*************@yopmail.com
            profileSummary: null
            phoneVerified: false
            tcUpdatedDate: null
            recoveryPhone: ''
            avatar: null
            userName: selfdeclaredev4
            lastLoginTime: null
            emailVerified: true
            framework: {}
            createdDate: '2020-11-23 07:02:36:155+0000'
            createdBy: null
            location: null
            tncAcceptedVersion: null
    userapiContent:
      title: Content
      required:
        - webPages
        - tcStatus
        - maskedPhone
        - rootOrgName
        - subject
        - channel
        - language
        - updatedDate
        - managedBy
        - flagsValue
        - id
        - recoveryEmail
        - identifier
        - thumbnail
        - updatedBy
        - accesscode
        - locationIds
        - registryId
        - rootOrgId
        - prevUsedEmail
        - firstName
        - tncAcceptedOn
        - allTncAccepted
        - phone
        - dob
        - grade
        - currentLoginTime
        - userType
        - userSubType
        - status
        - lastName
        - gender
        - roles
        - prevUsedPhone
        - stateValidated
        - isDeleted
        - organisations
        - provider
        - countryCode
        - maskedEmail
        - tempPassword
        - email
        - profileSummary
        - phoneVerified
        - tcUpdatedDate
        - recoveryPhone
        - avatar
        - userName
        - lastLoginTime
        - emailVerified
        - framework
        - createdDate
        - createdBy
        - location
        - tncAcceptedVersion
      type: object
      properties:
        webPages:
          type: array
          items:
            type: string
          description: ''
        tcStatus:
          type: string
          nullable: true
        maskedPhone:
          type: string
          nullable: true
        rootOrgName:
          type: string
        subject:
          type: array
          items:
            type: string
          description: ''
        channel:
          type: string
        language:
          type: array
          items:
            type: string
          description: ''
        updatedDate:
          type: string
          nullable: true
        managedBy:
          type: string
          nullable: true
        flagsValue:
          type: integer
          format: int32
        id:
          type: string
        recoveryEmail:
          type: string
        identifier:
          type: string
        thumbnail:
          type: string
          nullable: true
        updatedBy:
          type: string
          nullable: true
        accesscode:
          type: string
          nullable: true
        locationIds:
          type: array
          items:
            type: string
          description: ''
        registryId:
          type: string
          nullable: true
        rootOrgId:
          type: string
        prevUsedEmail:
          type: string
        firstName:
          type: string
        tncAcceptedOn:
          type: string
          nullable: true
        allTncAccepted:
          type: object
        phone:
          type: string
        dob:
          type: string
          nullable: true
        grade:
          type: array
          items:
            type: string
          description: ''
        currentLoginTime:
          type: string
          nullable: true
        userType:
          type: string
        userSubType:
          type: string
        status:
          type: integer
          format: int32
        lastName:
          type: string
        gender:
          type: string
          nullable: true
        roles:
          type: array
          items:
            type: string
          description: ''
        prevUsedPhone:
          type: string
        stateValidated:
          type: boolean
        isDeleted:
          type: boolean
        organisations:
          type: array
          items:
            $ref: '#/components/schemas/userapiOrganisation'
          description: ''
        provider:
          type: string
          nullable: true
        countryCode:
          type: string
          nullable: true
        maskedEmail:
          type: string
        tempPassword:
          type: string
          nullable: true
        email:
          type: string
        profileSummary:
          type: string
          nullable: true
        phoneVerified:
          type: boolean
        tcUpdatedDate:
          type: string
          nullable: true
        recoveryPhone:
          type: string
        avatar:
          type: string
          nullable: true
        userName:
          type: string
        lastLoginTime:
          type: string
          nullable: true
        emailVerified:
          type: boolean
        framework:
          type: object
        createdDate:
          type: string
        createdBy:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        tncAcceptedVersion:
          type: string
          nullable: true
      example:
        webPages: []
        tcStatus: null
        maskedPhone: null
        rootOrgName: Pre-prod Custodian Organization
        subject: []
        channel: dikshapreprodcustodian
        language: []
        updatedDate: null
        managedBy: null
        flagsValue: 2
        id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        recoveryEmail: ''
        identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        thumbnail: null
        updatedBy: null
        accesscode: null
        locationIds: []
        registryId: null
        rootOrgId: 0126796199493140480
        prevUsedEmail: ''
        firstName: selfdeclaredev4
        tncAcceptedOn: null
        allTncAccepted: {}
        phone: ''
        dob: null
        grade: []
        currentLoginTime: null
        userType: TEACHER
        userSubType: null
        status: 1
        lastName: selfdeclaredev4
        gender: null
        roles:
          - PUBLIC
        prevUsedPhone: ''
        stateValidated: false
        isDeleted: false
        organisations:
          - updatedBy: null
            organisationId: 0126796199493140480
            orgName: Pre-prod Custodian Organization
            addedByName: null
            addedBy: null
            roles:
              - PUBLIC
            approvedBy: null
            updatedDate: null
            userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            approvaldate: null
            isDeleted: false
            hashTagId: 0126796199493140480
            isRejected: null
            position: null
            id: 3157455573689335
            orgjoindate: '2020-11-23 07:02:43:194+0000'
            isApproved: null
            orgLeftDate: null
        provider: null
        countryCode: null
        maskedEmail: se*************@yopmail.com
        tempPassword: null
        email: se*************@yopmail.com
        profileSummary: null
        phoneVerified: false
        tcUpdatedDate: null
        recoveryPhone: ''
        avatar: null
        userName: selfdeclaredev4
        lastLoginTime: null
        emailVerified: true
        framework: {}
        createdDate: '2020-11-23 07:02:36:155+0000'
        createdBy: null
        location: null
        tncAcceptedVersion: null
    userapiOrganisation:
      title: Organisation
      required:
        - updatedBy
        - organisationId
        - orgName
        - addedByName
        - addedBy
        - roles
        - approvedBy
        - updatedDate
        - userId
        - approvaldate
        - isDeleted
        - hashTagId
        - isRejected
        - position
        - id
        - orgjoindate
        - isApproved
        - orgLeftDate
      type: object
      properties:
        updatedBy:
          type: string
          nullable: true
        organisationId:
          type: string
        orgName:
          type: string
        addedByName:
          type: string
          nullable: true
        addedBy:
          type: string
          nullable: true
        roles:
          type: array
          items:
            type: string
          description: ''
        approvedBy:
          type: string
          nullable: true
        updatedDate:
          type: string
          nullable: true
        userId:
          type: string
        approvaldate:
          type: string
          nullable: true
        isDeleted:
          type: boolean
        hashTagId:
          type: string
        isRejected:
          type: string
          nullable: true
        position:
          type: string
          nullable: true
        id:
          type: string
        orgjoindate:
          type: string
        isApproved:
          type: string
          nullable: true
        orgLeftDate:
          type: string
          nullable: true
      example:
        updatedBy: null
        organisationId: 0126796199493140480
        orgName: Pre-prod Custodian Organization
        addedByName: null
        addedBy: null
        roles:
          - PUBLIC
        approvedBy: null
        updatedDate: null
        userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        approvaldate: null
        isDeleted: false
        hashTagId: 0126796199493140480
        isRejected: null
        position: null
        id: 3157455573689335
        orgjoindate: '2020-11-23 07:02:43:194+0000'
        isApproved: null
        orgLeftDate: null
    userapiUser_Update_Request:
      title: User_Update_Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userapiUserUpdateReqV1'
      example:
        request:
          userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
          phone: 8888888888
          phoneVerified: true
    userapiUserUpdateReqV1:
      title: UserUpdateReqV1
      required:
        - userId
      type: object
      properties:
        userId:
          description: ' The identifier for the authenticated user'
          type: string
        firstName:
          description: ' The first name of the user'
          type: string
        dob:
          description: The user's Date of Birth
          type: string
          format: date
          example: '2001-02-27'
        language:
          description: The user's preferred language
          type: array
          items:
            type: string
        locationCodes:
          description: The user's preferred locations
          type: array
          items:
            type: string
        externalId:
          description: >-
            The user identifier provided by another organization.
            externalId,externalIdType,externalIdProvider are the keys required
            if the user does not pass the userId
          type: string
        externalIdType:
          description: >-
            The external ID type. externalId,externalIdType,externalIdProvider
            are the keys required if the user does not pass the userId
          type: string
        externalIdProvider:
          description: >-
            The name of the organization providing the user's external ID.
            externalId,externalIdType,externalIdProvider are the keys required
            if the user does not pass the userId
          type: string
        externalIds:
          description: The details of external IDs and provider
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/userapiExternalIdUpdate'
        framework:
          description: Framework details
          type: object
          allOf:
            - $ref: '#/components/schemas/userapiFrameworkData'
        userType:
          type: string
          description: Represent the type of User
          example: 'Administrator, Guardian, Student, Teacher'
        userSubType:
          type: string
          description: >-
            Represent the sub type User belongs to provided by state against
            each user type
      example:
        userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        phone: 8888888888
        phoneVerified: true
    userapiExternalIdUpdate:
      description: The user request to update the external ID in the profile
      type: object
      properties:
        id:
          type: string
          description: >-
            Identity of user in an external system. The externalId helps Sunbird
            identify and associate the user with another external organization.
            The combination of the externalId and provider must be unique. If
            the user passes the value for the externalId, then it is mandatory
            to pass a value for the provider.
        provider:
          type: string
          description: >-
            A provider is the orgainsation that provides an (external) ID to a
            user on Sunbird. That organisation, may or maynot be part of
            Sunbird. If the user passes the value for the externalId, then it is
            mandatory to pass a value for the provider.
        idType:
          type: string
          description: >-
            The type of identity proof. For example, PAN card is an ID type
            whose provider is the central government
        operation:
          type: string
          description: 'The value for the operation. Possible values are ADD,EDIT,REMOVE'
    userapiFrameworkData:
      title: Framework details
      type: object
      properties:
        gradeLevel:
          type: array
          description: List of grades whose content is of interest to user
          items:
            type: string
        subject:
          type: array
          description: List of subjects whose content is of interest to user
          items:
            type: string
        medium:
          type: array
          description: List of mediums whose content is of interest to user
          items:
            type: string
        board:
          type: array
          description: List of boards whose content is of interest to user
          items:
            type: string
      required:
        - gradeLevel
        - medium
        - board
    userapiGet_User_Success_With_Valid_Auth_Token:
      title: Get_User_Success_With_Valid_Auth_Token
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiUserReadResultV4'
      example:
        id: api.user.read
        ver: v1
        ts: '2020-11-23 13:21:57:692+0000'
        params:
          resmsgid: null
          msgid: af801330-0dcb-42c6-b76b-cedaa6212118
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response:
            webPages: []
            tcStatus: null
            maskedPhone: null
            rootOrgName: Pre-prod Custodian Organization
            subject: []
            channel: dikshapreprodcustodian
            language: []
            updatedDate: null
            managedBy: null
            flagsValue: 2
            id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            recoveryEmail: ''
            identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            thumbnail: null
            updatedBy: null
            accesscode: null
            locationIds: []
            registryId: null
            rootOrgId: 0126796199493140480
            prevUsedEmail: ''
            firstName: selfdeclaredev4
            tncAcceptedOn: null
            allTncAccepted: {}
            phone: ''
            dob: null
            grade: []
            currentLoginTime: null
            userType: ADMINISTRATOR
            userSubtType: BRC
            status: 1
            lastName: selfdeclaredev4
            tncLatestVersion: v8
            gender: null
            roles:
              - PUBLIC
            prevUsedPhone: ''
            stateValidated: false
            isDeleted: false
            organisations:
              - updatedBy: null
                organisationId: 0126796199493140480
                orgName: Pre-prod Custodian Organization
                addedByName: null
                addedBy: null
                roles:
                  - PUBLIC
                approvedBy: null
                updatedDate: null
                userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                approvaldate: null
                isDeleted: false
                hashTagId: 0126796199493140480
                isRejected: null
                position: null
                id: 3157455573689335
                orgjoindate: '2020-11-23 07:02:43:194+0000'
                isApproved: null
                orgLeftDate: null
            provider: null
            countryCode: null
            tncLatestVersionUrl: >-
              https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
            maskedEmail: se*************@yopmail.com
            tempPassword: null
            email: se*************@yopmail.com
            rootOrg:
              dateTime: null
              preferredLanguage: null
              keys:
                encKeys:
                  - 456
                signKeys:
                  - 456
              channel: dikshapreprodcustodian
              approvedBy: null
              description: Pre-prod Custodian Organization
              updatedDate: '2020-08-28 10:12:01:096+0000'
              addressId: null
              orgType: null
              provider: null
              orgCode: null
              locationId: null
              theme: null
              id: 0126796199493140480
              isApproved: null
              communityId: null
              slug: dikshapreprodcustodian
              email: null
              isSSOEnabled: null
              thumbnail: null
              updatedBy: null
              orgName: Pre-prod Custodian Organization
              locationIds:
                - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
              externalId: null
              isRootOrg: true
              rootOrgId: 0126796199493140480
              imgUrl: null
              approvedDate: null
              orgTypeId: null
              homeUrl: null
              isDefault: true
              createdDate: '2019-01-18 09:48:13:428+0000'
              contactDetail: null
              parentOrgId: null
              createdBy: system
              hashTagId: 0126796199493140480
              noOfMembers: null
              status: 1
            profileSummary: null
            phoneVerified: false
            tcUpdatedDate: null
            recoveryPhone: ''
            avatar: null
            userName: selfdeclaredev4
            promptTnC: true
            lastLoginTime: null
            emailVerified: true
            framework: {}
            createdDate: '2020-11-23 07:02:36:155+0000'
            createdBy: null
            location: null
            tncAcceptedVersion: null
    userapiUserReadResultV4:
      title: UserReadResultV4
      required:
        - response
      type: object
      properties:
        response:
          $ref: '#/components/schemas/userapiUserReadResponse4'
      example:
        response:
          webPages: []
          tcStatus: null
          maskedPhone: null
          rootOrgName: Pre-prod Custodian Organization
          subject: []
          channel: dikshapreprodcustodian
          language: []
          updatedDate: null
          managedBy: null
          flagsValue: 2
          id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
          recoveryEmail: ''
          identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
          thumbnail: null
          updatedBy: null
          accesscode: null
          locationIds: []
          registryId: null
          rootOrgId: 0126796199493140480
          prevUsedEmail: ''
          firstName: selfdeclaredev4
          tncAcceptedOn: null
          allTncAccepted: {}
          phone: ''
          dob: null
          grade: []
          currentLoginTime: null
          userType: TEACHER
          userSubType: null
          status: 1
          lastName: selfdeclaredev4
          tncLatestVersion: v8
          gender: null
          roles:
            - PUBLIC
          prevUsedPhone: ''
          stateValidated: false
          isDeleted: false
          organisations:
            - updatedBy: null
              organisationId: 0126796199493140480
              orgName: Pre-prod Custodian Organization
              addedByName: null
              addedBy: null
              roles:
                - PUBLIC
              approvedBy: null
              updatedDate: null
              userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
              approvaldate: null
              isDeleted: false
              hashTagId: 0126796199493140480
              isRejected: null
              position: null
              id: 3157455573689335
              orgjoindate: '2020-11-23 07:02:43:194+0000'
              isApproved: null
              orgLeftDate: null
          provider: null
          countryCode: null
          tncLatestVersionUrl: >-
            https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
          maskedEmail: se*************@yopmail.com
          tempPassword: null
          email: se*************@yopmail.com
          rootOrg:
            dateTime: null
            preferredLanguage: null
            keys:
              encKeys:
                - 456
              signKeys:
                - 456
            channel: dikshapreprodcustodian
            approvedBy: null
            description: Pre-prod Custodian Organization
            updatedDate: '2020-08-28 10:12:01:096+0000'
            addressId: null
            orgType: null
            provider: null
            orgCode: null
            locationId: null
            theme: null
            id: 0126796199493140480
            isApproved: null
            communityId: null
            slug: dikshapreprodcustodian
            email: null
            isSSOEnabled: null
            thumbnail: null
            updatedBy: null
            orgName: Pre-prod Custodian Organization
            locationIds:
              - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
              - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
            externalId: null
            isRootOrg: true
            rootOrgId: 0126796199493140480
            imgUrl: null
            approvedDate: null
            orgTypeId: null
            homeUrl: null
            isDefault: true
            createdDate: '2019-01-18 09:48:13:428+0000'
            contactDetail: null
            parentOrgId: null
            createdBy: system
            hashTagId: 0126796199493140480
            noOfMembers: null
            status: 1
          profileSummary: null
          phoneVerified: false
          tcUpdatedDate: null
          recoveryPhone: ''
          avatar: null
          userName: selfdeclaredev4
          promptTnC: true
          lastLoginTime: null
          emailVerified: true
          framework: {}
          createdDate: '2020-11-23 07:02:36:155+0000'
          createdBy: null
          location: null
          tncAcceptedVersion: null
    userapiUserReadResponse4:
      title: UserReadResponse4
      required:
        - webPages
        - tcStatus
        - maskedPhone
        - rootOrgName
        - subject
        - channel
        - language
        - updatedDate
        - managedBy
        - flagsValue
        - id
        - recoveryEmail
        - identifier
        - thumbnail
        - updatedBy
        - accesscode
        - locationIds
        - registryId
        - rootOrgId
        - prevUsedEmail
        - firstName
        - tncAcceptedOn
        - allTncAccepted
        - phone
        - dob
        - grade
        - currentLoginTime
        - userType
        - userSubtType
        - status
        - lastName
        - tncLatestVersion
        - gender
        - roles
        - prevUsedPhone
        - stateValidated
        - isDeleted
        - organisations
        - provider
        - countryCode
        - tncLatestVersionUrl
        - maskedEmail
        - tempPassword
        - email
        - rootOrg
        - profileSummary
        - phoneVerified
        - tcUpdatedDate
        - recoveryPhone
        - avatar
        - userName
        - promptTnC
        - lastLoginTime
        - emailVerified
        - framework
        - createdDate
        - createdBy
        - location
        - tncAcceptedVersion
      type: object
      properties:
        webPages:
          type: array
          items:
            type: string
          description: ''
        tcStatus:
          type: string
          nullable: true
        maskedPhone:
          type: string
          nullable: true
        rootOrgName:
          type: string
        subject:
          type: array
          items:
            type: string
          description: ''
        channel:
          type: string
        language:
          type: array
          items:
            type: string
          description: ''
        updatedDate:
          type: string
          nullable: true
        managedBy:
          type: string
          nullable: true
        flagsValue:
          type: integer
          format: int32
        id:
          type: string
        recoveryEmail:
          type: string
        identifier:
          type: string
        thumbnail:
          type: string
          nullable: true
        updatedBy:
          type: string
          nullable: true
        accesscode:
          type: string
          nullable: true
        locationIds:
          type: array
          items:
            type: string
          description: ''
        registryId:
          type: string
          nullable: true
        rootOrgId:
          type: string
        prevUsedEmail:
          type: string
        firstName:
          type: string
        tncAcceptedOn:
          type: string
          nullable: true
        allTncAccepted:
          type: object
        phone:
          type: string
        dob:
          type: string
          nullable: true
        grade:
          type: array
          items:
            type: string
          description: ''
        currentLoginTime:
          type: string
          nullable: true
        userType:
          type: string
        userSubtType:
          type: string
        status:
          type: integer
          format: int32
        lastName:
          type: string
        tncLatestVersion:
          type: string
        gender:
          type: string
          nullable: true
        roles:
          type: array
          items:
            type: string
          description: ''
        prevUsedPhone:
          type: string
        stateValidated:
          type: boolean
        isDeleted:
          type: boolean
        organisations:
          type: array
          items:
            $ref: '#/components/schemas/userapiOrganisation'
          description: ''
        provider:
          type: string
          nullable: true
        countryCode:
          type: string
          nullable: true
        tncLatestVersionUrl:
          type: string
        maskedEmail:
          type: string
        tempPassword:
          type: string
          nullable: true
        email:
          type: string
        rootOrg:
          $ref: '#/components/schemas/userapiRootOrg'
        profileSummary:
          type: string
          nullable: true
        phoneVerified:
          type: boolean
        tcUpdatedDate:
          type: string
          nullable: true
        recoveryPhone:
          type: string
        avatar:
          type: string
          nullable: true
        userName:
          type: string
        promptTnC:
          type: boolean
        lastLoginTime:
          type: string
          nullable: true
        emailVerified:
          type: boolean
        framework:
          type: object
        createdDate:
          type: string
        createdBy:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        tncAcceptedVersion:
          type: string
          nullable: true
      example:
        webPages: []
        tcStatus: null
        maskedPhone: null
        rootOrgName: Pre-prod Custodian Organization
        subject: []
        channel: dikshapreprodcustodian
        language: []
        updatedDate: null
        managedBy: null
        flagsValue: 2
        id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        recoveryEmail: ''
        identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        thumbnail: null
        updatedBy: null
        accesscode: null
        locationIds: []
        registryId: null
        rootOrgId: 0126796199493140480
        prevUsedEmail: ''
        firstName: selfdeclaredev4
        tncAcceptedOn: null
        allTncAccepted: {}
        phone: ''
        dob: null
        grade: []
        currentLoginTime: null
        userType: TEACHER
        userSubtype: null
        status: 1
        lastName: selfdeclaredev4
        tncLatestVersion: v8
        gender: null
        roles:
          - PUBLIC
        prevUsedPhone: ''
        stateValidated: false
        isDeleted: false
        organisations:
          - updatedBy: null
            organisationId: 0126796199493140480
            orgName: Pre-prod Custodian Organization
            addedByName: null
            addedBy: null
            roles:
              - PUBLIC
            approvedBy: null
            updatedDate: null
            userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            approvaldate: null
            isDeleted: false
            hashTagId: 0126796199493140480
            isRejected: null
            position: null
            id: 3157455573689335
            orgjoindate: '2020-11-23 07:02:43:194+0000'
            isApproved: null
            orgLeftDate: null
        provider: null
        countryCode: null
        tncLatestVersionUrl: >-
          https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
        maskedEmail: se*************@yopmail.com
        tempPassword: null
        email: se*************@yopmail.com
        rootOrg:
          dateTime: null
          preferredLanguage: null
          keys:
            encKeys:
              - 456
            signKeys:
              - 456
          channel: dikshapreprodcustodian
          approvedBy: null
          description: Pre-prod Custodian Organization
          updatedDate: '2020-08-28 10:12:01:096+0000'
          addressId: null
          orgType: null
          provider: null
          orgCode: null
          locationId: null
          theme: null
          id: 0126796199493140480
          isApproved: null
          communityId: null
          slug: dikshapreprodcustodian
          email: null
          isSSOEnabled: null
          thumbnail: null
          updatedBy: null
          orgName: Pre-prod Custodian Organization
          locationIds:
            - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
            - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
          externalId: null
          isRootOrg: true
          rootOrgId: 0126796199493140480
          imgUrl: null
          approvedDate: null
          orgTypeId: null
          homeUrl: null
          isDefault: true
          createdDate: '2019-01-18 09:48:13:428+0000'
          contactDetail: null
          parentOrgId: null
          createdBy: system
          hashTagId: 0126796199493140480
          noOfMembers: null
          status: 1
        profileSummary: null
        phoneVerified: false
        tcUpdatedDate: null
        recoveryPhone: ''
        avatar: null
        userName: selfdeclaredev4
        promptTnC: true
        lastLoginTime: null
        emailVerified: true
        framework: {}
        createdDate: '2020-11-23 07:02:36:155+0000'
        createdBy: null
        location: null
        tncAcceptedVersion: null
    userapiRootOrg:
      title: RootOrg
      required:
        - dateTime
        - preferredLanguage
        - keys
        - channel
        - approvedBy
        - description
        - updatedDate
        - addressId
        - orgType
        - provider
        - orgCode
        - locationId
        - theme
        - id
        - isApproved
        - communityId
        - slug
        - email
        - isSSOEnabled
        - thumbnail
        - updatedBy
        - orgName
        - locationIds
        - externalId
        - isRootOrg
        - rootOrgId
        - imgUrl
        - approvedDate
        - orgTypeId
        - homeUrl
        - isDefault
        - createdDate
        - contactDetail
        - parentOrgId
        - createdBy
        - hashTagId
        - noOfMembers
        - status
      type: object
      properties:
        dateTime:
          type: string
          nullable: true
        preferredLanguage:
          type: string
          nullable: true
        keys:
          $ref: '#/components/schemas/userapiKeys'
        channel:
          type: string
        approvedBy:
          type: string
          nullable: true
        description:
          type: string
        updatedDate:
          type: string
        addressId:
          type: string
          nullable: true
        orgType:
          type: string
          nullable: true
        provider:
          type: string
          nullable: true
        orgCode:
          type: string
          nullable: true
        locationId:
          type: string
          nullable: true
        theme:
          type: string
          nullable: true
        id:
          type: string
        isApproved:
          type: string
          nullable: true
        communityId:
          type: string
          nullable: true
        slug:
          type: string
        email:
          type: string
          nullable: true
        isSSOEnabled:
          type: string
          nullable: true
        thumbnail:
          type: string
          nullable: true
        updatedBy:
          type: string
          nullable: true
        orgName:
          type: string
        locationIds:
          type: array
          items:
            type: string
          description: ''
        externalId:
          type: string
          nullable: true
        isRootOrg:
          type: boolean
        rootOrgId:
          type: string
        imgUrl:
          type: string
          nullable: true
        approvedDate:
          type: string
          nullable: true
        orgTypeId:
          type: string
          nullable: true
        homeUrl:
          type: string
          nullable: true
        isDefault:
          type: boolean
        createdDate:
          type: string
        contactDetail:
          type: string
          nullable: true
        parentOrgId:
          type: string
          nullable: true
        createdBy:
          type: string
        hashTagId:
          type: string
        noOfMembers:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
      example:
        dateTime: null
        preferredLanguage: null
        keys:
          encKeys:
            - 456
          signKeys:
            - 456
        channel: dikshapreprodcustodian
        approvedBy: null
        description: Pre-prod Custodian Organization
        updatedDate: '2020-08-28 10:12:01:096+0000'
        addressId: null
        orgType: null
        provider: null
        orgCode: null
        locationId: null
        theme: null
        id: 0126796199493140480
        isApproved: null
        communityId: null
        slug: dikshapreprodcustodian
        email: null
        isSSOEnabled: null
        thumbnail: null
        updatedBy: null
        orgName: Pre-prod Custodian Organization
        locationIds:
          - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
          - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
        externalId: null
        isRootOrg: true
        rootOrgId: 0126796199493140480
        imgUrl: null
        approvedDate: null
        orgTypeId: null
        homeUrl: null
        isDefault: true
        createdDate: '2019-01-18 09:48:13:428+0000'
        contactDetail: null
        parentOrgId: null
        createdBy: system
        hashTagId: 0126796199493140480
        noOfMembers: null
        status: 1
    userapiKeys:
      title: Keys
      required:
        - encKeys
        - signKeys
      type: object
      properties:
        encKeys:
          type: array
          items:
            type: string
          description: ''
        signKeys:
          type: array
          items:
            type: string
          description: ''
      example:
        encKeys:
          - 456
        signKeys:
          - 456
    userapiRead_User_V2_With_Success_Response:
      title: Read_User_V2_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiReadUserV2Result'
      example:
        id: api.user.read
        ver: v2
        ts: '2020-11-24 17:39:32:438+0000'
        params:
          resmsgid: null
          msgid: a9ceabb7-3344-47d7-baca-09d43f4413c5
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response:
            tcStatus: null
            maskedPhone: null
            rootOrgName: Pre-prod Custodian Organization
            subject: []
            channel: dikshapreprodcustodian
            language: []
            updatedDate: '2020-11-23 17:47:49:640+0000'
            managedBy: null
            flagsValue: 2
            id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            recoveryEmail: ''
            identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            thumbnail: null
            updatedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            accesscode: null
            locationIds:
              - bc75cc99-9205-463e-a722-5326857838f8
              - b5c35cfc-6c1e-4266-94ef-a425c43c7f4e
            registryId: null
            rootOrgId: 0126796199493140480
            prevUsedEmail: ''
            firstName: selfdeclaredev4
            tncAcceptedOn: 2020-11-23T17:47:05.019Z
            allTncAccepted: {}
            phone: ''
            dob: null
            grade: []
            currentLoginTime: null
            userType: TEACHER
            userSubtType: null
            status: 1
            lastName: selfdeclaredev4
            tncLatestVersion: v8
            gender: null
            roles:
              - PUBLIC
            prevUsedPhone: ''
            stateValidated: false
            isDeleted: false
            organisations:
              - updatedBy: null
                organisationId: 0126796199493140480
                orgName: Pre-prod Custodian Organization
                addedByName: null
                addedBy: null
                roles:
                  - PUBLIC
                approvedBy: null
                updatedDate: null
                userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                approvaldate: null
                isDeleted: false
                hashTagId: 0126796199493140480
                isRejected: null
                position: null
                id: 3157455573689335
                orgjoindate: '2020-11-23 07:02:43:194+0000'
                isApproved: null
                orgLeftDate: null
            provider: null
            countryCode: null
            tncLatestVersionUrl: >-
              https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
            maskedEmail: se*************@yopmail.com
            tempPassword: null
            email: se*************@yopmail.com
            rootOrg:
              dateTime: null
              preferredLanguage: null
              keys:
                encKeys:
                  - 456
                signKeys:
                  - 456
              channel: dikshapreprodcustodian
              approvedBy: null
              description: Pre-prod Custodian Organization
              updatedDate: '2020-08-28 10:12:01:096+0000'
              addressId: null
              orgType: null
              provider: null
              orgCode: null
              locationId: null
              theme: null
              id: 0126796199493140480
              isApproved: null
              communityId: null
              slug: dikshapreprodcustodian
              email: null
              isSSOEnabled: null
              thumbnail: null
              updatedBy: null
              orgName: Pre-prod Custodian Organization
              locationIds:
                - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
              externalId: null
              isRootOrg: true
              rootOrgId: 0126796199493140480
              imgUrl: null
              approvedDate: null
              orgTypeId: null
              homeUrl: null
              isDefault: true
              createdDate: '2019-01-18 09:48:13:428+0000'
              contactDetail: null
              parentOrgId: null
              createdBy: system
              hashTagId: 0126796199493140480
              noOfMembers: null
              status: 1
            profileSummary: null
            phoneVerified: false
            tcUpdatedDate: null
            recoveryPhone: ''
            userName: selfdeclaredev4
            promptTnC: false
            lastLoginTime: null
            emailVerified: true
            framework:
              gradeLevel:
                - Class 1
              subject:
                - English
              id:
                - ekstep_ncert_k-12
              medium:
                - English
              board:
                - CBSE
            createdDate: '2020-11-23 07:02:36:155+0000'
            createdBy: null
            location: null
            tncAcceptedVersion: v8
    userapiReadUserV2Result:
      title: ReadUserV2Result
      required:
        - response
      type: object
      properties:
        response:
          $ref: '#/components/schemas/userapiReadUserV2Response'
      example:
        response:
          tcStatus: null
          maskedPhone: null
          rootOrgName: Pre-prod Custodian Organization
          subject: []
          channel: dikshapreprodcustodian
          language: []
          updatedDate: '2020-11-23 17:47:49:640+0000'
          managedBy: null
          flagsValue: 2
          id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
          recoveryEmail: ''
          identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
          thumbnail: null
          updatedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
          accesscode: null
          locationIds:
            - bc75cc99-9205-463e-a722-5326857838f8
            - b5c35cfc-6c1e-4266-94ef-a425c43c7f4e
          registryId: null
          rootOrgId: 0126796199493140480
          prevUsedEmail: ''
          firstName: selfdeclaredev4
          tncAcceptedOn: 2020-11-23T17:47:05.019Z
          allTncAccepted: {}
          phone: ''
          dob: null
          grade: []
          currentLoginTime: null
          userType: TEACHER
          userSubType: null
          status: 1
          lastName: selfdeclaredev4
          tncLatestVersion: v8
          gender: null
          roles:
            - PUBLIC
          prevUsedPhone: ''
          stateValidated: false
          isDeleted: false
          organisations:
            - updatedBy: null
              organisationId: 0126796199493140480
              orgName: Pre-prod Custodian Organization
              addedByName: null
              addedBy: null
              roles:
                - PUBLIC
              approvedBy: null
              updatedDate: null
              userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
              approvaldate: null
              isDeleted: false
              hashTagId: 0126796199493140480
              isRejected: null
              position: null
              id: 3157455573689335
              orgjoindate: '2020-11-23 07:02:43:194+0000'
              isApproved: null
              orgLeftDate: null
          provider: null
          countryCode: null
          tncLatestVersionUrl: >-
            https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
          maskedEmail: se*************@yopmail.com
          tempPassword: null
          email: se*************@yopmail.com
          rootOrg:
            dateTime: null
            preferredLanguage: null
            keys:
              encKeys:
                - 456
              signKeys:
                - 456
            channel: dikshapreprodcustodian
            approvedBy: null
            description: Pre-prod Custodian Organization
            updatedDate: '2020-08-28 10:12:01:096+0000'
            addressId: null
            orgType: null
            provider: null
            orgCode: null
            locationId: null
            theme: null
            id: 0126796199493140480
            isApproved: null
            communityId: null
            slug: dikshapreprodcustodian
            email: null
            isSSOEnabled: null
            thumbnail: null
            updatedBy: null
            orgName: Pre-prod Custodian Organization
            locationIds:
              - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
              - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
            externalId: null
            isRootOrg: true
            rootOrgId: 0126796199493140480
            imgUrl: null
            approvedDate: null
            orgTypeId: null
            homeUrl: null
            isDefault: true
            createdDate: '2019-01-18 09:48:13:428+0000'
            contactDetail: null
            parentOrgId: null
            createdBy: system
            hashTagId: 0126796199493140480
            noOfMembers: null
            status: 1
          profileSummary: null
          phoneVerified: false
          tcUpdatedDate: null
          recoveryPhone: ''
          userName: selfdeclaredev4
          promptTnC: false
          lastLoginTime: null
          emailVerified: true
          framework:
            gradeLevel:
              - Class 1
            subject:
              - English
            id:
              - ekstep_ncert_k-12
            medium:
              - English
            board:
              - CBSE
          createdDate: '2020-11-23 07:02:36:155+0000'
          createdBy: null
          location: null
          tncAcceptedVersion: v8
    userapiReadUserV2Response:
      title: ReadUserV2Response
      required:
        - tcStatus
        - maskedPhone
        - rootOrgName
        - subject
        - channel
        - language
        - updatedDate
        - managedBy
        - flagsValue
        - id
        - recoveryEmail
        - identifier
        - thumbnail
        - updatedBy
        - accesscode
        - locationIds
        - registryId
        - rootOrgId
        - prevUsedEmail
        - firstName
        - tncAcceptedOn
        - allTncAccepted
        - phone
        - dob
        - grade
        - currentLoginTime
        - userType
        - userSubType
        - status
        - lastName
        - tncLatestVersion
        - gender
        - roles
        - prevUsedPhone
        - stateValidated
        - isDeleted
        - organisations
        - provider
        - countryCode
        - tncLatestVersionUrl
        - maskedEmail
        - tempPassword
        - email
        - rootOrg
        - profileSummary
        - phoneVerified
        - tcUpdatedDate
        - recoveryPhone
        - userName
        - promptTnC
        - lastLoginTime
        - emailVerified
        - framework
        - createdDate
        - createdBy
        - location
        - tncAcceptedVersion
      type: object
      properties:
        tcStatus:
          type: string
          nullable: true
        maskedPhone:
          type: string
          nullable: true
        rootOrgName:
          type: string
        subject:
          type: array
          items:
            type: string
          description: ''
        channel:
          type: string
        language:
          type: array
          items:
            type: string
          description: ''
        updatedDate:
          type: string
        managedBy:
          type: string
          nullable: true
        flagsValue:
          type: integer
          format: int32
        id:
          type: string
        recoveryEmail:
          type: string
        identifier:
          type: string
        thumbnail:
          type: string
          nullable: true
        updatedBy:
          type: string
        accesscode:
          type: string
          nullable: true
        locationIds:
          type: array
          items:
            type: string
          description: ''
        registryId:
          type: string
          nullable: true
        rootOrgId:
          type: string
        prevUsedEmail:
          type: string
        firstName:
          type: string
        tncAcceptedOn:
          type: string
        allTncAccepted:
          type: object
        phone:
          type: string
        dob:
          type: string
          nullable: true
        grade:
          type: array
          items:
            type: string
          description: ''
        currentLoginTime:
          type: string
          nullable: true
        userType:
          type: string
        userSubType:
          type: string
        status:
          type: integer
          format: int32
        lastName:
          type: string
        tncLatestVersion:
          type: string
        gender:
          type: string
          nullable: true
        roles:
          type: array
          items:
            type: string
          description: ''
        prevUsedPhone:
          type: string
        stateValidated:
          type: boolean
        isDeleted:
          type: boolean
        organisations:
          type: array
          items:
            $ref: '#/components/schemas/userapiOrganisation'
          description: ''
        provider:
          type: string
          nullable: true
        countryCode:
          type: string
          nullable: true
        tncLatestVersionUrl:
          type: string
        maskedEmail:
          type: string
        tempPassword:
          type: string
          nullable: true
        email:
          type: string
        rootOrg:
          $ref: '#/components/schemas/userapiRootOrg'
        profileSummary:
          type: string
          nullable: true
        phoneVerified:
          type: boolean
        tcUpdatedDate:
          type: string
          nullable: true
        recoveryPhone:
          type: string
        userName:
          type: string
        promptTnC:
          type: boolean
        lastLoginTime:
          type: string
          nullable: true
        emailVerified:
          type: boolean
        framework:
          $ref: '#/components/schemas/userapiFramework'
        createdDate:
          type: string
        createdBy:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        tncAcceptedVersion:
          type: string
      example:
        tcStatus: null
        maskedPhone: null
        rootOrgName: Pre-prod Custodian Organization
        subject: []
        channel: dikshapreprodcustodian
        language: []
        updatedDate: '2020-11-23 17:47:49:640+0000'
        managedBy: null
        flagsValue: 2
        id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        recoveryEmail: ''
        identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        thumbnail: null
        updatedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        accesscode: null
        locationIds:
          - bc75cc99-9205-463e-a722-5326857838f8
          - b5c35cfc-6c1e-4266-94ef-a425c43c7f4e
        registryId: null
        rootOrgId: 0126796199493140480
        prevUsedEmail: ''
        firstName: selfdeclaredev4
        tncAcceptedOn: 2020-11-23T17:47:05.019Z
        allTncAccepted: {}
        phone: ''
        dob: null
        grade: []
        currentLoginTime: null
        userType: TEACHER
        userSubType: null
        status: 1
        lastName: selfdeclaredev4
        tncLatestVersion: v8
        gender: null
        roles:
          - PUBLIC
        prevUsedPhone: ''
        stateValidated: false
        isDeleted: false
        organisations:
          - updatedBy: null
            organisationId: 0126796199493140480
            orgName: Pre-prod Custodian Organization
            addedByName: null
            addedBy: null
            roles:
              - PUBLIC
            approvedBy: null
            updatedDate: null
            userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            approvaldate: null
            isDeleted: false
            hashTagId: 0126796199493140480
            isRejected: null
            position: null
            id: 3157455573689335
            orgjoindate: '2020-11-23 07:02:43:194+0000'
            isApproved: null
            orgLeftDate: null
        provider: null
        countryCode: null
        tncLatestVersionUrl: >-
          https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
        maskedEmail: se*************@yopmail.com
        tempPassword: null
        email: se*************@yopmail.com
        rootOrg:
          dateTime: null
          preferredLanguage: null
          keys:
            encKeys:
              - 456
            signKeys:
              - 456
          channel: dikshapreprodcustodian
          approvedBy: null
          description: Pre-prod Custodian Organization
          updatedDate: '2020-08-28 10:12:01:096+0000'
          addressId: null
          orgType: null
          provider: null
          orgCode: null
          locationId: null
          theme: null
          id: 0126796199493140480
          isApproved: null
          communityId: null
          slug: dikshapreprodcustodian
          email: null
          isSSOEnabled: null
          thumbnail: null
          updatedBy: null
          orgName: Pre-prod Custodian Organization
          locationIds:
            - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
            - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
          externalId: null
          isRootOrg: true
          rootOrgId: 0126796199493140480
          imgUrl: null
          approvedDate: null
          orgTypeId: null
          homeUrl: null
          isDefault: true
          createdDate: '2019-01-18 09:48:13:428+0000'
          contactDetail: null
          parentOrgId: null
          createdBy: system
          hashTagId: 0126796199493140480
          noOfMembers: null
          status: 1
        profileSummary: null
        phoneVerified: false
        tcUpdatedDate: null
        recoveryPhone: ''
        userName: selfdeclaredev4
        promptTnC: false
        lastLoginTime: null
        emailVerified: true
        framework:
          gradeLevel:
            - Class 1
          subject:
            - English
          id:
            - ekstep_ncert_k-12
          medium:
            - English
          board:
            - CBSE
        createdDate: '2020-11-23 07:02:36:155+0000'
        createdBy: null
        location: null
        tncAcceptedVersion: v8
    userapiFramework:
      title: Framework
      required:
        - gradeLevel
        - subject
        - id
        - medium
        - board
      type: object
      properties:
        gradeLevel:
          type: array
          items:
            type: string
          description: ''
        subject:
          type: array
          items:
            type: string
          description: ''
        id:
          type: array
          items:
            type: string
          description: ''
        medium:
          type: array
          items:
            type: string
          description: ''
        board:
          type: array
          items:
            type: string
          description: ''
      example:
        gradeLevel:
          - Class 1
        subject:
          - English
        id:
          - ekstep_ncert_k-12
        medium:
          - English
        board:
          - CBSE
    userapiRead_User_V3_With_Success_Response:
      title: Read_User_V3_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiReadUserV3Result'
      example:
        id: api.user.read
        ver: v3
        ts: '2020-11-24 09:13:00:959+0000'
        params:
          resmsgid: null
          msgid: 26012a3e-59f1-40af-b96e-5bc808f5f2ab
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response:
            webPages: []
            tcStatus: null
            maskedPhone: null
            rootOrgName: Pre-prod Custodian Organization
            subject: []
            channel: dikshapreprodcustodian
            language: []
            updatedDate: '2020-11-23 17:47:49:640+0000'
            managedBy: null
            flagsValue: 2
            id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            recoveryEmail: ''
            identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            thumbnail: null
            updatedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            accesscode: null
            registryId: null
            roleList:
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
              - name: Content Curation
                id: CONTENT_CURATION
              - name: Content Creator
                id: CONTENT_CREATOR
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
              - name: Admin
                id: ADMIN
              - name: Course Mentor
                id: COURSE_MENTOR
              - name: Org Admin
                id: ORG_ADMIN
              - name: Content Review
                id: CONTENT_REVIEW
              - name: Flag Reviewer
                id: FLAG_REVIEWER
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
              - name: Book Creator
                id: BOOK_CREATOR
              - name: Course Creator
                id: COURSE_CREATOR
              - name: Report Viewer
                id: REPORT_VIEWER
              - name: Flag Reviewer
                id: 'FLAG_REVIEWER '
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
              - name: Content Creation
                id: CONTENT_CREATION
              - name: Book Reviewer
                id: BOOK_REVIEWER
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
              - name: Org Management
                id: ORG_MANAGEMENT
              - name: Course Admin
                id: COURSE_ADMIN
              - name: Org Moderator
                id: ORG_MODERATOR
              - name: Public
                id: PUBLIC
              - name: Content Reviewer
                id: CONTENT_REVIEWER
              - name: Report Admin
                id: REPORT_ADMIN
            rootOrgId: 0126796199493140480
            prevUsedEmail: ''
            firstName: selfdeclaredev4
            tncAcceptedOn: 2020-11-23T17:47:05.019Z
            allTncAccepted: {}
            phone: ''
            dob: null
            grade: []
            currentLoginTime: null
            userType: TEACHER
            userSubType: null
            status: 1
            lastName: selfdeclaredev4
            tncLatestVersion: v8
            gender: null
            roles:
              - PUBLIC
            prevUsedPhone: ''
            stateValidated: false
            isDeleted: false
            organisations:
              - updatedBy: null
                organisationId: 0126796199493140480
                orgName: Pre-prod Custodian Organization
                addedByName: null
                addedBy: null
                roles:
                  - PUBLIC
                approvedBy: null
                channel: dikshapreprodcustodian
                locationIds:
                  - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                  - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
                updatedDate: null
                userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                approvaldate: null
                isDeleted: false
                hashTagId: 0126796199493140480
                isRejected: null
                locations:
                  - code: 29
                    name: Karnataka
                    id: 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                    type: state
                    parentId: null
                  - code: 2901
                    name: BELAGAVI
                    id: 8250d58d-f1a2-4397-bfd3-b2e688ba7141
                    type: district
                    parentId: 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                position: null
                id: 3157455573689335
                orgjoindate: '2020-11-23 07:02:43:194+0000'
                isApproved: null
                orgLeftDate: null
            provider: null
            countryCode: null
            tncLatestVersionUrl: >-
              https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
            maskedEmail: se*************@yopmail.com
            tempPassword: null
            email: se*************@yopmail.com
            rootOrg:
              dateTime: null
              preferredLanguage: null
              keys:
                encKeys:
                  - 456
                signKeys:
                  - 456
              channel: dikshapreprodcustodian
              approvedBy: null
              description: Pre-prod Custodian Organization
              updatedDate: '2020-08-28 10:12:01:096+0000'
              addressId: null
              orgType: null
              provider: null
              orgCode: null
              locationId: null
              theme: null
              id: 0126796199493140480
              isApproved: null
              communityId: null
              slug: dikshapreprodcustodian
              email: null
              isSSOEnabled: null
              thumbnail: null
              updatedBy: null
              orgName: Pre-prod Custodian Organization
              locationIds:
                - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
              externalId: null
              isRootOrg: true
              rootOrgId: 0126796199493140480
              imgUrl: null
              approvedDate: null
              orgTypeId: null
              homeUrl: null
              isDefault: true
              createdDate: '2019-01-18 09:48:13:428+0000'
              contactDetail: null
              parentOrgId: null
              createdBy: system
              hashTagId: 0126796199493140480
              noOfMembers: null
              status: 1
            profileSummary: null
            phoneVerified: false
            tcUpdatedDate: null
            userLocations:
              - code: 2823
                name: CHITTOOR
                id: b5c35cfc-6c1e-4266-94ef-a425c43c7f4e
                type: district
                parentId: bc75cc99-9205-463e-a722-5326857838f8
              - code: 28
                name: Andhra Pradesh
                id: bc75cc99-9205-463e-a722-5326857838f8
                type: state
                parentId: null
            recoveryPhone: ''
            avatar: null
            userName: selfdeclaredev4
            promptTnC: false
            lastLoginTime: 0
            emailVerified: true
            framework:
              gradeLevel:
                - Class 1
              subject:
                - English
              id:
                - ekstep_ncert_k-12
              medium:
                - English
              board:
                - CBSE
            createdDate: '2020-11-23 07:02:36:155+0000'
            createdBy: null
            location: null
            tncAcceptedVersion: v8
    userapiReadUserV3Result:
      title: ReadUserV3Result
      required:
        - response
      type: object
      properties:
        response:
          $ref: '#/components/schemas/userapiReadUserV3Response'
      example:
        response:
          webPages: []
          tcStatus: null
          maskedPhone: null
          rootOrgName: Pre-prod Custodian Organization
          subject: []
          channel: dikshapreprodcustodian
          language: []
          updatedDate: '2020-11-23 17:47:49:640+0000'
          managedBy: null
          flagsValue: 2
          id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
          recoveryEmail: ''
          identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
          thumbnail: null
          updatedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
          accesscode: null
          registryId: null
          roleList:
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
            - name: Content Curation
              id: CONTENT_CURATION
            - name: Content Creator
              id: CONTENT_CREATOR
            - name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - name: Admin
              id: ADMIN
            - name: Course Mentor
              id: COURSE_MENTOR
            - name: Org Admin
              id: ORG_ADMIN
            - name: Content Review
              id: CONTENT_REVIEW
            - name: Flag Reviewer
              id: FLAG_REVIEWER
            - name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - name: System Administration
              id: SYSTEM_ADMINISTRATION
            - name: Book Creator
              id: BOOK_CREATOR
            - name: Course Creator
              id: COURSE_CREATOR
            - name: Report Viewer
              id: REPORT_VIEWER
            - name: Flag Reviewer
              id: 'FLAG_REVIEWER '
            - name: Membership Management
              id: MEMBERSHIP_MANAGEMENT
            - name: Content Creation
              id: CONTENT_CREATION
            - name: Book Reviewer
              id: BOOK_REVIEWER
            - name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - name: Org Management
              id: ORG_MANAGEMENT
            - name: Course Admin
              id: COURSE_ADMIN
            - name: Org Moderator
              id: ORG_MODERATOR
            - name: Public
              id: PUBLIC
            - name: Content Reviewer
              id: CONTENT_REVIEWER
            - name: Report Admin
              id: REPORT_ADMIN
          rootOrgId: 0126796199493140480
          prevUsedEmail: ''
          firstName: selfdeclaredev4
          tncAcceptedOn: 2020-11-23T17:47:05.019Z
          allTncAccepted: {}
          phone: ''
          dob: null
          grade: []
          currentLoginTime: null
          userType: TEACHER
          userSubType: null
          status: 1
          lastName: selfdeclaredev4
          tncLatestVersion: v8
          gender: null
          roles:
            - PUBLIC
          prevUsedPhone: ''
          stateValidated: false
          isDeleted: false
          organisations:
            - updatedBy: null
              organisationId: 0126796199493140480
              orgName: Pre-prod Custodian Organization
              addedByName: null
              addedBy: null
              roles:
                - PUBLIC
              approvedBy: null
              channel: dikshapreprodcustodian
              locationIds:
                - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
              updatedDate: null
              userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
              approvaldate: null
              isDeleted: false
              hashTagId: 0126796199493140480
              isRejected: null
              locations:
                - code: 29
                  name: Karnataka
                  id: 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                  type: state
                  parentId: null
                - code: 2901
                  name: BELAGAVI
                  id: 8250d58d-f1a2-4397-bfd3-b2e688ba7141
                  type: district
                  parentId: 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
              position: null
              id: 3157455573689335
              orgjoindate: '2020-11-23 07:02:43:194+0000'
              isApproved: null
              orgLeftDate: null
          provider: null
          countryCode: null
          tncLatestVersionUrl: >-
            https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
          maskedEmail: se*************@yopmail.com
          tempPassword: null
          email: se*************@yopmail.com
          rootOrg:
            dateTime: null
            preferredLanguage: null
            keys:
              encKeys:
                - 456
              signKeys:
                - 456
            channel: dikshapreprodcustodian
            approvedBy: null
            description: Pre-prod Custodian Organization
            updatedDate: '2020-08-28 10:12:01:096+0000'
            addressId: null
            orgType: null
            provider: null
            orgCode: null
            locationId: null
            theme: null
            id: 0126796199493140480
            isApproved: null
            communityId: null
            slug: dikshapreprodcustodian
            email: null
            isSSOEnabled: null
            thumbnail: null
            updatedBy: null
            orgName: Pre-prod Custodian Organization
            locationIds:
              - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
              - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
            externalId: null
            isRootOrg: true
            rootOrgId: 0126796199493140480
            imgUrl: null
            approvedDate: null
            orgTypeId: null
            homeUrl: null
            isDefault: true
            createdDate: '2019-01-18 09:48:13:428+0000'
            contactDetail: null
            parentOrgId: null
            createdBy: system
            hashTagId: 0126796199493140480
            noOfMembers: null
            status: 1
          profileSummary: null
          phoneVerified: false
          tcUpdatedDate: null
          userLocations:
            - code: 2823
              name: CHITTOOR
              id: b5c35cfc-6c1e-4266-94ef-a425c43c7f4e
              type: district
              parentId: bc75cc99-9205-463e-a722-5326857838f8
            - code: 28
              name: Andhra Pradesh
              id: bc75cc99-9205-463e-a722-5326857838f8
              type: state
              parentId: null
          recoveryPhone: ''
          avatar: null
          userName: selfdeclaredev4
          promptTnC: false
          lastLoginTime: 0
          emailVerified: true
          framework:
            gradeLevel:
              - Class 1
            subject:
              - English
            id:
              - ekstep_ncert_k-12
            medium:
              - English
            board:
              - CBSE
          createdDate: '2020-11-23 07:02:36:155+0000'
          createdBy: null
          location: null
          tncAcceptedVersion: v8
    userapiReadUserV3Response:
      title: ReadUserV3Response
      required:
        - webPages
        - tcStatus
        - maskedPhone
        - rootOrgName
        - subject
        - channel
        - language
        - updatedDate
        - managedBy
        - flagsValue
        - id
        - recoveryEmail
        - identifier
        - thumbnail
        - updatedBy
        - accesscode
        - registryId
        - roleList
        - rootOrgId
        - prevUsedEmail
        - firstName
        - tncAcceptedOn
        - allTncAccepted
        - phone
        - dob
        - grade
        - currentLoginTime
        - userType
        - userSubType
        - status
        - lastName
        - tncLatestVersion
        - gender
        - roles
        - prevUsedPhone
        - stateValidated
        - isDeleted
        - organisations
        - provider
        - countryCode
        - tncLatestVersionUrl
        - maskedEmail
        - tempPassword
        - email
        - rootOrg
        - profileSummary
        - phoneVerified
        - tcUpdatedDate
        - userLocations
        - recoveryPhone
        - avatar
        - userName
        - promptTnC
        - lastLoginTime
        - emailVerified
        - framework
        - createdDate
        - createdBy
        - location
        - tncAcceptedVersion
      type: object
      properties:
        webPages:
          type: array
          items:
            type: string
          description: ''
        tcStatus:
          type: string
          nullable: true
        maskedPhone:
          type: string
          nullable: true
        rootOrgName:
          type: string
        subject:
          type: array
          items:
            type: string
          description: ''
        channel:
          type: string
        language:
          type: array
          items:
            type: string
          description: ''
        updatedDate:
          type: string
        managedBy:
          type: string
          nullable: true
        flagsValue:
          type: integer
          format: int32
        id:
          type: string
        recoveryEmail:
          type: string
        identifier:
          type: string
        thumbnail:
          type: string
          nullable: true
        updatedBy:
          type: string
        accesscode:
          type: string
          nullable: true
        registryId:
          type: string
          nullable: true
        roleList:
          type: array
          items:
            $ref: '#/components/schemas/userapiRoleList'
          description: ''
        rootOrgId:
          type: string
        prevUsedEmail:
          type: string
        firstName:
          type: string
        tncAcceptedOn:
          type: string
        allTncAccepted:
          type: object
        phone:
          type: string
        dob:
          type: string
          nullable: true
        grade:
          type: array
          items:
            type: string
          description: ''
        currentLoginTime:
          type: string
          nullable: true
        userType:
          type: string
        userSubType:
          type: string
        status:
          type: integer
          format: int32
        lastName:
          type: string
        tncLatestVersion:
          type: string
        gender:
          type: string
          nullable: true
        roles:
          type: array
          items:
            type: string
          description: ''
        prevUsedPhone:
          type: string
        stateValidated:
          type: boolean
        isDeleted:
          type: boolean
        organisations:
          type: array
          items:
            $ref: '#/components/schemas/userapiOrganisation3'
          description: ''
        provider:
          type: string
          nullable: true
        countryCode:
          type: string
          nullable: true
        tncLatestVersionUrl:
          type: string
        maskedEmail:
          type: string
        tempPassword:
          type: string
          nullable: true
        email:
          type: string
        rootOrg:
          $ref: '#/components/schemas/userapiRootOrg'
        profileSummary:
          type: string
          nullable: true
        phoneVerified:
          type: boolean
        tcUpdatedDate:
          type: string
          nullable: true
        userLocations:
          type: array
          items:
            $ref: '#/components/schemas/userapiUserLocation'
          description: ''
        recoveryPhone:
          type: string
        avatar:
          type: string
          nullable: true
        userName:
          type: string
        promptTnC:
          type: boolean
        lastLoginTime:
          type: integer
          format: int32
        emailVerified:
          type: boolean
        framework:
          $ref: '#/components/schemas/userapiFramework'
        createdDate:
          type: string
        createdBy:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        tncAcceptedVersion:
          type: string
      example:
        webPages: []
        tcStatus: null
        maskedPhone: null
        rootOrgName: Pre-prod Custodian Organization
        subject: []
        channel: dikshapreprodcustodian
        language: []
        updatedDate: '2020-11-23 17:47:49:640+0000'
        managedBy: null
        flagsValue: 2
        id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        recoveryEmail: ''
        identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        thumbnail: null
        updatedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        accesscode: null
        registryId: null
        roleList:
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
          - name: Content Curation
            id: CONTENT_CURATION
          - name: Content Creator
            id: CONTENT_CREATOR
          - name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - name: Admin
            id: ADMIN
          - name: Course Mentor
            id: COURSE_MENTOR
          - name: Org Admin
            id: ORG_ADMIN
          - name: Content Review
            id: CONTENT_REVIEW
          - name: Flag Reviewer
            id: FLAG_REVIEWER
          - name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - name: System Administration
            id: SYSTEM_ADMINISTRATION
          - name: Book Creator
            id: BOOK_CREATOR
          - name: Course Creator
            id: COURSE_CREATOR
          - name: Report Viewer
            id: REPORT_VIEWER
          - name: Flag Reviewer
            id: 'FLAG_REVIEWER '
          - name: Membership Management
            id: MEMBERSHIP_MANAGEMENT
          - name: Content Creation
            id: CONTENT_CREATION
          - name: Book Reviewer
            id: BOOK_REVIEWER
          - name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - name: Org Management
            id: ORG_MANAGEMENT
          - name: Course Admin
            id: COURSE_ADMIN
          - name: Org Moderator
            id: ORG_MODERATOR
          - name: Public
            id: PUBLIC
          - name: Content Reviewer
            id: CONTENT_REVIEWER
          - name: Report Admin
            id: REPORT_ADMIN
        rootOrgId: 0126796199493140480
        prevUsedEmail: ''
        firstName: selfdeclaredev4
        tncAcceptedOn: 2020-11-23T17:47:05.019Z
        allTncAccepted: {}
        phone: ''
        dob: null
        grade: []
        currentLoginTime: null
        userType: TEACHER
        userSubType: null
        status: 1
        lastName: selfdeclaredev4
        tncLatestVersion: v8
        gender: null
        roles:
          - PUBLIC
        prevUsedPhone: ''
        stateValidated: false
        isDeleted: false
        organisations:
          - updatedBy: null
            organisationId: 0126796199493140480
            orgName: Pre-prod Custodian Organization
            addedByName: null
            addedBy: null
            roles:
              - PUBLIC
            approvedBy: null
            channel: dikshapreprodcustodian
            locationIds:
              - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
              - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
            updatedDate: null
            userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            approvaldate: null
            isDeleted: false
            hashTagId: 0126796199493140480
            isRejected: null
            locations:
              - code: 29
                name: Karnataka
                id: 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                type: state
                parentId: null
              - code: 2901
                name: BELAGAVI
                id: 8250d58d-f1a2-4397-bfd3-b2e688ba7141
                type: district
                parentId: 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
            position: null
            id: 3157455573689335
            orgjoindate: '2020-11-23 07:02:43:194+0000'
            isApproved: null
            orgLeftDate: null
        provider: null
        countryCode: null
        tncLatestVersionUrl: >-
          https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
        maskedEmail: se*************@yopmail.com
        tempPassword: null
        email: se*************@yopmail.com
        rootOrg:
          dateTime: null
          preferredLanguage: null
          keys:
            encKeys:
              - 456
            signKeys:
              - 456
          channel: dikshapreprodcustodian
          approvedBy: null
          description: Pre-prod Custodian Organization
          updatedDate: '2020-08-28 10:12:01:096+0000'
          addressId: null
          orgType: null
          provider: null
          orgCode: null
          locationId: null
          theme: null
          id: 0126796199493140480
          isApproved: null
          communityId: null
          slug: dikshapreprodcustodian
          email: null
          isSSOEnabled: null
          thumbnail: null
          updatedBy: null
          orgName: Pre-prod Custodian Organization
          locationIds:
            - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
            - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
          externalId: null
          isRootOrg: true
          rootOrgId: 0126796199493140480
          imgUrl: null
          approvedDate: null
          orgTypeId: null
          homeUrl: null
          isDefault: true
          createdDate: '2019-01-18 09:48:13:428+0000'
          contactDetail: null
          parentOrgId: null
          createdBy: system
          hashTagId: 0126796199493140480
          noOfMembers: null
          status: 1
        profileSummary: null
        phoneVerified: false
        tcUpdatedDate: null
        userLocations:
          - code: 2823
            name: CHITTOOR
            id: b5c35cfc-6c1e-4266-94ef-a425c43c7f4e
            type: district
            parentId: bc75cc99-9205-463e-a722-5326857838f8
          - code: 28
            name: Andhra Pradesh
            id: bc75cc99-9205-463e-a722-5326857838f8
            type: state
            parentId: null
        recoveryPhone: ''
        avatar: null
        userName: selfdeclaredev4
        promptTnC: false
        lastLoginTime: 0
        emailVerified: true
        framework:
          gradeLevel:
            - Class 1
          subject:
            - English
          id:
            - ekstep_ncert_k-12
          medium:
            - English
          board:
            - CBSE
        createdDate: '2020-11-23 07:02:36:155+0000'
        createdBy: null
        location: null
        tncAcceptedVersion: v8
    userapiRoleList:
      title: RoleList
      required:
        - name
        - id
      type: object
      properties:
        name:
          type: string
        id:
          type: string
      example:
        name: Content Curation
        id: CONTENT_CURATION
    userapiOrganisation3:
      title: Organisation3
      required:
        - updatedBy
        - organisationId
        - orgName
        - addedByName
        - addedBy
        - roles
        - approvedBy
        - channel
        - locationIds
        - updatedDate
        - userId
        - approvaldate
        - isDeleted
        - hashTagId
        - isRejected
        - locations
        - position
        - id
        - orgjoindate
        - isApproved
        - orgLeftDate
      type: object
      properties:
        updatedBy:
          type: string
          nullable: true
        organisationId:
          type: string
        orgName:
          type: string
        addedByName:
          type: string
          nullable: true
        addedBy:
          type: string
          nullable: true
        roles:
          type: array
          items:
            type: string
          description: ''
        approvedBy:
          type: string
          nullable: true
        channel:
          type: string
        locationIds:
          type: array
          items:
            type: string
          description: ''
        updatedDate:
          type: string
          nullable: true
        userId:
          type: string
        approvaldate:
          type: string
          nullable: true
        isDeleted:
          type: boolean
        hashTagId:
          type: string
        isRejected:
          type: string
          nullable: true
        locations:
          type: array
          items:
            $ref: '#/components/schemas/userapiLocation'
          description: ''
        position:
          type: string
          nullable: true
        id:
          type: string
        orgjoindate:
          type: string
        isApproved:
          type: string
          nullable: true
        orgLeftDate:
          type: string
          nullable: true
      example:
        updatedBy: null
        organisationId: 0126796199493140480
        orgName: Pre-prod Custodian Organization
        addedByName: null
        addedBy: null
        roles:
          - PUBLIC
        approvedBy: null
        channel: dikshapreprodcustodian
        locationIds:
          - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
          - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
        updatedDate: null
        userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        approvaldate: null
        isDeleted: false
        hashTagId: 0126796199493140480
        isRejected: null
        locations:
          - code: 29
            name: Karnataka
            id: 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
            type: state
            parentId: null
          - code: 2901
            name: BELAGAVI
            id: 8250d58d-f1a2-4397-bfd3-b2e688ba7141
            type: district
            parentId: 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
        position: null
        id: 3157455573689335
        orgjoindate: '2020-11-23 07:02:43:194+0000'
        isApproved: null
        orgLeftDate: null
    userapiLocation:
      title: Location
      required:
        - code
        - name
        - id
        - type
        - parentId
      type: object
      properties:
        code:
          type: string
        name:
          type: string
        id:
          type: string
        type:
          type: string
        parentId:
          type: string
          nullable: true
      example:
        code: 29
        name: Karnataka
        id: 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
        type: state
        parentId: null
    userapiUserLocation:
      title: UserLocation
      required:
        - code
        - name
        - id
        - type
        - parentId
      type: object
      properties:
        code:
          type: string
        name:
          type: string
        id:
          type: string
        type:
          type: string
        parentId:
          type: string
          nullable: true
      example:
        code: 2823
        name: CHITTOOR
        id: b5c35cfc-6c1e-4266-94ef-a425c43c7f4e
        type: district
        parentId: bc75cc99-9205-463e-a722-5326857838f8
    userapiGet_User_By_IdType_As_Username_With_Success_Response:
      title: Get_User_By_IdType_As_Username_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: >-
            #/components/schemas/userapiGetUserByIdTypeAsUsernameWithSuccessResponse
      example:
        id: api.user.get.userName
        ver: v1
        ts: '2020-11-23 16:31:29:317+0000'
        params:
          resmsgid: null
          msgid: 76a967d4-74ac-4478-b3ed-e917c3ce3ee8
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response:
            webPages: []
            tcStatus: null
            maskedPhone: null
            rootOrgName: Pre-prod Custodian Organization
            subject: []
            channel: dikshapreprodcustodian
            language: []
            updatedDate: null
            managedBy: null
            flagsValue: 2
            id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            recoveryEmail: ''
            identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            thumbnail: null
            updatedBy: null
            accesscode: null
            locationIds: []
            registryId: null
            rootOrgId: 0126796199493140480
            prevUsedEmail: ''
            firstName: selfdeclaredev4
            tncAcceptedOn: null
            allTncAccepted: {}
            phone: ''
            dob: null
            grade: []
            currentLoginTime: null
            userType: TEACHER
            userSubType: null
            status: 1
            lastName: selfdeclaredev4
            tncLatestVersion: v8
            gender: null
            roles:
              - PUBLIC
            prevUsedPhone: ''
            stateValidated: false
            isDeleted: false
            organisations:
              - updatedBy: null
                organisationId: 0126796199493140480
                orgName: Pre-prod Custodian Organization
                addedByName: null
                addedBy: null
                roles:
                  - PUBLIC
                approvedBy: null
                updatedDate: null
                userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                approvaldate: null
                isDeleted: false
                hashTagId: 0126796199493140480
                isRejected: null
                position: null
                id: 3157455573689335
                orgjoindate: '2020-11-23 07:02:43:194+0000'
                isApproved: null
                orgLeftDate: null
            provider: null
            countryCode: null
            tncLatestVersionUrl: >-
              https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
            maskedEmail: se*************@yopmail.com
            tempPassword: null
            email: se*************@yopmail.com
            rootOrg:
              identifier: 0126796199493140480
              orgName: Pre-prod Custodian Organization
              keys:
                signKeys:
                  - 456
                encKeys:
                  - 456
              channel: dikshapreprodcustodian
              locationIds:
                - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
                - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
              description: Pre-prod Custodian Organization
              isRootOrg: true
              updatedDate: '2020-08-28 10:12:01:096+0000'
              rootOrgId: 0126796199493140480
              isDefault: true
              createdDate: '2019-01-18 09:48:13:428+0000'
              createdBy: system
              hashTagId: 0126796199493140480
              id: 0126796199493140480
              slug: dikshapreprodcustodian
              status: 1
            profileSummary: null
            phoneVerified: false
            tcUpdatedDate: null
            recoveryPhone: ''
            avatar: null
            userName: selfdeclaredev4
            promptTnC: true
            lastLoginTime: null
            emailVerified: true
            framework: {}
            createdDate: '2020-11-23 07:02:36:155+0000'
            createdBy: null
            location: null
            tncAcceptedVersion: null
    userapiGetUserByIdTypeAsUsernameWithSuccessResponse:
      title: GetUserByIdTypeAsUsernameWithSuccessResponse
      required:
        - response
      type: object
      properties:
        response:
          $ref: '#/components/schemas/userapiGetUserByIdTypeAsUsernameResponse'
      example:
        response:
          webPages: []
          tcStatus: null
          maskedPhone: null
          rootOrgName: Pre-prod Custodian Organization
          subject: []
          channel: dikshapreprodcustodian
          language: []
          updatedDate: null
          managedBy: null
          flagsValue: 2
          id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
          recoveryEmail: ''
          identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
          thumbnail: null
          updatedBy: null
          accesscode: null
          locationIds: []
          registryId: null
          rootOrgId: 0126796199493140480
          prevUsedEmail: ''
          firstName: selfdeclaredev4
          tncAcceptedOn: null
          allTncAccepted: {}
          phone: ''
          dob: null
          grade: []
          currentLoginTime: null
          userType: TEACHER
          userSubType: null
          status: 1
          lastName: selfdeclaredev4
          tncLatestVersion: v8
          gender: null
          roles:
            - PUBLIC
          prevUsedPhone: ''
          stateValidated: false
          isDeleted: false
          organisations:
            - updatedBy: null
              organisationId: 0126796199493140480
              orgName: Pre-prod Custodian Organization
              addedByName: null
              addedBy: null
              roles:
                - PUBLIC
              approvedBy: null
              updatedDate: null
              userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
              approvaldate: null
              isDeleted: false
              hashTagId: 0126796199493140480
              isRejected: null
              position: null
              id: 3157455573689335
              orgjoindate: '2020-11-23 07:02:43:194+0000'
              isApproved: null
              orgLeftDate: null
          provider: null
          countryCode: null
          tncLatestVersionUrl: >-
            https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
          maskedEmail: se*************@yopmail.com
          tempPassword: null
          email: se*************@yopmail.com
          rootOrg:
            identifier: 0126796199493140480
            orgName: Pre-prod Custodian Organization
            keys:
              signKeys:
                - 456
              encKeys:
                - 456
            channel: dikshapreprodcustodian
            locationIds:
              - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
              - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
            description: Pre-prod Custodian Organization
            isRootOrg: true
            updatedDate: '2020-08-28 10:12:01:096+0000'
            rootOrgId: 0126796199493140480
            isDefault: true
            createdDate: '2019-01-18 09:48:13:428+0000'
            createdBy: system
            hashTagId: 0126796199493140480
            id: 0126796199493140480
            slug: dikshapreprodcustodian
            status: 1
          profileSummary: null
          phoneVerified: false
          tcUpdatedDate: null
          recoveryPhone: ''
          avatar: null
          userName: selfdeclaredev4
          promptTnC: true
          lastLoginTime: null
          emailVerified: true
          framework: {}
          createdDate: '2020-11-23 07:02:36:155+0000'
          createdBy: null
          location: null
          tncAcceptedVersion: null
    userapiGetUserByIdTypeAsUsernameResponse:
      title: GetUserByIdTypeAsUsernameResponse
      required:
        - webPages
        - tcStatus
        - maskedPhone
        - rootOrgName
        - subject
        - channel
        - language
        - updatedDate
        - managedBy
        - flagsValue
        - id
        - recoveryEmail
        - identifier
        - thumbnail
        - updatedBy
        - accesscode
        - locationIds
        - registryId
        - rootOrgId
        - prevUsedEmail
        - firstName
        - tncAcceptedOn
        - allTncAccepted
        - phone
        - dob
        - grade
        - currentLoginTime
        - userType
        - userSubType
        - status
        - lastName
        - tncLatestVersion
        - gender
        - roles
        - prevUsedPhone
        - stateValidated
        - isDeleted
        - organisations
        - provider
        - countryCode
        - tncLatestVersionUrl
        - maskedEmail
        - tempPassword
        - email
        - rootOrg
        - profileSummary
        - phoneVerified
        - tcUpdatedDate
        - recoveryPhone
        - avatar
        - userName
        - promptTnC
        - lastLoginTime
        - emailVerified
        - framework
        - createdDate
        - createdBy
        - location
        - tncAcceptedVersion
      type: object
      properties:
        webPages:
          type: array
          items:
            type: string
          description: ''
        tcStatus:
          type: string
          nullable: true
        maskedPhone:
          type: string
          nullable: true
        rootOrgName:
          type: string
        subject:
          type: array
          items:
            type: string
          description: ''
        channel:
          type: string
        language:
          type: array
          items:
            type: string
          description: ''
        updatedDate:
          type: string
          nullable: true
        managedBy:
          type: string
          nullable: true
        flagsValue:
          type: integer
          format: int32
        id:
          type: string
        recoveryEmail:
          type: string
        identifier:
          type: string
        thumbnail:
          type: string
          nullable: true
        updatedBy:
          type: string
          nullable: true
        accesscode:
          type: string
          nullable: true
        locationIds:
          type: array
          items:
            type: string
          description: ''
        registryId:
          type: string
          nullable: true
        rootOrgId:
          type: string
        prevUsedEmail:
          type: string
        firstName:
          type: string
        tncAcceptedOn:
          type: string
          nullable: true
        allTncAccepted:
          type: object
        phone:
          type: string
        dob:
          type: string
          nullable: true
        grade:
          type: array
          items:
            type: string
          description: ''
        currentLoginTime:
          type: string
          nullable: true
        userType:
          type: string
        userSubType:
          type: string
        status:
          type: integer
          format: int32
        lastName:
          type: string
        tncLatestVersion:
          type: string
        gender:
          type: string
          nullable: true
        roles:
          type: array
          items:
            type: string
          description: ''
        prevUsedPhone:
          type: string
        stateValidated:
          type: boolean
        isDeleted:
          type: boolean
        organisations:
          type: array
          items:
            $ref: '#/components/schemas/userapiOrganisation'
          description: ''
        provider:
          type: string
          nullable: true
        countryCode:
          type: string
          nullable: true
        tncLatestVersionUrl:
          type: string
        maskedEmail:
          type: string
        tempPassword:
          type: string
          nullable: true
        email:
          type: string
        rootOrg:
          $ref: '#/components/schemas/userapiRootOrg3'
        profileSummary:
          type: string
          nullable: true
        phoneVerified:
          type: boolean
        tcUpdatedDate:
          type: string
          nullable: true
        recoveryPhone:
          type: string
        avatar:
          type: string
          nullable: true
        userName:
          type: string
        promptTnC:
          type: boolean
        lastLoginTime:
          type: string
          nullable: true
        emailVerified:
          type: boolean
        framework:
          type: object
        createdDate:
          type: string
        createdBy:
          type: string
          nullable: true
        location:
          type: string
          nullable: true
        tncAcceptedVersion:
          type: string
          nullable: true
      example:
        webPages: []
        tcStatus: null
        maskedPhone: null
        rootOrgName: Pre-prod Custodian Organization
        subject: []
        channel: dikshapreprodcustodian
        language: []
        updatedDate: null
        managedBy: null
        flagsValue: 2
        id: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        recoveryEmail: ''
        identifier: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        thumbnail: null
        updatedBy: null
        accesscode: null
        locationIds: []
        registryId: null
        rootOrgId: 0126796199493140480
        prevUsedEmail: ''
        firstName: selfdeclaredev4
        tncAcceptedOn: null
        allTncAccepted: {}
        phone: ''
        dob: null
        grade: []
        currentLoginTime: null
        userType: TEACHER
        userSubType: null
        status: 1
        lastName: selfdeclaredev4
        tncLatestVersion: v8
        gender: null
        roles:
          - PUBLIC
        prevUsedPhone: ''
        stateValidated: false
        isDeleted: false
        organisations:
          - updatedBy: null
            organisationId: 0126796199493140480
            orgName: Pre-prod Custodian Organization
            addedByName: null
            addedBy: null
            roles:
              - PUBLIC
            approvedBy: null
            updatedDate: null
            userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            approvaldate: null
            isDeleted: false
            hashTagId: 0126796199493140480
            isRejected: null
            position: null
            id: 3157455573689335
            orgjoindate: '2020-11-23 07:02:43:194+0000'
            isApproved: null
            orgLeftDate: null
        provider: null
        countryCode: null
        tncLatestVersionUrl: >-
          https://preprodall.blob.core.windows.net/termsandcond/terms-and-conditions-v8.html
        maskedEmail: se*************@yopmail.com
        tempPassword: null
        email: se*************@yopmail.com
        rootOrg:
          identifier: 0126796199493140480
          orgName: Pre-prod Custodian Organization
          keys:
            signKeys:
              - 456
            encKeys:
              - 456
          channel: dikshapreprodcustodian
          locationIds:
            - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
            - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
          description: Pre-prod Custodian Organization
          isRootOrg: true
          updatedDate: '2020-08-28 10:12:01:096+0000'
          rootOrgId: 0126796199493140480
          isDefault: true
          createdDate: '2019-01-18 09:48:13:428+0000'
          createdBy: system
          hashTagId: 0126796199493140480
          id: 0126796199493140480
          slug: dikshapreprodcustodian
          status: 1
        profileSummary: null
        phoneVerified: false
        tcUpdatedDate: null
        recoveryPhone: ''
        avatar: null
        userName: selfdeclaredev4
        promptTnC: true
        lastLoginTime: null
        emailVerified: true
        framework: {}
        createdDate: '2020-11-23 07:02:36:155+0000'
        createdBy: null
        location: null
        tncAcceptedVersion: null
    userapiRootOrg3:
      title: RootOrg3
      required:
        - identifier
        - orgName
        - keys
        - channel
        - locationIds
        - description
        - isRootOrg
        - updatedDate
        - rootOrgId
        - isDefault
        - createdDate
        - createdBy
        - hashTagId
        - id
        - slug
        - status
      type: object
      properties:
        identifier:
          type: string
        orgName:
          type: string
        keys:
          $ref: '#/components/schemas/userapiKeys'
        channel:
          type: string
        locationIds:
          type: array
          items:
            type: string
          description: ''
        description:
          type: string
        isRootOrg:
          type: boolean
        updatedDate:
          type: string
        rootOrgId:
          type: string
        isDefault:
          type: boolean
        createdDate:
          type: string
        createdBy:
          type: string
        hashTagId:
          type: string
        id:
          type: string
        slug:
          type: string
        status:
          type: integer
          format: int32
      example:
        identifier: 0126796199493140480
        orgName: Pre-prod Custodian Organization
        keys:
          signKeys:
            - 456
          encKeys:
            - 456
        channel: dikshapreprodcustodian
        locationIds:
          - 027f81d8-0a2c-4fc6-96ac-59fe4cea3abf
          - 8250d58d-f1a2-4397-bfd3-b2e688ba7141
        description: Pre-prod Custodian Organization
        isRootOrg: true
        updatedDate: '2020-08-28 10:12:01:096+0000'
        rootOrgId: 0126796199493140480
        isDefault: true
        createdDate: '2019-01-18 09:48:13:428+0000'
        createdBy: system
        hashTagId: 0126796199493140480
        id: 0126796199493140480
        slug: dikshapreprodcustodian
        status: 1
    userapiGet_User_By_LoginId_Request:
      title: Get_User_By_LoginId_Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userapiUserLoginIdRequest'
      example:
        request:
          loginId: selfdeclaredev4
    userapiUserLoginIdRequest:
      title: UserLoginIdRequest
      required:
        - loginId
      type: object
      properties:
        loginId:
          type: string
          description: >-
            - Represents the user's login ID. If the user is created by
            providing the username and channel, then the login ID would be
            username@channel

            - If the user is created without channel then loginID would be same
            as username@{sunbird_default_channel}.
      example:
        loginId: selfdeclaredev4
    userapiGet_Managed_Users_Sucees_Response:
      title: Get_Managed_Users_Sucees_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiGetManagedUsersResult'
      example:
        id: api.user.managed
        ver: v1
        ts: '2020-11-24 04:57:12:732+0000'
        params:
          resmsgid: null
          msgid: 8415ce74-7f6b-452f-99a5-79ba21ad6320
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response:
            count: 1
            content:
              - identifier: e8b67b42-52be-4f0b-a74e-d9435e0842fe
                rootOrgName: null
                phoneVerified: false
                roles:
                  - PUBLIC
                channel: dikshapreprodcustodian
                locationIds:
                  - bc75cc99-9205-463e-a722-5326857838f8
                  - b5c35cfc-6c1e-4266-94ef-a425c43c7f4e
                stateValidated: false
                userName: mua1_af93
                rootOrgId: 0126796199493140480
                firstName: MUA1
                emailVerified: false
                framework:
                  gradeLevel:
                    - Class 1
                  subject:
                    - English
                  medium:
                    - English
                  id:
                    - ekstep_ncert_k-12
                  board:
                    - CBSE
                createdDate: '2020-11-24 04:56:58:907+0000'
                isDeleted: false
                organisations:
                  - orgJoinDate: '2020-11-24 04:56:59:006+0000'
                    organisationId: 0126796199493140480
                    isDeleted: false
                    hashTagId: 0126796199493140480
                    roles:
                      - PUBLIC
                    id: 01315794795101388811
                    userId: e8b67b42-52be-4f0b-a74e-d9435e0842fe
                managedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                createdBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
                phone: ''
                countryCode: 91
                flagsValue: 0
                id: e8b67b42-52be-4f0b-a74e-d9435e0842fe
                userType: TEACHER
                userSubType: null
                email: ''
                status: 1
    userapiGetManagedUsersResult:
      title: GetManagedUsersResult
      required:
        - response
      type: object
      properties:
        response:
          $ref: '#/components/schemas/userapiGetManagedUsersResponse'
      example:
        response:
          count: 1
          content:
            - identifier: e8b67b42-52be-4f0b-a74e-d9435e0842fe
              rootOrgName: null
              phoneVerified: false
              roles:
                - PUBLIC
              channel: dikshapreprodcustodian
              locationIds:
                - bc75cc99-9205-463e-a722-5326857838f8
                - b5c35cfc-6c1e-4266-94ef-a425c43c7f4e
              stateValidated: false
              userName: mua1_af93
              rootOrgId: 0126796199493140480
              firstName: MUA1
              emailVerified: false
              framework:
                gradeLevel:
                  - Class 1
                subject:
                  - English
                medium:
                  - English
                id:
                  - ekstep_ncert_k-12
                board:
                  - CBSE
              createdDate: '2020-11-24 04:56:58:907+0000'
              isDeleted: false
              organisations:
                - orgJoinDate: '2020-11-24 04:56:59:006+0000'
                  organisationId: 0126796199493140480
                  isDeleted: false
                  hashTagId: 0126796199493140480
                  roles:
                    - PUBLIC
                  id: 01315794795101388811
                  userId: e8b67b42-52be-4f0b-a74e-d9435e0842fe
              managedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
              createdBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
              phone: ''
              countryCode: 91
              flagsValue: 0
              id: e8b67b42-52be-4f0b-a74e-d9435e0842fe
              userType: TEACHER
              userSubType: null
              email: ''
              status: 1
    userapiGetManagedUsersResponse:
      title: GetManagedUsersResponse
      required:
        - count
        - content
      type: object
      properties:
        count:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/userapiContent1'
          description: ''
      example:
        count: 1
        content:
          - identifier: e8b67b42-52be-4f0b-a74e-d9435e0842fe
            rootOrgName: null
            phoneVerified: false
            roles:
              - PUBLIC
            channel: dikshapreprodcustodian
            locationIds:
              - bc75cc99-9205-463e-a722-5326857838f8
              - b5c35cfc-6c1e-4266-94ef-a425c43c7f4e
            stateValidated: false
            userName: mua1_af93
            rootOrgId: 0126796199493140480
            firstName: MUA1
            emailVerified: false
            framework:
              gradeLevel:
                - Class 1
              subject:
                - English
              medium:
                - English
              id:
                - ekstep_ncert_k-12
              board:
                - CBSE
            createdDate: '2020-11-24 04:56:58:907+0000'
            isDeleted: false
            organisations:
              - orgJoinDate: '2020-11-24 04:56:59:006+0000'
                organisationId: 0126796199493140480
                isDeleted: false
                hashTagId: 0126796199493140480
                roles:
                  - PUBLIC
                id: 01315794795101388811
                userId: e8b67b42-52be-4f0b-a74e-d9435e0842fe
            managedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            createdBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            phone: ''
            countryCode: 91
            flagsValue: 0
            id: e8b67b42-52be-4f0b-a74e-d9435e0842fe
            userType: TEACHER
            userSubType: null
            email: ''
            status: 1
    userapiContent1:
      title: Content1
      required:
        - identifier
        - rootOrgName
        - phoneVerified
        - roles
        - channel
        - locationIds
        - stateValidated
        - userName
        - rootOrgId
        - firstName
        - emailVerified
        - framework
        - createdDate
        - isDeleted
        - organisations
        - managedBy
        - createdBy
        - phone
        - countryCode
        - flagsValue
        - id
        - userType
        - userSubType
        - email
        - status
      type: object
      properties:
        identifier:
          type: string
        rootOrgName:
          type: string
          nullable: true
        phoneVerified:
          type: boolean
        roles:
          type: array
          items:
            type: string
          description: ''
        channel:
          type: string
        locationIds:
          type: array
          items:
            type: string
          description: ''
        stateValidated:
          type: boolean
        userName:
          type: string
        rootOrgId:
          type: string
        firstName:
          type: string
        emailVerified:
          type: boolean
        framework:
          $ref: '#/components/schemas/userapiFramework'
        createdDate:
          type: string
        isDeleted:
          type: boolean
        organisations:
          type: array
          items:
            $ref: '#/components/schemas/userapiOrganisation5'
          description: ''
        managedBy:
          type: string
        createdBy:
          type: string
        phone:
          type: string
        countryCode:
          type: string
        flagsValue:
          type: integer
          format: int32
        id:
          type: string
        userType:
          type: string
        userSubType:
          type: string
        email:
          type: string
        status:
          type: integer
          format: int32
      example:
        identifier: e8b67b42-52be-4f0b-a74e-d9435e0842fe
        rootOrgName: null
        phoneVerified: false
        roles:
          - PUBLIC
        channel: dikshapreprodcustodian
        locationIds:
          - bc75cc99-9205-463e-a722-5326857838f8
          - b5c35cfc-6c1e-4266-94ef-a425c43c7f4e
        stateValidated: false
        userName: mua1_af93
        rootOrgId: 0126796199493140480
        firstName: MUA1
        emailVerified: false
        framework:
          gradeLevel:
            - Class 1
          subject:
            - English
          medium:
            - English
          id:
            - ekstep_ncert_k-12
          board:
            - CBSE
        createdDate: '2020-11-24 04:56:58:907+0000'
        isDeleted: false
        organisations:
          - orgJoinDate: '2020-11-24 04:56:59:006+0000'
            organisationId: 0126796199493140480
            isDeleted: false
            hashTagId: 0126796199493140480
            roles:
              - PUBLIC
            id: 01315794795101388811
            userId: e8b67b42-52be-4f0b-a74e-d9435e0842fe
        managedBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        createdBy: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        phone: ''
        countryCode: 91
        flagsValue: 0
        id: e8b67b42-52be-4f0b-a74e-d9435e0842fe
        userType: TEACHER
        userSubType: null
        email: ''
        status: 1
    userapiOrganisation5:
      title: Organisation5
      required:
        - orgJoinDate
        - organisationId
        - isDeleted
        - hashTagId
        - roles
        - id
        - userId
      type: object
      properties:
        orgJoinDate:
          type: string
        organisationId:
          type: string
        isDeleted:
          type: boolean
        hashTagId:
          type: string
        roles:
          type: array
          items:
            type: string
          description: ''
        id:
          type: string
        userId:
          type: string
      example:
        orgJoinDate: '2020-11-24 04:56:59:006+0000'
        organisationId: 0126796199493140480
        isDeleted: false
        hashTagId: 0126796199493140480
        roles:
          - PUBLIC
        id: 01315794795101388811
        userId: e8b67b42-52be-4f0b-a74e-d9435e0842fe
    userapiUpdate_User_Declarations_Request:
      title: Update_User_Declarations_Request
      required:
        - request
      type: object
      properties:
        params:
          type: object
        request:
          $ref: '#/components/schemas/userapiUserDeclarationsUpdateReq'
      example:
        params: {}
        request:
          declarations:
            - operation: add
              userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
              orgId: 01297544481264435214
              persona: teacher
              info:
                declared-school-name: mgm21
                declared-email: abc@gmail.com
                declared-phone: 99999999
                declared-school-udise-code: 190923
    userapiUserDeclarationsUpdateReq:
      title: UserDeclarationsUpdateReq
      required:
        - declarations
      type: object
      properties:
        declarations:
          type: array
          items:
            $ref: '#/components/schemas/userapiDeclaration'
          description: ''
      example:
        declarations:
          - operation: add
            userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
            orgId: 01297544481264435214
            persona: teacher
            info:
              declared-school-name: mgm21
              declared-email: abc@gmail.com
              declared-phone: 99999999
              declared-school-udise-code: 190923
    userapiDeclaration:
      title: Declaration
      required:
        - operation
        - userId
        - orgId
        - persona
        - info
      type: object
      properties:
        operation:
          type: string
        userId:
          type: string
        orgId:
          type: string
        persona:
          type: string
        info:
          $ref: '#/components/schemas/userapiInfo'
      example:
        operation: add
        userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
        orgId: 01297544481264435214
        persona: teacher
        info:
          declared-school-name: mgm21
          declared-email: abc@gmail.com
          declared-phone: 99999999
          declared-school-udise-code: 190923
    userapiInfo:
      title: Info
      required:
        - declared-school-name
        - declared-email
        - declared-phone
        - declared-school-udise-code
      type: object
      properties:
        declared-school-name:
          type: string
        declared-email:
          type: string
        declared-phone:
          type: string
        declared-school-udise-code:
          type: string
      example:
        declared-school-name: mgm21
        declared-email: abc@gmail.com
        declared-phone: 99999999
        declared-school-udise-code: 190923
    userapiUpdate_User_Declarations_With_Success_Response:
      title: Update_User_Declarations_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiSuccessResult'
      example:
        id: api.user.declarations
        ver: v1
        ts: '2020-11-24 10:42:19:886+0000'
        params:
          resmsgid: null
          msgid: d072daa8-8518-4f86-9f4d-dfc9e9b1dcd1
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
    userapiUser_Migrate_Request:
      title: User_Migrate_Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userapiMigrateUserReq'
      example:
        request:
          userId: 0e59b33f-d829-459f-a043-03ea726bf91c
          channel: No Data
          action: accept
          feedId: 2e59b34f-d834-989z-a043-34ea846bf91d
          userExtId: randomUserId
    userapiMigrateUserReq:
      title: MigrateUserReq
      required:
        - userId
        - channel
        - action
        - feedId
        - userExtId
      type: object
      properties:
        userId:
          type: string
          description: >-
            The identifier for the user that needs to be migrated to a new
            tenant.
        action:
          type: string
          description: >-
            Reflects the user action. It can be either accept or reject. Accept
            reflects the intention of the user to be migrated. Reject reflects
            intention of the user to reject the migration offer.
        feedId:
          type: string
          description: >-
            Pass the feed identifier using which the user is migrated. Empty
            feed identifiers are accepted, but this may result in the same feed
            shown twice.
        channel:
          type: string
          description: The channel to which the user wants to migrate
        userExtId:
          type: string
          description: >-
            The user's external identifier. This value should match the value
            provided at the time of bulk user upload.
      example:
        userId: 0e59b33f-d829-459f-a043-03ea726bf91c
        channel: No Data
        action: accept
        feedId: 2e59b34f-d834-989z-a043-34ea846bf91d
        userExtId: randomUserId
    userapiUser_Merge_Request:
      title: User_Merge_Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userapiMergeUserReq'
      example:
        request:
          fromAccountId: 9760d936-5fc9-47a7-a3b7-56fdebc7cad5
          toAccountId: c8c452e6-7f1c-4480-9299-6bdf2ed4e4b8
    userapiMergeUserReq:
      title: MergeUserReq
      required:
        - fromAccountId
        - toAccountId
      type: object
      properties:
        fromAccountId:
          type: string
          description: The identifier for the custodian-user
        toAccountId:
          type: string
          description: The identifier for the tenant-user.
    userapiExternalId:
      title: ExternalId
      required:
        - id
        - idType
        - provider
      type: object
      properties:
        id:
          type: string
        idType:
          type: string
        provider:
          type: string
      example:
        id: stag1-1
        idType: No Data
        provider: No Data
    userapiAssign_User_Role_Request:
      title: Assign_User_Role_Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userapiAssignUserRoleRequest'
      example:
        request:
          userId: 3fda9884-29b6-4f78-ada9-de045a0d3978
          organisationId: 01297544481264435214
          roles:
            - COURSE_CREATOR
    userapiAssignUserRoleRequest:
      title: AssignUserRoleRequest
      required:
        - userId
        - organisationId
        - roles
      type: object
      properties:
        userId:
          type: string
        organisationId:
          type: string
        roles:
          type: array
          items:
            type: string
          description: ''
      example:
        userId: 3fda9884-29b6-4f78-ada9-de045a0d3978
        organisationId: 01297544481264435214
        roles:
          - COURSE_CREATOR
    userapiAssign_User_Role_With_Success_Response:
      title: Assign_User_Role_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiSuccessResult'
      example:
        id: api.user.assign.role
        ver: v1
        ts: '2020-11-24 17:19:05:681+0000'
        params:
          resmsgid: null
          msgid: 0957c785-ec79-49a5-bd26-a35aa76b12fb
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
    userapiUser_Migrate_With_Success_Response:
      title: User_Migrate_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          type: object
          properties:
            response:
              type: string
            userid:
              type: string
            maxAttempt:
              type: integer
            remainingAttempt:
              type: integer
            message:
              type: string
            err:
              type: boolean
          example:
            response: SUCCESS
            userId: 258ab127-601e-481a-95a2-d7c87ebd3b7e
    userapiUser_Merge_With_Success_Response:
      title: User_Merge_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiSuccessResult'
      example:
        id: null
        ver: private
        ts: '2020-11-24 17:19:05:681+0000'
        params:
          resmsgid: null
          msgid: 0957c785-ec79-49a5-bd26-a35aa76b12fb
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
    userapiUser_Accept_Tnc_Request:
      title: User_Accept_Tnc_Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userapiUserTncAcceptReq'
      example:
        request:
          version: v4
          userId: 4c2ece16-6749-4489-b069-413fc4993e27
    userapiUserTncAcceptReq:
      title: UserTncAcceptReq
      required:
        - version
      type: object
      properties:
        version:
          type: string
        userId:
          type: string
      example:
        version: v4
        userId: 4c2ece16-6749-4489-b069-413fc4993e27
    userapiUser_Accept_Tnc_With_UnAuthorized_Error:
      title: User_Accept_Tnc_With_UnAuthorized_Error
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams1'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.user.tnc.accept
        ver: v1
        ts: '2020-11-24 17:06:03:513+0000'
        params:
          resmsgid: null
          msgid: e481d7fe-c80e-42c5-ba9b-7bc48f172004
          err: UNAUTHORIZED_USER
          status: SERVER_ERROR
          errmsg: You are not authorized.
        responseCode: CLIENT_ERROR
        result: {}
    userapiUser_Read_Role_With_Success_Response:
      title: User_Read_Role_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiGetRolesResult'
      example:
        id: api.role.read
        ver: v1
        ts: '2020-11-25 13:37:25:051+0000'
        params:
          resmsgid: null
          msgid: 204745cb-1faa-462c-ad40-c82f7dd4a70b
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          roles:
            - actionGroups:
                - name: Course Mentor
                  id: COURSE_MENTOR
                  actions: []
              name: Course Mentor
              id: COURSE_MENTOR
            - actionGroups:
                - name: Content Creation
                  id: CONTENT_CREATION
                  actions: []
                - name: Content Curation
                  id: CONTENT_CURATION
                  actions: []
                - name: Content Review
                  id: CONTENT_REVIEW
                  actions: []
              name: Content Reviewer
              id: CONTENT_REVIEWER
            - actionGroups:
                - name: System Administration
                  id: SYSTEM_ADMINISTRATION
                  actions: []
                - name: Org Management
                  id: ORG_MANAGEMENT
                  actions: []
              name: Admin
              id: ADMIN
            - actionGroups:
                - name: Teacher Badge Issuer
                  id: TEACHER_BADGE_ISSUER
                  actions: []
              name: Teacher Badge Issuer
              id: TEACHER_BADGE_ISSUER
            - actionGroups:
                - name: Report Admin
                  id: REPORT_ADMIN
                  actions: []
              name: Report Admin
              id: REPORT_ADMIN
            - actionGroups:
                - name: Org Management
                  id: ORG_MANAGEMENT
                  actions: []
                - name: Membership Management
                  id: MEMBERSHIP_MANAGEMENT
                  actions: []
              name: Org Admin
              id: ORG_ADMIN
            - actionGroups:
                - name: Book Creator
                  id: BOOK_CREATOR
                  actions: []
              name: Book Creator
              id: BOOK_CREATOR
            - actionGroups:
                - name: Book Reviewer
                  id: BOOK_REVIEWER
                  actions: []
              name: Book Reviewer
              id: BOOK_REVIEWER
            - actionGroups:
                - name: Official TextBook Badge Issuer
                  id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                  actions: []
              name: Official TextBook Badge Issuer
              id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
            - actionGroups:
                - name: Course Creator
                  id: COURSE_CREATOR
                  actions: []
              name: Course Creator
              id: COURSE_CREATOR
            - actionGroups:
                - name: Course Admin
                  id: COURSE_ADMIN
                  actions: []
              name: Course Admin
              id: COURSE_ADMIN
            - actionGroups:
                - name: Report Viewer
                  id: REPORT_VIEWER
                  actions: []
              name: Report Viewer
              id: REPORT_VIEWER
            - actionGroups:
                - name: Membership Management
                  id: MEMBERSHIP_MANAGEMENT
                  actions: []
              name: Org Moderator
              id: ORG_MODERATOR
            - actionGroups:
                - name: Public
                  id: PUBLIC
                  actions: []
              name: Public
              id: PUBLIC
            - actionGroups:
                - name: Announcement Sender
                  id: ANNOUNCEMENT_SENDER
                  actions: []
              name: Announcement Sender
              id: ANNOUNCEMENT_SENDER
            - actionGroups:
                - name: Content Creation
                  id: CONTENT_CREATION
                  actions: []
              name: Content Creator
              id: CONTENT_CREATOR
            - actionGroups:
                - name: Flag Reviewer
                  id: FLAG_REVIEWER
                  actions: []
              name: Flag Reviewer
              id: FLAG_REVIEWER
    userapiGetRolesResult:
      title: GetRolesResult
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/userapiRole'
          description: ''
      example:
        roles:
          - actionGroups:
              - name: Course Mentor
                id: COURSE_MENTOR
                actions: []
            name: Course Mentor
            id: COURSE_MENTOR
          - actionGroups:
              - name: Content Creation
                id: CONTENT_CREATION
                actions: []
              - name: Content Curation
                id: CONTENT_CURATION
                actions: []
              - name: Content Review
                id: CONTENT_REVIEW
                actions: []
            name: Content Reviewer
            id: CONTENT_REVIEWER
          - actionGroups:
              - name: System Administration
                id: SYSTEM_ADMINISTRATION
                actions: []
              - name: Org Management
                id: ORG_MANAGEMENT
                actions: []
            name: Admin
            id: ADMIN
          - actionGroups:
              - name: Teacher Badge Issuer
                id: TEACHER_BADGE_ISSUER
                actions: []
            name: Teacher Badge Issuer
            id: TEACHER_BADGE_ISSUER
          - actionGroups:
              - name: Report Admin
                id: REPORT_ADMIN
                actions: []
            name: Report Admin
            id: REPORT_ADMIN
          - actionGroups:
              - name: Org Management
                id: ORG_MANAGEMENT
                actions: []
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
                actions: []
            name: Org Admin
            id: ORG_ADMIN
          - actionGroups:
              - name: Book Creator
                id: BOOK_CREATOR
                actions: []
            name: Book Creator
            id: BOOK_CREATOR
          - actionGroups:
              - name: Book Reviewer
                id: BOOK_REVIEWER
                actions: []
            name: Book Reviewer
            id: BOOK_REVIEWER
          - actionGroups:
              - name: Official TextBook Badge Issuer
                id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
                actions: []
            name: Official TextBook Badge Issuer
            id: OFFICIAL_TEXTBOOK_BADGE_ISSUER
          - actionGroups:
              - name: Course Creator
                id: COURSE_CREATOR
                actions: []
            name: Course Creator
            id: COURSE_CREATOR
          - actionGroups:
              - name: Course Admin
                id: COURSE_ADMIN
                actions: []
            name: Course Admin
            id: COURSE_ADMIN
          - actionGroups:
              - name: Report Viewer
                id: REPORT_VIEWER
                actions: []
            name: Report Viewer
            id: REPORT_VIEWER
          - actionGroups:
              - name: Membership Management
                id: MEMBERSHIP_MANAGEMENT
                actions: []
            name: Org Moderator
            id: ORG_MODERATOR
          - actionGroups:
              - name: Public
                id: PUBLIC
                actions: []
            name: Public
            id: PUBLIC
          - actionGroups:
              - name: Announcement Sender
                id: ANNOUNCEMENT_SENDER
                actions: []
            name: Announcement Sender
            id: ANNOUNCEMENT_SENDER
          - actionGroups:
              - name: Content Creation
                id: CONTENT_CREATION
                actions: []
            name: Content Creator
            id: CONTENT_CREATOR
          - actionGroups:
              - name: Flag Reviewer
                id: FLAG_REVIEWER
                actions: []
            name: Flag Reviewer
            id: FLAG_REVIEWER
    userapiRole:
      title: Role
      required:
        - actionGroups
        - name
        - id
      type: object
      properties:
        actionGroups:
          type: array
          items:
            $ref: '#/components/schemas/userapiActionGroup'
          description: ''
        name:
          type: string
        id:
          type: string
      example:
        actionGroups:
          - name: Course Mentor
            id: COURSE_MENTOR
            actions: []
        name: Course Mentor
        id: COURSE_MENTOR
    userapiActionGroup:
      title: ActionGroup
      required:
        - name
        - id
        - actions
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        actions:
          type: array
          items:
            type: string
          description: ''
      example:
        name: Course Mentor
        id: COURSE_MENTOR
        actions: []
    userapiUser_Block_Request:
      title: User_Block_Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userapiUserBlockRequest'
      example:
        request:
          userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
    userapiUserBlockRequest:
      title: UserBlockRequest
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
      example:
        userId: ec8deeb2-4ded-4fa2-ac48-023ad8298d92
    userapiUser_Block_Success_Response:
      title: User_Block_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiSuccessResult'
      example:
        id: api.user.block
        ver: v1
        ts: '2020-11-29 08:03:21:697+0000'
        params:
          resmsgid: null
          msgid: 1fdc83eb2321b513bab2c96726b194f5
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
    userapiSuccessResult:
      title: SuccessResult
      required:
        - response
      type: object
      properties:
        response:
          type: string
      example:
        response: SUCCESS
    userapiUser_Exists_V1_With_Suceess_Response:
      title: User_Exists_V1_With_Suceess_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiUserExistsV1Result'
      example:
        id: api.user.exists.userName
        ver: v1
        ts: '2020-11-27 17:26:43:814+0000'
        params:
          resmsgid: null
          msgid: 9b739351ebcbe7923209d0fc2e48bb68
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          exists: true
    userapiUserExistsV1Result:
      title: UserExistsV1Result
      required:
        - exists
      type: object
      properties:
        exists:
          type: boolean
      example:
        exists: true
    userapiUser_Unblock_Already_Active_Error:
      title: User_Unblock_Already_Active_Error
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams1'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.user.unblock
        ver: v1
        ts: '2020-11-29 08:00:26:520+0000'
        params:
          resmsgid: null
          msgid: b1443786da8c22f208b1f0806a2445ca
          err: USER_ALREADY_ACTIVE
          status: USER_ALREADY_ACTIVE
          errmsg: User is already active.
        responseCode: CLIENT_ERROR
        result: {}
    userapiUser_Unblock_Success_Response:
      title: User_Unblock_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userapiSuccessResult'
      example:
        id: api.user.unblock
        ver: v1
        ts: '2020-11-29 08:05:08:744+0000'
        params:
          resmsgid: null
          msgid: bb11b7ccc7d37ae2c2502912406543a7
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
    userapiUser_Unblock_Request:
      title: User_Unblock_Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userapiUserBlockRequest'
      example:
        request:
          userId: ''
    userapiUserErrorResponse:
      title: UserErrorResponse
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ets:
          type: integer
        params:
          type: object
          properties:
            msgid:
              type: string
            resmsgid:
              type: string
            err:
              type: string
            errmsg:
              type: string
            status:
              type: string
        responseCode:
          type: string
        result:
          type: object
          description: Empty Result
    discussionForumCategory:
      required:
        - bgColor
        - class
        - color
        - description
        - name
        - parentCid
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        bgColor:
          type: string
        color:
          type: string
        parentCid:
          type: integer
        class:
          type: string
    discussionForumDeleteCategory:
      type: object
      properties:
        code:
          type: string
        payload:
          type: object
          properties: {}
          example: {}
      example:
        code: code
        payload: {}
    discussionForumCreateUser:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
    discussionForumCategoryResponse:
      type: object
      properties:
        code:
          type: string
        payload:
          $ref: '#/components/schemas/discussionForumCategoryResponse_payload'
      example:
        code: code
        payload:
          color: color
          numRecentReplies: numRecentReplies
          icon: icon
          link: link
          description: description
          topic_count: topic_count
          imageClass: imageClass
          parentCid: 6
          descriptionParsed: descriptionParsed
          bgColor: bgColor
          name: name
          disabled: disabled
          post_count: post_count
          isSection: isSection
          class: class
          slug: slug
          cid: 0
          order: order
    discussionForumListOfCategories:
      type: object
      properties:
        cid:
          type: integer
        name:
          type: string
        description:
          type: string
        descriptionParsed:
          type: string
        icon:
          type: string
        bgColor:
          type: string
        color:
          type: string
        slug:
          type: string
        parentCid:
          type: integer
        topic_count:
          type: string
        post_count:
          type: string
        disabled:
          type: string
        order:
          type: string
        link:
          type: string
        numRecentReplies:
          type: string
        class:
          type: string
        imageClass:
          type: string
        isSection:
          type: string
        posts:
          type: array
          items:
            $ref: '#/components/schemas/discussionForumListOfCategories_posts'
        children:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        tagWhitelist:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        unread-class:
          type: string
        totalTopicCount:
          type: integer
        totalPostCount:
          type: integer
        minTags:
          type: integer
        maxTags:
          type: integer
      example:
        unread-class: unread-class
        color: color
        numRecentReplies: numRecentReplies
        icon: icon
        link: link
        description: description
        posts:
          - parentCid: 9
            index: 2
            topic:
              title: title
              slug: slug
            pid: 1
            timestampISO: timestampISO
            user:
              uid: 5
              'icon:bgColor': 'icon:bgColor'
              'icon:text': 'icon:text'
              userslug: userslug
              picture: picture
              username: username
            content: content
            timestamp: 5
            cid: 7
          - parentCid: 9
            index: 2
            topic:
              title: title
              slug: slug
            pid: 1
            timestampISO: timestampISO
            user:
              uid: 5
              'icon:bgColor': 'icon:bgColor'
              'icon:text': 'icon:text'
              userslug: userslug
              picture: picture
              username: username
            content: content
            timestamp: 5
            cid: 7
        totalTopicCount: 3
        parentCid: 6
        totalPostCount: 2
        maxTags: 7
        descriptionParsed: descriptionParsed
        bgColor: bgColor
        children:
          - {}
          - {}
        disabled: disabled
        tagWhitelist:
          - {}
          - {}
        class: class
        slug: slug
        order: order
        minTags: 4
        topic_count: topic_count
        imageClass: imageClass
        name: name
        post_count: post_count
        isSection: isSection
        cid: 0
    discussionForumUserDetails:
      type: object
      properties:
        uid:
          type: string
        username:
          type: string
        userslug:
          type: string
        email:
          type: string
        'email:confirmed':
          type: boolean
        joindate:
          type: integer
        lastonline:
          type: integer
        fullname:
          type: string
        location:
          type: string
        birthday:
          type: string
        website:
          type: string
        aboutme:
          type: string
        signature:
          type: string
        uploadedpicture:
          type: string
        profileviews:
          type: integer
        reputation:
          type: integer
        postcount:
          type: integer
        topiccount:
          type: integer
        lastposttime:
          type: integer
        banned:
          type: boolean
        'banned:expire':
          type: integer
        status:
          type: string
        flags:
          type: string
        followerCount:
          type: integer
        followingCount:
          type: integer
        'cover:url':
          type: string
        'cover:position':
          type: string
        groupTitle:
          type: string
        groupTitleArray:
          type: array
          items:
            type: string
        'icon:text':
          type: string
        'icon:bgColor':
          type: boolean
        joindateISO:
          type: string
        lastonlineISO:
          type: string
        banned_until:
          type: integer
        banned_until_readable:
          type: string
        aboutmeParsed:
          type: string
        age:
          type: integer
        emailClass:
          type: string
        ips:
          type: object
          properties: {}
          example: {}
        isBlocked:
          type: boolean
        blocksCount:
          type: boolean
        yourid:
          type: integer
        theirid:
          type: integer
        isTargetAdmin:
          type: boolean
        isAdmin:
          type: boolean
        isGlobalModerator:
          type: boolean
        isModerator:
          type: boolean
        isAdminOrGlobalModerator:
          type: boolean
        isAdminOrGlobalModeratorOrModerator:
          type: boolean
        isSelfOrAdminOrGlobalModerator:
          type: boolean
        canEdit:
          type: boolean
        canBan:
          type: boolean
        canChangePassword:
          type: boolean
        isSelf:
          type: boolean
        isFollowing:
          type: boolean
        hasPrivateChat:
          type: integer
        showHidden:
          type: boolean
        groups:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        disableSignatures:
          type: boolean
        'reputation:disabled':
          type: boolean
        'downvote:disabled':
          type: boolean
        profile_links:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        sso:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        websiteLink:
          type: string
        websiteName:
          type: string
        moderationNote:
          type: string
        'username:disableEdit':
          type: boolean
        'email:disableEdit':
          type: boolean
        posts:
          type: array
          items:
            $ref: '#/components/schemas/discussionForumUserDetails_posts'
        latestPosts:
          type: array
          items:
            $ref: '#/components/schemas/discussionForumUserDetails_posts'
        bestPosts:
          type: array
          items:
            $ref: '#/components/schemas/discussionForumUserDetails_posts'
        breadcrumbs:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        title:
          type: string
        allowCoverPicture:
          type: boolean
        selectedGroup:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        loggedIn:
          type: boolean
        relative_path:
          type: string
        template:
          type: object
          properties: {}
          example: {}
        url:
          type: string
        bodyClass:
          type: string
        widgets:
          type: object
          properties: {}
          example: {}
        _header:
          type: object
          properties: {}
          example: {}
      example:
        websiteLink: websiteLink
        _header: {}
        reputation: 5
        blocksCount: true
        posts:
          - upvotes: 5
            pid: 6
            timestampISO: timestampISO
            downvotes: 9
            tid: 7
            content: content
            uid: 1
            deleted: true
            isMainPost: true
            topic:
              uid: 8
              deleted: 3
              postcount: 6
              titleRaw: titleRaw
              mainPid: 1
              title: title
              teaserPid: {}
              tid: 9
              slug: slug
              cid: 6
            votes: 9
            category:
              parentCid: 6
              bgColor: bgColor
              color: color
              backgroundImage: {}
              name: name
              icon: icon
              slug: slug
              cid: 2
              imageClass: imageClass
            user:
              uid: 6
              'icon:bgColor': 'icon:bgColor'
              'icon:text': 'icon:text'
              userslug: userslug
              picture: {}
              username: username
              status: status
            timestamp: 4
          - upvotes: 5
            pid: 6
            timestampISO: timestampISO
            downvotes: 9
            tid: 7
            content: content
            uid: 1
            deleted: true
            isMainPost: true
            topic:
              uid: 8
              deleted: 3
              postcount: 6
              titleRaw: titleRaw
              mainPid: 1
              title: title
              teaserPid: {}
              tid: 9
              slug: slug
              cid: 6
            votes: 9
            category:
              parentCid: 6
              bgColor: bgColor
              color: color
              backgroundImage: {}
              name: name
              icon: icon
              slug: slug
              cid: 2
              imageClass: imageClass
            user:
              uid: 6
              'icon:bgColor': 'icon:bgColor'
              'icon:text': 'icon:text'
              userslug: userslug
              picture: {}
              username: username
              status: status
            timestamp: 4
        sso:
          - {}
          - {}
        'icon:text': 'icon:text'
        isGlobalModerator: true
        joindate: 0
        profile_links:
          - {}
          - {}
        'reputation:disabled': true
        banned_until_readable: banned_until_readable
        allowCoverPicture: true
        isAdmin: true
        moderationNote: moderationNote
        ips: {}
        latestPosts:
          - null
          - null
        aboutme: aboutme
        'email:confirmed': true
        isTargetAdmin: true
        isAdminOrGlobalModerator: true
        emailClass: emailClass
        loggedIn: true
        'downvote:disabled': true
        topiccount: 2
        relative_path: relative_path
        isSelf: true
        breadcrumbs:
          - {}
          - {}
        status: status
        birthday: birthday
        template: {}
        showHidden: true
        yourid: 1
        lastposttime: 7
        isModerator: true
        signature: signature
        'icon:bgColor': true
        canEdit: true
        flags: flags
        groupTitle: groupTitle
        isBlocked: true
        bestPosts:
          - null
          - null
        title: title
        widgets: {}
        followingCount: 2
        lastonlineISO: lastonlineISO
        'email:disableEdit': true
        uid: uid
        groupTitleArray:
          - groupTitleArray
          - groupTitleArray
        canChangePassword: true
        profileviews: 1
        bodyClass: bodyClass
        'cover:url': 'cover:url'
        selectedGroup:
          - {}
          - {}
        banned: true
        banned_until: 4
        userslug: userslug
        followerCount: 3
        email: email
        website: website
        isFollowing: true
        uploadedpicture: uploadedpicture
        canBan: true
        lastonline: 6
        disableSignatures: true
        'banned:expire': 9
        groups:
          - {}
          - {}
        'username:disableEdit': true
        joindateISO: joindateISO
        url: url
        isSelfOrAdminOrGlobalModerator: true
        websiteName: websiteName
        hasPrivateChat: 1
        isAdminOrGlobalModeratorOrModerator: true
        'cover:position': 'cover:position'
        postcount: 5
        location: location
        fullname: fullname
        aboutmeParsed: aboutmeParsed
        age: 7
        theirid: 1
        username: username
    discussionForumCategoryDetails:
      type: object
      properties:
        bgColor:
          type: string
        cid:
          type: integer
        class:
          type: string
        color:
          type: string
        description:
          type: string
        descriptionParsed:
          type: string
        disabled:
          type: integer
        icon:
          type: string
        imageClass:
          type: string
        isSection:
          type: integer
        link:
          type: string
        name:
          type: string
        numRecentReplies:
          type: integer
        order:
          type: integer
        parentCid:
          type: integer
        post_count:
          type: integer
        slug:
          type: string
        topic_count:
          type: integer
        minTags:
          type: integer
        maxTags:
          type: integer
        totalPostCount:
          type: integer
        totalTopicCount:
          type: integer
        tagWhitelist:
          type: array
          items:
            type: string
        unread-class:
          type: string
        children:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        topics:
          type: array
          items:
            $ref: '#/components/schemas/discussionForumCategoryDetails_topics'
        isWatched:
          type: boolean
        isNotWatched:
          type: boolean
        isIgnored:
          type: boolean
        breadcrumbs:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        title:
          type: string
        privileges:
          type: object
          properties: {}
          example: {}
        showSelect:
          type: boolean
        showTopicTools:
          type: boolean
        rssFeedUrl:
          type: string
        'feeds:disableRSS':
          type: integer
        'reputation:disabled':
          type: integer
        pagination:
          type: object
          properties: {}
          example: {}
        loggedIn:
          type: boolean
        relative_path:
          type: string
        template:
          type: object
          properties: {}
          example: {}
        url:
          type: string
        bodyClass:
          type: string
        _header:
          type: object
          properties: {}
          example: {}
        widgets:
          type: object
          properties: {}
          example: {}
      example:
        unread-class: unread-class
        template: {}
        privileges: {}
        pagination: {}
        color: color
        numRecentReplies: 5
        icon: icon
        link: link
        _header: {}
        description: description
        title: title
        widgets: {}
        showSelect: true
        totalTopicCount: 7
        parentCid: 2
        maxTags: 2
        totalPostCount: 4
        bgColor: bgColor
        descriptionParsed: descriptionParsed
        children:
          - {}
          - {}
        bodyClass: bodyClass
        disabled: 6
        rssFeedUrl: rssFeedUrl
        tagWhitelist:
          - tagWhitelist
          - tagWhitelist
        class: class
        slug: slug
        order: 5
        minTags: 3
        showTopicTools: true
        topics:
          - pinned: 6
            lastposttime: 1
            upvotes: 8
            unreplied: true
            unread: true
            timestampISO: timestampISO
            title: title
            teaserPid: {}
            tid: 7
            uid: 4
            lastposttimeISO: lastposttimeISO
            deleterUid: 6
            isOwner: true
            mainPid: 1
            locked: 9
            slug: slug
            timestamp: 1
            ignored: true
            index: 6
            downvotes: 9
            icons: {}
            tags: {}
            bookmark: {}
            deleted: 9
            postcount: 6
            viewcount: 5
            titleRaw: titleRaw
            votes: 3
            category: {}
            user: {}
            cid: 1
            teaser: {}
          - pinned: 6
            lastposttime: 1
            upvotes: 8
            unreplied: true
            unread: true
            timestampISO: timestampISO
            title: title
            teaserPid: {}
            tid: 7
            uid: 4
            lastposttimeISO: lastposttimeISO
            deleterUid: 6
            isOwner: true
            mainPid: 1
            locked: 9
            slug: slug
            timestamp: 1
            ignored: true
            index: 6
            downvotes: 9
            icons: {}
            tags: {}
            bookmark: {}
            deleted: 9
            postcount: 6
            viewcount: 5
            titleRaw: titleRaw
            votes: 3
            category: {}
            user: {}
            cid: 1
            teaser: {}
        isNotWatched: true
        'reputation:disabled': 2
        isWatched: true
        isIgnored: true
        topic_count: 9
        url: url
        imageClass: imageClass
        'feeds:disableRSS': 1
        loggedIn: true
        name: name
        isSection: 1
        post_count: 7
        relative_path: relative_path
        breadcrumbs:
          - {}
          - {}
        cid: 0
    discussionForumTopicResponse:
      type: object
      properties:
        nextStart:
          type: integer
        topicCount:
          type: integer
        topics:
          type: array
          items:
            $ref: '#/components/schemas/discussionForumTopicResponse_topics'
        tids:
          type: array
          items:
            type: string
        canPost:
          type: boolean
        showSelect:
          type: boolean
        showTopicTools:
          type: boolean
        categories:
          type: array
          items:
            $ref: '#/components/schemas/discussionForumTopicResponse_categories'
        allCategoriesUrl:
          type: string
        selectedCategory:
          type: object
          properties: {}
          example: {}
        selectedCids:
          type: array
          items:
            type: string
        'feeds:disableRSS':
          type: integer
        rssFeedUrl:
          type: string
        title:
          type: string
        filters:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        selectedFilter:
          type: object
          properties: {}
          example: {}
        terms:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        selectedTerm:
          type: object
          properties: {}
          example: {}
        pagination:
          type: object
          properties: {}
          example: {}
        breadcrumbs:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        loggedIn:
          type: boolean
        relative_path:
          type: string
        template:
          type: object
          properties: {}
          example: {}
        url:
          type: string
        bodyClass:
          type: string
        _header:
          type: object
          properties: {}
          example: {}
        widgets:
          type: object
          properties: {}
          example: {}
      example:
        template: {}
        pagination: {}
        _header: {}
        nextStart: 0
        selectedTerm: {}
        title: title
        widgets: {}
        showSelect: true
        canPost: true
        selectedCids:
          - selectedCids
          - selectedCids
        terms:
          - {}
          - {}
        bodyClass: bodyClass
        topicCount: 6
        rssFeedUrl: rssFeedUrl
        categories:
          - parentCid: 5
            color: color
            bgColor: bgColor
            level: level
            name: name
            icon: icon
            selected: true
            cid: 4
            imageClass: imageClass
          - parentCid: 5
            color: color
            bgColor: bgColor
            level: level
            name: name
            icon: icon
            selected: true
            cid: 4
            imageClass: imageClass
        showTopicTools: true
        topics:
          - pinned: 1
            lastposttime: 5
            upvotes: 1
            unreplied: true
            unread: true
            timestampISO: timestampISO
            title: title
            teaserPid: {}
            tid: 7
            uid: 3
            lastposttimeISO: lastposttimeISO
            deleterUid: 6
            isOwner: true
            mainPid: 5
            locked: 7
            slug: slug
            timestamp: 9
            ignored: true
            index: 1
            downvotes: 1
            icons: {}
            tags: {}
            bookmark: {}
            deleted: 4
            postcount: 2
            viewcount: 2
            titleRaw: titleRaw
            votes: 7
            category:
              parentCid: 6
              bgColor: bgColor
              color: color
              backgroundImage: {}
              name: name
              icon: icon
              slug: slug
              cid: 2
              imageClass: imageClass
            user:
              uid: 6
              'icon:bgColor': 'icon:bgColor'
              'icon:text': 'icon:text'
              userslug: userslug
              picture: {}
              username: username
              status: status
            cid: 1
            teaser: {}
          - pinned: 1
            lastposttime: 5
            upvotes: 1
            unreplied: true
            unread: true
            timestampISO: timestampISO
            title: title
            teaserPid: {}
            tid: 7
            uid: 3
            lastposttimeISO: lastposttimeISO
            deleterUid: 6
            isOwner: true
            mainPid: 5
            locked: 7
            slug: slug
            timestamp: 9
            ignored: true
            index: 1
            downvotes: 1
            icons: {}
            tags: {}
            bookmark: {}
            deleted: 4
            postcount: 2
            viewcount: 2
            titleRaw: titleRaw
            votes: 7
            category:
              parentCid: 6
              bgColor: bgColor
              color: color
              backgroundImage: {}
              name: name
              icon: icon
              slug: slug
              cid: 2
              imageClass: imageClass
            user:
              uid: 6
              'icon:bgColor': 'icon:bgColor'
              'icon:text': 'icon:text'
              userslug: userslug
              picture: {}
              username: username
              status: status
            cid: 1
            teaser: {}
        filters:
          - {}
          - {}
        allCategoriesUrl: allCategoriesUrl
        url: url
        selectedFilter: {}
        tids:
          - tids
          - tids
        'feeds:disableRSS': 9
        loggedIn: true
        selectedCategory: {}
        relative_path: relative_path
        breadcrumbs:
          - {}
          - {}
    discussionForumTopicDetails:
      type: object
      properties:
        cid:
          type: integer
        lastposttime:
          type: integer
        mainPid:
          type: integer
        postcount:
          type: integer
        slug:
          type: string
        tid:
          type: integer
        timestamp:
          type: integer
        title:
          type: string
        uid:
          type: integer
        viewcount:
          type: integer
        deleted:
          type: integer
        locked:
          type: integer
        pinned:
          type: integer
        upvotes:
          type: integer
        downvotes:
          type: integer
        deleterUid:
          type: integer
        titleRaw:
          type: string
        timestampISO:
          type: string
        lastposttimeISO:
          type: string
        votes:
          type: integer
        teaserPid:
          type: integer
        tags:
          type: array
          items:
            type: string
        posts:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        category:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        tagWhitelist:
          type: array
          items:
            type: string
        minTags:
          type: integer
        maxTags:
          type: integer
        thread_tools:
          type: array
          items:
            type: string
        isFollowing:
          type: boolean
        isNotFollowing:
          type: boolean
        isIgnoring:
          type: boolean
        bookmark:
          type: object
          properties: {}
          example: {}
        postSharing:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        deleter:
          type: object
          properties: {}
          example: {}
        merger:
          type: object
          properties: {}
          example: {}
        related:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        unreplied:
          type: boolean
        icons:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        privileges:
          type: object
          properties: {}
          example: {}
        topicStaleDays:
          type: integer
        'reputation:disabled':
          type: integer
        'downvote:disabled':
          type: integer
        'feeds:disableRSS':
          type: integer
        bookmarkThreshold:
          type: integer
        necroThreshold:
          type: integer
        postEditDuration:
          type: integer
        postDeleteDuration:
          type: integer
        scrollToMyPost:
          type: boolean
        allowMultipleBadges:
          type: boolean
        privateUploads:
          type: boolean
        rssFeedUrl:
          type: string
        postIndex:
          type: integer
        breadcrumbs:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        pagination:
          type: object
          properties: {}
          example: {}
        loggedIn:
          type: boolean
        relative_path:
          type: string
        template:
          type: object
          properties: {}
          example: {}
        url:
          type: string
        bodyClass:
          type: string
        loggedInUser:
          type: object
          properties: {}
          example: {}
        _header:
          type: object
          properties: {}
          example: {}
        widgets:
          type: object
          properties: {}
          example: {}
      example:
        privileges: {}
        upvotes: 7
        unreplied: true
        privateUploads: true
        postDeleteDuration: 6
        _header: {}
        topicStaleDays: 4
        teaserPid: 6
        loggedInUser: {}
        posts:
          - {}
          - {}
        tid: 5
        postEditDuration: 9
        deleterUid: 1
        necroThreshold: 8
        mainPid: 1
        rssFeedUrl: rssFeedUrl
        locked: 2
        slug: slug
        'reputation:disabled': 5
        downvotes: 1
        tags:
          - tags
          - tags
        bookmark: {}
        'feeds:disableRSS': 9
        isNotFollowing: true
        loggedIn: true
        'downvote:disabled': 9
        postIndex: 3
        titleRaw: titleRaw
        relative_path: relative_path
        breadcrumbs:
          - {}
          - {}
        cid: 0
        allowMultipleBadges: true
        template: {}
        pinned: 4
        pagination: {}
        lastposttime: 6
        bookmarkThreshold: 6
        postSharing:
          - {}
          - {}
        timestampISO: timestampISO
        title: title
        widgets: {}
        deleter: {}
        uid: 7
        lastposttimeISO: lastposttimeISO
        maxTags: 1
        related:
          - {}
          - {}
        bodyClass: bodyClass
        tagWhitelist:
          - tagWhitelist
          - tagWhitelist
        timestamp: 2
        minTags: 7
        isIgnoring: true
        isFollowing: true
        scrollToMyPost: true
        icons:
          - {}
          - {}
        url: url
        deleted: 3
        postcount: 5
        thread_tools:
          - thread_tools
          - thread_tools
        viewcount: 9
        votes: 1
        category:
          - {}
          - {}
        merger: {}
    discussionForumGroupListResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        allowGroupCreation:
          type: boolean
        nextStart:
          type: integer
        title:
          type: string
        breadcrumbs:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        loggedIn:
          type: boolean
        relative_path:
          type: string
        template:
          type: object
          properties: {}
          example: {}
        url:
          type: string
        bodyClass:
          type: string
        _header:
          type: object
          properties: {}
          example: {}
        widgets:
          type: object
          properties: {}
          example: {}
      example:
        template: {}
        loggedIn: true
        bodyClass: bodyClass
        _header: {}
        groups:
          - {}
          - {}
        allowGroupCreation: true
        nextStart: 0
        title: title
        relative_path: relative_path
        widgets: {}
        breadcrumbs:
          - {}
          - {}
        url: url
    discussionForumGroupDetailsResponse:
      type: object
      properties:
        title:
          type: string
        group:
          type: object
          properties: {}
          example: {}
        posts:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        isAdmin:
          type: boolean
        isGlobalMod:
          type: boolean
        allowPrivateGroups:
          type: integer
        breadcrumbs:
          type: array
          items:
            type: object
            properties: {}
            example: {}
        loggedIn:
          type: boolean
        relative_path:
          type: string
        template:
          type: object
          properties: {}
          example: {}
        url:
          type: object
          properties: {}
          example: {}
        bodyClass:
          type: string
        _header:
          type: object
          properties: {}
          example: {}
        widgets:
          type: object
          properties: {}
          example: {}
      example:
        template: {}
        _header: {}
        isGlobalMod: true
        isAdmin: true
        title: title
        widgets: {}
        posts:
          - {}
          - {}
        url: {}
        allowPrivateGroups: 0
        loggedIn: true
        bodyClass: bodyClass
        relative_path: relative_path
        breadcrumbs:
          - {}
          - {}
        group: {}
    discussionForumCreateTopicResponse:
      type: object
      properties:
        code:
          type: string
        payload:
          $ref: '#/components/schemas/discussionForumCreateTopicResponse_payload'
      example:
        code: code
        payload:
          topicData:
            pinned: 4
            lastposttime: 6
            upvotes: 7
            unreplied: 6
            mainPost: {}
            unread: true
            timestampISO: timestampISO
            title: title
            teaserPid: {}
            tid: 5
            uid: 7
            lastposttimeISO: lastposttimeISO
            deleterUid: 1
            isOwner: true
            mainPid: 1
            locked: 2
            slug: slug
            timestamp: 2
            ignored: true
            downvotes: 1
            icons: {}
            tags: {}
            bookmark: {}
            deleted: 3
            postcount: 5
            viewcount: 9
            titleRaw: titleRaw
            votes: 1
            category: {}
            user: {}
            cid: 0
            teaser: {}
          postData:
            isMain: true
            bookmarked: true
            selfPost: true
            index: 9
            pid: 7
            timestampISO: timestampISO
            display_edit_tools: true
            tid: 4
            content: content
            uid: 1
            display_moderator_tools: true
            display_move_tools: true
            topic: {}
            votes: 6
            display_delete_tools: true
            user: {}
            timestamp: 5
            cid: 9
    discussionForumCreateTopicBody:
      required:
        - cid
        - content
        - title
      type: object
      properties:
        cid:
          type: integer
        title:
          type: string
        content:
          type: string
    discussionForumCreateReplyBody:
      required:
        - content
      type: object
      properties:
        content:
          type: string
        toPid:
          type: integer
    discussionForumUpdateTopicBody:
      required:
        - content
        - pid
      type: object
      properties:
        pid:
          type: integer
        content:
          type: string
        handle:
          type: string
        title:
          type: string
        topic_thumb:
          type: integer
        tags:
          type: array
          items:
            type: string
    discussionForumUpdatePostBody:
      required:
        - content
      type: object
      properties:
        content:
          type: string
        title:
          type: string
        topic_thumb:
          type: integer
        tags:
          type: array
          items:
            type: string
    discussionForumVotePostBody:
      required:
        - delta
      type: object
      properties:
        delta:
          type: integer
          description: >-
            delta must be a number. If delta > 0, it's considered an upvote; if
            delta < 0, it's considered a downvote; otherwise, it's an unvote.
    discussionForumPostOperationResponse:
      type: object
      properties:
        code:
          type: string
        payload:
          type: object
          properties: {}
          example: {}
      example:
        code: code
        payload: {}
    discussionForumUpdateUserInfo:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        fullname:
          type: string
        website:
          type: string
        location:
          type: string
        birthday:
          type: string
        signature:
          type: string
    discussionForumForumResponse:
      type: object
      properties:
        type:
          type: string
        identifier:
          type: string
        cid:
          type: integer
      example:
        identifier: identifier
        type: type
        cid: 0
    discussionForumForumIdRequestBody:
      type: object
      properties:
        type:
          type: string
        identifier:
          type: string
        cid:
          type: integer
    discussionForumGroupRequestBody:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        hidden:
          type: boolean
        private:
          type: boolean
        ownerUid:
          type: integer
    discussionForumGroupResponse:
      type: object
      properties:
        code:
          type: string
        payload:
          $ref: '#/components/schemas/discussionForumGroupResponse_payload'
      example:
        code: code
        payload:
          userTitle: userTitle
          createtime: 0
          private: 2
          system: 5
          hidden: 5
          userTitleEnabled: 6
          disableLeave: 9
          memberCount: 1
          name: name
          description: description
          disableJoinRequests: 7
          slug: slug
    discussionForumCreateUserResponse:
      type: object
      properties:
        code:
          type: string
        payload:
          $ref: '#/components/schemas/discussionForumCreateUserResponse_payload'
      example:
        code: code
        payload:
          uid: 0
    discussionForumError:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        params:
          type: object
          properties: {}
    discussionForumCategoryResponse_payload:
      type: object
      properties:
        cid:
          type: integer
        name:
          type: string
        description:
          type: string
        descriptionParsed:
          type: string
        icon:
          type: string
        bgColor:
          type: string
        color:
          type: string
        slug:
          type: string
        parentCid:
          type: integer
        topic_count:
          type: string
        post_count:
          type: string
        disabled:
          type: string
        order:
          type: string
        link:
          type: string
        numRecentReplies:
          type: string
        class:
          type: string
        imageClass:
          type: string
        isSection:
          type: string
      example:
        color: color
        numRecentReplies: numRecentReplies
        icon: icon
        link: link
        description: description
        topic_count: topic_count
        imageClass: imageClass
        parentCid: 6
        descriptionParsed: descriptionParsed
        bgColor: bgColor
        name: name
        disabled: disabled
        post_count: post_count
        isSection: isSection
        class: class
        slug: slug
        cid: 0
        order: order
    discussionForumListOfCategories_user:
      type: object
      properties:
        uid:
          type: integer
        username:
          type: string
        userslug:
          type: string
        picture:
          type: string
        'icon:text':
          type: string
        'icon:bgColor':
          type: string
      example:
        uid: 5
        'icon:bgColor': 'icon:bgColor'
        'icon:text': 'icon:text'
        userslug: userslug
        picture: picture
        username: username
    discussionForumListOfCategories_topic:
      type: object
      properties:
        slug:
          type: string
        title:
          type: string
      example:
        title: title
        slug: slug
    discussionForumListOfCategories_posts:
      type: object
      properties:
        pid:
          type: integer
        timestamp:
          type: integer
        content:
          type: string
        timestampISO:
          type: string
        user:
          $ref: '#/components/schemas/discussionForumListOfCategories_user'
        index:
          type: integer
        cid:
          type: integer
        parentCid:
          type: integer
        topic:
          $ref: '#/components/schemas/discussionForumListOfCategories_topic'
      example:
        parentCid: 9
        index: 2
        topic:
          title: title
          slug: slug
        pid: 1
        timestampISO: timestampISO
        user:
          uid: 5
          'icon:bgColor': 'icon:bgColor'
          'icon:text': 'icon:text'
          userslug: userslug
          picture: picture
          username: username
        content: content
        timestamp: 5
        cid: 7
    discussionForumUserDetails_user:
      type: object
      properties:
        uid:
          type: integer
        username:
          type: string
        userslug:
          type: string
        picture:
          type: object
          properties: {}
          example: {}
        status:
          type: string
        'icon:text':
          type: string
        'icon:bgColor':
          type: string
      example:
        uid: 6
        'icon:bgColor': 'icon:bgColor'
        'icon:text': 'icon:text'
        userslug: userslug
        picture: {}
        username: username
        status: status
    discussionForumUserDetails_topic:
      type: object
      properties:
        uid:
          type: integer
        tid:
          type: integer
        title:
          type: string
        cid:
          type: integer
        slug:
          type: string
        deleted:
          type: integer
        postcount:
          type: integer
        mainPid:
          type: integer
        teaserPid:
          type: object
          properties: {}
          example: {}
        titleRaw:
          type: string
      example:
        uid: 8
        deleted: 3
        postcount: 6
        titleRaw: titleRaw
        mainPid: 1
        title: title
        teaserPid: {}
        tid: 9
        slug: slug
        cid: 6
    discussionForumUserDetails_category:
      type: object
      properties:
        cid:
          type: integer
        name:
          type: string
        icon:
          type: string
        slug:
          type: string
        parentCid:
          type: integer
        bgColor:
          type: string
        color:
          type: string
        backgroundImage:
          type: object
          properties: {}
          example: {}
        imageClass:
          type: string
      example:
        parentCid: 6
        bgColor: bgColor
        color: color
        backgroundImage: {}
        name: name
        icon: icon
        slug: slug
        cid: 2
        imageClass: imageClass
    discussionForumUserDetails_posts:
      type: object
      properties:
        pid:
          type: integer
        tid:
          type: integer
        content:
          type: string
        uid:
          type: integer
        timestamp:
          type: integer
        deleted:
          type: boolean
        upvotes:
          type: integer
        downvotes:
          type: integer
        votes:
          type: integer
        timestampISO:
          type: string
        user:
          $ref: '#/components/schemas/discussionForumUserDetails_user'
        topic:
          $ref: '#/components/schemas/discussionForumUserDetails_topic'
        category:
          $ref: '#/components/schemas/discussionForumUserDetails_category'
        isMainPost:
          type: boolean
      example:
        upvotes: 5
        pid: 6
        timestampISO: timestampISO
        downvotes: 9
        tid: 7
        content: content
        uid: 1
        deleted: true
        isMainPost: true
        topic:
          uid: 8
          deleted: 3
          postcount: 6
          titleRaw: titleRaw
          mainPid: 1
          title: title
          teaserPid: {}
          tid: 9
          slug: slug
          cid: 6
        votes: 9
        category:
          parentCid: 6
          bgColor: bgColor
          color: color
          backgroundImage: {}
          name: name
          icon: icon
          slug: slug
          cid: 2
          imageClass: imageClass
        user:
          uid: 6
          'icon:bgColor': 'icon:bgColor'
          'icon:text': 'icon:text'
          userslug: userslug
          picture: {}
          username: username
          status: status
        timestamp: 4
    discussionForumCategoryDetails_topics:
      type: object
      properties:
        cid:
          type: integer
        lastposttime:
          type: integer
        mainPid:
          type: integer
        postcount:
          type: integer
        slug:
          type: string
        tid:
          type: integer
        timestamp:
          type: integer
        title:
          type: string
        uid:
          type: integer
        viewcount:
          type: integer
        deleted:
          type: integer
        locked:
          type: integer
        pinned:
          type: integer
        upvotes:
          type: integer
        downvotes:
          type: integer
        deleterUid:
          type: integer
        titleRaw:
          type: string
        timestampISO:
          type: string
        lastposttimeISO:
          type: string
        votes:
          type: integer
        teaserPid:
          type: object
          properties: {}
          example: {}
        category:
          type: object
          properties: {}
          example: {}
        user:
          type: object
          properties: {}
          example: {}
        teaser:
          type: object
          properties: {}
          example: {}
        tags:
          type: object
          properties: {}
          example: {}
        isOwner:
          type: boolean
        ignored:
          type: boolean
        unread:
          type: boolean
        bookmark:
          type: object
          properties: {}
          example: {}
        unreplied:
          type: boolean
        icons:
          type: object
          properties: {}
          example: {}
        index:
          type: integer
      example:
        pinned: 6
        lastposttime: 1
        upvotes: 8
        unreplied: true
        unread: true
        timestampISO: timestampISO
        title: title
        teaserPid: {}
        tid: 7
        uid: 4
        lastposttimeISO: lastposttimeISO
        deleterUid: 6
        isOwner: true
        mainPid: 1
        locked: 9
        slug: slug
        timestamp: 1
        ignored: true
        index: 6
        downvotes: 9
        icons: {}
        tags: {}
        bookmark: {}
        deleted: 9
        postcount: 6
        viewcount: 5
        titleRaw: titleRaw
        votes: 3
        category: {}
        user: {}
        cid: 1
        teaser: {}
    discussionForumTopicResponse_topics:
      type: object
      properties:
        cid:
          type: integer
        lastposttime:
          type: integer
        mainPid:
          type: integer
        postcount:
          type: integer
        slug:
          type: string
        tid:
          type: integer
        timestamp:
          type: integer
        title:
          type: string
        uid:
          type: integer
        viewcount:
          type: integer
        deleted:
          type: integer
        locked:
          type: integer
        pinned:
          type: integer
        upvotes:
          type: integer
        downvotes:
          type: integer
        deleterUid:
          type: integer
        titleRaw:
          type: string
        timestampISO:
          type: string
        lastposttimeISO:
          type: string
        votes:
          type: integer
        teaserPid:
          type: object
          properties: {}
          example: {}
        category:
          $ref: '#/components/schemas/discussionForumUserDetails_category'
        user:
          $ref: '#/components/schemas/discussionForumUserDetails_user'
        teaser:
          type: object
          properties: {}
          example: {}
        tags:
          type: object
          properties: {}
          example: {}
        isOwner:
          type: boolean
        ignored:
          type: boolean
        unread:
          type: boolean
        bookmark:
          type: object
          properties: {}
          example: {}
        unreplied:
          type: boolean
        icons:
          type: object
          properties: {}
          example: {}
        index:
          type: integer
      example:
        pinned: 1
        lastposttime: 5
        upvotes: 1
        unreplied: true
        unread: true
        timestampISO: timestampISO
        title: title
        teaserPid: {}
        tid: 7
        uid: 3
        lastposttimeISO: lastposttimeISO
        deleterUid: 6
        isOwner: true
        mainPid: 5
        locked: 7
        slug: slug
        timestamp: 9
        ignored: true
        index: 1
        downvotes: 1
        icons: {}
        tags: {}
        bookmark: {}
        deleted: 4
        postcount: 2
        viewcount: 2
        titleRaw: titleRaw
        votes: 7
        category:
          parentCid: 6
          bgColor: bgColor
          color: color
          backgroundImage: {}
          name: name
          icon: icon
          slug: slug
          cid: 2
          imageClass: imageClass
        user:
          uid: 6
          'icon:bgColor': 'icon:bgColor'
          'icon:text': 'icon:text'
          userslug: userslug
          picture: {}
          username: username
          status: status
        cid: 1
        teaser: {}
    discussionForumTopicResponse_categories:
      type: object
      properties:
        cid:
          type: integer
        name:
          type: string
        level:
          type: string
        icon:
          type: string
        parentCid:
          type: integer
        color:
          type: string
        bgColor:
          type: string
        imageClass:
          type: string
        selected:
          type: boolean
      example:
        parentCid: 5
        color: color
        bgColor: bgColor
        level: level
        name: name
        icon: icon
        selected: true
        cid: 4
        imageClass: imageClass
    discussionForumCreateTopicResponse_payload_topicData:
      type: object
      properties:
        cid:
          type: integer
        lastposttime:
          type: integer
        mainPid:
          type: integer
        postcount:
          type: integer
        slug:
          type: string
        tid:
          type: integer
        timestamp:
          type: integer
        title:
          type: string
        uid:
          type: integer
        viewcount:
          type: integer
        deleted:
          type: integer
        locked:
          type: integer
        pinned:
          type: integer
        upvotes:
          type: integer
        downvotes:
          type: integer
        deleterUid:
          type: integer
        titleRaw:
          type: string
        timestampISO:
          type: string
        lastposttimeISO:
          type: string
        votes:
          type: integer
        teaserPid:
          type: object
          properties: {}
          example: {}
        category:
          type: object
          properties: {}
          example: {}
        user:
          type: object
          properties: {}
          example: {}
        teaser:
          type: object
          properties: {}
          example: {}
        tags:
          type: object
          properties: {}
          example: {}
        isOwner:
          type: boolean
        ignored:
          type: boolean
        unread:
          type: boolean
        bookmark:
          type: object
          properties: {}
          example: {}
        unreplied:
          type: integer
        icons:
          type: object
          properties: {}
          example: {}
        mainPost:
          type: object
          properties: {}
          example: {}
      example:
        pinned: 4
        lastposttime: 6
        upvotes: 7
        unreplied: 6
        mainPost: {}
        unread: true
        timestampISO: timestampISO
        title: title
        teaserPid: {}
        tid: 5
        uid: 7
        lastposttimeISO: lastposttimeISO
        deleterUid: 1
        isOwner: true
        mainPid: 1
        locked: 2
        slug: slug
        timestamp: 2
        ignored: true
        downvotes: 1
        icons: {}
        tags: {}
        bookmark: {}
        deleted: 3
        postcount: 5
        viewcount: 9
        titleRaw: titleRaw
        votes: 1
        category: {}
        user: {}
        cid: 0
        teaser: {}
    discussionForumCreateTopicResponse_payload_postData:
      type: object
      properties:
        pid:
          type: integer
        uid:
          type: integer
        tid:
          type: integer
        content:
          type: string
        timestamp:
          type: integer
        cid:
          type: integer
        isMain:
          type: boolean
        user:
          type: object
          properties: {}
          example: {}
        topic:
          type: object
          properties: {}
          example: {}
        index:
          type: integer
        votes:
          type: integer
        bookmarked:
          type: boolean
        display_edit_tools:
          type: boolean
        display_delete_tools:
          type: boolean
        display_moderator_tools:
          type: boolean
        display_move_tools:
          type: boolean
        selfPost:
          type: boolean
        timestampISO:
          type: string
      example:
        isMain: true
        bookmarked: true
        selfPost: true
        index: 9
        pid: 7
        timestampISO: timestampISO
        display_edit_tools: true
        tid: 4
        content: content
        uid: 1
        display_moderator_tools: true
        display_move_tools: true
        topic: {}
        votes: 6
        display_delete_tools: true
        user: {}
        timestamp: 5
        cid: 9
    discussionForumCreateTopicResponse_payload:
      type: object
      properties:
        topicData:
          $ref: >-
            #/components/schemas/discussionForumCreateTopicResponse_payload_topicData
        postData:
          $ref: >-
            #/components/schemas/discussionForumCreateTopicResponse_payload_postData
      example:
        topicData:
          pinned: 4
          lastposttime: 6
          upvotes: 7
          unreplied: 6
          mainPost: {}
          unread: true
          timestampISO: timestampISO
          title: title
          teaserPid: {}
          tid: 5
          uid: 7
          lastposttimeISO: lastposttimeISO
          deleterUid: 1
          isOwner: true
          mainPid: 1
          locked: 2
          slug: slug
          timestamp: 2
          ignored: true
          downvotes: 1
          icons: {}
          tags: {}
          bookmark: {}
          deleted: 3
          postcount: 5
          viewcount: 9
          titleRaw: titleRaw
          votes: 1
          category: {}
          user: {}
          cid: 0
          teaser: {}
        postData:
          isMain: true
          bookmarked: true
          selfPost: true
          index: 9
          pid: 7
          timestampISO: timestampISO
          display_edit_tools: true
          tid: 4
          content: content
          uid: 1
          display_moderator_tools: true
          display_move_tools: true
          topic: {}
          votes: 6
          display_delete_tools: true
          user: {}
          timestamp: 5
          cid: 9
    discussionForumGroupResponse_payload:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        createtime:
          type: integer
        userTitle:
          type: string
        userTitleEnabled:
          type: integer
        description:
          type: string
        memberCount:
          type: integer
        hidden:
          type: integer
        system:
          type: integer
        private:
          type: integer
        disableJoinRequests:
          type: integer
        disableLeave:
          type: integer
      example:
        userTitle: userTitle
        createtime: 0
        private: 2
        system: 5
        hidden: 5
        userTitleEnabled: 6
        disableLeave: 9
        memberCount: 1
        name: name
        description: description
        disableJoinRequests: 7
        slug: slug
    discussionForumCreateUserResponse_payload:
      type: object
      properties:
        uid:
          type: integer
      example:
        uid: 0
    discussionForumReadForumCID:
      type: object
      properties:
        request:
          type: object
          properties:
            type:
              type: string
            identifier:
              type: string
    discussionForumCreateForumCID:
      type: object
      properties:
        request:
          type: object
          properties:
            sbType:
              type: string
            sbIdentifier:
              type: string
            cid:
              type: integer
    discussionForumListOfTags:
      type: object
      properties:
        value:
          type: string
        score:
          type: integer
        valueEscaped:
          type: string
        color:
          type: string
        bgColor:
          type: string
      example:
        value: learning
        score: 1
        valueEscaped: learning
        color: '#FFF'
        bgColor: '#EEE'
    discussionForumCreateUserOIDC:
      type: object
      properties:
        request:
          type: object
          properties:
            username:
              type: string
            identifier:
              type: string
    discussionForumCreateUserResponseOIDC:
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        params:
          type: object
          properties:
            resmsgid:
              type: string
            msgid:
              type: string
            status:
              type: string
            msg:
              type: string
        responseCode:
          type: string
        result:
          type: object
          properties:
            userId:
              type: object
              properties:
                uid:
                  type: integer
            userSlug:
              type: string
            userName:
              type: string
    discussionForumModeratorsResponse:
      type: object
      properties:
        uid:
          type: integer
        username:
          type: string
        userslug:
          type: string
        picture:
          type: string
        displayname:
          type: string
        'icon:text':
          type: string
        'icon:bgColor':
          type: string
    discussionForumTopTopicResponse:
      type: object
      properties:
        nextStart:
          type: integer
        topicCount:
          type: integer
        topics:
          type: array
          items:
            $ref: '#/components/schemas/discussionForumTopicDetails'
        tids:
          type: object
        canPost:
          type: object
        showSelect:
          type: object
        showTopicTools:
          type: object
        categories:
          type: object
        allCategoriesUrl:
          type: string
        selectedCategory:
          type: object
        selectedCids:
          type: object
        'feeds:disableRSS':
          type: integer
        rssFeedUrl:
          type: string
        title:
          type: string
        filters:
          type: object
        selectedFilter:
          type: object
        terms:
          type: object
        selectedTerm:
          type: object
        pagination:
          type: object
        breadcrumbs:
          type: object
        loggedIn:
          type: object
        relative_path:
          type: string
        template:
          type: object
        url:
          type: string
        bodyClass:
          type: string
        _header:
          type: object
        widgets:
          type: object
    discussionForumCountOfTopic:
      type: integer
    discussionForumTeaserTopicDetails:
      type: object
      properties:
        pid:
          type: integer
        tid:
          type: integer
        content:
          type: string
        uid:
          type: integer
        timestamp:
          type: integer
        deleted:
          type: object
        upvotes:
          type: integer
        downvotes:
          type: integer
        replies:
          type: integer
        votes:
          type: integer
        timestampISO:
          type: string
        user:
          type: object
          properties:
            uid:
              type: integer
            username:
              type: string
            userslug:
              type: string
            picture:
              type: object
            status:
              type: string
            displayname:
              type: string
            'icon:text':
              type: string
            'icon:bgColor':
              type: string
        topic:
          type: object
          properties:
            uid:
              type: integer
            tid:
              type: integer
            title:
              type: string
            cid:
              type: integer
            slug:
              type: string
            deleted:
              type: integer
            postcount:
              type: integer
            mainPid:
              type: integer
            teaserPid:
              type: object
            titleRaw:
              type: string
        category:
          type: object
          properties:
            cid:
              type: integer
            name:
              type: string
            icon:
              type: string
            slug:
              type: string
            parentCid:
              type: integer
            bgColor:
              type: string
            color:
              type: string
            backgroundImage:
              type: object
            imageClass:
              type: string
        isMainPost:
          type: object
    discussionForumTopicPaginationResponse:
      type: object
      properties:
        pagination:
          type: object
          properties:
            prev:
              type: object
              properties:
                page:
                  type: integer
                active:
                  type: string
            next:
              type: object
              properties:
                page:
                  type: integer
                active:
                  type: string
            first:
              type: object
              properties:
                page:
                  type: integer
                active:
                  type: string
            last:
              type: object
              properties:
                page:
                  type: integer
                active:
                  type: string
            rel:
              type: object
            pages:
              type: object
            currentPage:
              type: integer
            pageCount:
              type: integer
    discussionForumAddTagsToTopic:
      type: array
      items:
        type: string
    discussionForumAddPrivilagesToCategory:
      type: array
      items:
        type: string
    programListDownload200SuccessRequest:
      title: ListDownload200SuccessRequest
      description: Successful Program List Download generated from DB
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programListDownloadRequest'
      example:
        request:
          filters:
            program_id:
              - afdfa9a0-1dbc-11eb-81b1-659ec274e395
    programListDownloadRequest:
      title: ListDownloadRequest
      description: Program list/data Download request/generate program List Data
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/programListDownloadFilters'
      example:
        filters:
          program_id:
            - afdfa9a0-1dbc-11eb-81b1-659ec274e395
    programListDownloadFilters:
      title: Filters
      description: Program list/data download filters Request
      required:
        - program_id
      type: object
      properties:
        program_id:
          type: array
          items:
            type: string
          description: list of unique program ids
      example:
        program_id:
          - afdfa9a0-1dbc-11eb-81b1-659ec274e395
    programListDownload400BadRequestRequest:
      title: ListDownload400BadRequestRequest
      description: 'Failure List/data Download Request, invalid request body'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programListNominationDownloadRequest1'
      example:
        request:
          filters: {}
    programListNominationDownloadRequest1:
      title: ListNominationDownloadRequest1
      description: Nomination List/data Download Request
      required:
        - filters
      type: object
      properties:
        filters:
          type: object
          description: This represents the filter data
      example:
        filters: {}
    programListDownload404NotFoundRequest:
      title: ListDownload404NotFoundRequest
      description: 'Failure Program list/data Download Request, invalid url/request body'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programListDownloadRequest'
      example:
        request:
          filters:
            program_id:
              - afdfa9a0-1dbc-11eb-81b1-659ec274e395
    programProgramListsuccess-200Request:
      title: ProgramListsuccess-200Request
      description: Successful Program Read Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programProgramListRequest'
      example:
        request:
          filters:
            enrolled_id:
              user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
            status:
              - Live
              - Unlisted
    programProgramListRequest:
      title: ProgramListRequest
      description: Program Read Request/Fetch Program data Request
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/programProgramListFilters'
      example:
        filters:
          enrolled_id:
            user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
          status:
            - Live
            - Unlisted
    programProgramListFilters:
      title: ProgramListFilters
      description: 'Program list/option filters,required enrolled_id and status'
      required:
        - enrolled_id
        - status
      type: object
      properties:
        enrolled_id:
          $ref: '#/components/schemas/programEnrolledId'
        status:
          type: array
          items:
            type: string
          description: list/options key value status of program
      example:
        enrolled_id:
          user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
        status:
          - Live
          - Unlisted
    programEnrolledId:
      title: EnrolledId
      description: User id
      required:
        - user_id
      type: object
      properties:
        user_id:
          type: string
          description: unique id identifying specific user
      example:
        user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
    programProgramList400-errorRequest:
      title: ProgramList400-errorRequest
      description: 'Failure Program Read/list Request, invalid request body'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programProgramList400Request'
      example:
        request:
          filter:
            status:
              - Live
              - Unlisted
            role:
              - REVIEWER
            user_id: d63056e0-c58d-4724-aa84-285a68ea24fb
    programProgramList400Request:
      title: ProgramList400Request
      description: Failure Program List Request
      required:
        - filter
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/programProgramListFilter'
      example:
        filter:
          status:
            - Live
            - Unlisted
          role:
            - REVIEWER
          user_id: d63056e0-c58d-4724-aa84-285a68ea24fb
    programProgramListFilter:
      title: ProgramListFilter
      description: 'Program List/read filter Request, required status, role, user_id'
      required:
        - status
        - role
        - user_id
      type: object
      properties:
        status:
          type: array
          items:
            type: string
          description: list/options key value status of program
        role:
          type: array
          items:
            type: string
          description: list roles supported by program
        user_id:
          type: string
          description: unique id identifying specific user
      example:
        status:
          - Live
          - Unlisted
        role:
          - REVIEWER
        user_id: d63056e0-c58d-4724-aa84-285a68ea24fb
    programProgramList500-errorRequest:
      title: ProgramList500-errorRequest
      description: 'Failure Program Read Request, invalid url/request mode'
      required:
        - requests
      type: object
      properties:
        requests:
          $ref: '#/components/schemas/programProgramList500Requests'
      example:
        requests:
          filters:
            status:
              - Live
              - Unlisted
            role:
              - REVIEWER
            user_id: d63056e0-c58d-4724-aa84-285a68ea24fb
            medium:
              - English
            gradeLevel:
              - Class 1
    programProgramList500Requests:
      title: ProgramList500Requests
      description: 'Failure Program Read Request, required filter'
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/programProgramList500Filters'
      example:
        filters:
          status:
            - Live
            - Unlisted
          role:
            - REVIEWER
          user_id: d63056e0-c58d-4724-aa84-285a68ea24fb
          medium:
            - English
          gradeLevel:
            - Class 1
    programProgramList500Filters:
      title: ProgramList500Filters
      description: >-
        Failure Program Read/List Filters, required status, role, user_id,
        medium, gradelevel
      required:
        - status
        - role
        - user_id
        - medium
        - gradeLevel
      type: object
      properties:
        status:
          type: array
          items:
            type: string
          description: list/options key value status of program
        role:
          type: array
          items:
            type: string
          description: list/options roles supported by program
        user_id:
          type: string
          description: Unique id identifies specific user
        medium:
          type: array
          items:
            type: string
          description: list of medium supported by program
        gradeLevel:
          type: array
          items:
            type: string
          description: grade level list supported by program
      example:
        status:
          - Live
          - Unlisted
        role:
          - REVIEWER
        user_id: d63056e0-c58d-4724-aa84-285a68ea24fb
        medium:
          - English
        gradeLevel:
          - Class 1
    programConfigurationSearch400BadRequestRequest:
      title: ConfigurationSearch400BadRequestRequest
      description: 'Failure configuring Search Request, missing key or status'
      required:
        - request
      type: object
      properties:
        request:
          type: object
      example:
        request: {}
    programConfigurationSearch200SuccessRequest:
      title: ConfigurationSearch200SuccessRequest
      description: Successful Configuration Search Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programConfigurationSearch200Request'
      example:
        request:
          key: overrideMetaData
          status: active
    programConfigurationSearch200Request:
      title: ConfigurationSearch200Request
      description: 'Successful Configuration Search Request,required key or status'
      required:
        - key
        - status
      type: object
      properties:
        key:
          type: string
          description: Unique key for configuration Search
        status:
          type: string
          description: program status for configuration Search
      example:
        key: overrideMetaData
        status: active
    programConfigurationSearch400BadRequest:
      title: ConfigurationSearch400BadRequest
      description: >-
        Failure Configuring Search Request, invalid request body/missing
        required fields
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
          description: unique id identifies particular program
        ver:
          type: string
          description: version
        ts:
          type: string
          description: timestamp
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: response code/status
        result:
          $ref: '#/components/schemas/programConfigurationSearchResult'
      example:
        id: api.configuration.search
        ver: 1
        ts: 2020-12-02T11:03:07.275Z
        params:
          resmsgid: f5241db0-348d-11eb-9c32-15914148e3ce
          msgid: f80986af-e190-f6a4-04c4-c1b984e056e4
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          configuration:
            id: 9
            key: overrideMetaData
            value: >-
              [{"code":"name","dataType":"text","editable":true},{"code":"learningOutcome","dataType":"list","editable":true},{"code":"attributions","dataType":"list","editable":false},{"code":"copyright","dataType":"text","editable":false},{"code":"creator","dataType":"text","editable":false},{"code":"license","dataType":"list","editable":false},{"code":"contentPolicyCheck","dataType":"boolean","editable":false}]
            status: active
            createdby: null
            updatedby: null
            createdon: 2020-09-03T11:24:42.130Z
            updatedon: 2020-09-03T11:24:42.130Z
    programProgramParams:
      title: Program Params
      description: Required Program list/parameters
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          description: unique response message id
        msgid:
          type: string
          description: unique message id
        status:
          type: string
          description: program status
        err:
          type: string
          nullable: true
          description: detailed object of error occurred
        errmsg:
          type: string
          nullable: true
          description: error message/error description
      example:
        resmsgid: f5241db0-348d-11eb-9c32-15914148e3ce
        msgid: f80986af-e190-f6a4-04c4-c1b984e056e4
        status: successful
        err: null
        errmsg: null
    programConfigurationSearchResult:
      title: ConfigurationSearchResult
      description: Result object/data for configuration search
      required:
        - configuration
      type: object
      properties:
        configuration:
          $ref: '#/components/schemas/programConfiguration'
      example:
        configuration:
          id: 9
          key: overrideMetaData
          value: >-
            [{"code":"name","dataType":"text","editable":true},{"code":"learningOutcome","dataType":"list","editable":true},{"code":"attributions","dataType":"list","editable":false},{"code":"copyright","dataType":"text","editable":false},{"code":"creator","dataType":"text","editable":false},{"code":"license","dataType":"list","editable":false},{"code":"contentPolicyCheck","dataType":"boolean","editable":false}]
          status: active
          createdby: null
          updatedby: null
          createdon: 2020-09-03T11:24:42.130Z
          updatedon: 2020-09-03T11:24:42.130Z
    programConfiguration:
      title: Configuration
      description: Configuration Parameters
      required:
        - id
        - key
        - value
        - status
        - createdby
        - updatedby
        - createdon
        - updatedon
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique configuration id
        key:
          type: string
          description: Unique Configuration key
        value:
          type: string
          description: value/data of the respective key
        status:
          type: string
          description: Configuration Status
        createdby:
          type: string
          nullable: true
          description: program configuration created by
        updatedby:
          type: string
          nullable: true
          description: program configuration updated by
        createdon:
          type: string
          description: program configuration created on
        updatedon:
          type: string
          description: program configuration updated on
      example:
        id: 9
        key: overrideMetaData
        value: >-
          [{"code":"name","dataType":"text","editable":true},{"code":"learningOutcome","dataType":"list","editable":true},{"code":"attributions","dataType":"list","editable":false},{"code":"copyright","dataType":"text","editable":false},{"code":"creator","dataType":"text","editable":false},{"code":"license","dataType":"list","editable":false},{"code":"contentPolicyCheck","dataType":"boolean","editable":false}]
        status: active
        createdby: null
        updatedby: null
        createdon: 2020-09-03T11:24:42.130Z
        updatedon: 2020-09-03T11:24:42.130Z
    programProgram-PublishParams:
      title: Program-PublishParams
      description: Parameters/list of program publish
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          description: Unique response message id
        msgid:
          type: string
          nullable: true
          description: Unique message id
        status:
          type: string
          description: status of the response
        err:
          type: string
          description: data/details on error occurred
        errmsg:
          type: string
          description: error message
      example:
        resmsgid: 46298c50-353c-11eb-ada5-dde7a2458a3f
        msgid: null
        status: failed
        err: INVALID_TOKEN
        errmsg: INVALID_TOKEN
    programNominationUpdate200SuccessRequest:
      title: NominationUpdate200SuccessRequest
      description: Successfull Request to update Nomination Data
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programNominationUpdateRequest'
      example:
        request:
          program_id: c43f7790-0a2a-11eb-a2e9-4fe29a51bb70
          status: Initiated
          content_types:
            - Teacher Resource
          user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
          updatedby: bcc23eec-5290-4ca2-8f3e-144a24f03b6d
    programNominationUpdateRequest:
      title: NominationUpdateRequest
      description: Request/list for Update Nomination
      required:
        - program_id
        - status
        - content_types
        - user_id
        - updatedby
      type: object
      properties:
        program_id:
          type: string
          description: unique id identifies particular program
        status:
          type: string
          description: Status/state of nomination
        content_types:
          type: array
          items:
            type: string
          description: contenttypes list for nomination update
        user_id:
          type: string
          description: unique id specifies a user
        updatedby:
          type: string
          description: credential of user updated nomination
      example:
        program_id: c43f7790-0a2a-11eb-a2e9-4fe29a51bb70
        status: Initiated
        content_types:
          - Teacher Resource
        user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
        updatedby: bcc23eec-5290-4ca2-8f3e-144a24f03b6d
    programnominationupdate400BadRequest:
      title: nominationupdate400BadRequest
      description: 'Failure in updating nomination data, invalid request body'
      required:
        - id
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
          description: unique id of particular user
        ts:
          type: string
          description: Represents the EPOCH epoch time in milliseconds
        params:
          $ref: '#/components/schemas/programNominationUpdateParams'
        responseCode:
          type: string
          description: Code/status of response of the nomination update request
        result:
          $ref: '#/components/schemas/programNominationUpdateResult'
    programNominationUpdateParams:
      title: NominationUpdateParams
      description: Parameters/list for update Nomination
      required:
        - resmsgid
        - msgid
        - status
      type: object
      properties:
        resmsgid:
          type: string
          description: response message id
        msgid:
          type: string
          nullable: true
          description: unique message id required for update nomination
        status:
          type: string
          description: status/state of the nomination
      example:
        resmsgid: 776d9731-34c3-11eb-9c32-15914148e3ce
        msgid: null
        status: failed
    programNominationUpdateResult:
      title: NominationUpdateResult
      description: Object data/Result of Nomination Update
      required:
        - name
        - parent
        - original
        - sql
        - parameters
      type: object
      properties:
        name:
          type: string
          description: Name of the program
        parent:
          $ref: '#/components/schemas/programNominationUpdatParent'
        original:
          $ref: '#/components/schemas/programNominationUpdateOriginal'
        sql:
          type: string
          description: sql statement
        parameters:
          type: array
          description: parameter/object for nomination update
          items:
            type: array
            items:
              type: string
    programNominationUpdatParent:
      title: NominationUpdatParent
      description: Update nomination Parent parameters
      required:
        - name
        - length
        - severity
        - code
        - file
        - line
        - routine
        - sql
        - parameters
      type: object
      properties:
        name:
          type: string
          description: name of the program
        length:
          type: integer
          format: int32
          description: length of the data params
        severity:
          type: string
          description: severity level
        code:
          type: string
          description: unique code for status of nomination
        file:
          type: string
          description: file path/name for update nomination
        line:
          type: string
          description: line
        routine:
          type: string
          description: set of routine for update sql statement
        sql:
          type: string
          description: sql statement
        parameters:
          type: array
          description: This represents the list of parameters for nomination update
          items:
            type: array
            items:
              type: string
    programNominationUpdateOriginal:
      title: NominationUpdateOriginal
      description: Nomination Update Parameters
      required:
        - name
        - length
        - severity
        - code
        - file
        - line
        - routine
        - sql
        - parameters
      type: object
      properties:
        name:
          type: string
          description: name of the program
        length:
          type: integer
          format: int32
          description: length of the data params
        severity:
          type: string
          description: severity level
        code:
          type: string
          description: unique code status of nomination
        file:
          type: string
          description: file path/name nomination update
        line:
          type: string
          description: line
        routine:
          type: string
          description: routine set of sql statements
        sql:
          type: string
          description: sql statement for update nomination
        parameters:
          type: array
          description: This represents the list of parameters for nomination update
          items:
            type: array
            items:
              type: string
    programNominationUpdate400BadRequestRequest:
      title: NominationUpdate400BadRequestRequest
      description: 'Failure in Updating Nomination Request, invalid body request'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programNominationUpdateRequest'
      example:
        request:
          program_id: c43f7790-0a2a-11eb-a2e9-4fe29a51bb70
          status: ''
          content_types:
            - Teacher Resource
          user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
          updatedby: bcc23eec-5290-4ca2-8f3e-144a24f03b6d
    programNominationUpdate404NotFoundRequest:
      title: NominationUpdate404NotFoundRequest
      description: 'Failure Nomination Update Request, invalid url/request body'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programNominationUpdateRequest'
      example:
        request:
          program_id: c43f7790-0a2a-11eb-a2e9-4fe29a51bb70
          status: Initiated
          content_types:
            - Teacher Resource
          user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
          updatedby: bcc23eec-5290-4ca2-8f3e-144a24f03b6d
    programNominationListDownload200SuccessRequest:
      title: NominationListDownload200SuccessRequest
      description: Successful Download Nomination List Data Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programNominationListDownloadRequest'
      example:
        request:
          filters:
            program_name: allTypeContent
            program_id: d16524d0-348a-11eb-9c32-15914148e3ce
            status:
              - Pending
              - Approved
              - Rejected
    programNominationListDownloadRequest:
      title: NominationListDownloadRequest
      description: List/options for Download Nomination List Request
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/programNominationListDownloadRequestFilters'
      example:
        filters:
          program_name: allTypeContent
          program_id: d16524d0-348a-11eb-9c32-15914148e3ce
          status:
            - Pending
            - Approved
            - Rejected
    programNominationListDownloadRequestFilters:
      title: NominationListDownloadRequestFilters
      description: Request Filters for Nomination Download List
      required:
        - program_name
        - program_id
        - status
      type: object
      properties:
        program_name:
          type: string
          description: name of the program
        program_id:
          type: string
          description: unique id for identifying a specific program
        status:
          type: array
          items:
            type: string
          description: state/status list of Nomination Download
      example:
        program_name: allTypeContent
        program_id: d16524d0-348a-11eb-9c32-15914148e3ce
        status:
          - Pending
          - Approved
          - Rejected
    programNominationListDownload400BadRequestwithoutProgram-idRequest:
      title: NominationListDownload400BadRequestwithoutProgram-idRequest
      description: 'Failure in Downloading Nomination List request, missing program_id'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programNominationListDownloadRequest'
      example:
        request:
          filters:
            program_name: allTypeContent
            program_id: ''
            status:
              - Pending
              - Approved
              - Rejected
    programNominationListDownload404NotFoundRequest:
      title: NominationListDownload404NotFoundRequest
      description: 'Failure on Downloading Nomination List request, invalid url/request body'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programNominationListDownloadRequest'
      example:
        request:
          filters:
            program_name: allTypeContent
            program_id: d16524d0-348a-11eb-9c32-15914148e3ce
            status:
              - Pending
              - Approved
              - Rejected
    programNominationList200SuccessRequest:
      title: NominationList200SuccessRequest
      description: Successful in fetching nomination list
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programListNominationDownloadRequest1'
      example:
        request:
          filters: {}
    programNominationList404NotFoundRequest:
      title: NominationList404NotFoundRequest
      description: 'Failure in fetching Nomination List, invalid request body/url'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programListNominationDownloadRequest1'
      example:
        request:
          filters: {}
    programPreference-create200SuccessRequest:
      title: Preference-create200SuccessRequest
      description: Successful Create program User Preference based on user_id or program_id
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programPreference-Request'
      example:
        request:
          user_id: 48dc0e70-2775-474b-9b78-def27d047836
          program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
          preference:
            medium:
              - English
            subject:
              - ''
            gradeLevel:
              - Class 7
          type: sourcing
    programPreference-Request:
      title: Preference-Request
      description: List/request object for create program preference
      required:
        - user_id
        - program_id
        - preference
        - type
      type: object
      properties:
        user_id:
          type: string
          description: unique id for identifying a particular user
        program_id:
          type: string
          description: unique id for identifies a particular program
        preference:
          $ref: '#/components/schemas/programPreference'
        type:
          type: string
          description: preference type
      example:
        user_id: 48dc0e70-2775-474b-9b78-def27d047836
        program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
        preference:
          medium:
            - English
          subject:
            - ''
          gradeLevel:
            - Class 7
        type: sourcing
    programPreference:
      title: Preference
      description: preference list of a program
      required:
        - medium
        - subject
        - gradeLevel
      type: object
      properties:
        medium:
          type: array
          items:
            type: string
          description: medium list/options of a program preference
        subject:
          type: array
          items:
            type: string
          description: subject list/options of a program preference
        gradeLevel:
          type: array
          items:
            type: string
          description: grade level list/options of a program preference
      example:
        medium:
          - English
        subject:
          - ''
        gradeLevel:
          - Class 7
    programPreference-create400BadRequestRequest:
      title: Preference-create400BadRequestRequest
      description: 'Failure Create Preference, invalid request body'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programPreference-Request'
      example:
        request:
          user_id: 48dc0e70-2775-474b-9b78-def27d047836
          program_id: ''
          preference:
            medium:
              - English
            subject:
              - ''
            gradeLevel:
              - Class 7
          type: sourcing
    programPreference-create404NotFoundRequest:
      title: Preference-create404NotFoundRequest
      description: 'Failure Create Preference, invalid url/request body'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programPreference-Request'
      example:
        request:
          user_id: 48dc0e70-2775-474b-9b78-def27d047836
          program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
          preference:
            medium:
              - ''
            subject:
              - ''
            gradeLevel:
              - ' '
          type: sourcing
    programPreference-read200SuccessRequest:
      title: Preference-read200SuccessRequest
      description: Successful Read Preference Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programPreference-readRequest'
      example:
        request:
          user_id: 48dc0e70-2775-474b-9b78-def27d047836
          program_id: ef3ecc80-3553-11eb-84ed-692ec8c8dbe9
    programPreference-readRequest:
      title: Preference-readRequest
      description: fetch the user preferences request based on user_id
      required:
        - user_id
        - program_id
      type: object
      properties:
        user_id:
          type: string
          description: Unique id for identifying user
        program_id:
          type: string
          description: Unique id for identifying specific program
      example:
        user_id: 48dc0e70-2775-474b-9b78-def27d047836
        program_id: ef3ecc80-3553-11eb-84ed-692ec8c8dbe9
    programPreference-read400BadRequestRequest:
      title: Preference-read400BadRequestRequest
      description: 'Failure in fetch user Read preference, invalid request body'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programPreference-readRequest'
      example:
        request:
          user_id: ''
          program_id: ef3ecc80-3553-11eb-84ed-692ec8c8dbe9
    programPreference-update200SuccessRequest:
      title: Preference-update200SuccessRequest
      description: Successful user preference update Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programPreference-Request'
      example:
        request:
          user_id: 48dc0e70-2775-474b-9b78-def27d047836
          program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
          preference:
            medium:
              - English
            subject:
              - ''
            gradeLevel:
              - ''
          type: sourcing
    programPreference-update400BadRequestRequest:
      title: Preference-update400BadRequestRequest
      description: 'Failure in update user preference, invalid body request'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programPreference-Request'
      example:
        request:
          user_id: 48dc0e70-2775-474b-9b78-def27d047836
          program_id: ''
          preference:
            medium:
              - English
            subject:
              - ''
            gradeLevel:
              - ''
          type: sourcing
    programPreference-update404NotFoundRequest:
      title: Preference-update404NotFoundRequest
      description: 'Failure in update user preference, invalid url/body request'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programPreference-Request'
      example:
        request:
          user_id: 48dc0e70-2775-474b-9b78-def27d047836
          program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
          preference:
            medium:
              - English
            subject:
              - ''
            gradeLevel:
              - ''
          type: sourcing
    programProgramUpdate200SuccessRequest:
      title: ProgramUpdate200SuccessRequest
      description: Successful Program Update
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programProgramUpdateRequest'
    programProgramUpdateRequest:
      title: ProgramUpdateRequest
      description: List Request for program update
      required:
        - name
        - description
        - nomination_enddate
        - shortlisting_enddate
        - content_submission_enddate
        - rewards
        - content_types
        - target_collection_category
        - sourcing_org_name
        - rootorg_id
        - createdby
        - createdon
        - startdate
        - slug
        - type
        - default_roles
        - enddate
        - status
        - program_id
        - collection_ids
        - config
      type: object
      properties:
        name:
          type: string
          description: Name of the program
        description:
          type: string
          description: Details info about the program
        nomination_enddate:
          type: string
          description: End date for nomination data
        shortlisting_enddate:
          type: string
          description: End date for nomination Shortlisting
        content_submission_enddate:
          type: string
          description: End date for content submission
        rewards:
          type: string
          description: rewards details of the program
        content_types:
          type: array
          description: list of content types supported in a program
          items:
            type: string
        target_collection_category:
          type: array
          items:
            type: string
          description: list of collection category target of a program
        sourcing_org_name:
          type: string
          description: name of sourcing organization
        rootorg_id:
          type: string
          description: unique id of root organization name
        createdby:
          type: string
          description: details on program created by
        createdon:
          type: string
          description: creation date of program
        startdate:
          type: string
          description: starting date of the program
        slug:
          type: string
          description: slug details of the program
        type:
          type: string
          description: type of the program
        default_roles:
          type: array
          items:
            type: string
          description: default roles supported by the program
        enddate:
          type: string
          description: End date of the program
        status:
          type: string
          description: status code/state of the program
        program_id:
          type: string
          description: unique string for identifying a particular program
        collection_ids:
          type: array
          items:
            type: string
          description: list of collection supported by the program
        config:
          $ref: '#/components/schemas/programProgramUpdateConfig'
    programProgramUpdateConfig:
      title: ProgramUpdateConfig
      description: Configuration/list for program update
      required:
        - defaultContributeOrgReview
        - _comments
        - loginReqired
        - framework
        - board
        - gradeLevel
        - medium
        - subject
        - roles
        - header
        - components
        - sharedContext
        - collections
      type: object
      properties:
        defaultContributeOrgReview:
          type: boolean
          description: default review enabled for contribute org
        _comments:
          type: string
          description: Info/details in program update
        loginReqired:
          type: boolean
          description: status if login required on program update
        framework:
          type: array
          items:
            type: string
          description: framework list on program update
        board:
          type: array
          items:
            type: string
          description: list of board on program update
        gradeLevel:
          type: array
          items:
            type: string
          description: grade level list on program update
        medium:
          type: array
          items:
            type: string
          description: list of medium supported by a program
        subject:
          type: array
          items:
            type: string
          description: subject list supported  by a program
        roles:
          type: array
          items:
            $ref: '#/components/schemas/programProgramUpdateRole'
          description: list roles supported by the program
        header:
          $ref: '#/components/schemas/programHeader'
        components:
          type: array
          items:
            $ref: '#/components/schemas/programComponent'
          description: component list of a program
        sharedContext:
          type: array
          items:
            type: string
          description: shared context list supported by a program
        collections:
          type: array
          items:
            $ref: '#/components/schemas/programCollection'
          description: collection list of a program
    programProgramUpdateRole:
      title: ProgramUpdate Role
      description: Update program role
      required:
        - id
        - name
        - defaultTab
        - tabs
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique id for identifying specific program
        name:
          type: string
          description: name of the program
        default:
          type: boolean
        defaultTab:
          type: integer
          format: int32
          description: default tab on program update role
        tabs:
          type: array
          items:
            type: integer
            format: int32
          description: tab list on program update role
      example:
        id: 1
        name: CONTRIBUTOR
        default: true
        defaultTab: 1
        tabs:
          - 1
    programHeader:
      title: Header
      description: program update configuration Header
      required:
        - id
        - ver
        - compId
        - author
        - description
        - publishedDate
        - data
        - config
      type: object
      properties:
        id:
          type: string
          description: unique identification for program
        ver:
          type: string
          description: version
        compId:
          type: string
          description: Comparision Id for program update conf
        author:
          type: string
          description: author required for the program update conf
        description:
          type: string
          description: description/details for the program conf update
        publishedDate:
          type: string
          description: published date for the program conf update
        data:
          type: object
          description: data/object for the program update conf
        config:
          $ref: '#/components/schemas/programProgramUpdateRoleConfig'
      example:
        id: ng.sunbird.header
        ver: 1
        compId: headerComp
        author: Venkat
        description: ''
        publishedDate: ''
        data: {}
        config:
          tabs:
            - index: 1
              label: Contribute
              onClick: collectionComponent
            - index: 2
              label: Review
              onClick: collectionComponent
            - index: 3
              label: Dashboard
              onClick: dashboardComponent
    programProgramUpdateRoleConfig:
      title: ProgramUpdateRoleConfig
      description: configuration for Update Program role
      required:
        - tabs
      type: object
      properties:
        tabs:
          type: array
          items:
            $ref: '#/components/schemas/programTab'
          description: list of tabs/object for program update role
      example:
        tabs:
          - index: 1
            label: Contribute
            onClick: collectionComponent
          - index: 2
            label: Review
            onClick: collectionComponent
          - index: 3
            label: Dashboard
            onClick: dashboardComponent
    programTab:
      title: Tab
      required:
        - index
        - label
        - onClick
      type: object
      properties:
        index:
          type: integer
          format: int32
          description: index of the tab on program update conf
        label:
          type: string
          description: label of the component
        onClick:
          type: string
          description: Name of the component
      example:
        index: 1
        label: Contribute
        onClick: collectionComponent
    programComponent:
      title: Component
      description: Component required for program update conf
      required:
        - id
        - ver
        - compId
        - author
        - description
        - publishedDate
        - data
        - config
      type: object
      properties:
        id:
          type: string
          description: unique id for identifying a program
        ver:
          type: string
          description: version
        compId:
          type: string
          description: Comparison Id in program update conf
        author:
          type: string
          description: author of the program
        description:
          type: string
          description: details/info about a program on update conf
        publishedDate:
          type: string
          description: published date of a program
        data:
          type: object
          description: data/object of program on update conf
        config:
          $ref: '#/components/schemas/programProgramUpdateRoleConfig2'
    programProgramUpdateRoleConfig2:
      title: ProgramUpdateRoleConfig2
      description: Configuration2 Program Update Role
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/programProgramUpdateFilters'
        groupBy:
          $ref: '#/components/schemas/programGroupBy'
        collectionType:
          type: string
          description: Configuration collection type of a program
        collectionList:
          type: array
          items:
            type: string
          description: list of collection on program update conf
        status:
          type: array
          items:
            type: string
          description: state/list on program update conf
        contentTypes:
          $ref: '#/components/schemas/programContentTypes'
        filesConfig:
          $ref: '#/components/schemas/programFilesConfig'
        formConfiguration:
          type: array
          items:
            $ref: '#/components/schemas/programFormConfiguration'
          description: Form Configuration program update
        resourceTitleLength:
          type: string
          description: resource title length of a program on update conf
        tenantName:
          type: string
          description: name of tenant
        No of options:
          type: integer
          format: int32
          description: list/options
        solutionType:
          type: array
          items:
            type: string
          description: Solution type of a program on update
        questionCategory:
          type: array
          items:
            type: string
          description: list of question category on program update conf
        assetConfig:
          $ref: '#/components/schemas/programAssetConfig'
    programProgramUpdateFilters:
      title: ProgramUpdateFilters
      description: Update Program filters configuration
      required:
        - implicit
        - explicit
      type: object
      properties:
        implicit:
          type: array
          items:
            $ref: '#/components/schemas/programImplicit'
          description: Implicit filters on program update conf
        explicit:
          type: array
          items:
            $ref: '#/components/schemas/programExplicit'
          description: Explicit filters on program update conf
    programImplicit:
      title: Implicit
      description: Implicit filters program update configuration
      required:
        - code
        - defaultValue
        - label
      type: object
      properties:
        code:
          type: string
          description: Implicit filter code
        defaultValue:
          type: array
          items:
            type: string
          description: default values/list implicit filter configuration
        label:
          type: string
          description: label implicit filter configuration
    programExplicit:
      title: Explicit
      description: Explicit filters on program update configuration
      required:
        - code
        - range
        - label
        - multiselect
        - defaultValue
        - visibility
      type: object
      properties:
        code:
          type: string
          description: Explicit filter code
        range:
          type: array
          items:
            type: string
          description: list/range of explicit filter configuration
        label:
          type: string
          description: label Explicit filter Conf
        multiselect:
          type: boolean
          description: multi select filter explicit configuration
        defaultValue:
          type: array
          items:
            type: string
          description: Default values/list for Explicit filter configuration
        visibility:
          type: boolean
          description: visibility on explicit filter configuration of a program
      example:
        code: gradeLevel
        range:
          - Kindergarten
          - Grade 1
          - Grade 2
          - Grade 3
        label: Class
        multiselect: false
        defaultValue:
          - Kindergarten
          - Grade 1
        visibility: true
    programGroupBy:
      title: GroupBy
      required:
        - value
        - defaultValue
      type: object
      properties:
        value:
          type: string
        defaultValue:
          type: string
      example:
        value: subject
        defaultValue: subject
    programContentTypes:
      title: ContentTypes
      required:
        - value
        - defaultValue
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/programValue'
          description: ''
        defaultValue:
          type: array
          items:
            $ref: '#/components/schemas/programDefaultValue'
          description: ''
      example:
        value:
          - id: explanationContent
            label: Explanation
            onClick: uploadComponent
            mimeType:
              - application/pdf
              - video/mp4
              - video/webm
              - application/epub
            metadata:
              name: Explanation Resource
              description: ExplanationResource
              resourceType: Read
              contentType: ExplanationResource
              audience:
                - Learner
              appIcon: >-
                https://ntpstagingall.blob.core.windows.net/ntp-content-staging/content/do_21291553051403878414/artifact/explanation.thumb_1576602846206.png
              marks: 5
            filesConfig:
              accepted: 'pdf, mp4, webm, epub'
              size: 50
          - id: learningActivity
            label: Activity for Learning
            onClick: uploadComponent
            mimeType:
              - application/pdf
              - video/mp4
              - video/webm
              - application/epub
              - application/vnd.ekstep.h5p-archive
            metadata:
              name: Activity for Learning
              description: LearningActivity
              resourceType: Read
              contentType: LearningActivity
              audience:
                - Learner
              appIcon: ''
              marks: 5
            filesConfig:
              accepted: 'pdf, mp4, webm, epub, h5p'
              size: 50
          - id: experientialContent
            label: Experiential
            onClick: uploadComponent
            mimeType:
              - video/mp4
              - video/webm
            metadata:
              name: Experiential Resource
              description: ExperientialResource
              resourceType: Read
              contentType: ExperientialResource
              audience:
                - Learner
              appIcon: >-
                https://ntpstagingall.blob.core.windows.net/ntp-content-staging/content/do_21291553051403878414/artifact/explanation.thumb_1576602846206.png
              marks: 5
            filesConfig:
              accepted: 'mp4, webm'
              size: 50
          - id: classroomTeachingVideo
            label: Classroom Teaching Video
            onClick: uploadComponent
            mimeType:
              - video/mp4
              - video/webm
            metadata:
              name: Classroom Teaching Video
              description: ClassroomTeachingVideo
              resourceType: Read
              contentType: ClassroomTeachingVideo
              audience:
                - Learner
              appIcon: ''
              marks: 5
            filesConfig:
              accepted: 'mp4, webm'
              size: 50
          - id: explanationVideo
            label: Explanation Video
            onClick: uploadComponent
            mimeType:
              - video/mp4
              - video/webm
            metadata:
              name: Explanation Video
              description: ExplanationVideo
              resourceType: Read
              contentType: ExplanationVideo
              audience:
                - Learner
              appIcon: ''
              marks: 5
            filesConfig:
              accepted: 'mp4, webm'
              size: 50
          - id: explanationReadingMaterial
            label: Explanation Reading Material
            onClick: uploadComponent
            mimeType:
              - application/pdf
              - application/epub
            metadata:
              name: Explanation Reading Material
              description: ExplanationReadingMaterial
              resourceType: Read
              contentType: ExplanationReadingMaterial
              audience:
                - Learner
              appIcon: ''
              marks: 5
            filesConfig:
              accepted: 'pdf, epub'
              size: 50
          - id: previousBoardExamPapers
            label: Previous Board Exam Papers
            onClick: uploadComponent
            mimeType:
              - application/pdf
              - application/epub
            metadata:
              name: Previous Board Exam Papers
              description: PreviousBoardExamPapers
              resourceType: Read
              contentType: PreviousBoardExamPapers
              audience:
                - Learner
              appIcon: ''
              marks: 5
            filesConfig:
              accepted: 'pdf, epub'
              size: 50
          - id: lessonPlanResource
            label: Lesson Plan
            onClick: uploadComponent
            mimeType:
              - application/pdf
              - application/epub
            metadata:
              name: Lesson Plan
              description: LessonPlanResource
              resourceType: Read
              contentType: LessonPlanResource
              audience:
                - Learner
              appIcon: ''
              marks: 5
            filesConfig:
              accepted: 'pdf, epub'
              size: 50
          - id: focusSpotContent
            label: FocusSpot
            onClick: uploadComponent
            mimeType:
              - application/pdf
              - application/epub
            metadata:
              name: FocusSpot Resource
              description: FocusSpot
              resourceType: Read
              contentType: FocusSpot
              audience:
                - Learner
              appIcon: >-
                https://ntpstagingall.blob.core.windows.net/ntp-content-staging/content/do_21291553100098764812/artifact/focus-spot_1561727473311.thumb_1576602905573.png
              marks: 5
            filesConfig:
              accepted: 'pdf, epub'
              size: 50
          - id: TeachingMethod
            label: Teaching Method
            onClick: uploadComponent
            mimeType:
              - application/pdf
              - application/epub
            metadata:
              name: Teaching Method
              description: TeachingMethod
              resourceType: Read
              contentType: TeachingMethod
              audience:
                - Learner
              appIcon: >-
                https://ntpstagingall.blob.core.windows.net/ntp-content-staging/content/do_21291553100098764812/artifact/focus-spot_1561727473311.thumb_1576602905573.png
              marks: 5
            filesConfig:
              accepted: 'pdf, epub'
              size: 50
          - id: PedagogyFlow
            label: Pedagogy Flow
            onClick: uploadComponent
            mimeType:
              - application/pdf
              - application/epub
            metadata:
              name: Pedagogy Flow
              description: PedagogyFlow
              resourceType: Read
              contentType: PedagogyFlow
              audience:
                - Learner
              appIcon: >-
                https://ntpstagingall.blob.core.windows.net/ntp-content-staging/content/do_21291553100098764812/artifact/focus-spot_1561727473311.thumb_1576602905573.png
              marks: 5
            filesConfig:
              accepted: 'pdf, epub'
              size: 50
          - id: LearningOutcomeDefinition
            label: Learning Outcome Definition
            onClick: uploadComponent
            mimeType:
              - application/pdf
              - application/epub
            metadata:
              name: Learning Outcome Definition
              description: LearningOutcomeDefinition
              resourceType: Read
              contentType: LearningOutcomeDefinition
              audience:
                - Learner
              appIcon: >-
                https://ntpstagingall.blob.core.windows.net/ntp-content-staging/content/do_21291553100098764812/artifact/focus-spot_1561727473311.thumb_1576602905573.png
              marks: 5
            filesConfig:
              accepted: 'pdf, epub'
              size: 50
          - id: MarkingSchemeRubric
            label: Marking Scheme Rubric
            onClick: uploadComponent
            mimeType:
              - application/pdf
              - application/epub
            metadata:
              name: Marking Scheme Rubric
              description: MarkingSchemeRubric
              resourceType: Read
              contentType: MarkingSchemeRubric
              audience:
                - Learner
              appIcon: >-
                https://ntpstagingall.blob.core.windows.net/ntp-content-staging/content/do_21291553100098764812/artifact/focus-spot_1561727473311.thumb_1576602905573.png
              marks: 5
            filesConfig:
              accepted: 'pdf, epub'
              size: 50
          - id: ConceptMap
            label: Concept Map
            onClick: uploadComponent
            mimeType:
              - application/pdf
              - application/epub
            metadata:
              name: Concept Map
              description: ConceptMap
              resourceType: Read
              contentType: ConceptMap
              audience:
                - Learner
              appIcon: >-
                https://ntpstagingall.blob.core.windows.net/ntp-content-staging/content/do_21291553100098764812/artifact/focus-spot_1561727473311.thumb_1576602905573.png
              marks: 5
            filesConfig:
              accepted: 'pdf, epub'
              size: 50
          - id: SelfAssess
            label: Self Assess
            onClick: uploadComponent
            mimeType:
              - application/pdf
              - application/epub
            metadata:
              name: Self Assess
              description: SelfAssess
              resourceType: Read
              contentType: SelfAssess
              audience:
                - Learner
              appIcon: >-
                https://ntpstagingall.blob.core.windows.net/ntp-content-staging/content/do_21291553100098764812/artifact/focus-spot_1561727473311.thumb_1576602905573.png
              marks: 5
            filesConfig:
              accepted: 'pdf, epub'
              size: 50
          - id: vsaPracticeQuestionContent
            label: VSA - Practice Sets
            onClick: questionSetComponent
            mimeType:
              - application/vnd.ekstep.ecml-archive
            metadata:
              name: Practice QuestionSet
              description: Practice QuestionSet
              resourceType: Learn
              contentType: PracticeQuestionSet
              audience:
                - Learner
              appIcon: ''
              marks: 5
            questionCategories:
              - vsa
          - id: saPracticeQuestionContent
            label: SA - Practice Sets
            onClick: questionSetComponent
            mimeType:
              - application/vnd.ekstep.ecml-archive
            metadata:
              name: Practice QuestionSet
              description: Practice QuestionSet
              resourceType: Learn
              contentType: PracticeQuestionSet
              audience:
                - Learner
              appIcon: ''
              marks: 5
            questionCategories:
              - sa
          - id: laPracticeQuestionContent
            label: LA - Practice Sets
            onClick: questionSetComponent
            mimeType:
              - application/vnd.ekstep.ecml-archive
            metadata:
              name: Practice QuestionSet
              description: Practice QuestionSet
              resourceType: Learn
              contentType: PracticeQuestionSet
              audience:
                - Learner
              appIcon: ''
              marks: 5
            questionCategories:
              - la
          - id: mcqPracticeQuestionContent
            label: MCQ - Practice Sets
            onClick: questionSetComponent
            mimeType:
              - application/vnd.ekstep.ecml-archive
            metadata:
              name: Practice QuestionSet
              description: Practice QuestionSet
              resourceType: Learn
              contentType: PracticeQuestionSet
              audience:
                - Learner
              appIcon: ''
              marks: 5
            questionCategories:
              - mcq
          - id: curiositySetContent
            label: Curiosity Sets
            onClick: curiositySetComponent
            mimeType:
              - application/vnd.ekstep.ecml-archive
            metadata:
              name: Curiosity QuestionSet
              description: Curiosity QuestionSet
              resourceType: Learn
              contentType: CuriosityQuestionSet
              audience:
                - Learner
              appIcon: ''
              marks: 5
            questionCategories:
              - curiosity
        defaultValue:
          - id: vsaPracticeQuestionContent
            label: Practice Sets
            onClick: questionSetComponent
            mimeType:
              - application/vnd.ekstep.ecml-archive
            metadata:
              name: Practice QuestionSet
              description: Practice QuestionSet
              resourceType: Learn
              contentType: PracticeQuestionSet
              audience:
                - Learner
              appIcon: ''
              marks: 5
            questionCategories:
              - vsa
    programValue:
      title: Value
      required:
        - id
        - label
        - onClick
        - mimeType
        - metadata
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        onClick:
          type: string
        mimeType:
          type: array
          items:
            type: string
          description: ''
        metadata:
          $ref: '#/components/schemas/programMetadata'
        filesConfig:
          $ref: '#/components/schemas/programFilesConfig'
        questionCategories:
          type: array
          items:
            type: string
          description: ''
      example:
        id: explanationContent
        label: Explanation
        onClick: uploadComponent
        mimeType:
          - application/pdf
          - video/mp4
          - video/webm
          - application/epub
        metadata:
          name: Explanation Resource
          description: ExplanationResource
          resourceType: Read
          contentType: ExplanationResource
          audience:
            - Learner
          appIcon: >-
            https://ntpstagingall.blob.core.windows.net/ntp-content-staging/content/do_21291553051403878414/artifact/explanation.thumb_1576602846206.png
          marks: 5
        filesConfig:
          accepted: 'pdf, mp4, webm, epub'
          size: 50
    programMetadata:
      title: Metadata
      required:
        - name
        - description
        - resourceType
        - contentType
        - audience
        - appIcon
        - marks
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        resourceType:
          type: string
        contentType:
          type: string
        audience:
          type: array
          items:
            type: string
          description: ''
        appIcon:
          type: string
        marks:
          type: integer
          format: int32
      example:
        name: Explanation Resource
        description: ExplanationResource
        resourceType: Read
        contentType: ExplanationResource
        audience:
          - Learner
        appIcon: >-
          https://ntpstagingall.blob.core.windows.net/ntp-content-staging/content/do_21291553051403878414/artifact/explanation.thumb_1576602846206.png
        marks: 5
    programFilesConfig:
      title: FilesConfig
      required:
        - accepted
        - size
      type: object
      properties:
        accepted:
          type: string
        size:
          type: string
      example:
        accepted: 'pdf, mp4, webm, epub'
        size: 50
    programDefaultValue:
      title: DefaultValue
      required:
        - id
        - label
        - onClick
        - mimeType
        - metadata
        - questionCategories
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        onClick:
          type: string
        mimeType:
          type: array
          items:
            type: string
          description: ''
        metadata:
          $ref: '#/components/schemas/programMetadata'
        questionCategories:
          type: array
          items:
            type: string
          description: ''
      example:
        id: vsaPracticeQuestionContent
        label: Practice Sets
        onClick: questionSetComponent
        mimeType:
          - application/vnd.ekstep.ecml-archive
        metadata:
          name: Practice QuestionSet
          description: Practice QuestionSet
          resourceType: Learn
          contentType: PracticeQuestionSet
          audience:
            - Learner
          appIcon: ''
          marks: 5
        questionCategories:
          - vsa
    programFormConfiguration:
      title: FormConfiguration
      required:
        - code
        - dataType
        - editable
        - inputType
        - name
        - required
        - visible
      type: object
      properties:
        code:
          type: string
        dataType:
          type: string
        description:
          type: string
        editable:
          type: boolean
        inputType:
          type: string
        label:
          type: string
        name:
          type: string
        placeholder:
          type: string
        required:
          type: boolean
        visible:
          type: boolean
        helpText:
          type: string
      example:
        code: learningOutcome
        dataType: list
        description: Learning Outcomes For The Content
        editable: true
        inputType: multiselect
        label: Learning Outcome
        name: LearningOutcome
        placeholder: Select Learning Outcomes
        required: false
        visible: true
    programAssetConfig:
      title: AssetConfig
      required:
        - image
        - video
      type: object
      properties:
        image:
          $ref: '#/components/schemas/programImage'
        video:
          $ref: '#/components/schemas/programVideo'
      example:
        image:
          size: 50
          accepted: 'jpeg, png, jpg'
        video:
          size: 50
          accepted: 'pdf, mp4, webm, youtube'
    programImage:
      title: Image
      required:
        - size
        - accepted
      type: object
      properties:
        size:
          type: string
        accepted:
          type: string
      example:
        size: 50
        accepted: 'jpeg, png, jpg'
    programVideo:
      title: Video
      required:
        - size
        - accepted
      type: object
      properties:
        size:
          type: string
        accepted:
          type: string
      example:
        size: 50
        accepted: 'pdf, mp4, webm, youtube'
    programCollection:
      title: Collection
      required:
        - id
        - allowed_content_types
        - children
      type: object
      properties:
        id:
          type: string
          description: This represents the unique id the result
        allowed_content_types:
          type: array
          items:
            type: string
          description: This represents the allowed_content_types
        children:
          type: array
          items:
            type: string
          description: This represents the children's array
      example:
        id: do_113133960314445824150
        allowed_content_types: []
        children: []
    programProgramUpdate200Successfull:
      title: ProgramUpdate200Successfull
      description: Successful program update
      required:
        - id
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
          description: unique string for identifying a program
        ts:
          type: string
          description: timestamp
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: status code of program update response
        result:
          $ref: '#/components/schemas/programProgramResult'
      example:
        id: api.program.update
        ts: 2020-12-03T08:38:21.340Z
        params:
          resmsgid: e6555dc1-3542-11eb-84ed-692ec8c8dbe9
          msgid: e6555dc0-3542-11eb-84ed-692ec8c8dbe9
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          program_id: a043dc40-3497-11eb-9c32-15914148e3ce
    programProgramResult:
      title: ProgramResult
      description: Program Update Result
      required:
        - program_id
      type: object
      properties:
        program_id:
          type: string
          description: This represents the unique program id
      example:
        program_id: a043dc40-3497-11eb-9c32-15914148e3ce
    programProgramUpdate404NotFoundRequest:
      title: ProgramUpdate404NotFoundRequest
      description: 'Failure Program Update, invalid url/request body'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programProgramUpdateRequest'
    programCreateProgram200SuccessRequest:
      title: CreateProgram200SuccessRequest
      description: Request for create a new program
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programCreateProgramRequest'
    programCreateProgramRequest:
      title: CreateProgramRequest
      description: request list for create a new program
      required:
        - name
        - description
        - nomination_enddate
        - shortlisting_enddate
        - content_submission_enddate
        - rewards
        - content_types
        - target_collection_category
        - sourcing_org_name
        - rootorg_id
        - createdby
        - createdon
        - startdate
        - slug
        - type
        - default_roles
        - enddate
        - status
        - program_id
        - config
      type: object
      properties:
        name:
          type: string
          description: name of a program
        description:
          type: string
          description: description details about a program
        nomination_enddate:
          type: string
          description: Nomination end date for a program
        shortlisting_enddate:
          type: string
          description: shortlisting end date for a program
        content_submission_enddate:
          type: string
          description: 'content submission End date for a program '
        rewards:
          type: string
          description: information details in rewards
        content_types:
          type: array
          description: list of content types to be supported for a program
          items:
            type: string
        target_collection_category:
          type: array
          items:
            type: string
          description: list of target collection category for a program
        sourcing_org_name:
          type: string
          description: name of a sourcing organization
        rootorg_id:
          type: string
          description: unique id of a root organization
        createdby:
          type: string
          description: credentials of program created by
        createdon:
          type: string
          description: details when program is created on
        startdate:
          type: string
          description: date specified program start date
        slug:
          type: string
          description: details of request slug
        type:
          type: string
          description: defines the type of a program
        default_roles:
          type: array
          items:
            type: string
          description: list of roles defined for a program
        enddate:
          type: string
          description: program end date
        status:
          type: string
          description: program status
        program_id:
          type: string
          description: unique string for specifying a particular program
        config:
          $ref: '#/components/schemas/programCreateProgramConfig'
    programCreateProgramConfig:
      title: CreateProgramConfig
      description: Configuration for create a program
      required:
        - defaultContributeOrgReview
        - _comments
        - loginReqired
        - framework
        - board
        - gradeLevel
        - medium
        - subject
        - roles
        - header
        - components
        - sharedContext
      type: object
      properties:
        defaultContributeOrgReview:
          type: boolean
          description: status of default review contribute organization
        _comments:
          type: string
          description: any detailing or information
        loginReqired:
          type: boolean
          description: status if login required incase
        framework:
          type: string
          description: framework id/name
        board:
          type: array
          items:
            type: string
          description: list of board supported in a program
        gradeLevel:
          type: array
          items:
            type: string
          description: grade level list supported in a program
        medium:
          type: array
          items:
            type: string
          description: list specifies medium supported in a program
        subject:
          type: array
          items:
            type: string
          description: list of subjects supported in a program
        roles:
          type: array
          items:
            $ref: '#/components/schemas/programProgramUpdateRole'
          description: list of roles allowed in a program
        header:
          $ref: '#/components/schemas/programHeader'
        components:
          type: array
          items:
            $ref: '#/components/schemas/programComponent'
          description: component list for a program
        sharedContext:
          type: array
          items:
            type: string
          description: list of shared context of a program
    programCreateProgram200success:
      title: CreateProgram200success
      description: Successfully Create program
      required:
        - id
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
          description: unique string to identify a program
        ts:
          type: string
          description: timestamp
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: code signifies response status
        result:
          $ref: '#/components/schemas/programProgramResult'
      example:
        id: api.program.create
        ts: 2020-12-03T08:25:51.200Z
        params:
          resmsgid: 27371601-3541-11eb-a10c-1da50649277e
          msgid: 27371600-3541-11eb-a10c-1da50649277e
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          program_id: 26be3c80-3541-11eb-a10c-1da50649277e
    programCreateProgram404NotFoundRequest:
      title: CreateProgram404NotFoundRequest
      description: 'Failure in creating a program, invalid url/request body'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programCreateProgramRequest'
    programProgram-Publish200SuccessRequest:
      title: Program-Publish200SuccessRequest
      description: Request for Publishing program data
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programProgram-PublishRequest'
      example:
        request:
          program_id: a043dc40-3497-11eb-9c32-15914148e3ce
          channel: sunbird
    programProgram-PublishRequest:
      title: Program-PublishRequest
      description: Request Data for Publishing the program based on program_id or channel
      required:
        - program_id
        - channel
      type: object
      properties:
        program_id:
          type: string
          description: Unique string to identify a specific program
        channel:
          type: string
          description: Unique string for identifying channel
      example:
        program_id: a043dc40-3497-11eb-9c32-15914148e3ce
        channel: sunbird
    programProgram-Publish200Success:
      title: Program-Publish200Success
      description: Successfully Update the program data for specific program or channel
      required:
        - id
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
          description: unique string for specifying a particular program
        ts:
          type: string
          description: string signifies timestamp
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/programProgram-Publish-Result'
      example:
        id: api.program.publish
        ts: 2020-12-03T08:14:32.077Z
        params:
          resmsgid: 926d23d1-353f-11eb-86c8-875983bcd642
          msgid: 926d23d0-353f-11eb-86c8-875983bcd642
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          program_id: a043dc40-3497-11eb-9c32-15914148e3ce
          afterPublishResponse:
            nomination:
              error: null
              result:
                program_id: a043dc40-3497-11eb-9c32-15914148e3ce
                user_id: 48dc0e70-2775-474b-9b78-def27d047836
                organisation_id: e0ab89f4-0fcb-47ea-9b70-3ed0f12b1b7a
                status: Approved
                content_types:
                  - Course Assessment
                  - eTextbook
                  - Explanation Content
                  - Learning Resource
                  - Practice Question Set
                  - Teacher Resource
                collection_ids:
                  - do_1131644069627576321824
                  - do_1131644069627740161825
                  - do_1131644069627330561823
            userMapping: {}
    programProgram-Publish-Result:
      title: Program-Publish-Result
      description: response for publishing program latest data for specific program_id
      required:
        - program_id
        - afterPublishResponse
      type: object
      properties:
        program_id:
          type: string
          description: unique string for identifying particular program
        afterPublishResponse:
          $ref: '#/components/schemas/programAfterPublishResponse'
      example:
        program_id: a043dc40-3497-11eb-9c32-15914148e3ce
        afterPublishResponse:
          nomination:
            error: null
            result:
              program_id: a043dc40-3497-11eb-9c32-15914148e3ce
              user_id: 48dc0e70-2775-474b-9b78-def27d047836
              organisation_id: e0ab89f4-0fcb-47ea-9b70-3ed0f12b1b7a
              status: Approved
              content_types:
                - Course Assessment
                - eTextbook
                - Explanation Content
                - Learning Resource
                - Practice Question Set
                - Teacher Resource
              collection_ids:
                - do_1131644069627576321824
                - do_1131644069627740161825
                - do_1131644069627330561823
          userMapping: {}
    programAfterPublishResponse:
      title: AfterPublishResponse
      description: >-
        response data after publishing latest program data for nomination or
        usermapping
      required:
        - nomination
        - userMapping
      type: object
      properties:
        nomination:
          $ref: '#/components/schemas/programNomination'
        userMapping:
          type: object
      example:
        nomination:
          error: null
          result:
            program_id: a043dc40-3497-11eb-9c32-15914148e3ce
            user_id: 48dc0e70-2775-474b-9b78-def27d047836
            organisation_id: e0ab89f4-0fcb-47ea-9b70-3ed0f12b1b7a
            status: Approved
            content_types:
              - Course Assessment
              - eTextbook
              - Explanation Content
              - Learning Resource
              - Practice Question Set
              - Teacher Resource
            collection_ids:
              - do_1131644069627576321824
              - do_1131644069627740161825
              - do_1131644069627330561823
        userMapping: {}
    programNomination:
      title: Nomination
      description: nomination data for publishing latest program
      required:
        - error
        - result
      type: object
      properties:
        error:
          type: string
          nullable: true
        result:
          $ref: '#/components/schemas/programProgram-Publish-Nomination'
      example:
        error: null
        result:
          program_id: a043dc40-3497-11eb-9c32-15914148e3ce
          user_id: 48dc0e70-2775-474b-9b78-def27d047836
          organisation_id: e0ab89f4-0fcb-47ea-9b70-3ed0f12b1b7a
          status: Approved
          content_types:
            - Course Assessment
            - eTextbook
            - Explanation Content
            - Learning Resource
            - Practice Question Set
            - Teacher Resource
          collection_ids:
            - do_1131644069627576321824
            - do_1131644069627740161825
            - do_1131644069627330561823
    programProgram-Publish-Nomination:
      title: Program-Publish-Nomination
      description: >-
        Publishing program based on nomination data for a specific
        program/user/status/organization/contenttypes
      required:
        - program_id
        - user_id
        - organisation_id
        - status
        - content_types
        - collection_ids
      type: object
      properties:
        program_id:
          type: string
          description: unique string for identifying specific program
        user_id:
          type: string
          description: unique string for specific user
        organisation_id:
          type: string
          description: unique string for identifying specific organization
        status:
          type: string
          description: status defining nomination update
        content_types:
          type: array
          items:
            type: string
          description: list all the content type supported for the program
        collection_ids:
          type: array
          items:
            type: string
          description: list all the collection id supported for the program
      example:
        program_id: a043dc40-3497-11eb-9c32-15914148e3ce
        user_id: 48dc0e70-2775-474b-9b78-def27d047836
        organisation_id: e0ab89f4-0fcb-47ea-9b70-3ed0f12b1b7a
        status: Approved
        content_types:
          - Course Assessment
          - eTextbook
          - Explanation Content
          - Learning Resource
          - Practice Question Set
          - Teacher Resource
        collection_ids:
          - do_1131644069627576321824
          - do_1131644069627740161825
          - do_1131644069627330561823
    program400badRequestwithoutchannel:
      title: 400badRequestwithoutchannel
      description: Failure in publishing the program data missing channel in request
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
          description: unique string for identifying program
        ver:
          type: string
          description: defines version
        ts:
          type: string
          description: defines timestamp
        params:
          $ref: '#/components/schemas/programProgram-PublishParams'
        responseCode:
          type: string
          description: defines response status code
        result:
          type: object
          description: Object defines response for failure in publish the program data
      example:
        id: api.v1.publish
        ver: 1
        ts: 2020-12-02T18:28:15.284Z
        params:
          resmsgid: 245adf40-34cc-11eb-9c32-15914148e3ce
          msgid: null
          status: failed
          err: ERR_PUBLISH_PROGRAM_DATA
          errmsg: Required fields while publishing program data are missing
        responseCode: CLIENT_ERROR
        result: {}
    program404NotFound:
      title: 404NotFound
      description: 'Failure in publishing the program, invalid request body'
      required:
        - request_path
        - message
        - request_host
      type: object
      properties:
        request_path:
          type: string
          description: request path for publishing the program
        message:
          type: string
          description: details for failure in publish the program
        request_host:
          type: array
          items:
            type: string
          description: lists request host
      example:
        request_path: /v1/publish
        message: API not found with these values
        request_host:
          - kong
    programProgram-Publish400BadRequestRequest:
      title: Program-Publish400BadRequestRequest
      description: 'Failure in publishing the program, invalid request body'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programProgram-PublishRequest'
      example:
        request:
          program_id: a043dc40-3497-11eb-9c32-15914148e3ce
          channel: ''
    programProgram-Publish404NotFoundRequest:
      title: Program-Publish404NotFoundRequest
      description: 'Failure publishing the program, invalid url/request body'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programProgram-PublishRequest'
      example:
        request:
          program_id: a043dc40-3497-11eb-9c32-15914148e3ce
          channel: sunbird
    programUnlist-Publish200SuccessRequest:
      title: Unlist-Publish200SuccessRequest
      description: 'Successfully unlisted the program from the publish list '
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programProgram-PublishRequest'
      example:
        request:
          program_id: f2c1d380-389a-11eb-af92-c5fb4afce83e
          channel: sunbird
    programUnlist-Publish400BadRequestRequest:
      title: Unlist-Publish400BadRequestRequest
      description: 'Failure in attempt to unlist the content, invalid request body'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programProgram-PublishRequest'
      example:
        request:
          program_id: ''
          channel: sunbird
    programUnlist-Publish404NotFoundRequest:
      title: Unlist-Publish404NotFoundRequest
      description: 'Failure in attempt to unlist the content, invalid url/request body'
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programProgram-PublishRequest'
      example:
        request:
          program_id: f2c1d380-389a-11eb-af92-c5fb4afce83e
          channel: sunbird
    programProgram-Feed-Search200successRequest:
      title: Program-Feed-Search200successRequest
      description: Search latest program updates
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programProgram-Feed-SearchRequest'
      example:
        request:
          nomination:
            programId:
              - a549ffa0-3553-11eb-84ed-692ec8c8dbe9
              - ef3ecc80-3553-11eb-84ed-692ec8c8dbe9
            status:
              - Pending
          contribution:
            programId:
              - f2c1d380-389a-11eb-af92-c5fb4afce83e
              - a043dc40-3497-11eb-9c32-15914148e3ce
            status:
              - Live
          channel: 012983850117177344161
    programProgram-Feed-SearchRequest:
      title: Program-Feed-Search200Request
      description: Successfully fetch the latest updates on program
      required:
        - nomination
        - contribution
        - channel
      type: object
      properties:
        nomination:
          $ref: '#/components/schemas/programProgram-Feed-Nomination'
        contribution:
          $ref: '#/components/schemas/programContribution'
        channel:
          type: string
          description: This represents the channel data
      example:
        nomination:
          programId:
            - a549ffa0-3553-11eb-84ed-692ec8c8dbe9
            - ef3ecc80-3553-11eb-84ed-692ec8c8dbe9
          status:
            - Pending
        contribution:
          programId:
            - f2c1d380-389a-11eb-af92-c5fb4afce83e
            - a043dc40-3497-11eb-9c32-15914148e3ce
          status:
            - Live
        channel: 012983850117177344161
    programProgram-Feed-Nomination:
      title: Program-Feed-Nomination
      description: Search Program on nomination updates
      required:
        - programId
        - status
      type: object
      properties:
        programId:
          type: array
          items:
            type: string
          description: This represents the program id
        status:
          type: array
          items:
            type: string
          description: This represents the status
      example:
        programId:
          - a549ffa0-3553-11eb-84ed-692ec8c8dbe9
          - ef3ecc80-3553-11eb-84ed-692ec8c8dbe9
        status:
          - Pending
    programContribution:
      title: Contribution
      required:
        - programId
        - status
      type: object
      properties:
        programId:
          type: array
          items:
            type: string
          description: Unique string to identify a specific program
        status:
          type: array
          items:
            type: string
          description: string for nomination request updates
      example:
        programId:
          - f2c1d380-389a-11eb-af92-c5fb4afce83e
          - a043dc40-3497-11eb-9c32-15914148e3ce
        status:
          - Live
    programProgram-Feed-SearchBadRequestRequest:
      title: Program-Feed-SearchBadRequestRequest
      description: Failure in fetching search on program latest updates missing fields
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programProgram-Feed-SearchRequest'
      example:
        request:
          nomination:
            programId: []
            status:
              - Pending
          contribution:
            programId:
              - f2c1d380-389a-11eb-af92-c5fb4afce83e
              - a043dc40-3497-11eb-9c32-15914148e3ce
            status:
              - Live
          channel: 012983850117177344161
    programProgram-Feed-Search400BadRequestonChannelIdAsEmptyRequest:
      title: Program-Feed-Search400BadRequestonChannelIdAsEmptyRequest
      description: Failure in search for latest program updates missing Channel Id
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programProgram-Feed-SearchRequest'
      example:
        request:
          nomination:
            programId:
              - a549ffa0-3553-11eb-84ed-692ec8c8dbe9
              - ef3ecc80-3553-11eb-84ed-692ec8c8dbe9
            status:
              - Pending
          contribution:
            programId:
              - f2c1d380-389a-11eb-af92-c5fb4afce83e
              - a043dc40-3497-11eb-9c32-15914148e3ce
            status:
              - Live
          channel: ''
    programReport-success-200-Request:
      title: Report-success-200-Request
      description: Generate Content Report for specific program_id
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programReport-success-200-Request-body'
      example:
        request:
          filters:
            program_id:
              - 95d604b0-2af4-11eb-9bed-c53bebe417b7
            openForContribution: true
            report: textbookLevelReport
    programReport-success-200-Request-body:
      title: Report-success-200-Request-body
      description: Successfully Generate content report for program_id
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/programReport-success-200-Request-Filters'
      example:
        filters:
          program_id:
            - 95d604b0-2af4-11eb-9bed-c53bebe417b7
          openForContribution: true
          report: textbookLevelReport
    programReport-success-200-Request-Filters:
      title: Report-success-200-Request-Filters
      description: Successfully Generate Content Report Request filters
      required:
        - program_id
        - openForContribution
        - report
      type: object
      properties:
        program_id:
          type: array
          items:
            type: string
          description: Unique string identifies a particular program
        openForContribution:
          type: boolean
          description: This represents the state of contribution
        report:
          type: string
          description: This represents the generated content report
      example:
        program_id:
          - 95d604b0-2af4-11eb-9bed-c53bebe417b7
        openForContribution: true
        report: textbookLevelReport
    programReport-Error-400Request:
      title: Report-Error-400Request
      description: Failure in generate content report missing request parameters
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programReport-Error-400Request-body'
      example:
        request:
          filters:
            program:
              - 95d604b0-2af4-11eb-9bed-c53bebe417b7
            openForContribution: true
            report: textbookLevelReport
    programReport-Error-400Request-body:
      title: Report-Error-400Request-body
      description: Failure in generate content report error in request body
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/programReport-Error-400Request-bodyFilters'
      example:
        filters:
          program:
            - 95d604b0-2af4-11eb-9bed-c53bebe417b7
          openForContribution: true
          report: textbookLevelReport
    programReport-Error-400Request-bodyFilters:
      title: Report-Error-400Request-bodyFilters
      description: Failure in generate Content Report missing body filters
      required:
        - program
        - openForContribution
        - report
      type: object
      properties:
        program:
          type: array
          items:
            type: string
          description: unique string identifies particular program_id
        openForContribution:
          type: boolean
          description: This represents the state of contribution
        report:
          type: string
          description: This represents the generated content report
      example:
        program:
          - 95d604b0-2af4-11eb-9bed-c53bebe417b7
        openForContribution: true
        report: textbookLevelReport
    programTenant-success-200-Request:
      title: Tenant-success-200-Request
      description: Successfully fetch the requested tenant details
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programTenant-success-200-Request-body'
      example:
        request:
          filters:
            status: Live
    programTenant-success-200-Request-body:
      title: Tenant-success-200-Request-body
      description: Request body for fetching tenant details
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/programTenant-success-200-Request-bodyFilters'
      example:
        filters:
          status: Live
    programTenant-success-200-Request-bodyFilters:
      title: Tenant-success-200-Request-bodyFilters
      description: Tenant success request body filters
      required:
        - status
      type: object
      properties:
        status:
          type: string
          description: This represents the status of org like live
      example:
        status: Live
    programTenant-error-400-Request:
      title: Tenant-error-400-Request
      description: Failure in fetching tenant details
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/programTenant-error-400-Request-body'
      example:
        request:
          filters:
            statu: Live
    programTenant-error-400-Request-body:
      title: Tenant-error-400-Request-body
      description: Failure fetching tenant request body
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/programTenant-error-400-RequestFilters'
      example:
        filters:
          statu: Live
    programTenant-error-400-RequestFilters:
      title: Tenant-error-400-RequestFilters
      description: Failure in fetching tenant filters option
      required:
        - statu
      type: object
      properties:
        statu:
          type: string
      example:
        statu: Live
    programListDownload200SuccessResponse:
      title: This represents the List Download 200 Success
      description: This represents the List Download 200 Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/programListDownloadResult'
      example:
        id: api.list.download
        ver: 1
        ts: 2021-01-07T06:52:58.030Z
        params:
          resmsgid: f9ce14e0-50b4-11eb-a115-db22788c28aa
          msgid: f95402e0-50b4-11eb-a115-db22788c28aa
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          tableData:
            - program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
              values:
                - Digital Textbook Name: Learning_Outcome_Book
                  Medium:
                    - English
                  Class: Class 7
                  Subject:
                    - English
                  Number of Chapters: 5
                  Nominations Received: 2
                  Samples Received: 0
                  Nominations Accepted: 2
                  Contributions Received: 6
                  Contributions Accepted: 5
                  Contributions Rejected: 0
                  Contributions Pending: 1
                  Contributions corrections pending: 0
    programListDownloadResult:
      title: ListDownloadResult
      description: Represents the result of the list download api response
      required:
        - tableData
      type: object
      properties:
        tableData:
          type: array
          items:
            $ref: '#/components/schemas/programTableDatum'
      example:
        tableData:
          - program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
            values:
              - Digital Textbook Name: Learning_Outcome_Book
                Medium:
                  - English
                Class: Class 7
                Subject:
                  - English
                Number of Chapters: 5
                Nominations Received: 2
                Samples Received: 0
                Nominations Accepted: 2
                Contributions Received: 6
                Contributions Accepted: 5
                Contributions Rejected: 0
                Contributions Pending: 1
                Contributions corrections pending: 0
    programTableDatum:
      title: TableDatum
      required:
        - program_id
        - values
      type: object
      description: This represents the TableDatum
      properties:
        program_id:
          type: string
          description: This represents the unique program id
        values:
          type: array
          items:
            $ref: '#/components/schemas/programTableDatumValue'
          description: This represents the TableDatumValue
      example:
        program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
        values:
          - Digital Textbook Name: Learning_Outcome_Book
            Medium:
              - English
            Class: Class 7
            Subject:
              - English
            Number of Chapters: 5
            Nominations Received: 2
            Samples Received: 0
            Nominations Accepted: 2
            Contributions Received: 6
            Contributions Accepted: 5
            Contributions Rejected: 0
            Contributions Pending: 1
            Contributions corrections pending: 0
    programTableDatumValue:
      title: TableDatumValue
      required:
        - Digital Textbook Name
        - Medium
        - Class
        - Subject
        - Number of Chapters
        - Nominations Received
        - Samples Received
        - Nominations Accepted
        - Contributions Received
        - Contributions Accepted
        - Contributions Rejected
        - Contributions Pending
        - Contributions corrections pending
      type: object
      properties:
        Digital Textbook Name:
          type: string
        Medium:
          type: array
          items:
            type: string
          description: These represents the mediums value
        Class:
          type: string
          description: These represents the class value
        Subject:
          type: array
          items:
            type: string
          description: These represents the subject value
        Number of Chapters:
          type: integer
          format: int32
          description: These represents the Number of Number of Chapters
        Nominations Received:
          type: integer
          format: int32
          description: These represents the Number of Nominations Received
        Samples Received:
          type: integer
          format: int32
          description: These represents the Number of Samples Received
        Nominations Accepted:
          type: integer
          format: int32
          description: These represents the Number of Nominations Accepted
        Contributions Received:
          type: integer
          format: int32
          description: These represents the Number of Chapters
        Contributions Accepted:
          type: integer
          format: int32
          description: These represents the Number of Contributions Accepted
        Contributions Rejected:
          type: integer
          format: int32
          description: These represents the Number of Contributions Rejected
        Contributions Pending:
          type: integer
          format: int32
          description: These represents the Number of Contributions Pending
        Contributions corrections pending:
          type: integer
          format: int32
          description: These represents the Number of Contributions corrections pending
      example:
        Digital Textbook Name: Learning_Outcome_Book
        Medium:
          - English
        Class: Class 7
        Subject:
          - English
        Number of Chapters: 5
        Nominations Received: 2
        Samples Received: 0
        Nominations Accepted: 2
        Contributions Received: 6
        Contributions Accepted: 5
        Contributions Rejected: 0
        Contributions Pending: 1
        Contributions corrections pending: 0
    programListDownload400BadRequest:
      title: ListDownload400BadRequest
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the result of the api response
      example:
        id: api.list.download
        ver: 1
        ts: 2021-01-07T08:02:37.384Z
        params:
          resmsgid: b4e4e482-50be-11eb-a115-db22788c28aa
          msgid: null
          status: failed
          err: ERR_GENERATING_PROGRAM_DATA
          errmsg: 'Required fields like program_id<Array>, is missing'
        responseCode: CLIENT_ERROR
        result: {}
    programProgramListsuccess-200:
      title: ProgramListsuccess-200
      description: This represents the Program List success
      required:
        - id
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/programProgramListsuccessResult'
      example:
        id: api.program.list
        ts: 2021-01-07T08:22:19.773Z
        params:
          resmsgid: 75a722d1-50c1-11eb-a115-db22788c28aa
          msgid: 75a722d0-50c1-11eb-a115-db22788c28aa
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          count: 1
          programs:
            - id: 13936
              program_id: 8d25f050-8df1-11ea-a3b1-3fc837314429
              user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
              organisation_id: null
              status: Initiated
              content_types:
                - Teacher Resource
              collection_ids: null
              feedback: null
              rolemapping: null
              createdby: bcc23eec-5290-4ca2-8f3e-144a24f03b6d
              updatedby: null
              createdon: 2020-11-24T07:57:48.365Z
              updatedon: null
              program:
                program_id: 8d25f050-8df1-11ea-a3b1-3fc837314429
                name: TN tenant Test project
                type: public
                collection_ids:
                  - do_11301367038142054411248
                  - do_11301367120541286411551
                content_types:
                  - Teacher Resource
                target_collection_category: null
                startdate: 2020-05-04T10:25:18.092Z
                enddate: 2021-06-18T18:30:00.000Z
                nomination_enddate: 2021-03-27T18:30:00.000Z
                shortlisting_enddate: 2021-05-01T18:30:00.000Z
                content_submission_enddate: 2021-05-01T18:30:00.000Z
                image: null
                status: Live
                slug: sunbird
                rolemapping:
                  REVIEWER:
                    - 6d9f0332-3662-497d-a8ff-ede453e557e4
                createdby: 90ffbea3-2f41-4404-868e-2dfbe2ed3656
                updatedby: null
                createdon: 2020-05-04T10:25:18.092Z
                updatedon: 2020-10-23T10:18:31.295Z
                rootorg_id: 013013662290239488220
                sourcing_org_name: Tamilnadu_Tenant
                channel: DIKSHA
                template_id: template1
                guidelines_url: ''
                subject: '["Tamil"]'
                defaultContributeOrgReview: null
                framework: tn_k-12
                board: State (Tamil Nadu)
                gradeLevel: '["Class 7"]'
                medium: '["English", "Tamil"]'
    programProgramListsuccessResult:
      title: ProgramListsuccessResult
      description: This represents the Program List success Result
      required:
        - count
        - programs
      type: object
      properties:
        count:
          type: integer
          format: int32
          description: Represents the number of programs
        programs:
          type: array
          description: Represents the array of programs
          items:
            $ref: '#/components/schemas/programProgram'
    programProgram:
      title: Program
      description: Represents the program details
      required:
        - id
        - program_id
        - user_id
        - organisation_id
        - status
        - content_types
        - collection_ids
        - feedback
        - rolemapping
        - createdby
        - updatedby
        - createdon
        - updatedon
        - program
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Represents the unique id table
        program_id:
          type: string
          description: Represents the unique id of the program
        user_id:
          type: string
          description: Represents the unique id of the user
        organisation_id:
          type: string
          nullable: true
          description: Represents the unique id of the organisation
        status:
          type: string
          description: Represents the status
        content_types:
          type: array
          items:
            type: string
          description: Represents the content types
        collection_ids:
          type: string
          nullable: true
          description: Represents the collection_ids id
        feedback:
          type: string
          nullable: true
          description: Represents the feedback details
        rolemapping:
          type: string
          nullable: true
          description: Represents the rolemapping details
        createdby:
          type: string
          description: Represents the user who createdby
        updatedby:
          type: string
          nullable: true
          description: Represents the last updatedby
        createdon:
          type: string
          description: Represents the last createdon
        updatedon:
          type: string
          nullable: true
          description: Represents the last updatedon
        program:
          $ref: '#/components/schemas/programProgram1'
    programProgram1:
      title: Program1
      required:
        - program_id
        - name
        - type
        - collection_ids
        - content_types
        - target_collection_category
        - startdate
        - enddate
        - nomination_enddate
        - shortlisting_enddate
        - content_submission_enddate
        - image
        - status
        - slug
        - rolemapping
        - createdby
        - updatedby
        - createdon
        - updatedon
        - rootorg_id
        - sourcing_org_name
        - channel
        - template_id
        - guidelines_url
        - subject
        - defaultContributeOrgReview
        - framework
        - board
        - gradeLevel
        - medium
      type: object
      properties:
        program_id:
          type: string
          description: Represents the unique program id
        name:
          type: string
          description: Represents the name
        type:
          type: string
        collection_ids:
          type: array
          items:
            type: string
          description: Represents the array of collection ids
        content_types:
          type: array
          items:
            type: string
          description: Represents the array of content types
        target_collection_category:
          type: string
          nullable: true
          description: Represents the target_collection_category
        startdate:
          type: string
          description: Represents the startdate
        enddate:
          type: string
          description: Represents the enddate
        nomination_enddate:
          type: string
          description: Represents the nomination_enddate
        shortlisting_enddate:
          type: string
          description: Represents the shortlisting_enddate
        content_submission_enddate:
          type: string
          description: Represents the content_submission_enddate
        image:
          type: string
          description: Represents the image
          nullable: true
        status:
          type: string
          description: Represents the status
        slug:
          type: string
          description: Represents the slug
        rolemapping:
          $ref: '#/components/schemas/programRolemapping'
        createdby:
          type: string
          description: Represents the createdby
        updatedby:
          type: string
          nullable: true
          description: Represents the updatedby
        createdon:
          type: string
          description: Represents the createdon
        updatedon:
          type: string
          description: Represents the updatedon
        rootorg_id:
          type: string
          description: Represents the rootorg_id
        sourcing_org_name:
          type: string
          description: Represents the sourcing_org_name
        channel:
          type: string
          description: Represents the channel
        template_id:
          type: string
          description: Represents the template_id
        guidelines_url:
          type: string
          description: Represents the guidelines_url
        subject:
          type: string
          description: Represents the subject
        defaultContributeOrgReview:
          type: string
          description: Represents the defaultContributeOrgReview
          nullable: true
        framework:
          type: string
          description: Represents the framework
        board:
          type: string
          description: Represents the board board
        gradeLevel:
          type: string
          description: Represents the gradeLevel
        medium:
          type: string
          description: Represents the medium
    programRolemapping:
      title: Rolemapping
      description: Represents the Role Mapping
      required:
        - REVIEWER
      type: object
      properties:
        REVIEWER:
          type: array
          items:
            type: string
          description: this is represents the type of reviewer
      example:
        REVIEWER:
          - 6d9f0332-3662-497d-a8ff-ede453e557e4
    programProgramList400BadRequest:
      title: ProgramList400BadRequest
      description: ProgramList400BadRequest
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programProgramList400BadRequestParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the result of the api response
      example:
        id: api.list.download
        ver: 1
        ts: 2021-01-08T11:38:10.738Z
        params:
          resmsgid: fc2fd921-51a5-11eb-9ecd-69fe79984d78
          msgid: null
          status: failed
          err: ERR_GENERATING_PROGRAM_DATA
          errmsg: 'Required fields like program_id<Array>, is missing'
        responseCode: CLIENT_ERROR
        result: {}
    programProgramList400BadRequestParams:
      title: ProgramList400BadRequestParams
      description: ProgramList400BadRequestParams
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          description: This represents res msgid
        msgid:
          type: string
          nullable: true
          description: This represents msgid
        status:
          type: string
          description: This represents status
        err:
          type: string
          description: This represents err
        errmsg:
          type: string
          description: This represents errmsg
      example:
        resmsgid: fc2fd921-51a5-11eb-9ecd-69fe79984d78
        msgid: null
        status: failed
        err: ERR_GENERATING_PROGRAM_DATA
        errmsg: 'Required fields like program_id<Array>, is missing'
    programNominationUpdate200Success:
      title: NominationUpdate200Success
      required:
        - id
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/programNominationUpdate200SuccessResult'
      example:
        id: api.nomination.update
        ts: 2021-01-08T12:03:50.823Z
        params:
          resmsgid: 92262b71-51a9-11eb-9ecd-69fe79984d78
          msgid: 92262b70-51a9-11eb-9ecd-69fe79984d78
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          program_id: c43f7790-0a2a-11eb-a2e9-4fe29a51bb70
          user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
    programNominationUpdate200SuccessResult:
      title: NominationUpdate200SuccessResult
      description: NominationUpdate200SuccessResult
      required:
        - program_id
        - user_id
      type: object
      properties:
        program_id:
          type: string
          description: Represents the unique program id
        user_id:
          type: string
          description: Represents the unique user id
      example:
        program_id: c43f7790-0a2a-11eb-a2e9-4fe29a51bb70
        user_id: 19ba0e4e-9285-4335-8dd0-f674bf03fa4d
    programNominationListDownload200Success:
      title: NominationListDownload200Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/programNominationListDownload200SuccessResult'
      example:
        id: api.list.download
        ver: 1
        ts: 2021-01-08T12:14:36.345Z
        params:
          resmsgid: 12e90290-51ab-11eb-9ecd-69fe79984d78
          msgid: 12e8b470-51ab-11eb-9ecd-69fe79984d78
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          stats:
            - programName: allTypeContent
              name: Vidya2
              type: Organisation
              textbooks: 1
              sample: 0
              createdon: 'December 2, 2020'
              status: Approved
            - programName: allTypeContent
              name: 'anusha '
              type: Individual
              textbooks: 1
              sample: 0
              createdon: 'December 2, 2020'
              status: Approved
    programNominationListDownload200SuccessResult:
      title: NominationListDownload200SuccessResult
      description: Represents the NominationListDownload200SuccessResult
      required:
        - stats
      type: object
      properties:
        stats:
          type: array
          items:
            $ref: '#/components/schemas/programStat'
          description: Represents the stats array
      example:
        stats:
          - programName: allTypeContent
            name: Vidya2
            type: Organisation
            textbooks: 1
            sample: 0
            createdon: 'December 2, 2020'
            status: Approved
          - programName: allTypeContent
            name: 'anusha '
            type: Individual
            textbooks: 1
            sample: 0
            createdon: 'December 2, 2020'
            status: Approved
    programStat:
      title: Stat
      description: Stat
      required:
        - programName
        - name
        - type
        - textbooks
        - sample
        - createdon
        - status
      type: object
      properties:
        programName:
          type: string
          description: Represents the programName
        name:
          type: string
          description: Represents the name
        type:
          type: string
          description: Represents the type
        textbooks:
          type: integer
          format: int32
          description: Represents the textbooks
        sample:
          type: integer
          format: int32
          description: Represents the sample
        createdon:
          type: string
          description: Represents the createdon
        status:
          type: string
          description: Represents the status
      example:
        programName: allTypeContent
        name: Vidya2
        type: Organisation
        textbooks: 1
        sample: 0
        createdon: 'December 2, 2020'
        status: Approved
    programNominationList200Success:
      title: NominationList200Success
      required:
        - id
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: array
          items:
            $ref: '#/components/schemas/programNominationListResult'
      example:
        id: api.nomination.list
        ts: 2021-01-11T04:43:33.952Z
        params:
          resmsgid: 8fb4cc01-53c7-11eb-9ecd-69fe79984d78
          msgid: 8fb4cc00-53c7-11eb-9ecd-69fe79984d78
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          - id: 14258
            program_id: d4688e90-50ca-11eb-a115-db22788c28aa
            user_id: 5a587cc1-e018-4859-a0a8-e842650b9d64
            organisation_id: e7328d77-42a7-44c8-84f4-8cfea235f07d
            status: Approved
            content_types:
              - Course Assessment
              - eTextbook
              - Explanation Content
              - Learning Resource
              - Practice Question Set
              - Teacher Resource
            collection_ids:
              - do_11318921666818048011613
            feedback: null
            rolemapping: null
            createdby: null
            updatedby: null
            createdon: 2021-01-07T09:30:00.506Z
            updatedon: null
            userData:
              osUpdatedAt: 2020-10-15T18:45:31.316Z
              lastName: ''
              firstName: N11
              gradeLevel: []
              osCreatedAt: 2020-10-15T18:45:31.316Z
              enrolledDate: 2020-08-24T11:24:10.893Z
              '@type': User
              subject: []
              channel: 01309282781705830427
              osid: 179b8dcd-ad56-42fd-83d1-9459bb8e4489
              medium: []
              userId: 5a587cc1-e018-4859-a0a8-e842650b9d64
            orgData:
              osUpdatedAt: 2020-08-24T11:23:53.873Z
              code: NIT
              osCreatedAt: 2020-08-24T11:23:53.873Z
              createdBy: 9e41deb1-daf3-4e0d-b45d-cfcad7291af9
              '@type': Org
              name: NIT
              description: NIT
              osid: e7328d77-42a7-44c8-84f4-8cfea235f07d
              type:
                - contribute
                - sourcing
              orgId: 01309282781705830427
    programNominationListResult:
      title: NominationListResult
      description: This represents Nomination List Result
      required:
        - id
        - program_id
        - user_id
        - organisation_id
        - status
        - content_types
        - collection_ids
        - feedback
        - rolemapping
        - createdby
        - updatedby
        - createdon
        - updatedon
        - userData
        - orgData
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: This represents id of the result
        program_id:
          type: string
          description: This represents unique program id
        user_id:
          type: string
          description: This represents unique user id
        organisation_id:
          type: string
          description: This represents unique organisation id
        status:
          type: string
          description: This represents status
        content_types:
          type: array
          items:
            type: string
          description: This represents the content types
        collection_ids:
          type: array
          items:
            type: string
          description: This represents unique collections ids
        feedback:
          type: string
          nullable: true
          description: This represents feedback
        rolemapping:
          type: string
          nullable: true
          description: This represents role mapping details
        createdby:
          type: string
          nullable: true
          description: This represents user createdby
        updatedby:
          type: string
          nullable: true
          description: This represents user updatedby
        createdon:
          type: string
          description: This represents date on which it is created
        updatedon:
          type: string
          nullable: true
          description: This represents last updated date
        userData:
          $ref: '#/components/schemas/programUserData'
        orgData:
          $ref: '#/components/schemas/programOrgData'
      example:
        id: 14258
        program_id: d4688e90-50ca-11eb-a115-db22788c28aa
        user_id: 5a587cc1-e018-4859-a0a8-e842650b9d64
        organisation_id: e7328d77-42a7-44c8-84f4-8cfea235f07d
        status: Approved
        content_types:
          - Course Assessment
          - eTextbook
          - Explanation Content
          - Learning Resource
          - Practice Question Set
          - Teacher Resource
        collection_ids:
          - do_11318921666818048011613
        feedback: null
        rolemapping: null
        createdby: null
        updatedby: null
        createdon: 2021-01-07T09:30:00.506Z
        updatedon: null
        userData:
          osUpdatedAt: 2020-10-15T18:45:31.316Z
          lastName: ''
          firstName: N11
          gradeLevel: []
          osCreatedAt: 2020-10-15T18:45:31.316Z
          enrolledDate: 2020-08-24T11:24:10.893Z
          '@type': User
          subject: []
          channel: 01309282781705830427
          osid: 179b8dcd-ad56-42fd-83d1-9459bb8e4489
          medium: []
          userId: 5a587cc1-e018-4859-a0a8-e842650b9d64
        orgData:
          osUpdatedAt: 2020-08-24T11:23:53.873Z
          code: NIT
          osCreatedAt: 2020-08-24T11:23:53.873Z
          createdBy: 9e41deb1-daf3-4e0d-b45d-cfcad7291af9
          '@type': Org
          name: NIT
          description: NIT
          osid: e7328d77-42a7-44c8-84f4-8cfea235f07d
          type:
            - contribute
            - sourcing
          orgId: 01309282781705830427
    programUserData:
      title: UserData
      description: This represents the user data
      required:
        - osUpdatedAt
        - lastName
        - firstName
        - gradeLevel
        - osCreatedAt
        - enrolledDate
        - '@type'
        - subject
        - channel
        - osid
        - medium
        - userId
      type: object
      properties:
        osUpdatedAt:
          type: string
          description: This represents the osUpdatedAt
        lastName:
          type: string
          description: This represents the lastName
        firstName:
          type: string
          description: This represents the firstName
        gradeLevel:
          type: array
          items:
            type: string
          description: 'This represents the unique gradeLevel '
        osCreatedAt:
          type: string
          description: This represents the osCreatedAt
        enrolledDate:
          type: string
          description: This represents the enrolledDate
        '@type':
          type: string
          description: This represents the type
        subject:
          type: array
          items:
            type: string
          description: This represents the unique subject
        channel:
          type: string
          description: This represents the unique channel id
        osid:
          type: string
          description: This represents the osid
        medium:
          type: array
          items:
            type: string
          description: This represents the unique medium
        userId:
          type: string
          description: This represents the unique user id
      example:
        osUpdatedAt: 2020-10-15T18:45:31.316Z
        lastName: ''
        firstName: N11
        gradeLevel: []
        osCreatedAt: 2020-10-15T18:45:31.316Z
        enrolledDate: 2020-08-24T11:24:10.893Z
        '@type': User
        subject: []
        channel: 01309282781705830427
        osid: 179b8dcd-ad56-42fd-83d1-9459bb8e4489
        medium: []
        userId: 5a587cc1-e018-4859-a0a8-e842650b9d64
    programOrgData:
      title: OrgData
      description: This represents the OrgData
      required:
        - osUpdatedAt
        - code
        - osCreatedAt
        - createdBy
        - '@type'
        - name
        - description
        - osid
        - type
        - orgId
      type: object
      properties:
        osUpdatedAt:
          type: string
          description: This represents the osUpdatedAt
        code:
          type: string
          description: This represents the code
        osCreatedAt:
          type: string
          description: This represents the osCreatedAt
        createdBy:
          type: string
          description: This represents the created by
        '@type':
          type: string
          description: This represents the type
        name:
          type: string
          description: This represents the name
        description:
          type: string
          description: This represents the description
        osid:
          type: string
          description: This represents the osid
        type:
          type: array
          items:
            type: string
          description: This represents the types like sourcing and contribute
        orgId:
          type: string
          description: This represents the orgId
      example:
        osUpdatedAt: 2020-08-24T11:23:53.873Z
        code: NIT
        osCreatedAt: 2020-08-24T11:23:53.873Z
        createdBy: 9e41deb1-daf3-4e0d-b45d-cfcad7291af9
        '@type': Org
        name: NIT
        description: NIT
        osid: e7328d77-42a7-44c8-84f4-8cfea235f07d
        type:
          - contribute
          - sourcing
        orgId: 01309282781705830427
    programPreference-create200Success:
      title: Preference-create 200 Success
      description: This represents the Preference-create 200 Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/programPreferenceResult'
      example:
        id: api.preference.create
        ver: 1
        ts: 2021-01-11T06:37:52.627Z
        params:
          resmsgid: 87cb8c30-53d7-11eb-9ecd-69fe79984d78
          msgid: 87cb6520-53d7-11eb-9ecd-69fe79984d78
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          user_id: 48dc0e70-2775-474b-9b78-def27d047836
          program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
          type: sourcing
          sourcing_preference:
            medium:
              - English
            subject:
              - ''
            gradeLevel:
              - Class 7
          contributor_preference: {}
    programPreferenceResult:
      title: PreferenceResult
      description: Preference Result
      required:
        - user_id
        - program_id
        - type
        - sourcing_preference
        - contributor_preference
      type: object
      properties:
        user_id:
          type: string
          description: This represents the unique user id
        program_id:
          type: string
          description: This represents the unique program id
        type:
          type: string
          description: This represents the type
        sourcing_preference:
          $ref: '#/components/schemas/programSourcingPreference'
        contributor_preference:
          type: object
          description: This represents the contributor preference
      example:
        user_id: 48dc0e70-2775-474b-9b78-def27d047836
        program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
        type: sourcing
        sourcing_preference:
          medium:
            - English
          subject:
            - ''
          gradeLevel:
            - Class 7
        contributor_preference: {}
    programSourcingPreference:
      title: SourcingPreference
      description: This represents Sourcing Preference
      required:
        - medium
        - subject
        - gradeLevel
      type: object
      properties:
        medium:
          type: array
          items:
            type: string
          description: This represents the medium
        subject:
          type: array
          items:
            type: string
          description: This represents the subject
        gradeLevel:
          type: array
          items:
            type: string
          description: This represents the gradeLevel
      example:
        medium:
          - English
        subject:
          - ''
        gradeLevel:
          - Class 7
    programPreference-read200Success:
      title: Preference-read 200 Success
      description: Represents the Preference-read 200 Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/programPreference-readResult'
      example:
        id: api.preference.read
        ver: 1
        ts: 2021-01-11T06:46:03.524Z
        params:
          resmsgid: ac647c40-53d8-11eb-9ecd-69fe79984d78
          msgid: ac642e20-53d8-11eb-9ecd-69fe79984d78
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          contributor_preference: {}
          sourcing_preference: {}
          synced: true
          timestamp: 2020-12-03T10:42:58.288Z
    programPreference-readResult:
      title: Preference-readResult
      description: This represents Preference-read Result
      required:
        - contributor_preference
        - sourcing_preference
        - synced
        - timestamp
      type: object
      properties:
        contributor_preference:
          type: object
          description: This represents the contributor_preference
        sourcing_preference:
          type: object
          description: This represents the sourcing_preference
        synced:
          type: boolean
          description: This represents the synced
        timestamp:
          type: string
          description: This represents the timestamp
      example:
        contributor_preference: {}
        sourcing_preference: {}
        synced: true
        timestamp: 2020-12-03T10:42:58.288Z
    programPreference-update200Success:
      title: Preference-update 200 Success
      description: This represents the Preference-update 200 Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/programPreferenceResult'
      example:
        id: api.preference.create
        ver: 1
        ts: 2021-01-11T06:46:58.423Z
        params:
          resmsgid: cd1d6870-53d8-11eb-9ecd-69fe79984d78
          msgid: cd1d1a50-53d8-11eb-9ecd-69fe79984d78
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          user_id: 48dc0e70-2775-474b-9b78-def27d047836
          program_id: afdfa9a0-1dbc-11eb-81b1-659ec274e395
          type: sourcing
          sourcing_preference:
            medium:
              - English
            subject:
              - ''
            gradeLevel:
              - ''
          contributor_preference: {}
    programPreference400BadRequest:
      title: Preference400BadRequest
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the results
      example:
        id: api.preference.create
        ver: 1
        ts: 2021-01-11T06:47:17.091Z
        params:
          resmsgid: d83deb31-53d8-11eb-a43e-7fcb93a469e2
          msgid: null
          status: failed
          err: ERR_CREATE_USER_PREFERENCE
          errmsg: >-
            Required fields like user_id, program_id for adding user preferences
            are missing
        responseCode: CLIENT_ERROR
        result: {}
    programProgram-Feed-Search200success:
      title: Program-Feed-Search200success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the results
      example:
        id: api.feed.search
        ver: 1
        ts: 2021-01-11T08:51:23.467Z
        params:
          resmsgid: 2ea0b9b0-53ea-11eb-9ecd-69fe79984d78
          msgid: 2e3f11b0-53ea-11eb-9ecd-69fe79984d78
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result: {}
    programProgram-Feed-SearchBadRequest:
      title: Program-Feed-SearchBadRequest
      description: 'Failure, loading latest update of Program Data'
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
          description: ‘Signifies Unique Program Id’
        ver:
          type: string
          description: ’Version’
        ts:
          type: string
          description: ‘Timestamp’
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: ‘Status/code for response data’
        result:
          type: object
      example:
        id: api.feed.search
        ver: 1
        ts: 2021-01-11T08:54:00.664Z
        params:
          resmsgid: 8c531580-53ea-11eb-9ecd-69fe79984d78
          msgid: null
          status: failed
          err: ERR_SEARCHING_PROGRAM_FEED
          errmsg: '[{"request.nomination.programId":"programId should not be empty"}]'
        responseCode: CLIENT_ERROR
        result: {}
    programReport-success-200:
      title: Report-success-200
      description: Successful generation of content Report
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
          description: Unique Program id
        ver:
          type: string
          description: version
        ts:
          type: string
          description: timestamp
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Status/code for the response request
        result:
          $ref: '#/components/schemas/programReportResult'
          description: data for the content generation report
      example:
        id: api.v1.report
        ver: 1
        ts: 2021-01-11T11:23:09.881Z
        params:
          resmsgid: 62793a90-53ff-11eb-9c52-f5f4fb791715
          msgid: 62082940-53ff-11eb-9c52-f5f4fb791715
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          tableData:
            - - Medium: English
                Grade: >-
                  Class 1, Class 2, Class 3, Class 9, Class 10, Class 8, Class
                  5, Class 7, Class 6, Class 4
                Subject: Mathematics
                undefined Name: Math-Magic
                Total Number of Chapters: 2
                Total Contents Contributed: 0
                Total Contents Reviewed: 0
                Chapters with at least one approved in each contentType: 0
                Chapters with at least one approved: 0
                Total number of Approved Contents: 0
                Digital Textbook: 0
    programReportResult:
      title: Result
      description: 'Data/Object of the response request '
      required:
        - tableData
      type: object
      properties:
        tableData:
          type: array
          description: >-
            data/details of program such as medium,grade,subject supported by
            the program
          items:
            type: array
            items:
              $ref: '#/components/schemas/programReportTableDatum'
      example:
        tableData:
          - - Medium: English
              Grade: >-
                Class 1, Class 2, Class 3, Class 9, Class 10, Class 8, Class 5,
                Class 7, Class 6, Class 4
              Subject: Mathematics
              undefined Name: Math-Magic
              Total Number of Chapters: 2
              Total Contents Contributed: 0
              Total Contents Reviewed: 0
              Chapters with at least one approved in each contentType: 0
              Chapters with at least one approved: 0
              Total number of Approved Contents: 0
              Digital Textbook: 0
    programReportTableDatum:
      title: TableDatum
      description: List of report table data of the content
      required:
        - Medium
        - Grade
        - Subject
        - undefined Name
        - Total Number of Chapters
        - Total Contents Contributed
        - Total Contents Reviewed
        - Chapters with at least one approved in each contentType
        - Chapters with at least one approved
        - Total number of Approved Contents
        - Digital Textbook
      type: object
      properties:
        Medium:
          type: string
          description: Medium of the content
        Grade:
          type: string
          description: list of grade supported by the content
        Subject:
          type: string
          description: list of subjects supported by the content
        undefined Name:
          type: string
          description: Name of the content
        Total Number of Chapters:
          type: integer
          format: int32
          description: signifies total number of chapters in the content
        Total Contents Contributed:
          type: integer
          format: int32
          description: signifies total content contributed in the content
        Total Contents Reviewed:
          type: integer
          format: int32
          description: 'signifies total contents to be reviewed '
        Chapters with at least one approved in each contentType:
          type: integer
          format: int32
          description: Number of chapters at least one approved content Type
        Chapters with at least one approved:
          type: integer
          format: int32
          description: Number of chapters with at least one approved chapter
        Total number of Approved Contents:
          type: integer
          format: int32
          description: total number of content approved
        Digital Textbook:
          type: integer
          format: int32
          description: total number of digital textbooks
      example:
        Medium: English
        Grade: >-
          Class 1, Class 2, Class 3, Class 9, Class 10, Class 8, Class 5, Class
          7, Class 6, Class 4
        Subject: Mathematics
        undefined Name: Math-Magic
        Total Number of Chapters: 2
        Total Contents Contributed: 0
        Total Contents Reviewed: 0
        Chapters with atleast one approved in each contentType: 0
        Chapters with atleast one approved: 0
        Total number of Approved Contents: 0
        Digital Textbook: 0
    programReport-Error-400:
      title: Report-Error-400
      description: 'Failure, Not able to generate content report'
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
          description: Unique id for particular program
        ver:
          type: string
          description: version
        ts:
          type: string
          description: timestamp
        params:
          $ref: '#/components/schemas/programReportParams'
        responseCode:
          type: string
          description: code/status of requested response
        result:
          type: object
          description: data/object signifies result of the request
      example:
        id: api.v1.report
        ver: 1
        ts: 2021-01-11T11:23:38.453Z
        params:
          resmsgid: 7380f850-53ff-11eb-9c52-f5f4fb791715
          msgid: null
          status: failed
          err: ERR_GENERATING_CONTENT_REPORT
          errmsg: 'Required fields like program_id<Array>,report is missing'
        responseCode: PRG_RPT01_CLIENT_ERROR
        result: {}
    programReportParams:
      title: Params
      description: list of Parameters for content report generation
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          description: unique response message id
        msgid:
          type: string
          nullable: true
          description: unique message id
        status:
          type: string
          description: Status/code for the report request
        err:
          type: string
          description: error code/status
        errmsg:
          type: string
          description: error response/message detail
      example:
        resmsgid: 7380f850-53ff-11eb-9c52-f5f4fb791715
        msgid: null
        status: failed
        err: ERR_GENERATING_CONTENT_REPORT
        errmsg: 'Required fields like program_id<Array>,report is missing'
    programTenant-error-400:
      title: Tenant-error-400
      description: Tenant-error-400
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programTenantParams'
        responseCode:
          type: string
          description: Represents the response code
        result:
          type: object
          description: Represents the results
      example:
        id: api.tenant.list
        ver: 1
        ts: 2021-01-11T11:43:18.952Z
        params:
          resmsgid: 3322d280-5402-11eb-8dd7-51aa5ed27ae5
          msgid: null
          status: failed
          err: ERR_GET_PROGRAMCOUNTS_FAILED
          errmsg: Error while fetching program count group by facets
        responseCode: SERVER_ERROR
        result: {}
    programTenantParams:
      title: TenantParams
      description: TenantParams
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          description: Unique response message id
        msgid:
          type: string
          nullable: true
          description: Unique message id
        status:
          type: string
          description: status of the response
        err:
          type: string
          description: data/details on error occurred
        errmsg:
          type: string
          description: error message
      example:
        resmsgid: 3322d280-5402-11eb-8dd7-51aa5ed27ae5
        msgid: null
        status: failed
        err: ERR_GET_PROGRAMCOUNTS_FAILED
        errmsg: Error while fetching program count group by facets
    programTenant-success-200:
      title: Tenant-success-200
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/programTenantSuccessResult'
      example:
        id: api.tenant.list
        ver: 1
        ts: 2021-01-11T11:53:41.373Z
        params:
          resmsgid: a620bad0-5403-11eb-9c52-f5f4fb791715
          msgid: a5ba57e0-5403-11eb-9c52-f5f4fb791715
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          count: 1
          content:
            - imgUrl: null
              orgName: Tamilnadu_Tenant
              orgCode: null
              id: 013013662290239488220
              slug: tn_tenant
              program_count: 1
    programTenantSuccessResult:
      title: Result
      required:
        - count
        - content
      type: object
      properties:
        count:
          type: integer
          format: int32
          description: This represents the programs count
        content:
          type: array
          items:
            $ref: '#/components/schemas/programContent'
          description: This represents the list details
      example:
        count: 1
        content:
          - imgUrl: null
            orgName: Tamilnadu_Tenant
            orgCode: null
            id: 013013662290239488220
            slug: tn_tenant
            program_count: 1
    programContent:
      title: Content
      required:
        - imgUrl
        - orgName
        - orgCode
        - id
        - slug
        - program_count
      type: object
      properties:
        imgUrl:
          type: string
          nullable: true
          description: This represents the img url
        orgName:
          type: string
          description: This represents the org name
        orgCode:
          type: string
          nullable: true
          description: This represents the org code
        id:
          type: string
          description: This represents the unique id
        slug:
          type: string
          description: This represents the slug value
        program_count:
          type: string
          description: This represents the programs count
      example:
        imgUrl: null
        orgName: Tamilnadu_Tenant
        orgCode: null
        id: 013013662290239488220
        slug: tn_tenant
        program_count: 1
    programRead-Program-200-Success:
      title: Read-Program-200-Success
      description: This represents the Read-Program-200-Success
      required:
        - id
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
          description: This represents the unique id of the result
        ts:
          type: string
          description: Represents the EPOCH epoch time in milliseconds
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: this represents the response code
        result:
          $ref: '#/components/schemas/programReadResult'
    programReadResult:
      title: Result
      required:
        - program_id
        - name
        - description
        - type
        - collection_ids
        - content_types
        - target_collection_category
        - startdate
        - enddate
        - nomination_enddate
        - shortlisting_enddate
        - content_submission_enddate
        - image
        - status
        - slug
        - config
        - rolemapping
        - createdby
        - updatedby
        - createdon
        - updatedon
        - rootorg_id
        - sourcing_org_name
        - channel
        - template_id
        - guidelines_url
      type: object
      properties:
        program_id:
          type: string
          description: Signifies Unique Program Id
        name:
          type: string
          description: Name of the program
        description:
          type: string
          description: Details/info of the program
        type:
          type: string
          description: Details/info of the program type
        collection_ids:
          type: array
          items:
            type: string
          description: List/options of collections supported by program
        content_types:
          type: array
          items:
            type: string
          description: List/options of content types supported by program
        target_collection_category:
          type: string
          nullable: true
          description: Signifies target collection category
        startdate:
          type: string
          description: Start date of the program
        enddate:
          type: string
          description: End date of the program
        nomination_enddate:
          type: string
          description: End date of the nomination program
        shortlisting_enddate:
          type: string
          description: End date of the shortlisting program
        content_submission_enddate:
          type: string
          description: End date for the program content submission
        image:
          type: string
          nullable: true
          description: This Represents the  image
        status:
          type: string
          description: This Represents the status
        slug:
          type: string
          description: This Represents the slug
        config:
          $ref: '#/components/schemas/programConfig'
        rolemapping:
          type: string
          nullable: true
          description: This Represents the role mapping
        createdby:
          type: string
          description: This Represents the createdby
        updatedby:
          type: string
          description: This Represents the updatedby
          nullable: true
        createdon:
          type: string
          description: This Represents the createdon
        updatedon:
          type: string
          description: This Represents the updatedon
        rootorg_id:
          type: string
          description: This Represents the rootorg_id
        sourcing_org_name:
          type: string
          description: This Represents the sourcing_org_name
        channel:
          type: string
          description: This Represents the channel
        template_id:
          type: string
          description: This Represents the template_id
        guidelines_url:
          type: string
          nullable: true
          description: This Represents the guidelines_url
    programConfig:
      title: Config
      description: Configuration
      required:
        - board
        - roles
        - header
        - medium
        - actions
        - subject
        - _comments
        - framework
        - components
        - gradeLevel
        - collections
        - loginReqired
        - sharedContext
        - defaultContributeOrgReview
      type: object
      properties:
        board:
          type: string
          description: Signifies the list of board added for the program
        roles:
          type: array
          items:
            $ref: '#/components/schemas/programRole'
          description: List/options of roles supported by the program
        header:
          $ref: '#/components/schemas/programReadHeader'
        medium:
          type: array
          items:
            type: string
          description: List/options of medium supported by the program
        actions:
          $ref: '#/components/schemas/programActions'
        subject:
          type: array
          items:
            type: string
          description: List/options of subjects supported in the program
        _comments:
          type: string
          description: Details/data if any
        framework:
          type: string
          description: Framework supported by the program
        components:
          type: array
          items:
            $ref: '#/components/schemas/programReadComponent'
          description: list of components in the program
        gradeLevel:
          type: array
          items:
            type: string
          description: list of grade level data supported in the program
        collections:
          type: array
          items:
            $ref: '#/components/schemas/programReadCollection'
          description: signifies collection list in the program
        loginReqired:
          type: boolean
          description: signifies a status/state in case login is required or not
        sharedContext:
          type: array
          items:
            type: string
          description: list of shared context supported by  the program
        defaultContributeOrgReview:
          type: boolean
          description: default review enabled for contribute org
    programRole:
      title: Role
      description: 'Roles supported in the program, required id,name,tabs,default tab'
      required:
        - id
        - name
        - tabs
        - defaultTab
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Unique program Id
        name:
          type: string
          description: name of the role
        tabs:
          type: array
          items:
            type: integer
            format: int32
          description: list/options of tab supported by the role
        default:
          type: boolean
          description: default option
        defaultTab:
          type: integer
          format: int32
          description: signifies default tab for the role
      example:
        id: 1
        name: CONTRIBUTOR
        tabs:
          - 1
        default: true
        defaultTab: 1
    programConfig1:
      title: Config1
      description: Configuration required tabs
      required:
        - tabs
      type: object
      properties:
        tabs:
          type: array
          items:
            $ref: '#/components/schemas/programReadProgramTab'
          description: Configuration required tabs List
      example:
        tabs:
          - index: 1
            label: Contribute
            onClick: collectionComponent
          - index: 2
            label: Review
            onClick: collectionComponent
          - index: 3
            label: Dashboard
            onClick: dashboardComponent
    programActions:
      title: Actions
      description: >-
        Actions on the program respective to the roles supported such as
        showcert(displayCertificates),showEdit(DisplayEdit),
        showSave(DisplaySave), showSubmit(DisplaySubmit),
        ShowSubmit(DisplaySubmit),showfilter(DisplayFilters),ShowPublish(DisplayPublish),ShowRejected(DisplayRejected),ShowDashBoard(DisplayDashBoard)
        etc
      required:
        - showCert
        - showEdit
        - showSave
        - showSubmit
        - showFilters
        - showPublish
        - showRejected
        - showDashboard
        - showChangeFile
        - showCountPanel
        - showAddResource
        - showCreatorView
        - showUnderReview
        - showUpforReview
        - showContribution
        - showEditResource
        - showMoveResource
        - showReviewerView
        - showCreateQuestion
        - showDeleteQuestion
        - showDeleteResource
        - showMyContribution
        - showRequestChanges
        - showAawaitingReview
        - showPreviewResource
        - showTotalUnderReview
        - showTotalContribution
      type: object
      properties:
        showCert:
          $ref: '#/components/schemas/programShowCert'
        showEdit:
          $ref: '#/components/schemas/programShowEdit'
        showSave:
          $ref: '#/components/schemas/programShowSave'
        showSubmit:
          $ref: '#/components/schemas/programShowSubmit'
        showFilters:
          $ref: '#/components/schemas/programShowFilters'
        showPublish:
          $ref: '#/components/schemas/programShowPublish'
        showRejected:
          $ref: '#/components/schemas/programShowRejected'
        showDashboard:
          $ref: '#/components/schemas/programShowDashboard'
        showChangeFile:
          $ref: '#/components/schemas/programShowChangeFile'
        showCountPanel:
          $ref: '#/components/schemas/programShowCountPanel'
        showAddResource:
          $ref: '#/components/schemas/programShowAddResource'
        showCreatorView:
          $ref: '#/components/schemas/programShowCreatorView'
        showUnderReview:
          $ref: '#/components/schemas/programShowUnderReview'
        showUpforReview:
          $ref: '#/components/schemas/programShowUpforReview'
        showContribution:
          $ref: '#/components/schemas/programShowContribution'
        showEditResource:
          $ref: '#/components/schemas/programShowEditResource'
        showMoveResource:
          $ref: '#/components/schemas/programShowMoveResource'
        showReviewerView:
          $ref: '#/components/schemas/programShowReviewerView'
        showCreateQuestion:
          $ref: '#/components/schemas/programShowCreateQuestion'
        showDeleteQuestion:
          $ref: '#/components/schemas/programShowDeleteQuestion'
        showDeleteResource:
          $ref: '#/components/schemas/programShowDeleteResource'
        showMyContribution:
          $ref: '#/components/schemas/programShowMyContribution'
        showRequestChanges:
          $ref: '#/components/schemas/programShowRequestChanges'
        showAawaitingReview:
          $ref: '#/components/schemas/programShowAawaitingReview'
        showPreviewResource:
          $ref: '#/components/schemas/programShowPreviewResource'
        showTotalUnderReview:
          $ref: '#/components/schemas/programShowTotalUnderReview'
        showTotalContribution:
          $ref: '#/components/schemas/programShowTotalContribution'
      example:
        showCert:
          roles:
            - 4
        showEdit:
          roles:
            - 1
        showSave:
          roles:
            - 1
        showSubmit:
          roles:
            - 1
        showFilters:
          roles:
            - 1
            - 2
            - 3
        showPublish:
          roles:
            - 2
        showRejected:
          roles:
            - 1
        showDashboard:
          roles:
            - 3
        showChangeFile:
          roles:
            - 1
        showCountPanel:
          roles:
            - 1
            - 2
        showAddResource:
          roles:
            - 1
        showCreatorView:
          roles:
            - 1
        showUnderReview:
          roles:
            - 1
        showUpforReview:
          roles:
            - 2
        showContribution:
          roles:
            - 1
        showEditResource:
          roles:
            - 1
        showMoveResource:
          roles:
            - 1
        showReviewerView:
          roles:
            - 2
        showCreateQuestion:
          roles:
            - 1
        showDeleteQuestion:
          roles:
            - 1
        showDeleteResource:
          roles:
            - 1
        showMyContribution:
          roles:
            - 1
        showRequestChanges:
          roles:
            - 2
        showAawaitingReview:
          roles:
            - 2
        showPreviewResource:
          roles:
            - 2
        showTotalUnderReview:
          roles:
            - 2
        showTotalContribution:
          roles:
            - 1
    programShowCert:
      title: ShowCert
      description: Display/show Certificates
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supported for displaying certificates
      example:
        roles:
          - 4
    programShowEdit:
      title: ShowEdit
      description: Display/show Edit Option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show edit
      example:
        roles:
          - 1
    programShowSave:
      title: ShowSave
      description: Display/show Save option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show save option
      example:
        roles:
          - 1
    programShowSubmit:
      title: ShowSubmit
      description: Display/show to show option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show submit option
      example:
        roles:
          - 1
    programShowFilters:
      title: ShowFilters
      description: Display/show Filters option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show Filters option
      example:
        roles:
          - 1
          - 2
          - 3
    programShowPublish:
      title: ShowPublish
      description: Display/show publish option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show Publish option
      example:
        roles:
          - 2
    programShowRejected:
      title: ShowRejected
      description: display/show Rejected option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show Rejected option
      example:
        roles:
          - 1
    programShowDashboard:
      title: ShowDashboard
      description: Display/show Dashboard option enabled
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show Dashboard option
      example:
        roles:
          - 3
    programShowChangeFile:
      title: ShowChangeFile
      description: Display/show to change file option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show change file option
      example:
        roles:
          - 1
    programShowCountPanel:
      title: ShowCountPanel
      description: Display/show Count panel enabled
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show count panel option
      example:
        roles:
          - 1
          - 2
    programShowAddResource:
      title: ShowAddResource
      description: Display/show option to add resource
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show add resource option
      example:
        roles:
          - 1
    programShowCreatorView:
      title: ShowCreatorView
      description: Display/show CreatorView option enabled
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show creator view option
      example:
        roles:
          - 1
    programShowUnderReview:
      title: ShowUnderReview
      description: Display/show Under Review Option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show under Review option
      example:
        roles:
          - 1
    programShowUpforReview:
      title: ShowUpforReview
      description: Display/show Up for review option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show Up for Review option
      example:
        roles:
          - 2
    programShowContribution:
      title: ShowContribution
      description: Display/show contribution enabled
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show Contribution option
      example:
        roles:
          - 1
    programShowEditResource:
      title: ShowEditResource
      description: Display/show Edit Resource option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show Edit resource option
      example:
        roles:
          - 1
    programShowMoveResource:
      title: ShowMoveResource
      description: Display/show Move Resource option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show Move Resource option
      example:
        roles:
          - 1
    programShowReviewerView:
      title: ShowReviewerView
      description: Show/Display Reviewer View Option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show Reviewer view option
      example:
        roles:
          - 2
    programShowCreateQuestion:
      title: ShowCreateQuestion
      description: Display/show Create question option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show create question option
      example:
        roles:
          - 1
    programShowDeleteQuestion:
      title: ShowDeleteQuestion
      description: Display/show Delete question enabled
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show delete Question option
      example:
        roles:
          - 1
    programShowDeleteResource:
      title: ShowDeleteResource
      description: Display/show delete Resource option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show Delete question option
      example:
        roles:
          - 1
    programShowMyContribution:
      title: ShowMyContribution
      description: Display/show MyContribution option enabled
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show MyContribution option
      example:
        roles:
          - 1
    programShowRequestChanges:
      title: ShowRequestChanges
      description: Display/show the Request changes
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show request changes option
      example:
        roles:
          - 2
    programShowAawaitingReview:
      title: Show awaiting Review
      description: Display/show Awaiting review enabled
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show Awaiting Review option
      example:
        roles:
          - 2
    programShowPreviewResource:
      title: ShowPreviewResource
      description: Display/show Preview Resource option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show Preview Resource option
      example:
        roles:
          - 2
    programShowTotalUnderReview:
      title: ShowTotalUnderReview
      description: Display/show Total Under Review option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show Total Under review option
      example:
        roles:
          - 2
    programShowTotalContribution:
      title: ShowTotalContribution
      description: Display/show Total Contribution option
      required:
        - roles
      type: object
      properties:
        roles:
          type: array
          items:
            type: integer
            format: int32
          description: List of roles supports for show total contribution option
      example:
        roles:
          - 1
    programConfig2:
      title: Config2
      description: 'Configuration2, list status,collection list,contenttypes'
      type: object
      properties:
        status:
          type: array
          items:
            type: string
          description: List of status key/value pair
        filters:
          $ref: '#/components/schemas/programFilters'
        groupBy:
          $ref: '#/components/schemas/programGroupBy'
        collectionList:
          type: array
          items:
            type: string
          description: List/options of collection list supported by the program
        collectionType:
          type: string
          description: Signifies collection type supported by the program
        contentTypes:
          $ref: '#/components/schemas/programContentTypes'
        tenantName:
          type: string
          description: name of the tenant
        filesConfig:
          $ref: '#/components/schemas/programFilesConfig'
        formConfiguration:
          type: array
          items:
            $ref: '#/components/schemas/programFormConfiguration'
          description: Form Configuration of the program
        resourceTitleLength:
          type: string
          description: Length of the Resource title
        assetConfig:
          $ref: '#/components/schemas/programAssetConfig'
        solutionType:
          type: array
          items:
            type: string
          description: Details/data for the solution type of the program
        No of options:
          type: integer
          format: int32
          description: Number of options
        questionCategory:
          type: array
          items:
            type: string
          description: List of question category supported in the program
    programFilters:
      title: Filters
      description: filters supported
      required:
        - explicit
        - implicit
      type: object
      properties:
        explicit:
          type: array
          items:
            $ref: '#/components/schemas/programExplicit'
          description: explicit list of filters
        implicit:
          type: array
          items:
            $ref: '#/components/schemas/programImplicit'
          description: implicit list of filters
    programReadCollection:
      title: Collection
      description: >-
        Program Collection Read Request, required id, children and allowed
        content types
      required:
        - id
        - children
        - allowed_content_types
      type: object
      properties:
        id:
          type: string
          description: Unique id specifying program id
        children:
          type: array
          items:
            $ref: '#/components/schemas/programReadChild'
          description: List of children of the program collection
        allowed_content_types:
          type: array
          items:
            type: string
          description: List of content types allowed in the program
      example:
        id: do_113108644711645184186
        children:
          - id: do_113108645442945024187
            allowed_content_types: []
          - id: do_113108645443067904189
            allowed_content_types: []
        allowed_content_types: []
    programReadProgramTab:
      title: Tab
      description: 'Request Program Read Tab, required index,label, onclick'
      required:
        - index
        - label
        - onClick
      type: object
      properties:
        index:
          type: integer
          format: int32
          description: Unique index for Read Program tab
        label:
          type: string
          description: Label name of the program tab
        onClick:
          type: string
          description: action on program tab
      example:
        index: 1
        label: Contribute
        onClick: collectionComponent
    programReadHeader:
      title: Header
      description: List of Program Header Config
      required:
        - id
        - ver
        - data
        - author
        - compId
        - config
        - description
        - publishedDate
      type: object
      properties:
        id:
          type: string
          description: Unique Program id
        ver:
          type: string
          description: version
        data:
          type: object
          description: details/data for the program read header
        author:
          type: string
          description: author name/id
        compId:
          type: string
          description: Comparision id
        config:
          $ref: '#/components/schemas/programConfig1'
        description:
          type: string
          description: Details of the program header
        publishedDate:
          type: string
          description: Published Date of the program Header
      example:
        id: ng.sunbird.header
        ver: 1
        data: {}
        author: Venkat
        compId: headerComp
        config:
          tabs:
            - index: 1
              label: Contribute
              onClick: collectionComponent
            - index: 2
              label: Review
              onClick: collectionComponent
            - index: 3
              label: Dashboard
              onClick: dashboardComponent
        description: ''
        publishedDate: ''
    programReadComponent:
      title: Component
      description: READ Program Component
      required:
        - id
        - ver
        - data
        - author
        - compId
        - config
        - description
        - publishedDate
      type: object
      properties:
        id:
          type: string
          description: unique program id
        ver:
          type: string
          description: version
        data:
          type: object
          description: data/object of program read component
        author:
          type: string
          description: author data/nama for program read component
        compId:
          type: string
          description: Comparision Id
        config:
          $ref: '#/components/schemas/programConfig2'
        description:
          type: string
          description: Details of the program component
        publishedDate:
          type: string
          description: published date of program component
    programReadChild:
      title: Child
      description: Child component of the program
      required:
        - id
        - allowed_content_types
      type: object
      properties:
        id:
          type: string
          description: unique Program id
        allowed_content_types:
          type: array
          items:
            type: string
          description: list/options for allowed content types for program component
      example:
        id: do_113108645442945024187
        allowed_content_types: []
    programUnlist-Publish400Success:
      title: Unlist-Publish400Success
      description: This represents the  Unlist-Publish bad request
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programUnlist-PublisParams'
        responseCode:
          type: string
          description: Represents the api response code
      example:
        id: api.unlist.publish
        ver: 1
        ts: 2021-01-11T13:03:17.396Z
        params:
          resmsgid: 5f3b4541-540d-11eb-99da-e37131bdf7ab
          msgid: null
          status: failed
          err: ERR_PUBLISH_PROGRAM_DATA
          errmsg: Required fields while publishing program data are missing
        responseCode: CLIENT_ERROR
        result: {}
    programUnlist-PublisParams:
      title: Unlist-Publish Params
      description: Unlist-Publish
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          description: Unique response message id
        msgid:
          type: string
          nullable: true
          description: Unique message id
        status:
          type: string
          description: status of the response
        err:
          type: string
          description: data/details on error occurred
        errmsg:
          type: string
          description: error message
      example:
        resmsgid: 5f3b4541-540d-11eb-99da-e37131bdf7ab
        msgid: null
        status: failed
        err: ERR_PUBLISH_PROGRAM_DATA
        errmsg: Required fields while publishing program data are missing
    programresultProgram:
      title: This represents the publish program response
      description: This represents the publish program response
      required:
        - id
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/programProgramParams'
        responseCode:
          type: string
          description: Represents the response code
        result:
          $ref: '#/components/schemas/programPublishResult'
      example:
        id: api.program.publish
        ts: 2021-01-12T10:57:24.721Z
        params:
          resmsgid: f3e64611-54c4-11eb-8795-e372ee0a4d37
          msgid: f3e64610-54c4-11eb-8795-e372ee0a4d37
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          program_id: d2f35e20-54c4-11eb-8795-e372ee0a4d37
          afterPublishResponse:
            nomination:
              error: null
              result:
                program_id: d2f35e20-54c4-11eb-8795-e372ee0a4d37
                user_id: c5bbabfc-7f2b-4d2e-bdc4-64b0db810817
                organisation_id: 32625405-bc59-4622-89bb-d06934d690ef
                status: Approved
                content_types:
                  - Course Assessment
                collection_ids:
                  - do_21319279857165107214382
            userMapping: {}
    programPublishResult:
      title: Result
      description: This represents publish response
      required:
        - program_id
        - afterPublishResponse
      type: object
      properties:
        program_id:
          type: string
          description: This represents the unique program id
        afterPublishResponse:
          $ref: '#/components/schemas/programAfterPublishResponse'
      example:
        program_id: d2f35e20-54c4-11eb-8795-e372ee0a4d37
        afterPublishResponse:
          nomination:
            error: null
            result:
              program_id: d2f35e20-54c4-11eb-8795-e372ee0a4d37
              user_id: c5bbabfc-7f2b-4d2e-bdc4-64b0db810817
              organisation_id: 32625405-bc59-4622-89bb-d06934d690ef
              status: Approved
              content_types:
                - Course Assessment
              collection_ids:
                - do_21319279857165107214382
          userMapping: {}
    Contributorsearch200Request:
      title: Contributorsearch200Request
      description: This represent the contributors search reqeust
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/ContributorSearchRequest'
      example:
        request:
          filters:
            user_org:
              orgId:
                eq: 18180aff-07ba-4f50-bf4a-04ace80f303b
              roles:
                - sourcing_reviewer
                - sourcing_admin
          fields: []
          limit: 1
          offset: 0
    ContributorSearchRequest:
      title: ContributorSearchRequest
      description: Contributor Search Request
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/ContributorFilters'
        fields:
          type: array
          items:
            type: string
          description: The selected fields to fetch
        limit:
          type: integer
          format: int32
          description: Number of contributors to fetch
        offset:
          type: integer
          format: int32
          description: A subset of contributors starting with the offset value
      example:
        filters:
          user_org:
            orgId:
              eq: 18180aff-07ba-4f50-bf4a-04ace80f303b
            roles:
              - sourcing_reviewer
              - sourcing_admin
        fields: []
        limit: 1
        offset: 0
    ContributorFilters:
      title: Filters
      description: Request filters
      required:
        - user_org
      type: object
      properties:
        user_org:
          $ref: '#/components/schemas/UserOrg'
      example:
        user_org:
          orgId:
            eq: 18180aff-07ba-4f50-bf4a-04ace80f303b
          roles:
            - sourcing_reviewer
            - sourcing_admin
    UserOrg:
      title: UserOrg
      description: This object can have filters on open-saber user org entity
      required:
        - orgId
        - roles
      type: object
      properties:
        orgId:
          $ref: '#/components/schemas/OrgId'
        roles:
          description: User roles
          type: array
          items:
            type: string
      example:
        orgId:
          eq: 18180aff-07ba-4f50-bf4a-04ace80f303b
        roles:
          - sourcing_reviewer
          - sourcing_admin
    OrgId:
      title: OrgId
      description: open-saber org id
      required:
        - eq
      type: object
      properties:
        eq:
          type: string
          description: Represents equal to
      example:
        eq: 18180aff-07ba-4f50-bf4a-04ace80f303b
    Contributorsearch200:
      title: Contributorsearch200
      description: Contributor search result
      required:
        - id
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
          description: Represents the api id
        ts:
          type: string
          description: Represents the EPOCH epoch time in milliseconds
        params:
          $ref: '#/components/schemas/ContributorSearchParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/ContributorSearchResult'
      example:
        id: api.contributor.search
        ts: 2021-03-18T08:27:48.088Z
        params:
          resmsgid: d2428781-87c3-11eb-b183-812ff6fd6d0a
          msgid: d2428780-87c3-11eb-b183-812ff6fd6d0a
          status: successful
          err: ''
          errmsg: ''
        responseCode: OK
        result:
          description: This represents the Contributor search success Result
          contributor:
            - lastName: ''
              maskedPhone: ''
              roles:
                - PUBLIC
              channel: 15Aug123
              stateValidated: true
              maskedEmail: 15*************@yopmail.com
              id: ee44960b-a95a-4f23-80dc-7cdacf778081
              identifier: ee44960b-a95a-4f23-80dc-7cdacf778081
              userName: 15augreviewer48@yopmail.com
              rootOrgId: 013088773085405184115
              userId: ee44960b-a95a-4f23-80dc-7cdacf778081
              firstName: 15augreviewer48
              emailVerified: true
              status: 1
              name: '15augreviewer48 '
              User:
                lastName: ''
                osUpdatedAt: 2020-08-18T13:03:50.175Z
                firstName: 15augreviewer48
                osCreatedAt: 2020-08-18T13:03:50.175Z
                enrolledDate: 2020-08-18T13:03:48.576Z
                '@type': User
                channel: 013088773085405184115
                osid: 4a409368-e6c5-46a1-b8ab-b9fdad5fc8f3
                userId: ee44960b-a95a-4f23-80dc-7cdacf778081
              User_Org:
                osUpdatedAt: 2020-08-18T13:53:41.847Z
                osCreatedAt: 2020-08-18T13:53:41.847Z
                '@type': User_Org
                roles:
                  - user
                  - sourcing_reviewer
                osid: 61db4c43-d455-4cf9-91bd-b504d2fc74c0
                userId: 4a409368-e6c5-46a1-b8ab-b9fdad5fc8f3
                orgId: 18180aff-07ba-4f50-bf4a-04ace80f303b
              selectedRole: sourcing_reviewer
          count: 1
    ContributorSearchParams:
      title: Contributor search params
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          description: Represents the response message id
        msgid:
          type: string
          description: Represents the message id
        status:
          type: string
          description: Represents the status
        err:
          type: string
          description: Represents the error
          nullable: true
        errmsg:
          type: string
          description: Represents the error message
          nullable: true
      example:
        resmsgid: d2428781-87c3-11eb-b183-812ff6fd6d0a
        msgid: d2428780-87c3-11eb-b183-812ff6fd6d0a
        status: successful
        err: ''
        errmsg: ''
    ContributorSearchResult:
      title: Contributor search result
      required:
        - contributor
        - count
      type: object
      properties:
        contributor:
          type: array
          items:
            $ref: '#/components/schemas/ContributorSearchList'
          description: ''
        count:
          type: integer
          description: Represents the contributor count
          format: int32
      example:
        contributor:
          - lastName: ''
            maskedPhone: ''
            roles:
              - PUBLIC
            channel: 15Aug123
            stateValidated: true
            maskedEmail: 15*************@yopmail.com
            id: ee44960b-a95a-4f23-80dc-7cdacf778081
            identifier: ee44960b-a95a-4f23-80dc-7cdacf778081
            userName: 15augreviewer48@yopmail.com
            rootOrgId: 013088773085405184115
            userId: ee44960b-a95a-4f23-80dc-7cdacf778081
            firstName: 15augreviewer48
            status: 1
            name: '15augreviewer48 '
            User:
              lastName: ''
              osUpdatedAt: 2020-08-18T13:03:50.175Z
              firstName: 15augreviewer48
              osCreatedAt: 2020-08-18T13:03:50.175Z
              enrolledDate: 2020-08-18T13:03:48.576Z
              '@type': User
              channel: 013088773085405184115
              osid: 4a409368-e6c5-46a1-b8ab-b9fdad5fc8f3
              userId: ee44960b-a95a-4f23-80dc-7cdacf778081
            User_Org:
              osUpdatedAt: 2020-08-18T13:53:41.847Z
              osCreatedAt: 2020-08-18T13:53:41.847Z
              '@type': User_Org
              roles:
                - user
                - sourcing_reviewer
              osid: 61db4c43-d455-4cf9-91bd-b504d2fc74c0
              userId: 4a409368-e6c5-46a1-b8ab-b9fdad5fc8f3
              orgId: 18180aff-07ba-4f50-bf4a-04ace80f303b
            selectedRole: sourcing_reviewer
        count: 1
    ContributorSearchList:
      title: Contributor search list
      type: object
      properties:
        lastName:
          type: string
          description: Represents the last name
          nullable: true
        maskedPhone:
          type: string
          description: Represents the masked phone
          nullable: true
        roles:
          type: array
          items:
            type: string
          description: Contributor roles
        channel:
          type: string
          description: Represents the channel id
        stateValidated:
          type: boolean
          description: Represents the account validation state
        maskedEmail:
          type: string
          description: Represents the masked email
        id:
          type: string
          description: Represents the id
        identifier:
          type: string
          description: Represents the identifier
        userName:
          type: string
          description: Represents the user name
        rootOrgId:
          type: string
          description: Represents the root org id
        userId:
          type: string
          description: Represents the user id
        firstName:
          type: string
          description: Represents the first name
        emailVerified:
          type: boolean
          description: Represents the is email verified
        status:
          type: integer
          description: Represents the contributor activation status
          format: int32
        name:
          type: string
          description: Represents the full name
        User:
          $ref: '#/components/schemas/ContributorUser'
        User_Org:
          $ref: '#/components/schemas/ContributorUserOrg'
        selectedRole:
          type: string
          description: Represents the roles
      example:
        lastName: ''
        maskedPhone: ''
        roles:
          - PUBLIC
        channel: 15Aug123
        stateValidated: true
        maskedEmail: 15*************@yopmail.com
        id: ee44960b-a95a-4f23-80dc-7cdacf778081
        identifier: ee44960b-a95a-4f23-80dc-7cdacf778081
        userName: 15augreviewer48@yopmail.com
        rootOrgId: 013088773085405184115
        userId: ee44960b-a95a-4f23-80dc-7cdacf778081
        firstName: 15augreviewer48
        emailVerified: true
        phone: ''
        status: 1
        name: '15augreviewer48 '
        User:
          lastName: ''
          osUpdatedAt: 2020-08-18T13:03:50.175Z
          firstName: 15augreviewer48
          osCreatedAt: 2020-08-18T13:03:50.175Z
          enrolledDate: 2020-08-18T13:03:48.576Z
          '@type': User
          channel: 013088773085405184115
          osid: 4a409368-e6c5-46a1-b8ab-b9fdad5fc8f3
          userId: ee44960b-a95a-4f23-80dc-7cdacf778081
        User_Org:
          osUpdatedAt: 2020-08-18T13:53:41.847Z
          osCreatedAt: 2020-08-18T13:53:41.847Z
          '@type': User_Org
          roles:
            - user
            - sourcing_reviewer
          osid: 61db4c43-d455-4cf9-91bd-b504d2fc74c0
          userId: 4a409368-e6c5-46a1-b8ab-b9fdad5fc8f3
          orgId: 18180aff-07ba-4f50-bf4a-04ace80f303b
        selectedRole: sourcing_reviewer
    ContributorUser:
      title: User
      description: Contributor profile details
      required:
        - lastName
        - osUpdatedAt
        - firstName
        - osCreatedAt
        - enrolledDate
        - '@type'
        - channel
        - osid
        - userId
      type: object
      properties:
        lastName:
          type: string
          description: Represents the contributor last name
        osUpdatedAt:
          type: string
          description: Represents the contributor updated on
        firstName:
          type: string
          description: Represents the contributor first name
        osCreatedAt:
          type: string
          description: Represents the contributor created on
        enrolledDate:
          type: string
          description: Represents the enrolled date
        '@type':
          type: string
        channel:
          type: string
          description: Represents the channel
        osid:
          type: string
          description: Represents the id
        userId:
          type: string
          description: Represents the user id
      example:
        lastName: ''
        osUpdatedAt: 2020-08-18T13:03:50.175Z
        firstName: 15augreviewer48
        osCreatedAt: 2020-08-18T13:03:50.175Z
        enrolledDate: 2020-08-18T13:03:48.576Z
        '@type': User
        channel: 013088773085405184115
        osid: 4a409368-e6c5-46a1-b8ab-b9fdad5fc8f3
        userId: ee44960b-a95a-4f23-80dc-7cdacf778081
    ContributorUserOrg:
      title: Contributor user org
      description: Contributor User org
      required:
        - osUpdatedAt
        - osCreatedAt
        - '@type'
        - roles
        - osid
        - userId
        - orgId
      type: object
      properties:
        osUpdatedAt:
          type: string
          description: Represents the open-saber user organisation updated on
        osCreatedAt:
          type: string
          description: Represents the open-saber user organisation created on
        '@type':
          type: string
          description: Represents the type result
        roles:
          type: array
          items:
            type: string
          description: Represents the roles
        osid:
          type: string
          description: Represents the open-saber user org id
        userId:
          type: string
          description: Represents the user id
        orgId:
          type: string
          description: Represents the organisation id
      example:
        osUpdatedAt: 2020-08-18T13:53:41.847Z
        osCreatedAt: 2020-08-18T13:53:41.847Z
        '@type': User_Org
        roles:
          - user
          - sourcing_reviewer
        osid: 61db4c43-d455-4cf9-91bd-b504d2fc74c0
        userId: 4a409368-e6c5-46a1-b8ab-b9fdad5fc8f3
        orgId: 18180aff-07ba-4f50-bf4a-04ace80f303b
    Params1:
      title: Params1
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          description: Represents the response message id
        msgid:
          type: string
          description: Represents the message id
          nullable: true
        status:
          type: string
          description: Represents the status
        err:
          type: string
          description: Represents the error
        errmsg:
          type: string
          description: Represents the error message
      example:
        resmsgid: 99366230-87c4-11eb-b183-812ff6fd6d0a
        msgid: ''
        status: failed
        err: ERR_CONTRIBUTOR_SEARCH
        errmsg: Required fields to search contributor are missing
    Contributorsearch4001:
      title: Contributorsearch4001
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
          description: Represents the api id
        ver:
          type: string
          description: Represents the api version
        ts:
          type: string
          description: Represents the EPOCH epoch time in milliseconds
        params:
          $ref: '#/components/schemas/Params1'
        responseCode:
          type: string
          description: Represents the response code
        result:
          type: object
          description: Represents the result
      example:
        id: api.contributor.search
        ver: '1.0'
        ts: 2021-03-18T08:33:21.875Z
        params:
          resmsgid: 99366230-87c4-11eb-b183-812ff6fd6d0a
          msgid: ''
          status: failed
          err: ERR_CONTRIBUTOR_SEARCH
          errmsg: Required fields to search contributor are missing
        responseCode: CLIENT_ERROR
        result: {}
    bulkapproveapiCreateRequest:
      title: Success-200-Request
      description: This is schema of the process create request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/bulkapproveapiCreateRequestBody'
      example:
        request:
          process_id: 98c5d59a-5e8d-41ec-99d4-9cad8fef5ee4
          program_id: d3183400-f729-11ea-a660-c91ae7e44037
          collection_id: do_113108485878816768110286
          org_id: 01307938306521497658
          type: bulk_approval
          status: processing
          overall_stats:
            approve_success: 0
            approve_failed: 0
            approve_pending: 7
            total: 7
          createdby: bf020396-0d7b-436f-ae9f-869c6780fc45
          createdon: 2020-12-04T11:37:03.130Z
    bulkapproveapiCreateRequestBody:
      title: Create Request Body
      required:
        - process_id
        - program_id
        - collection_id
        - org_id
        - type
        - status
        - overall_stats
        - createdby
        - createdon
      type: object
      properties:
        process_id:
          type: string
          description: This represents the unique process id
        program_id:
          type: string
          description: This represents the unique program id
        collection_id:
          type: string
          description: This represents the unique collection id
        org_id:
          type: string
          description: this represents the unique id of the organization
        type:
          type: string
          description: This represents the Bulk approval type
        status:
          type: string
          description: This represents the status of the process
        overall_stats:
          $ref: '#/components/schemas/bulkapproveapiOverallStats'
        createdby:
          type: string
          description: This represents the unique id of the user
        createdon:
          type: string
          description: This represents the date on which the process is created
      example:
        process_id: 98c5d59a-5e8d-41ec-99d4-9cad8fef5ee4
        program_id: d3183400-f729-11ea-a660-c91ae7e44037
        collection_id: do_113108485878816768110286
        org_id: 01307938306521497658
        type: bulk_approval
        status: processing
        overall_stats:
          approve_success: 0
          approve_failed: 0
          approve_pending: 7
          total: 7
        createdby: bf020396-0d7b-436f-ae9f-869c6780fc45
        createdon: 2020-12-04T11:37:03.130Z
    bulkapproveapiOverallStats:
      title: OverallStats
      required:
        - approve_success
        - approve_failed
        - approve_pending
        - total
      type: object
      properties:
        approve_success:
          type: integer
          format: int32
          description: Number of process in approve_success status
          example: 2
        approve_failed:
          type: integer
          format: int32
          description: Number of process in approve_failed status
          example: 3
        approve_pending:
          type: integer
          format: int32
          description: Number of process in approve_pending status
          example: 7
        total:
          type: integer
          format: int32
          description: Total number of process
          example: 12
      example:
        approve_success: 0
        approve_failed: 0
        approve_pending: 7
        total: 7
    bulkapproveapiCreate-Process-Error-400-Response:
      title: Create-Process-Error-400
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/bulkapproveapiParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the result of the api response
      example:
        id: api.process.create
        ver: 1
        ts: 2021-01-06T14:51:59.175Z
        params:
          resmsgid: ba730572-502e-11eb-a115-db22788c28aa
          msgid: null
          status: failed
          err: ERR_CREATE_BULK_JOB
          errmsg: Required fields to create bulk job request are missing
        responseCode: CLIENT_ERROR
        result: {}
    bulkapproveapiCreate-Process-Error-500-Response:
      title: Create-Process-Error-500
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/bulkapproveapiParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the result of the api response
      example:
        id: api.process.create
        ver: 1
        ts: 2021-01-07T04:14:57.384Z
        params:
          resmsgid: e6e64e81-509e-11eb-a115-db22788c28aa
          msgid: null
          status: failed
          err: ERR_CREATE_BULK_JOB_REQUEST_FAILED
          errmsg: process_id must be unique
        responseCode: SERVER_ERROR
        result: {}
    bulkapproveapiCreate-bulk-Job-Success-200:
      title: Create-bulk-Job Success-200
      description: Represents the Create-bulk-Job Success-200
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/bulkapproveapiParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/bulkapproveapicreateProcessResponse'
      example:
        id: api.process.create
        ver: 1
        ts: 2021-01-06T11:30:50.300Z
        params:
          resmsgid: a0d6d7c0-5012-11eb-a115-db22788c28aa
          msgid: a0709be0-5012-11eb-a115-db22788c28aa
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          id: 391
          process_id: 98c5d59a-5e8d-41ec-99d4-9cad8fef5664
          program_id: d3183400-f729-11ea-a660-c91ae7e44037
          collection_id: do_113108485878816768110286
          org_id: 01307938306521497658
          type: bulk_approval
          status: processing
          overall_stats:
            total: 7
            approve_failed: 0
            approve_pending: 7
            approve_success: 0
          createdby: bf020396-0d7b-436f-ae9f-869c6780fc45
          createdon: 2020-12-04T11:37:03.130Z
          data: null
          err_message: null
          updatedby: null
          updatedon: 2021-01-06T11:30:50.261Z
          completedon: null
          expiration: null
    bulkapproveapiParams:
      title: Params
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          description: Represents the message id of the response
          type: string
        status:
          description: Represents the status of the request
          type: string
          enum:
            - success
            - failed
        err:
          description: Represents the error
          type: string
          nullable: true
        errmsg:
          description: Represents the error message
          type: string
          nullable: true
      example:
        resmsgid: a0d6d7c0-5012-11eb-a115-db22788c28aa
        msgid: a0709be0-5012-11eb-a115-db22788c28aa
        status: successful
        err: null
        errmsg: null
    bulkapproveapicreateProcessResponse:
      title: createProcessResponse
      description: This represents the create process response
      required:
        - id
        - process_id
        - program_id
        - collection_id
        - org_id
        - type
        - status
        - overall_stats
        - createdby
        - createdon
        - data
        - err_message
        - updatedby
        - updatedon
        - completedon
        - expiration
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: this represents the unique id of the result
        process_id:
          type: string
          description: this represents the unique id of the process
        program_id:
          type: string
          description: this represents the unique id of the program
        collection_id:
          type: string
          description: this represents the unique id of the collection
        org_id:
          type: string
          description: this represents the unique id of the organization
        type:
          type: string
          description: this represents the type of the bulk approve
        status:
          type: string
          description: this represents the status of process
        overall_stats:
          $ref: '#/components/schemas/bulkapproveapiOverallStats'
        createdby:
          type: string
          description: this represents the unique id of the user/creator
        createdon:
          type: string
          description: this represents the date on which it is created
        data:
          type: string
          nullable: true
        err_message:
          type: string
          nullable: true
          description: this represents the any err message
        updatedby:
          type: string
          nullable: true
          description: this represents the unique id of the user who updated
        updatedon:
          type: string
          description: this represents the date on which it is updated
        completedon:
          type: string
          nullable: true
          description: this represents the completion on
        expiration:
          type: string
          nullable: true
          description: this represents the expiration
      example:
        id: 391
        process_id: 98c5d59a-5e8d-41ec-99d4-9cad8fef5664
        program_id: d3183400-f729-11ea-a660-c91ae7e44037
        collection_id: do_113108485878816768110286
        org_id: 01307938306521497658
        type: bulk_approval
        status: processing
        overall_stats:
          total: 7
          approve_failed: 0
          approve_pending: 7
          approve_success: 0
        createdby: bf020396-0d7b-436f-ae9f-869c6780fc45
        createdon: 2020-12-04T11:37:03.130Z
        data: null
        err_message: null
        updatedby: null
        updatedon: 2021-01-06T11:30:50.261Z
        completedon: null
        expiration: null
    bulkapproveapiCreateRequestBody-Error-500-Request:
      title: CreateRequestBody-Error-500-Request
      description: Create request body error 500 request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/bulkapproveapiCreateRequestBody'
      example:
        request:
          process_id: 16264756-c71c-4061-a99c-bfab0556d047
          program_id: 47fa5b80-fca3-11ea-bd95-45e87e333d53
          collection_id: do_113113416823963648111044
          org_id: 01307938306521497658
          type: bulk_approval
          status: processing
          overall_stats:
            approve_success: 0
            approve_failed: 0
            approve_pending: 4
            total: 4
          createdby: bf020396-0d7b-436f-ae9f-869c6780fc45
          createdon: 2020-12-04T10:30:35.357Z
    bulkapproveapiCreateRequestBody-Error-400-Request:
      title: CreateRequestBody Error-400-Request
      description: Represents create process request body for error 400 request
      required:
        - requests
      type: object
      properties:
        requests:
          $ref: '#/components/schemas/bulkapproveapiRequests'
      example:
        requests:
          process_id: 16264756-c71c-4061-a99c-bfab0556d047
          program_id: 47fa5b80-fca3-11ea-bd95-45e87e333d53
          collection_id: do_113113416823963648111044
          org_id: 01307938306521497658
          type: bulk_approval
          status: processing
          overall_stats:
            approve_success: 0
            approve_failed: 0
            approve_pending: 4
            total: 4
          createdby: bf020396-0d7b-436f-ae9f-869c6780fc45
          createdon: 2020-12-04T10:30:35.357Z
    bulkapproveapiRequests:
      title: Requests
      required:
        - process_id
        - program_id
        - collection_id
        - org_id
        - type
        - status
        - overall_stats
        - createdby
        - createdon
      type: object
      properties:
        process_id:
          type: string
          description: This represents the unique process id
        program_id:
          type: string
          description: This represents the unique program id
        collection_id:
          type: string
          description: This represents the unique collection id
        org_id:
          type: string
          description: This represents the unique id of the organization
        type:
          type: string
          description: This represents the bulk_approval type of the process
        status:
          type: string
          description: This represents the status of the  process
        overall_stats:
          $ref: '#/components/schemas/bulkapproveapiOverallStats'
        createdby:
          type: string
          description: This represents the unique id of the user who created
        createdon:
          type: string
          description: This represents the date on which the particular process is created
      example:
        process_id: 16264756-c71c-4061-a99c-bfab0556d047
        program_id: 47fa5b80-fca3-11ea-bd95-45e87e333d53
        collection_id: do_113113416823963648111044
        org_id: 01307938306521497658
        type: bulk_approval
        status: processing
        overall_stats:
          approve_success: 0
          approve_failed: 0
          approve_pending: 4
          total: 4
        createdby: bf020396-0d7b-436f-ae9f-869c6780fc45
        createdon: 2020-12-04T10:30:35.357Z
    bulkapproveapiupdateRequest:
      title: update Request
      description: Represents update Request for the process
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/bulkapproveapiupdateRequestBody'
      example:
        request:
          process_id: 16264756-c71c-4061-a99c-bfab0556d047
          status: processing
          overall_stats:
            approve_success: 44
            approve_failed: 0
            approve_pending: -40
            total: 4
          updatedby: bf020396-0d7b-436f-ae9f-869c6780fc45
    bulkapproveapiupdateRequestBody:
      title: update Request Body
      description: update Request body
      required:
        - process_id
        - status
        - overall_stats
        - updatedby
      type: object
      properties:
        process_id:
          type: string
          description: This represents the unique id of the process
        status:
          type: string
          description: This represents the status of the process
        overall_stats:
          $ref: '#/components/schemas/bulkapproveapiOverallStats'
        updatedby:
          type: string
          description: this represents the unique id of the user who updated
      example:
        process_id: 16264756-c71c-4061-a99c-bfab0556d047
        status: processing
        overall_stats:
          approve_success: 44
          approve_failed: 0
          approve_pending: -40
          total: 4
        updatedby: bf020396-0d7b-436f-ae9f-869c6780fc45
    bulkapproveapiProcess-Update-Error-400-Response:
      title: Update-Process-Error-400
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/bulkapproveapiParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the result of the api response
      example:
        id: api.process.update
        ver: 1
        ts: 2021-01-07T04:43:35.328Z
        params:
          resmsgid: e6dfc202-50a2-11eb-a115-db22788c28aa
          msgid: null
          status: failed
          err: ERR_UPDATING_BULK_JOB_REQUEST
          errmsg: >-
            Required fields like process_id to update bulk job request are
            missing
        responseCode: CLIENT_ERROR
        result: {}
    bulkapproveapiProcess-update-success-200-Response:
      title: Process-update-success-200-Response
      description: This represents the Process-update-success-200-Response
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/bulkapproveapiProcess-update-response'
      example:
        request:
          process_id: 16264756-c71c-4061-a99c-bfab0556d047
          status: processing
          overall_stats:
            approve_success: 44
            approve_failed: 0
            approve_pending: -40
            total: 4
          updatedby: bf020396-0d7b-436f-ae9f-869c6780fc45
    bulkapproveapiProcess-Update-Error-404:
      title: Update-Process-Error-404
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/bulkapproveapiParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the result of the api response
      example:
        id: api.process.update
        ver: 1
        ts: 2021-01-06T10:49:45.873Z
        params:
          resmsgid: e3ed2011-500c-11eb-a115-db22788c28aa
          msgid: null
          status: failed
          err: ERR_UPDATING_BULK_JOB_REQUEST
          errmsg: process_id not found
        responseCode: PROCESS_NOT_FOUND
        result: {}
    bulkapproveapiProcess-update-response:
      title: Process-update-response
      description: Represents the process update response
      required:
        - process_id
        - status
        - overall_stats
        - updatedby
      type: object
      properties:
        process_id:
          type: string
          description: Represents the unique process id
        status:
          type: string
          description: Represents the status of the process
        overall_stats:
          $ref: '#/components/schemas/bulkapproveapiOverallStats'
        updatedby:
          type: string
          description: this represents the unique id of the user who updated
      example:
        process_id: 16264756-c71c-4061-a99c-bfab0556d047
        status: processing
        overall_stats:
          approve_success: 44
          approve_failed: 0
          approve_pending: -40
          total: 4
        updatedby: bf020396-0d7b-436f-ae9f-869c6780fc45
    bulkapproveapiProcess-update-success-200:
      title: Process-update-success-200
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/bulkapproveapiParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/bulkapproveapiProcess-update-response-result'
      example:
        id: api.process.update
        ver: 1
        ts: 2021-01-06T12:26:27.188Z
        params:
          resmsgid: 65c78b40-501a-11eb-a115-db22788c28aa
          msgid: 6562fd10-501a-11eb-a115-db22788c28aa
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          process_id: 16264756-c71c-4061-a99c-bfab0556d047
    bulkapproveapiProcess-update-response-result:
      title: Process-update-response-result
      description: This represents the Process update response
      required:
        - process_id
      type: object
      properties:
        process_id:
          type: string
          description: this represents the unique process id
      example:
        process_id: 16264756-c71c-4061-a99c-bfab0556d047
    bulkapproveapiUpdate-Error-404-Request:
      title: Update-Error-404-Request
      description: update Request for 400 error
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/bulkapproveapiupdateRequestBody'
      example:
        request:
          process_id: 16264756-c71c-4061-a99c-bfab0556d47
          status: processing
          overall_stats:
            approve_success: 44
            approve_failed: 0
            approve_pending: -40
            total: 4
          updatedby: bf020396-0d7b-436f-ae9f-869c6780fc45
    bulkapproveapiUpdate-Error-400-Request:
      title: Update Error-400-Request
      description: Represents update Request for 400 error
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/bulkapproveapiupdateRequest-400'
      example:
        request:
          process: 16264756-c71c-4061-a99c-bfab0556d47
          status: processing
          overall_stats:
            approve_success: 44
            approve_failed: 0
            approve_pending: -40
            total: 4
          updatedby: bf020396-0d7b-436f-ae9f-869c6780fc45
    bulkapproveapiupdateRequest-400:
      title: update Request for 400 error
      description: Represents update Request for 400 error
      required:
        - process
        - status
        - overall_stats
        - updatedby
      type: object
      properties:
        process:
          type: string
          description: This represents the unique process id
        status:
          type: string
          description: This represents the status of the process
        overall_stats:
          $ref: '#/components/schemas/bulkapproveapiOverallStats'
        updatedby:
          type: string
          description: This represents the unique id of the user who updated
      example:
        process: 16264756-c71c-4061-a99c-bfab0556d47
        status: processing
        overall_stats:
          approve_success: 44
          approve_failed: 0
          approve_pending: -40
          total: 4
        updatedby: bf020396-0d7b-436f-ae9f-869c6780fc45
    bulkapproveapiSearchRequest:
      title: Search Request
      description: This represents the description of the Search Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/bulkapproveapiSearchRequestBody'
      example:
        request:
          filters:
            program_id: 4d1bece0-fbf0-11ea-8789-cf2d70041403
            collection_id: do_113112787166773248110944
    bulkapproveapiSearchRequestBody:
      title: Search Request Body
      required:
        - filters
      type: object
      description: This represents information of  the filter required
      properties:
        filters:
          $ref: '#/components/schemas/bulkapproveapiFilters'
      example:
        filters:
          program_id: 4d1bece0-fbf0-11ea-8789-cf2d70041403
          collection_id: do_113112787166773248110944
    bulkapproveapiProcess-Read-Success-200:
      title: Read-Process-Success-200
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/bulkapproveapiParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/bulkapproveapicreateProcessResponse'
      example:
        id: api.process.read
        ver: 1
        ts: 2021-01-06T13:06:53.323Z
        params:
          resmsgid: 0bde5db0-5020-11eb-a115-db22788c28aa
          msgid: 0b4503e0-5020-11eb-a115-db22788c28aa
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          id: 300
          process_id: 98c5d59a-5e8d-41ec-99d4-9cad8fef5ee2
          program_id: d3183400-f729-11ea-a660-c91ae7e44037
          collection_id: do_113108485878816768110286
          org_id: 01307938306521497658
          status: processing
          type: bulk_approval
          overall_stats:
            total: 7
            approve_failed: 0
            approve_pending: -37
            approve_success: 44
          data: null
          err_message: null
          createdby: bf020396-0d7b-436f-ae9f-869c6780fc45
          updatedby: bf020396-0d7b-436f-ae9f-869c6780fc45
          createdon: 2020-12-04T11:37:03.130Z
          updatedon: 2020-12-04T11:39:25.265Z
          completedon: null
          expiration: null
    bulkapproveapiProcess-Read-Error-404-Response:
      title: Read-Process-Error-404
      description: This represents the Process-Read-Error 404 Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/bulkapproveapiParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the result of the api response
      example:
        id: api.process.read
        ver: 1
        ts: 2021-01-07T06:02:51.523Z
        params:
          resmsgid: f9c98531-50ad-11eb-a115-db22788c28aa
          msgid: null
          status: failed
          err: PROCESS_NOT_FOUND
          errmsg: process_id 98c5d59a-5e8d-41ec-99d4-9cad8fef5ee does not exist
        responseCode: PROCESS_NOT_FOUND
        result: {}
    bulkapproveapiFilters:
      title: Filters
      description: This represents the description of the filter required
      required:
        - program_id
        - collection_id
      type: object
      properties:
        program_id:
          type: string
          description: This represents the unique id of the program
        collection_id:
          type: string
          description: This represents the unique id of the collection
      example:
        program_id: 4d1bece0-fbf0-11ea-8789-cf2d70041403
        collection_id: do_113112787166773248110944
    bulkapproveapiProcess-Search-Success-200:
      title: Process-Search-Success-200
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/bulkapproveapiParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/bulkapproveapiProcess-Search-Response'
      example:
        id: api.process.search
        ver: 1
        ts: 2021-01-06T13:07:45.175Z
        params:
          resmsgid: 2ac65a70-5020-11eb-a115-db22788c28aa
          msgid: 2a5c7510-5020-11eb-a115-db22788c28aa
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          count: 1
          process:
            - id: 299
              process_id: 3bd5eb6a-6de0-4a64-9051-0882bfd76480
              program_id: 4d1bece0-fbf0-11ea-8789-cf2d70041403
              collection_id: do_113112787166773248110944
              org_id: 01307938306521497658
              status: processing
              type: bulk_approval
              overall_stats:
                total: 2
                approve_failed: 0
                approve_pending: -42
                approve_success: 44
              data: null
              err_message: null
              createdby: bf020396-0d7b-436f-ae9f-869c6780fc45
              updatedby: bf020396-0d7b-436f-ae9f-869c6780fc45
              createdon: 2020-12-04T10:59:04.797Z
              updatedon: 2020-12-04T11:35:21.942Z
              completedon: null
              expiration: null
    bulkapproveapiProcess-Search-Response:
      title: Process-Search-Response
      description: this represents the Process-Search-Response
      required:
        - count
        - process
      type: object
      properties:
        count:
          type: integer
          format: int32
          description: This represents the counts of the process
        process:
          type: array
          items:
            $ref: '#/components/schemas/bulkapproveapicreateProcessResponse'
          description: This represents the array of all process
      example:
        count: 1
        process:
          - id: 299
            process_id: 3bd5eb6a-6de0-4a64-9051-0882bfd76480
            program_id: 4d1bece0-fbf0-11ea-8789-cf2d70041403
            collection_id: do_113112787166773248110944
            org_id: 01307938306521497658
            status: processing
            type: bulk_approval
            overall_stats:
              total: 2
              approve_failed: 0
              approve_pending: -42
              approve_success: 44
            data: null
            err_message: null
            createdby: bf020396-0d7b-436f-ae9f-869c6780fc45
            updatedby: bf020396-0d7b-436f-ae9f-869c6780fc45
            createdon: 2020-12-04T10:59:04.797Z
            updatedon: 2020-12-04T11:35:21.942Z
            completedon: null
            expiration: null
    bulkapproveapiSearch-Error-400-Request:
      title: Search Error-400-Request
      description: Search Error-400-Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/bulkapproveapiSearchRequest400'
      example:
        request:
          filter:
            program_id: 4d1bece0-fbf0-11ea-8789-cf2d70041403
            collection_id: do_113112787166773248110944
    bulkapproveapiSearchRequest400:
      title: Search Request for error 400
      description: Represents Search Request for error 400
      required:
        - filter
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/bulkapproveapiFilter'
      example:
        filter:
          program_id: 4d1bece0-fbf0-11ea-8789-cf2d70041403
          collection_id: do_113112787166773248110944
    bulkapproveapiFilter:
      title: Filter
      description: this represents information of required filters in body
      required:
        - program_id
        - collection_id
      type: object
      properties:
        program_id:
          type: string
          description: this represents program unique id
        collection_id:
          type: string
          description: this represents collection unique id
      example:
        program_id: 4d1bece0-fbf0-11ea-8789-cf2d70041403
        collection_id: do_113112787166773248110944
    bulkapproveapiSearch-Error-500-Request1:
      title: Search Error-500-Request
      required:
        - request
      type: object
      description: Has the information about filters required
      properties:
        request:
          $ref: '#/components/schemas/bulkapproveapiSearchRequestError500'
      example:
        request:
          filters:
            program_id: 4d1bece0-fbf0-11ea-8789-cf2d7004603
            collection: do_11311278166773248110944
    bulkapproveapiSearchRequestError500:
      title: Search Request Error 500
      description: represents details of the search request error
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/bulkapproveapiFilters1'
      example:
        filters:
          program_id: 4d1bece0-fbf0-11ea-8789-cf2d7004603
          collection: do_11311278166773248110944
    bulkapproveapiProcess-Search-Error-400-Response:
      title: Process-Search-Error-400
      description: This represents the Process-Search-Error-400 response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/bulkapproveapiParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the result of the api response
      example:
        id: api.process.search
        ver: 1
        ts: 2021-01-07T06:08:49.166Z
        params:
          resmsgid: cef582e2-50ae-11eb-a115-db22788c28aa
          msgid: null
          status: failed
          err: ERR_SEARCHING_BULK_JOB_REQUEST
          errmsg: Required fields like filters are missing
        responseCode: CLIENT_ERROR
        result: {}
    bulkapproveapiProcess-Search-Error-500-Response:
      title: Process-Search-Error-500
      description: This represents the Process-Search-Error-500
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/bulkapproveapiParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the result of the api response
      example:
        id: api.process.search
        ver: 1
        ts: 2021-01-07T06:14:02.620Z
        params:
          resmsgid: 89cacbc1-50af-11eb-a115-db22788c28aa
          msgid: null
          status: failed
          err: ERROR_SEARCHING_BULK_JOB_REQUEST
          errmsg: column bulk_job_request.collection does not exist
        responseCode: SERVER_ERROR
        result: {}
    bulkapproveapiFilters1:
      title: Filters1
      description: Has the information about filters required
      required:
        - program_id
        - collection
      type: object
      properties:
        program_id:
          type: string
          description: this represents the unique id of the program
        collection:
          type: string
          description: this represents type of the collection
      example:
        program_id: 4d1bece0-fbf0-11ea-8789-cf2d7004603
        collection: do_11311278166773248110944
    searchapiCompositeSearchRequest:
      description: Composite Search Request
      type: object
      allOf:
        - $ref: '#/components/schemas/searchapiCompositeSearchRequestRequest'
    searchapiCompositeSearchRequestRequest:
      title: Composite Search Request
      required:
        - request
      type: object
      properties:
        query:
          type: string
          description: Data to be searched in object's metadata
        filters:
          type: object
          description: Criteria on which data has to be fetched
        limit:
          type: number
          description: Number of objects to be returned
        fields:
          type: array
          description: Fields to be fetched for each object
          items:
            type: string
        sort_by:
          type: object
          description: Fields on which object response has to be sorted
        facets:
          type: array
          description: Fields on which data has to be grouped
          items:
            type: string
        exists:
          type: array
          description: Fields which must be available in the object
          items:
            type: string
    searchapiCompositeSearchSuccessResponse:
      description: Composite Search Success Response
      type: object
      allOf:
        - $ref: '#/components/schemas/searchapiResultWithCompositeSearch'
        - $ref: '#/components/schemas/searchapiResponseHeader'
    searchapiResultWithCompositeSearch:
      title: Result Containing Composite Search
      type: object
      properties:
        result:
          $ref: '#/components/schemas/searchapiCompositeSearch'
    searchapiCompositeSearch:
      title: Composite Search
      type: object
      properties:
        count:
          type: number
          description: Number of object
        objectType:
          type: object
          description: Set of object metadata
        facets:
          type: array
          description: List of objects group by field value
          items:
            type: object
            description: Grouping on field value
    searchapiCompositeSearchErrorResponse:
      description: Composite Search Error Response
      type: object
      allOf:
        - $ref: '#/components/schemas/searchapiErrorSearchResult'
        - $ref: '#/components/schemas/searchapiResponseHeader'
    searchapiErrorSearchResult:
      title: Error Search Result
      type: object
      properties:
        result:
          type: object
    searchapiResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/searchapiResponseParams'
        responseCode:
          type: string
          description: 'API response code '
    searchapiResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    tocapiParams:
      title: Params
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: null
        msgid: 30527359-4723-4b59-b4c0-0b5b14f9a3e2
        err: INVALID_TEXTBOOK_NAME
        status: INVALID_TEXTBOOK_NAME
        errmsg: >-
          Textbook Name given in the file doesn’t match current Textbook name.
          Please check and upload again.
    tocapiTOCUpload-Success:
      title: TOCUpload-Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/tocapiParams2'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/tocapiResult'
      example:
        id: api.textbook.toc.upload
        ver: v1
        ts: '2020-11-27 15:35:56:361+0000'
        params:
          resmsgid: null
          msgid: b3eb6ee7-108d-48b7-9f9f-0d96c55ac289
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
    tocapiParams2:
      title: Params2
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
          nullable: true
        status:
          type: string
        errmsg:
          type: string
          nullable: true
      example:
        resmsgid: null
        msgid: b3eb6ee7-108d-48b7-9f9f-0d96c55ac289
        err: null
        status: success
        errmsg: null
    tocapiResult:
      title: Result
      required:
        - response
      type: object
      properties:
        response:
          type: string
      example:
        response: SUCCESS
    tocapiTOCDownload-Resource_Not_Found:
      title: TOCDownload-Resource_Not_Found
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/tocapiParams'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.textbook.toc.download
        ver: v1
        ts: '2020-11-27 15:49:18:113+0000'
        params:
          resmsgid: null
          msgid: 1f4ed0b6-ab14-4644-8e91-0bed6b0cd756
          err: RESOURCE_NOT_FOUND
          status: RESOURCE_NOT_FOUND
          errmsg: rootId do_11263298042220544900 does not exist
        responseCode: RESOURCE_NOT_FOUND
        result: {}
    tocapiTOCDownload-Success:
      title: TOCDownload-Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/tocapiParams2'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/tocapiResult1'
      example:
        id: api.textbook.toc.download
        ver: v1
        ts: '2020-11-27 15:47:33:106+0000'
        params:
          resmsgid: null
          msgid: ab202e68-bacd-4eee-a3b3-10d59b09c17f
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          textbook:
            tocUrl: >-
              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/textbook/toc/do_11316025504283852811_test-27-nov_1606491356306.csv
            ttl: '86400'
    tocapiResult1:
      title: Result1
      required:
        - textbook
      type: object
      properties:
        textbook:
          $ref: '#/components/schemas/tocapiTextbook'
      example:
        textbook:
          tocUrl: >-
            https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/textbook/toc/do_11316025504283852811_test-27-nov_1606491356306.csv
          ttl: '86400'
    tocapiTextbook:
      title: Textbook
      required:
        - tocUrl
        - ttl
      type: object
      properties:
        tocUrl:
          type: string
        ttl:
          type: string
      example:
        tocUrl: >-
          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/textbook/toc/do_11316025504283852811_test-27-nov_1606491356306.csv
        ttl: '86400'
    objectcategoryObjectCategoryGetSuccessResponse:
      description: Object Category Get Success Response
      type: object
      allOf:
        - $ref: '#/components/schemas/objectcategoryResultObjectCategoryMetadata'
        - $ref: '#/components/schemas/objectcategoryResponseHeader'
    objectcategoryResultObjectCategoryMetadata:
      title: Result Object Category Metadata
      type: object
      properties:
        result:
          $ref: '#/components/schemas/objectcategoryObjectCategoryMetadata'
    objectcategoryObjectCategoryMetadata:
      title: Object Category Metadata
      type: object
      properties:
        objectCategory:
          type: object
          properties:
            identifier:
              type: string
              description: Object Category Identifier
            name:
              type: string
              description: Object Category name
            lastStatusChangedOn:
              type: string
              description: Date on which Object category status was last updated
            lastUpdatedOn:
              type: string
              description: Date on which Object category was last updated
            description:
              type: string
              description: Description of the object category
            languageCode:
              type: string
              description: Language code supported for object category
            createdOn:
              type: string
              description: Date on which Object category was created
            objectType:
              type: string
              description: Represents objectType of Object Category
            versionKey:
              type: string
              description: Version Key of object category
            status:
              type: string
              description: Current status Object Category
    objectcategoryUpdateObjectCategoryrequest:
      title: Update ObjectCategory Request
      type: object
      properties:
        request:
          $ref: >-
            #/components/schemas/objectcategoryObjectCategoryUpdateRequestObjectCategory
      required:
        - request
    objectcategoryObjectCategoryUpdateRequestObjectCategory:
      title: ObjectCategoryUpdateRequestObjectCategory
      type: object
      properties:
        objectCategory:
          $ref: >-
            #/components/schemas/objectcategoryObjectCategoryUpdateRequestObjectCategoryObject
      required:
        - objectCategory
    objectcategoryObjectCategoryUpdateRequestObjectCategoryObject:
      title: ObjectCategory
      type: object
      properties:
        description:
          type: string
          description: Represents the description for the object category
    objectcategoryObjectCategoryCreateErrorResponse:
      description: Create ObjectCategory Error Response
      type: object
      allOf:
        - $ref: '#/components/schemas/objectcategoryEmptyResult'
        - $ref: '#/components/schemas/objectcategoryResponseHeader'
    objectcategoryEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          description: Empty Result
    objectcategoryCreateObjectCategoryRequest:
      title: Request Object
      required:
        - request
      type: object
      properties:
        request:
          $ref: >-
            #/components/schemas/objectcategoryObjectCategoryCreateRequestObjectCategory
    objectcategoryObjectCategoryCreateRequestObjectCategory:
      title: Request
      required:
        - objectCategory
      type: object
      properties:
        objectCategory:
          $ref: >-
            #/components/schemas/objectcategoryObjectCategoryCreateRequestObjectCategoryObject
    objectcategoryObjectCategoryCreateRequestObjectCategoryObject:
      title: Object Category
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: Represents the name of the object category
        description:
          type: string
          description: Represents the description of the object category
    objectcategoryObjectCategoryCreateSuccessResponse:
      description: Create Object Category Response
      type: object
      allOf:
        - $ref: '#/components/schemas/objectcategoryResultObjectCategoryCreateSuccess'
        - $ref: '#/components/schemas/objectcategoryResponseHeader'
    objectcategoryResultObjectCategoryCreateSuccess:
      title: Result Object Category Create Sucess
      type: object
      properties:
        result:
          $ref: '#/components/schemas/objectcategoryCategoryCreate'
    objectcategoryCategoryCreate:
      title: Category Create
      type: object
      properties:
        identifier:
          type: string
          description: Object Category Identifier
    objectcategoryGetObjectCategoryDefinitionRequest:
      title: Request Object
      required:
        - request
      type: object
      properties:
        request:
          $ref: >-
            #/components/schemas/objectcategoryObjectCategoryDefinitionGetRequestObjectCategoryDefinition
    objectcategoryObjectCategoryDefinitionGetRequestObjectCategoryDefinition:
      title: Request
      required:
        - objectCategoryDefinition
      type: object
      properties:
        objectCategoryDefinition:
          $ref: >-
            #/components/schemas/objectcategoryObjectCategoryDefinitionGetRequestObjectCategoryDefinitionObject
    objectcategoryObjectCategoryDefinitionGetRequestObjectCategoryDefinitionObject:
      title: Object Category Definition
      required:
        - name
        - objectType
      type: object
      properties:
        name:
          type: string
          description: Represents the name of the object category definition
        objectType:
          type: string
          description: Represents the targetObjectType of the object category definition
        channel:
          type: string
          description: >-
            Represents the chnnel id for which object category definition is
            defined
    objectcategoryCreateObjectCategoryDefinitionRequest:
      title: Request Object
      required:
        - request
      type: object
      properties:
        request:
          $ref: >-
            #/components/schemas/objectcategoryObjectCategoryDefinitionCreateRequestObjectCategoryDefinition
    objectcategoryObjectCategoryDefinitionCreateRequestObjectCategoryDefinition:
      title: Request
      required:
        - objectCategoryDefinition
      type: object
      properties:
        objectCategoryDefinition:
          $ref: >-
            #/components/schemas/objectcategoryObjectCategoryDefinitionCreateRequestObjectCategoryDefinitionObject
    objectcategoryObjectCategoryDefinitionCreateRequestObjectCategoryDefinitionObject:
      title: Object Category Definition
      required:
        - name
        - categoryId
        - targetObjectType
      type: object
      properties:
        name:
          type: string
          description: Represents the name of the object category definition
        categoryId:
          type: string
          description: >-
            Represents the categoryId of the object               category
            definition
        targetObjectType:
          type: string
          description: >-
            Represents the targetObjectType of the                object
            category definition
    objectcategoryUpdateObjectCategoryDefinitionrequest:
      title: Update ObjectCategoryDefinition Request
      type: object
      properties:
        request:
          $ref: >-
            #/components/schemas/objectcategoryObjectCategoryDefinitionUpdateRequestObjectCategoryDefinition
      required:
        - request
    objectcategoryObjectCategoryDefinitionUpdateRequestObjectCategoryDefinition:
      title: ObjectCategoryDefinitionUpdateRequestObjectCategoryDefinition
      type: object
      properties:
        objectCategoryDefinition:
          $ref: >-
            #/components/schemas/objectcategoryObjectCategoryDefinitionUpdateRequestObjectCategoryDefinitionObject
      required:
        - objectCategoryDefinition
    objectcategoryObjectCategoryDefinitionUpdateRequestObjectCategoryDefinitionObject:
      title: ObjectCategoryDefinition
      type: object
      properties:
        description:
          type: string
          description: Represents the description for the content
    objectcategoryObjectCategoryDefinitionCreateSuccessResponse:
      description: Create Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/objectcategoryResultWithContentId'
        - $ref: '#/components/schemas/objectcategoryResponseHeader'
    objectcategoryResultWithContentId:
      title: Result Containing Content Id
      type: object
      properties:
        result:
          $ref: '#/components/schemas/objectcategoryContentId'
    objectcategoryContentId:
      title: Content Id
      type: object
      properties:
        identifier:
          type: string
          description: Content Identifier
    objectcategoryObjectCategoryDefinitionCreateErrorResponse:
      description: Create ObjectCategoryDefinition Error Response
      type: object
      allOf:
        - $ref: '#/components/schemas/objectcategoryEmptyResult'
        - $ref: '#/components/schemas/objectcategoryResponseHeader'
    objectcategoryResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/objectcategoryResponseParams'
        responseCode:
          type: string
          description: 'API response code '
    objectcategoryResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    objectcategoryObjectCategoryDefinitionGetSuccessResponse:
      description: Get Content Response
      type: object
      allOf:
        - $ref: '#/components/schemas/objectcategoryResultWithContentMetadata'
        - $ref: '#/components/schemas/objectcategoryResponseHeader'
    objectcategoryResultWithContentMetadata:
      title: Result Containing Content Id and other metadata
      type: object
      properties:
        result:
          $ref: >-
            #/components/schemas/objectcategoryObjectCategoryDefinitionIdWithMetadata
    objectcategoryObjectCategoryDefinitionIdWithMetadata:
      title: Object Category Definition Metadata
      type: object
      properties:
        identifier:
          type: string
          description: Object Category Definition Identifier
        name:
          type: string
          description: Object Category Definition name
    certificatetemplateapiAddCertificateTemplateRequest:
      title: AddCertificateTemplateRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/certificatetemplateapiAddTemplateRequest'
    certificatetemplateapiAddTemplateRequest:
      title: AddTemplateRequest
      required:
        - certificate
      type: object
      properties:
        certificate:
          type: object
          properties:
            template:
              type: object
              properties:
                identifier:
                  type: string
                  description: Teh pre-defined tempalte ID
                name:
                  type: string
                  description: The name for the template
                template:
                  type: string
                  description: url for the template zip
                params:
                  type: array
                  description: The parameters attached to the template
                  items:
                    type: string
              description: The template details
          description: wrapper which holds the template details
    certificatetemplateapiUpdateCertificateTemplateRequest:
      title: UpdateCertificateTemplateRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/certificatetemplateapiUpdateTemplateRequest'
    certificatetemplateapiUpdateTemplateRequest:
      title: UpdateTemplateRequest
      required:
        - certificate
      type: object
      properties:
        certificate:
          type: object
          properties:
            template:
              type: object
              properties:
                template:
                  type: string
                  description: url for the template zip
                params:
                  type: array
                  description: parameters attached to the template
                  items:
                    type: string
              description: template detail
          description: wrapper which holds the template details
    certificatetemplateapiGetCertificateTemplateResponse:
      title: GetCertificateTemplateResponse
      required:
        - result
      type: object
      properties:
        result:
          $ref: '#/components/schemas/certificatetemplateapiGetTemplateResponse'
    certificatetemplateapiGetTemplateResponse:
      title: GetTemplateResponse
      type: object
      properties:
        certificate:
          type: object
          properties:
            template:
              type: object
              properties:
                name:
                  type: string
                  description: name for template
                template:
                  type: string
                  description: url for the template zip
                params:
                  type: array
                  description: parameters attached to the template
                  items:
                    type: string
              description: template details
          description: wrapper which holds the template details
    certificatetemplateapiResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timestamp
        params:
          $ref: '#/components/schemas/certificatetemplateapiResponseParams'
        responseCode:
          type: string
          description: 'API response code '
    certificatetemplateapiResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Represents the response message ID
        msgid:
          type: string
          description: Represents the error message ID
        err:
          type: string
          description: Represents the error code
        status:
          type: string
          description: The response status
        errmsg:
          type: string
          description: The error message
    certificatetemplateapiCreateErrorResponse:
      title: Error Response
      type: object
      properties:
        result:
          type: object
          properties:
            message:
              type: object
              description: detail of the error message
              example: name or template missing in request.
          description: Error Result
    certificatetemplateapiUpdateErrorResponse:
      title: Error Response
      type: object
      properties:
        result:
          type: object
          properties:
            message:
              type: object
              description: detail of the error message
              example: 'template has invalid properties: [templateUrl]'
          description: Error Result
    certificatetemplateapiReadErrorResponse:
      title: Error Response
      type: object
      properties:
        result:
          type: object
          properties:
            message:
              type: object
              description: detail of the error message
              example: 'Cert template not found for the given identifier: template_011'
          description: Error Result
    certificatetemplateapiSuccessResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            identifier:
              type: string
      description: contains success response
    certificatetemplateapiAddCertificateTemplateErrorResponse:
      title: Add Certificate Template Error Response
      allOf:
        - $ref: '#/components/schemas/certificatetemplateapiResponseHeader'
        - $ref: '#/components/schemas/certificatetemplateapiCreateErrorResponse'
    certificatetemplateapiUpdateCertificateTemplateErrorResponse:
      title: Update Certificate Template Error Response
      allOf:
        - $ref: '#/components/schemas/certificatetemplateapiResponseHeader'
        - $ref: '#/components/schemas/certificatetemplateapiUpdateErrorResponse'
    certificatetemplateapiReadCertificateTemplateErrorResponse:
      title: Certificate Template Error Response
      allOf:
        - $ref: '#/components/schemas/certificatetemplateapiResponseHeader'
        - $ref: '#/components/schemas/certificatetemplateapiReadErrorResponse'
    certificatetemplateapiApiRequest:
      type: object
      properties:
        id:
          type: string
          description: Represents an API uniquely
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since EPOCH
          format: int64
        params:
          type: object
          properties:
            msgid:
              type: string
              description: Represents the unique ID of the message being sent
            did:
              type: string
              description: Represents the device UUID from which API is called
    certificatetemplateapiApiResponse:
      required:
        - ets
        - id
        - params
        - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since EPOCH
          format: int64
        params:
          required:
            - msgid
            - resmsgid
            - status
          type: object
          properties:
            msgid:
              type: string
              description: Represents the ID of the message sent
            resmsgid:
              type: string
              description: Represents the ID of the response message
            status:
              type: string
              enum:
                - success
                - error
        responseCode:
          type: string
    certificatetemplateapi500ServerError:
      title: 500ServerError
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          type: string
        responseCode:
          type: string
        result:
          type: object
          properties:
            message:
              type: string
    experimentapiParams:
      title: Params
      required:
        - resmsgid
        - err
        - status
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        err:
          type: string
        status:
          type: string
    experimentapiErrorParams:
      title: ErrorParams
      required:
        - resmsgid
        - err
        - status
        - errorMsg
      type: object
      properties:
        resmsgid:
          type: string
        err:
          type: string
        status:
          type: string
        errorMsg:
          type: object
          properties:
            status:
              type: string
    experimentapiCreateExperiment:
      title: CreateExperiment
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/experimentapiExperiment-Request'
      example:
        request:
          expId: U1234
          name: USER_ORG
          description: Experiment to get users with orgname as sunbird to explore page
          createdBy: User1
          criteria:
            type: user
            filters:
              organisations.orgName:
                - sunbird
          data:
            startDate: '2020-10-11'
            endDate: '2020-10-20'
            key: ASDSDFDK23SDFKJDK
            client: app
    experimentapiExperiment-Request:
      title: Experiment-Request
      required:
        - expId
        - name
        - createdBy
        - description
        - criteria
        - data
      type: object
      properties:
        expId:
          type: string
          description: Unique id for experiment
        name:
          type: string
          description: Name of the experiment
        createdBy:
          type: string
          description: Name of the user who created the experiment
        description:
          type: string
          description: Short description about the experiment
        criteria:
          $ref: '#/components/schemas/experimentapiCriteria'
        data:
          $ref: '#/components/schemas/experimentapiData'
    experimentapiCriteria:
      title: Criteria
      description: Criteria of the experiment
      required:
        - type
        - filters
      properties:
        type:
          type: string
          description: Experiment type - either user/user_mod/device/device_mod
        filters:
          description: Required filters based on user or device filters
          type: object
      example:
        type: user
        filters:
          organisations: sunbird
    experimentapiData:
      title: Data
      description: Data describing the experiment
      required:
        - startDate
        - endDate
        - key
        - client
      properties:
        startDate:
          type: string
          description: >-
            Start date of the experiment. Should be always greater than
            experiment created date
        endDate:
          type: string
          description: >-
            End date of the experiment((yyyy-mm-dd)). Should be always be valid
            greater than experiment created date and start date
        key:
          type: string
          description: >-
            key of the experiment- For Example  url for portal or app-key for
            app client
        client:
          type: string
          description: experiment client - either app or portal
        modulus:
          type: integer
          description: 1 in modulus no of users or devices
      example:
        startDate: '2020-10-11'
        endDate: '2020-10-19'
        key: /org/profile
        client: portal
        modulus: 10
    experimentapiCreateExperiment-SuccessResponse:
      title: CreateExperiment-SuccessResponse
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/experimentapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/experimentapiExperiment-Response'
      example:
        id: ekstep.analytics.experiment.submit
        ver: v1
        ts: '2020-11-23 06:42:39:001+0000'
        params:
          resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
          status: successful
        responseCode: OK
        result:
          $ref: '#/components/schemas/experimentapiExperiment-Response/example'
    experimentapiExperiment-Response:
      title: Experiment-Response
      required:
        - stats
        - request
        - status
        - status_msg
      properties:
        stats:
          type: object
        request:
          $ref: '#/components/schemas/experimentapiExperiment-Request'
        status:
          type: string
        status_msg:
          type: string
        created_on:
          type: string
        last_updated:
          type: string
      example:
        stats: {}
        request: '#/components/schemas/Experiment-Request/example'
        created_on: 1606818148268
        last_updated: 1606818148268
        status: SUBMITTED
        status_msg: Experiment successfully submitted
    experimentapiCreateExperiment-FailedResponse:
      title: CreateExperiment-FailedResponse
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/experimentapiErrorParams'
        responseCode:
          type: string
        result:
          type: string
      example:
        id: ekstep.analytics.experiement.create
        ver: v1
        ts: '2020-11-23 06:42:39:001+0000'
        params:
          resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
          status: failed
          err: CLIENT_ERROR
          errorMsg:
            status: failed
            request: Request should not be empty
        responseCode: CLIENT_ERROR
        result: null
    experimentapiExperimentAPI-InternalServerError:
      title: ExperimentAPI-InternalServerError
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/experimentapiErrorParams'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: ekstep.analytics.experiement
        ver: v1
        ts: '2020-11-23 15:15:18:331+0000'
        params:
          resmsgid: null
          msgid: null
          err: INTERNAL_ERROR
          status: SERVER_ERROR
          errmsg: 'Process failed,please try again later.'
        responseCode: SERVER_ERROR
        result: {}
    experimentapiGetExperiment-SuccessResponse:
      title: GetExperiment-SuccessResponse
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/experimentapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/experimentapiExperiment-Request'
      example:
        id: ekstep.analytics.experiement.get
        ver: v1
        ts: '2020-11-23 06:42:39:001+0000'
        params:
          resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
          status: successful
        responseCode: OK
        result:
          stats:
            devicesMatched: 10000
          request:
            expId: D1234
            name: DEVICE_EXP
            createdBy: USER2
            description: >-
              Experiment to redirect all users to different app page with device
              state as Karnataka and first access in range of october month
            criteria:
              type: device
              filters:
                - name: state
                  operator: IN
                  value:
                    - KARNATAKA
                - name: first_access
                  operator: RANGE
                  value:
                    start: '2019-10-01'
                    end: '2019-10-30'
            data:
              startDate: 2020-11-01T00:00:00.000Z
              endDate: 2020-11-05T00:00:00.000Z
              key: 24-32jewfjewout0sdf
              client: app
        created_date: 1602062500777
        last_updated: 1602062542509
        status: ACTIVE
        status_msg: Experiment Mapped Sucessfully
    tenantpreferenceapiTenantPreferenceReadRequest:
      title: TenantPreferenceReadRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/tenantpreferenceapiRequest'
      example:
        request:
          orgId: all
          key: selfdeclarations
    tenantpreferenceapiRequest:
      title: TenantPreferenceReadRequestObj
      required:
        - orgId
        - key
      type: object
      properties:
        orgId:
          type: string
          description: >-
            Organisation id/channel id of the tenant to which preference is set
            or 'all' to apply for all tenants.
        key:
          type: string
          description: Preference key to identify the preference.
      example:
        orgId: all
        key: selfdeclarations
    tenantpreferenceapiTenantPreferenceReadSuccess:
      title: TenantPreferenceReadSuccess
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/tenantpreferenceapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/tenantpreferenceapiResult'
      example:
        id: api.org.preferences.read
        ver: v2
        ts: '2020-11-25 19:32:15:113+0000'
        params:
          resmsgid: null
          msgid: cb39f64aeb15c9ac0afdb5d2a8bc634b
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response:
            updatedBy: null
            data: Tenant preference data
            createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
            updatedOn: null
            createdOn: 1597330354157
            key: selfdeclarations
            orgId: all
    tenantpreferenceapiParams:
      title: TenantPreferenceReadSuccessParams
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
          nullable: true
        status:
          type: string
        errmsg:
          type: string
          nullable: true
      example:
        resmsgid: null
        msgid: cb39f64aeb15c9ac0afdb5d2a8bc634b
        err: null
        status: success
        errmsg: null
    tenantpreferenceapiResult:
      title: TenantPreferenceReadSuccessResult
      required:
        - response
      type: object
      properties:
        response:
          $ref: '#/components/schemas/tenantpreferenceapiResponse'
      example:
        response:
          updatedBy: null
          data: Tenant preference data
          createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
          updatedOn: null
          createdOn: 1597330354157
          key: selfdeclarations
          orgId: all
    tenantpreferenceapiResponse:
      title: TenantPreferenceReadSuccessResponse
      required:
        - updatedBy
        - data
        - createdBy
        - updatedOn
        - createdOn
        - key
        - orgId
      type: object
      properties:
        updatedBy:
          type: string
          nullable: true
          description: Uuid of the user who is updating preference.
        data:
          type: string
          description: Tenant specific preference data that need to be set.
        createdBy:
          type: string
          description: Uuid of the user who is creating preference.
        updatedOn:
          type: string
          nullable: true
          description: Preference updated date.
        createdOn:
          type: integer
          format: int64
          description: Preference create date.
        key:
          type: string
          description: Preference key to identify the preference.
        orgId:
          type: string
          description: Organisation id/channel id of the tenant to which preference is set.
      example:
        updatedBy: null
        data: Tenant preference data
        createdBy: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
        updatedOn: null
        createdOn: 1597330354157
        key: selfdeclarations
        orgId: all
    tenantpreferenceapiTenantPreferenceCreateRequest:
      title: TenantPreferenceCreateRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/tenantpreferenceapiRequest1'
      example:
        request:
          orgId: all
          key: selfdeclarations
          data: Tenant preference data
    tenantpreferenceapiRequest1:
      title: TenantPreferenceCreateRequestObj
      required:
        - orgId
        - key
        - data
      type: object
      properties:
        orgId:
          type: string
          description: >-
            Organisation id/channel id of the tenant to which preference is set
            or 'all' to apply for all tenants.
        key:
          type: string
          description: Preference key to identify the preference.
        data:
          type: string
          description: Tenant specific preference data that need to be set.
      example:
        orgId: all
        key: selfdeclarations
        data: Tenant Preference Data
    tenantpreferenceapiTenantPreferenceCreateSuccess:
      title: TenantPreferenceCreateSuccess
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/tenantpreferenceapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/tenantpreferenceapiResult1'
      example:
        id: api.org.preferences.create
        ver: v2
        ts: '2020-11-26 17:49:14:722+0000'
        params:
          resmsgid: null
          msgid: cc4678bef11ed973caae3760385a3af0
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
          orgId: all
          key: selfdeclarations
    tenantpreferenceapiResult1:
      title: TenantPreferenceCreateSuccessResult
      required:
        - response
        - orgId
        - key
      type: object
      properties:
        response:
          type: string
        orgId:
          type: string
          description: >-
            Organisation id/channel id of the tenant to which preference is set
            or 'all' to apply for all tenants.
        key:
          type: string
          description: Preference key to identify the preference.
      example:
        response: SUCCESS
        orgId: all
        key: selfdeclarations
    tenantpreferenceapiTenantPreferenceUpdateRequest:
      title: TenantPreferenceUpdateRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/tenantpreferenceapiRequest1'
      example:
        request:
          orgId: all
          key: selfdeclarations
          data: Tenant preference data
    tenantpreferenceapiTenantPreferenceUpdateSuccess:
      title: TenantPreferenceUpdateSuccess
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/tenantpreferenceapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/tenantpreferenceapiResult2'
      example:
        id: api.org.preferences.update
        ver: v2
        ts: '2020-11-25 19:33:57:441+0000'
        params:
          resmsgid: null
          msgid: 8980371bc3521fe2a154e13e4772e493
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
    tenantpreferenceapiResult2:
      title: TenantPreferenceUpdateSuccessResult
      required:
        - response
      type: object
      properties:
        response:
          type: string
      example:
        response: SUCCESS
    tenantpreferenceapiUnauthorized:
      title: UnauthorizedinUpdateConsent
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/tenantpreferenceapiParams1'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.org.preferences.update
        ver: v1
        ts: '2020-11-25 03:47:00:682+0000'
        params:
          resmsgid: null
          msgid: 3714a8e54fc515c1e8dccf06449cf677
          err: UNAUTHORIZED_USER
          status: SERVER_ERROR
          errmsg: You are not authorized.
        responseCode: CLIENT_ERROR
        result: {}
    tenantpreferenceapiUnauthorizedRead:
      title: UnauthorizedinReadConsent
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/tenantpreferenceapiParams1'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.org.preferences.read
        ver: v1
        ts: '2020-11-25 03:47:00:682+0000'
        params:
          resmsgid: null
          msgid: 3714a8e54fc515c1e8dccf06449cf677
          err: UNAUTHORIZED_USER
          status: SERVER_ERROR
          errmsg: You are not authorized.
        responseCode: CLIENT_ERROR
        result: {}
    tenantpreferenceapiParams1:
      title: ParamsinUnauthorized
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: null
        msgid: 3714a8e54fc515c1e8dccf06449cf677
        err: UNAUTHORIZED_USER
        status: SERVER_ERROR
        errmsg: You are not authorized.
    tenantpreferenceapiServerError:
      title: ServerErrorinUpdateConsent
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/tenantpreferenceapiParams1ServerError'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.org.preferences.update
        ver: v1
        ts: '2020-11-25 03:47:00:682+0000'
        params:
          resmsgid: null
          msgid: 3714a8e54fc515c1e8dccf06449cf677
          err: INTERNAL_SERVER_ERROR
          status: INTERNAL_SERVER_ERROR
          errmsg: INTERNAL_SERVER_ERROR
        responseCode: SERVER_ERROR
        result: {}
    tenantpreferenceapiServerErrorRead:
      title: ServerErrorinReadConsent
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/tenantpreferenceapiParams1ServerError'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.org.preferences.read
        ver: v1
        ts: '2020-11-25 03:47:00:682+0000'
        params:
          resmsgid: null
          msgid: 3714a8e54fc515c1e8dccf06449cf677
          err: INTERNAL_SERVER_ERROR
          status: INTERNAL_SERVER_ERROR
          errmsg: INTERNAL_SERVER_ERROR
        responseCode: SERVER_ERROR
        result: {}
    tenantpreferenceapiParams1ServerError:
      title: ParamsinServerError
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: null
        msgid: 3714a8e54fc515c1e8dccf06449cf677
        err: INTERNAL_SERVER_ERROR
        status: INTERNAL_SERVER_ERROR
        errmsg: INTERNAL_SERVER_ERROR
    tenantpreferenceapiBadRequest:
      title: BadRequestinUpdateConsent
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/tenantpreferenceapiParams1BadRequest'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.org.preferences.update
        ver: v1
        ts: '2020-11-25 03:47:00:682+0000'
        params:
          resmsgid: null
          msgid: 3714a8e54fc515c1e8dccf06449cf677
          err: BAD_REQUEST
          status: BAD_REQUEST
          errmsg: Bad Request
        responseCode: BAD_REQUEST
        result: {}
    tenantpreferenceapiResourceNotFound:
      title: ResourceNotFoundinUpdateConsent
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/tenantpreferenceapiParams1ResourceNotFound'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.org.preferences.update
        ver: v1
        ts: '2020-11-25 03:47:00:682+0000'
        params:
          resmsgid: null
          msgid: 3714a8e54fc515c1e8dccf06449cf677
          err: INVALID_ORG_ID
          status: INVALID_ORG_ID
          errmsg: INVALID_ORG_ID
        responseCode: RESOURCE_NOT_FOUND
        result: {}
    tenantpreferenceapiResourceNotFoundRead:
      title: ResourceNotFoundinReadConsent
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/tenantpreferenceapiParams1ResourceNotFound'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.org.preferences.read
        ver: v1
        ts: '2020-11-25 03:47:00:682+0000'
        params:
          resmsgid: null
          msgid: 3714a8e54fc515c1e8dccf06449cf677
          err: USER_CONSENT_NOT_FOUND
          status: USER_CONSENT_NOT_FOUND
          errmsg: User consent not found.
        responseCode: RESOURCE_NOT_FOUND
        result: {}
    tenantpreferenceapiParams1BadRequest:
      title: ParamsinBadRequest
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: null
        msgid: 3714a8e54fc515c1e8dccf06449cf677
        err: BAD_REQUEST
        status: BAD_REQUEST
        errmsg: Bad Request
    tenantpreferenceapiParams1ResourceNotFound:
      title: ParamsinResourceNotFound
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: null
        msgid: 3714a8e54fc515c1e8dccf06449cf677
        err: USER_CONSENT_NOT_FOUND
        status: USER_CONSENT_NOT_FOUND
        errmsg: User consent not found.
    userconsentapiuserconsentupdaterequest:
      title: ConsentUpdateRequestForCourses
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userconsentapiRequest'
      example:
        request:
          consent:
            status: ACTIVE
            userId: e94ad69a-9096-491c-b107-782a67760a2b
            consumerId: 0126632859575746566
            objectId: do_31313966505806233613406
            objectType: Collection
    userconsentapiRequest:
      title: RequestinConsentUpdateForCourses
      required:
        - consent
      type: object
      properties:
        consent:
          $ref: '#/components/schemas/userconsentapiConsent'
      example:
        consent:
          status: ACTIVE
          userId: e94ad69a-9096-491c-b107-782a67760a2b
          consumerId: 0126632859575746566
          objectId: do_31313966505806233613406
          objectType: Collection
    userconsentapiConsent:
      title: ConsentinConsentUpdateForCourses
      required:
        - status
        - userId
        - consumerId
        - objectId
        - objectType
      type: object
      properties:
        status:
          type: string
          description: Status of the consent - ACTIVE or REVOKED
        userId:
          type: string
          description: UUID of the user
        consumerId:
          type: string
          description: organisation id of the course or org to which consent is given
        objectId:
          type: string
          description: collection id or organisation id to which consent is given
        objectType:
          type: string
          description: >-
            Type of object to which consent is given - collection or
            organisation
      example:
        status: ACTIVE
        userId: e94ad69a-9096-491c-b107-782a67760a2b
        consumerId: 0126632859575746566
        objectId: do_31313966505806233613406
        objectType: Collection
    userconsentapiConsentUpdateSuccess:
      title: ConsentUpdateSuccess
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userconsentapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userconsentapiResult'
      example:
        id: api.user.consent.update
        ver: v1
        ts: '2020-09-17 14:07:15:545+0000'
        params:
          resmsgid: null
          msgid: 3d1afc39-9350-4565-afb3-735dbccd19c7
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          consent:
            userId: 5a8a3f2b-3409-42e0-9001-f913bc0fde31
          message: User Consent updated successfully.
    userconsentapiParams:
      title: ParamsinConsentResponse
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
          nullable: true
        status:
          type: string
        errmsg:
          type: string
          nullable: true
      example:
        resmsgid: null
        msgid: 3d1afc39-9350-4565-afb3-735dbccd19c7
        err: null
        status: success
        errmsg: null
    userconsentapiResult:
      title: ResultinConsentUpdateSuccess
      required:
        - consent
        - message
      type: object
      properties:
        consent:
          $ref: '#/components/schemas/userconsentapiConsent1'
        message:
          type: string
      example:
        consent:
          userId: 5a8a3f2b-3409-42e0-9001-f913bc0fde31
        message: User Consent updated successfully.
    userconsentapiConsent1:
      title: ConsentinConsentUpdateSuccess
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
      example:
        userId: 5a8a3f2b-3409-42e0-9001-f913bc0fde31
    userconsentapiUnauthorized:
      title: UnauthorizedinUpdateConsent
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userconsentapiParams1'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.user.consent.update
        ver: v1
        ts: '2020-11-25 03:47:00:682+0000'
        params:
          resmsgid: null
          msgid: 3714a8e54fc515c1e8dccf06449cf677
          err: UNAUTHORIZED_USER
          status: SERVER_ERROR
          errmsg: You are not authorized.
        responseCode: CLIENT_ERROR
        result: {}
    userconsentapiUnauthorizedRead:
      title: UnauthorizedinReadConsent
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userconsentapiParams1'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.user.consent.read
        ver: v1
        ts: '2020-11-25 03:47:00:682+0000'
        params:
          resmsgid: null
          msgid: 3714a8e54fc515c1e8dccf06449cf677
          err: UNAUTHORIZED_USER
          status: SERVER_ERROR
          errmsg: You are not authorized.
        responseCode: CLIENT_ERROR
        result: {}
    userconsentapiParams1:
      title: ParamsinUnauthorized
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: null
        msgid: 3714a8e54fc515c1e8dccf06449cf677
        err: UNAUTHORIZED_USER
        status: SERVER_ERROR
        errmsg: You are not authorized.
    userconsentapiServerError:
      title: ServerErrorinUpdateConsent
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userconsentapiParams1ServerError'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.user.consent.update
        ver: v1
        ts: '2020-11-25 03:47:00:682+0000'
        params:
          resmsgid: null
          msgid: 3714a8e54fc515c1e8dccf06449cf677
          err: INTERNAL_SERVER_ERROR
          status: INTERNAL_SERVER_ERROR
          errmsg: INTERNAL_SERVER_ERROR
        responseCode: SERVER_ERROR
        result: {}
    userconsentapiServerErrorRead:
      title: ServerErrorinReadConsent
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userconsentapiParams1ServerError'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.user.consent.read
        ver: v1
        ts: '2020-11-25 03:47:00:682+0000'
        params:
          resmsgid: null
          msgid: 3714a8e54fc515c1e8dccf06449cf677
          err: INTERNAL_SERVER_ERROR
          status: INTERNAL_SERVER_ERROR
          errmsg: INTERNAL_SERVER_ERROR
        responseCode: SERVER_ERROR
        result: {}
    userconsentapiParams1ServerError:
      title: ParamsinServerError
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: null
        msgid: 3714a8e54fc515c1e8dccf06449cf677
        err: INTERNAL_SERVER_ERROR
        status: INTERNAL_SERVER_ERROR
        errmsg: INTERNAL_SERVER_ERROR
    userconsentapiResourceNotFound:
      title: ResourceNotFoundinUpdateConsent
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userconsentapiParams1ResourceNotFound'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.user.consent.update
        ver: v1
        ts: '2020-11-25 03:47:00:682+0000'
        params:
          resmsgid: null
          msgid: 3714a8e54fc515c1e8dccf06449cf677
          err: INVALID_ORG_ID
          status: INVALID_ORG_ID
          errmsg: INVALID_ORG_ID
        responseCode: RESOURCE_NOT_FOUND
        result: {}
    userconsentapiResourceNotFoundRead:
      title: ResourceNotFoundinReadConsent
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userconsentapiParams1ResourceNotFound'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.user.consent.read
        ver: v1
        ts: '2020-11-25 03:47:00:682+0000'
        params:
          resmsgid: null
          msgid: 3714a8e54fc515c1e8dccf06449cf677
          err: USER_CONSENT_NOT_FOUND
          status: USER_CONSENT_NOT_FOUND
          errmsg: User consent not found.
        responseCode: RESOURCE_NOT_FOUND
        result: {}
    userconsentapiParams1ResourceNotFound:
      title: ParamsinResourceNotFound
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: null
        msgid: 3714a8e54fc515c1e8dccf06449cf677
        err: USER_CONSENT_NOT_FOUND
        status: USER_CONSENT_NOT_FOUND
        errmsg: User consent not found.
    userconsentapiuserconsentreadrequest:
      title: UserConsentReadRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/userconsentapiRequest1'
      example:
        request:
          consent:
            filters:
              userId: 5a8a3f2b-3409-42e0-9001-f913bc0fde31
              consumerId: 0126632859575746566
              objectId: 0126632859575746566
    userconsentapiRequest1:
      title: RequestinConsentReadRequest
      required:
        - consent
      type: object
      properties:
        consent:
          $ref: '#/components/schemas/userconsentapiConsent2'
      example:
        consent:
          filters:
            userId: 5a8a3f2b-3409-42e0-9001-f913bc0fde31
            consumerId: 0126632859575746566
            objectId: 0126632859575746566
    userconsentapiConsent2:
      title: ConsentinConsentReadRequest
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/userconsentapiFilters'
      example:
        filters:
          userId: 5a8a3f2b-3409-42e0-9001-f913bc0fde31
          consumerId: 0126632859575746566
          objectId: 0126632859575746566
    userconsentapiFilters:
      title: FiltersinConsentReadRequest
      required:
        - userId
        - consumerId
        - objectId
      type: object
      properties:
        userId:
          type: string
          description: UUID of the user
        consumerId:
          type: string
          description: organisation id of the course or org to which consent is given
        objectId:
          type: string
          description: collection id or organisation id to which consent is given
      example:
        userId: 5a8a3f2b-3409-42e0-9001-f913bc0fde31
        consumerId: 0126632859575746566
        objectId: 0126632859575746566
    userconsentapiConsentReadSuccess:
      title: ConsentReadSuccess
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/userconsentapiParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/userconsentapiResult1'
      example:
        id: api.user.consent.read
        ver: v1
        ts: '2020-09-17 14:11:19:029+0000'
        params:
          resmsgid: null
          msgid: dfb32305-cb9f-470a-b52b-fe492ca89415
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          consents:
            - userId: 5a8a3f2b-3409-42e0-9001-f913bc0fde31
              consumerId: 0126632859575746566
              status: REVOKED
              objectType: Collection
              objectId: do_31313966505806233613406
    userconsentapiResult1:
      title: ResultinConsentReadSuccess
      required:
        - consents
      type: object
      properties:
        consents:
          type: array
          items:
            $ref: '#/components/schemas/userconsentapiConsent'
          description: ''
      example:
        consents:
          - userId: 5a8a3f2b-3409-42e0-9001-f913bc0fde31
            consumerId: 0126632859575746566
            status: REVOKED
            objectType: Collection
            objectId: do_31313966505806233613406
    courseenrolmentapiCourseEnrolRequest:
      title: CourseEnrolRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/courseenrolmentapiRequest'
      example:
        request:
          courseId: '{{course-id}}'
          batchId: '{{batch-id}}'
          userId: '{{user-id}}'
    courseenrolmentapiRequest:
      title: Request
      required:
        - courseId
        - batchId
        - userId
      type: object
      properties:
        courseId:
          type: string
          description: Identifier of the course which user want to enroll
        batchId:
          type: string
          description: The identifier of the batch to which the course belongs.
        userId:
          type: string
          description: This identifier uniquely identifies a user
      example:
        courseId: '{{course-id}}'
        batchId: '{{batch-id}}'
        userId: '{{user-id}}'
    courseenrolmentapiParams:
      title: Params
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: null
        msgid: 75199913-1346-49cc-b486-0810ce706a4e
        err: INVALID_COURSE_BATCH_ID
        status: INVALID_COURSE_BATCH_ID
        errmsg: 'Invalid course batch id '
    courseenrolmentapiParams1:
      title: Params1
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
          nullable: true
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: null
        msgid: null
        err: INTERNAL_ERROR
        status: SERVER_ERROR
        errmsg: 'Process failed,please try again later.'
    courseenrolmentapiCourseEnrol-success:
      title: CourseEnrol-success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/courseenrolmentapiParams4'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/courseenrolmentapiResult'
      example:
        id: api.course.enroll
        ver: v1
        ts: '2020-12-03 04:24:19:186+0000'
        params:
          resmsgid: null
          msgid: d8e54177-acb2-4351-8dcc-a7e6fc5c8a2f
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
    courseenrolmentapiParams4:
      title: Params4
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
          nullable: true
        status:
          type: string
        errmsg:
          type: string
          nullable: true
      example:
        resmsgid: null
        msgid: d8e54177-acb2-4351-8dcc-a7e6fc5c8a2f
        err: null
        status: success
        errmsg: null
    courseenrolmentapiResult:
      title: Result
      required:
        - response
      type: object
      properties:
        response:
          type: string
      example:
        response: SUCCESS
    courseenrolmentapiCourseUnenrolRequest:
      title: CourseUnenrolRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/courseenrolmentapiRequest'
      example:
        request:
          courseId: '{{course-id}}'
          batchId: '{{batch-id}}'
          userId: '{{user-id}}'
    courseenrolmentapiCourseUnenrol-success:
      title: CourseUnenrol-success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/courseenrolmentapiParams4'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/courseenrolmentapiResult'
      example:
        id: api.course.unenroll
        ver: v1
        ts: '2020-12-03 06:33:38:843+0000'
        params:
          resmsgid: null
          msgid: 728efae3-8352-4886-8cb2-34b7b3fc41cc
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
    courseenrolmentapiUserEnrolmentList-Success:
      title: UserEnrolmentList-Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/courseenrolmentapiParams4'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/courseenrolmentapiResult2'
      example:
        id: api.user.courses.list
        ver: v1
        ts: '2020-12-03 06:56:38:376+0000'
        params:
          resmsgid: null
          msgid: 83f3347f-0d7a-4369-bde2-daae13aa5938
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          courses:
            - dateTime: 1594191696100
              lastReadContentStatus: 2
              enrolledDate: '2020-07-08 07:01:36:100+0000'
              addedBy: null
              contentId: do_11305961646828748812224
              active: true
              description: Enter description for Course
              courseLogoUrl: >-
                https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11305961646828748812224/artifact/06_maths_book_1566813333849_1580197829074.thumb.jpg
              batchId: 01305961938705612812
              userId: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
              content:
                ownershipType:
                  - createdBy
                copyright: Sunbird
                channel: b00bc992ef25f1a9a8d63291e20efc8d
                downloadUrl: >-
                  https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
                organisation:
                  - Sunbird
                language:
                  - English
                mimeType: application/vnd.ekstep.content-collection
                variants:
                  online:
                    ecarUrl: >-
                      https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511612_do_11305961646828748812224_1.0_online.ecar
                    size: 4936
                  spine:
                    ecarUrl: >-
                      https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
                    size: 76289
                leafNodes:
                  - do_11305605610466508811
                c_sunbird_dev_private_batch_count: 0
                objectType: Content
                appIcon: >-
                  https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11305961646828748812224/artifact/06_maths_book_1566813333849_1580197829074.thumb.jpg
                children:
                  - do_11305605610466508811
                primaryCategory: Course
                appId: dev.sunbird.portal
                contentEncoding: gzip
                lockKey: 097e65a0-9c65-4198-b65c-269de9ae6072
                totalCompressedSize: 499149
                mimeTypesCount: >-
                  {"application/vnd.ekstep.content-collection":1,"application/vnd.ekstep.ecml-archive":1}
                contentType: Course
                trackable:
                  enabled: 'Yes'
                  autoBatch: 'Yes'
                identifier: do_11305961646828748812224
                lastUpdatedBy: 8454cb21-3ce9-4e30-85b5-fade097880d8
                audience:
                  - Teacher
                visibility: Default
                toc_url: >-
                  https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11305961646828748812224/artifact/do_11305961646828748812224_toc.json
                contentTypesCount: '{"CourseUnit":1,"Resource":1}'
                consumerId: 6533af82-f38b-429a-bcfb-681ed02a62e3
                childNodes:
                  - do_11305961679918694412225
                  - do_11305605610466508811
                mediaType: content
                osId: org.ekstep.quiz.app
                graph_id: domain
                nodeType: DATA_NODE
                lastPublishedBy: Ekstep
                version: 2
                license: CC BY 4.0
                prevState: Draft
                size: 76289
                lastPublishedOn: 2020-07-08T06:58:31.132Z
                IL_FUNC_OBJECT_TYPE: Content
                name: Test-auto-certificate-8thjuly
                status: Live
                code: org.sunbird.DuGnxI
                credentials:
                  enabled: 'Yes'
                prevStatus: Processing
                description: Enter description for Course
                idealScreenSize: normal
                posterImage: >-
                  https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11294498061374259215/artifact/06_maths_book_1566813333849_1580197829074.jpg
                createdOn: 2020-07-08T06:57:43.417Z
                reservedDialcodes: '{"U6K9M6":0}'
                batches:
                  - createdFor:
                      - ORG_001
                    endDate: null
                    name: Test-auto-certificate-8thjuly
                    batchId: 01305961938705612812
                    enrollmentType: open
                    enrollmentEndDate: null
                    startDate: 2020-07-08T00:00:00.000Z
                    status: 1
                  - createdFor:
                      - ORG_001
                    endDate: null
                    name: Test-auto-certificate-8thjuly
                    batchId: 01306956038530662417
                    enrollmentType: open
                    enrollmentEndDate: null
                    startDate: 2020-07-22T00:00:00.000Z
                    status: 1
                copyrightYear: 2020
                contentDisposition: inline
                lastUpdatedOn: 2020-07-08T06:58:30.585Z
                licenseterms: >-
                  By creating and uploading content on DIKSHA, you consent to
                  publishing this content under the Creative Commons Framework,
                  specifically under the CC-BY-SA 4.0 license.
                SYS_INTERNAL_LAST_UPDATED_ON: 2020-07-23T12:24:29.500Z
                dialcodeRequired: 'No'
                createdFor:
                  - ORG_001
                lastStatusChangedOn: 2020-07-08T06:58:31.950Z
                creator: Mentor First User
                IL_SYS_NODE_TYPE: DATA_NODE
                os:
                  - All
                pkgVersion: 1
                versionKey: 1594191510585
                idealScreenDensity: hdpi
                framework: TPD
                depth: 0
                s3Key: >-
                  ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
                dialcodes:
                  - U6K9M6
                createdBy: 8454cb21-3ce9-4e30-85b5-fade097880d8
                compatibilityLevel: 4
                leafNodesCount: 1
                IL_UNIQUE_ID: do_11305961646828748812224
                resourceType: Course
                node_id: 452442
                c_sunbird_dev_open_batch_count: 2
              contentStatus:
                do_11305605610466508811: 2
              issuedCertificates: []
              completionPercentage: 100
              courseName: Test-auto-certificate-8thjuly
              certificates:
                - id: fe2aadc6-5065-460a-98ed-4de17bc13f62
                  lastIssuedOn: 2020-07-22T12:57:44.335Z
                  name: Course completion certificate prad
                  token: A8T4Q7
                  url: >-
                    https://dev.sunbirded.org/certs/ORG_001_01305961938705612812/eedc6a60-cc1a-11ea-bff5-c98df349f522.pdf
              completedOn: 1595422613486
              leafNodesCount: 1
              progress: 1
              lastReadContentId: do_11305605610466508811
              courseId: do_11305961646828748812224
              collectionId: do_11305961646828748812224
              status: 2
    courseenrolmentapiResult2:
      title: Result2
      required:
        - courses
      type: object
      properties:
        courses:
          type: array
          items:
            $ref: '#/components/schemas/courseenrolmentapiCourse'
          description: ''
      example:
        courses:
          - dateTime: 1594191696100
            lastReadContentStatus: 2
            enrolledDate: '2020-07-08 07:01:36:100+0000'
            addedBy: null
            contentId: do_11305961646828748812224
            active: true
            description: Enter description for Course
            courseLogoUrl: >-
              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11305961646828748812224/artifact/06_maths_book_1566813333849_1580197829074.thumb.jpg
            batchId: 01305961938705612812
            userId: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
            content:
              ownershipType:
                - createdBy
              copyright: Sunbird
              channel: b00bc992ef25f1a9a8d63291e20efc8d
              downloadUrl: >-
                https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
              organisation:
                - Sunbird
              language:
                - English
              mimeType: application/vnd.ekstep.content-collection
              variants:
                online:
                  ecarUrl: >-
                    https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511612_do_11305961646828748812224_1.0_online.ecar
                  size: 4936
                spine:
                  ecarUrl: >-
                    https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
                  size: 76289
              leafNodes:
                - do_11305605610466508811
              c_sunbird_dev_private_batch_count: 0
              objectType: Content
              appIcon: >-
                https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11305961646828748812224/artifact/06_maths_book_1566813333849_1580197829074.thumb.jpg
              children:
                - do_11305605610466508811
              primaryCategory: Course
              appId: dev.sunbird.portal
              contentEncoding: gzip
              lockKey: 097e65a0-9c65-4198-b65c-269de9ae6072
              totalCompressedSize: 499149
              mimeTypesCount: >-
                {"application/vnd.ekstep.content-collection":1,"application/vnd.ekstep.ecml-archive":1}
              contentType: Course
              trackable:
                enabled: 'Yes'
                autoBatch: 'Yes'
              identifier: do_11305961646828748812224
              lastUpdatedBy: 8454cb21-3ce9-4e30-85b5-fade097880d8
              audience:
                - Teacher
              visibility: Default
              toc_url: >-
                https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11305961646828748812224/artifact/do_11305961646828748812224_toc.json
              contentTypesCount: '{"CourseUnit":1,"Resource":1}'
              consumerId: 6533af82-f38b-429a-bcfb-681ed02a62e3
              childNodes:
                - do_11305961679918694412225
                - do_11305605610466508811
              mediaType: content
              osId: org.ekstep.quiz.app
              graph_id: domain
              nodeType: DATA_NODE
              lastPublishedBy: Ekstep
              version: 2
              license: CC BY 4.0
              prevState: Draft
              size: 76289
              lastPublishedOn: 2020-07-08T06:58:31.132Z
              IL_FUNC_OBJECT_TYPE: Content
              name: Test-auto-certificate-8thjuly
              status: Live
              code: org.sunbird.DuGnxI
              credentials:
                enabled: 'Yes'
              prevStatus: Processing
              description: Enter description for Course
              idealScreenSize: normal
              posterImage: >-
                https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11294498061374259215/artifact/06_maths_book_1566813333849_1580197829074.jpg
              createdOn: 2020-07-08T06:57:43.417Z
              reservedDialcodes: '{"U6K9M6":0}'
              batches:
                - createdFor:
                    - ORG_001
                  endDate: null
                  name: Test-auto-certificate-8thjuly
                  batchId: 01305961938705612812
                  enrollmentType: open
                  enrollmentEndDate: null
                  startDate: 2020-07-08T00:00:00.000Z
                  status: 1
                - createdFor:
                    - ORG_001
                  endDate: null
                  name: Test-auto-certificate-8thjuly
                  batchId: 01306956038530662417
                  enrollmentType: open
                  enrollmentEndDate: null
                  startDate: 2020-07-22T00:00:00.000Z
                  status: 1
              copyrightYear: 2020
              contentDisposition: inline
              lastUpdatedOn: 2020-07-08T06:58:30.585Z
              licenseterms: >-
                By creating and uploading content on DIKSHA, you consent to
                publishing this content under the Creative Commons Framework,
                specifically under the CC-BY-SA 4.0 license.
              SYS_INTERNAL_LAST_UPDATED_ON: 2020-07-23T12:24:29.500Z
              dialcodeRequired: 'No'
              createdFor:
                - ORG_001
              lastStatusChangedOn: 2020-07-08T06:58:31.950Z
              creator: Mentor First User
              IL_SYS_NODE_TYPE: DATA_NODE
              os:
                - All
              pkgVersion: 1
              versionKey: 1594191510585
              idealScreenDensity: hdpi
              framework: TPD
              depth: 0
              s3Key: >-
                ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
              dialcodes:
                - U6K9M6
              createdBy: 8454cb21-3ce9-4e30-85b5-fade097880d8
              compatibilityLevel: 4
              leafNodesCount: 1
              IL_UNIQUE_ID: do_11305961646828748812224
              resourceType: Course
              node_id: 452442
              c_sunbird_dev_open_batch_count: 2
            contentStatus:
              do_11305605610466508811: 2
            issuedCertificates: []
            completionPercentage: 100
            courseName: Test-auto-certificate-8thjuly
            certificates:
              - id: fe2aadc6-5065-460a-98ed-4de17bc13f62
                lastIssuedOn: 2020-07-22T12:57:44.335Z
                name: Course completion certificate prad
                token: A8T4Q7
                url: >-
                  https://dev.sunbirded.org/certs/ORG_001_01305961938705612812/eedc6a60-cc1a-11ea-bff5-c98df349f522.pdf
            completedOn: 1595422613486
            leafNodesCount: 1
            progress: 1
            lastReadContentId: do_11305605610466508811
            courseId: do_11305961646828748812224
            collectionId: do_11305961646828748812224
            status: 2
    courseenrolmentapiCourse:
      title: Course
      required:
        - dateTime
        - lastReadContentStatus
        - enrolledDate
        - addedBy
        - contentId
        - active
        - description
        - courseLogoUrl
        - batchId
        - userId
        - content
        - contentStatus
        - issuedCertificates
        - completionPercentage
        - courseName
        - certificates
        - completedOn
        - leafNodesCount
        - progress
        - lastReadContentId
        - courseId
        - collectionId
        - status
      type: object
      properties:
        dateTime:
          type: integer
          format: int64
        lastReadContentStatus:
          type: integer
          format: int32
        enrolledDate:
          type: string
        addedBy:
          type: string
          nullable: true
        contentId:
          type: string
        active:
          type: boolean
        description:
          type: string
        courseLogoUrl:
          type: string
        batchId:
          type: string
        userId:
          type: string
        content:
          $ref: '#/components/schemas/courseenrolmentapiContent'
        contentStatus:
          $ref: '#/components/schemas/courseenrolmentapiContentStatus'
        issuedCertificates:
          type: array
          items:
            type: string
          description: ''
        completionPercentage:
          type: integer
          format: int32
        courseName:
          type: string
        certificates:
          type: array
          items:
            $ref: '#/components/schemas/courseenrolmentapiCertificate'
          description: ''
        completedOn:
          type: integer
          format: int64
        leafNodesCount:
          type: integer
          format: int32
        progress:
          type: integer
          format: int32
        lastReadContentId:
          type: string
        courseId:
          type: string
        collectionId:
          type: string
        status:
          type: integer
          format: int32
      example:
        dateTime: 1594191696100
        lastReadContentStatus: 2
        enrolledDate: '2020-07-08 07:01:36:100+0000'
        addedBy: null
        contentId: do_11305961646828748812224
        active: true
        description: Enter description for Course
        courseLogoUrl: >-
          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11305961646828748812224/artifact/06_maths_book_1566813333849_1580197829074.thumb.jpg
        batchId: 01305961938705612812
        userId: 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
        content:
          ownershipType:
            - createdBy
          copyright: Sunbird
          channel: b00bc992ef25f1a9a8d63291e20efc8d
          downloadUrl: >-
            https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
          organisation:
            - Sunbird
          language:
            - English
          mimeType: application/vnd.ekstep.content-collection
          variants:
            online:
              ecarUrl: >-
                https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511612_do_11305961646828748812224_1.0_online.ecar
              size: 4936
            spine:
              ecarUrl: >-
                https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
              size: 76289
          leafNodes:
            - do_11305605610466508811
          c_sunbird_dev_private_batch_count: 0
          objectType: Content
          appIcon: >-
            https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11305961646828748812224/artifact/06_maths_book_1566813333849_1580197829074.thumb.jpg
          children:
            - do_11305605610466508811
          primaryCategory: Course
          appId: dev.sunbird.portal
          contentEncoding: gzip
          lockKey: 097e65a0-9c65-4198-b65c-269de9ae6072
          totalCompressedSize: 499149
          mimeTypesCount: >-
            {"application/vnd.ekstep.content-collection":1,"application/vnd.ekstep.ecml-archive":1}
          contentType: Course
          trackable:
            enabled: 'Yes'
            autoBatch: 'Yes'
          identifier: do_11305961646828748812224
          lastUpdatedBy: 8454cb21-3ce9-4e30-85b5-fade097880d8
          audience:
            - Teacher
          visibility: Default
          toc_url: >-
            https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11305961646828748812224/artifact/do_11305961646828748812224_toc.json
          contentTypesCount: '{"CourseUnit":1,"Resource":1}'
          consumerId: 6533af82-f38b-429a-bcfb-681ed02a62e3
          childNodes:
            - do_11305961679918694412225
            - do_11305605610466508811
          mediaType: content
          osId: org.ekstep.quiz.app
          graph_id: domain
          nodeType: DATA_NODE
          lastPublishedBy: Ekstep
          version: 2
          license: CC BY 4.0
          prevState: Draft
          size: 76289
          lastPublishedOn: 2020-07-08T06:58:31.132Z
          IL_FUNC_OBJECT_TYPE: Content
          name: Test-auto-certificate-8thjuly
          status: Live
          code: org.sunbird.DuGnxI
          credentials:
            enabled: 'Yes'
          prevStatus: Processing
          description: Enter description for Course
          idealScreenSize: normal
          posterImage: >-
            https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11294498061374259215/artifact/06_maths_book_1566813333849_1580197829074.jpg
          createdOn: 2020-07-08T06:57:43.417Z
          reservedDialcodes: '{"U6K9M6":0}'
          batches:
            - createdFor:
                - ORG_001
              endDate: null
              name: Test-auto-certificate-8thjuly
              batchId: 01305961938705612812
              enrollmentType: open
              enrollmentEndDate: null
              startDate: 2020-07-08T00:00:00.000Z
              status: 1
            - createdFor:
                - ORG_001
              endDate: null
              name: Test-auto-certificate-8thjuly
              batchId: 01306956038530662417
              enrollmentType: open
              enrollmentEndDate: null
              startDate: 2020-07-22T00:00:00.000Z
              status: 1
          copyrightYear: 2020
          contentDisposition: inline
          lastUpdatedOn: 2020-07-08T06:58:30.585Z
          licenseterms: >-
            By creating and uploading content on DIKSHA, you consent to
            publishing this content under the Creative Commons Framework,
            specifically under the CC-BY-SA 4.0 license.
          SYS_INTERNAL_LAST_UPDATED_ON: 2020-07-23T12:24:29.500Z
          dialcodeRequired: 'No'
          createdFor:
            - ORG_001
          lastStatusChangedOn: 2020-07-08T06:58:31.950Z
          creator: Mentor First User
          IL_SYS_NODE_TYPE: DATA_NODE
          os:
            - All
          pkgVersion: 1
          versionKey: 1594191510585
          idealScreenDensity: hdpi
          framework: TPD
          depth: 0
          s3Key: >-
            ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
          dialcodes:
            - U6K9M6
          createdBy: 8454cb21-3ce9-4e30-85b5-fade097880d8
          compatibilityLevel: 4
          leafNodesCount: 1
          IL_UNIQUE_ID: do_11305961646828748812224
          resourceType: Course
          node_id: 452442
          c_sunbird_dev_open_batch_count: 2
        contentStatus:
          do_11305605610466508811: 2
        issuedCertificates: []
        completionPercentage: 100
        courseName: Test-auto-certificate-8thjuly
        certificates:
          - id: fe2aadc6-5065-460a-98ed-4de17bc13f62
            lastIssuedOn: 2020-07-22T12:57:44.335Z
            name: Course completion certificate prad
            token: A8T4Q7
            url: >-
              https://dev.sunbirded.org/certs/ORG_001_01305961938705612812/eedc6a60-cc1a-11ea-bff5-c98df349f522.pdf
        completedOn: 1595422613486
        leafNodesCount: 1
        progress: 1
        lastReadContentId: do_11305605610466508811
        courseId: do_11305961646828748812224
        collectionId: do_11305961646828748812224
        status: 2
    courseenrolmentapiContent:
      title: Content
      required:
        - ownershipType
        - copyright
        - channel
        - downloadUrl
        - organisation
        - language
        - mimeType
        - variants
        - leafNodes
        - c_sunbird_dev_private_batch_count
        - objectType
        - appIcon
        - children
        - primaryCategory
        - appId
        - contentEncoding
        - lockKey
        - totalCompressedSize
        - mimeTypesCount
        - contentType
        - trackable
        - identifier
        - lastUpdatedBy
        - audience
        - visibility
        - toc_url
        - contentTypesCount
        - consumerId
        - childNodes
        - mediaType
        - osId
        - graph_id
        - nodeType
        - lastPublishedBy
        - version
        - license
        - prevState
        - size
        - lastPublishedOn
        - IL_FUNC_OBJECT_TYPE
        - name
        - status
        - code
        - credentials
        - prevStatus
        - description
        - idealScreenSize
        - posterImage
        - createdOn
        - reservedDialcodes
        - batches
        - copyrightYear
        - contentDisposition
        - lastUpdatedOn
        - licenseterms
        - SYS_INTERNAL_LAST_UPDATED_ON
        - dialcodeRequired
        - createdFor
        - lastStatusChangedOn
        - creator
        - IL_SYS_NODE_TYPE
        - os
        - pkgVersion
        - versionKey
        - idealScreenDensity
        - framework
        - depth
        - s3Key
        - dialcodes
        - createdBy
        - compatibilityLevel
        - leafNodesCount
        - IL_UNIQUE_ID
        - resourceType
        - node_id
        - c_sunbird_dev_open_batch_count
      type: object
      properties:
        ownershipType:
          type: array
          items:
            type: string
          description: ''
        copyright:
          type: string
        channel:
          type: string
        downloadUrl:
          type: string
        organisation:
          type: array
          items:
            type: string
          description: ''
        language:
          type: array
          items:
            type: string
          description: ''
        mimeType:
          type: string
        variants:
          $ref: '#/components/schemas/courseenrolmentapiVariants'
        leafNodes:
          type: array
          items:
            type: string
          description: ''
        c_sunbird_dev_private_batch_count:
          type: integer
          format: int32
        objectType:
          type: string
        appIcon:
          type: string
        children:
          type: array
          items:
            type: string
          description: ''
        primaryCategory:
          type: string
        appId:
          type: string
        contentEncoding:
          type: string
        lockKey:
          type: string
        totalCompressedSize:
          type: integer
          format: int32
        mimeTypesCount:
          type: string
        contentType:
          type: string
        trackable:
          $ref: '#/components/schemas/courseenrolmentapiTrackable'
        identifier:
          type: string
        lastUpdatedBy:
          type: string
        audience:
          type: array
          items:
            type: string
          description: ''
        visibility:
          type: string
        toc_url:
          type: string
        contentTypesCount:
          type: string
        consumerId:
          type: string
        childNodes:
          type: array
          items:
            type: string
          description: ''
        mediaType:
          type: string
        osId:
          type: string
        graph_id:
          type: string
        nodeType:
          type: string
        lastPublishedBy:
          type: string
        version:
          type: integer
          format: int32
        license:
          type: string
        prevState:
          type: string
        size:
          type: integer
          format: int32
        lastPublishedOn:
          type: string
        IL_FUNC_OBJECT_TYPE:
          type: string
        name:
          type: string
        status:
          type: string
        code:
          type: string
        credentials:
          $ref: '#/components/schemas/courseenrolmentapiCredentials'
        prevStatus:
          type: string
        description:
          type: string
        idealScreenSize:
          type: string
        posterImage:
          type: string
        createdOn:
          type: string
        reservedDialcodes:
          type: string
        batches:
          type: array
          items:
            $ref: '#/components/schemas/courseenrolmentapiBatch'
          description: ''
        copyrightYear:
          type: integer
          format: int32
        contentDisposition:
          type: string
        lastUpdatedOn:
          type: string
        licenseterms:
          type: string
        SYS_INTERNAL_LAST_UPDATED_ON:
          type: string
        dialcodeRequired:
          type: string
        createdFor:
          type: array
          items:
            type: string
          description: ''
        lastStatusChangedOn:
          type: string
        creator:
          type: string
        IL_SYS_NODE_TYPE:
          type: string
        os:
          type: array
          items:
            type: string
          description: ''
        pkgVersion:
          type: integer
          format: int32
        versionKey:
          type: string
        idealScreenDensity:
          type: string
        framework:
          type: string
        depth:
          type: integer
          format: int32
        s3Key:
          type: string
        dialcodes:
          type: array
          items:
            type: string
          description: ''
        createdBy:
          type: string
        compatibilityLevel:
          type: integer
          format: int32
        leafNodesCount:
          type: integer
          format: int32
        IL_UNIQUE_ID:
          type: string
        resourceType:
          type: string
        node_id:
          type: integer
          format: int32
        c_sunbird_dev_open_batch_count:
          type: integer
          format: int32
      example:
        ownershipType:
          - createdBy
        copyright: Sunbird
        channel: b00bc992ef25f1a9a8d63291e20efc8d
        downloadUrl: >-
          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
        organisation:
          - Sunbird
        language:
          - English
        mimeType: application/vnd.ekstep.content-collection
        variants:
          online:
            ecarUrl: >-
              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511612_do_11305961646828748812224_1.0_online.ecar
            size: 4936
          spine:
            ecarUrl: >-
              https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
            size: 76289
        leafNodes:
          - do_11305605610466508811
        c_sunbird_dev_private_batch_count: 0
        objectType: Content
        appIcon: >-
          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11305961646828748812224/artifact/06_maths_book_1566813333849_1580197829074.thumb.jpg
        children:
          - do_11305605610466508811
        primaryCategory: Course
        appId: dev.sunbird.portal
        contentEncoding: gzip
        lockKey: 097e65a0-9c65-4198-b65c-269de9ae6072
        totalCompressedSize: 499149
        mimeTypesCount: >-
          {"application/vnd.ekstep.content-collection":1,"application/vnd.ekstep.ecml-archive":1}
        contentType: Course
        trackable:
          enabled: 'Yes'
          autoBatch: 'Yes'
        identifier: do_11305961646828748812224
        lastUpdatedBy: 8454cb21-3ce9-4e30-85b5-fade097880d8
        audience:
          - Teacher
        visibility: Default
        toc_url: >-
          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11305961646828748812224/artifact/do_11305961646828748812224_toc.json
        contentTypesCount: '{"CourseUnit":1,"Resource":1}'
        consumerId: 6533af82-f38b-429a-bcfb-681ed02a62e3
        childNodes:
          - do_11305961679918694412225
          - do_11305605610466508811
        mediaType: content
        osId: org.ekstep.quiz.app
        graph_id: domain
        nodeType: DATA_NODE
        lastPublishedBy: Ekstep
        version: 2
        license: CC BY 4.0
        prevState: Draft
        size: 76289
        lastPublishedOn: 2020-07-08T06:58:31.132Z
        IL_FUNC_OBJECT_TYPE: Content
        name: Test-auto-certificate-8thjuly
        status: Live
        code: org.sunbird.DuGnxI
        credentials:
          enabled: 'Yes'
        prevStatus: Processing
        description: Enter description for Course
        idealScreenSize: normal
        posterImage: >-
          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/content/do_11294498061374259215/artifact/06_maths_book_1566813333849_1580197829074.jpg
        createdOn: 2020-07-08T06:57:43.417Z
        reservedDialcodes: '{"U6K9M6":0}'
        batches:
          - createdFor:
              - ORG_001
            endDate: null
            name: Test-auto-certificate-8thjuly
            batchId: 01305961938705612812
            enrollmentType: open
            enrollmentEndDate: null
            startDate: 2020-07-08T00:00:00.000Z
            status: 1
          - createdFor:
              - ORG_001
            endDate: null
            name: Test-auto-certificate-8thjuly
            batchId: 01306956038530662417
            enrollmentType: open
            enrollmentEndDate: null
            startDate: 2020-07-22T00:00:00.000Z
            status: 1
        copyrightYear: 2020
        contentDisposition: inline
        lastUpdatedOn: 2020-07-08T06:58:30.585Z
        licenseterms: >-
          By creating and uploading content on DIKSHA, you consent to publishing
          this content under the Creative Commons Framework, specifically under
          the CC-BY-SA 4.0 license.
        SYS_INTERNAL_LAST_UPDATED_ON: 2020-07-23T12:24:29.500Z
        dialcodeRequired: 'No'
        createdFor:
          - ORG_001
        lastStatusChangedOn: 2020-07-08T06:58:31.950Z
        creator: Mentor First User
        IL_SYS_NODE_TYPE: DATA_NODE
        os:
          - All
        pkgVersion: 1
        versionKey: 1594191510585
        idealScreenDensity: hdpi
        framework: TPD
        depth: 0
        s3Key: >-
          ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
        dialcodes:
          - U6K9M6
        createdBy: 8454cb21-3ce9-4e30-85b5-fade097880d8
        compatibilityLevel: 4
        leafNodesCount: 1
        IL_UNIQUE_ID: do_11305961646828748812224
        resourceType: Course
        node_id: 452442
        c_sunbird_dev_open_batch_count: 2
    courseenrolmentapiVariants:
      title: Variants
      required:
        - online
        - spine
      type: object
      properties:
        online:
          $ref: '#/components/schemas/courseenrolmentapiOnline'
        spine:
          $ref: '#/components/schemas/courseenrolmentapiSpine'
      example:
        online:
          ecarUrl: >-
            https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511612_do_11305961646828748812224_1.0_online.ecar
          size: 4936
        spine:
          ecarUrl: >-
            https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
          size: 76289
    courseenrolmentapiOnline:
      title: Online
      required:
        - ecarUrl
        - size
      type: object
      properties:
        ecarUrl:
          type: string
        size:
          type: integer
          format: int32
      example:
        ecarUrl: >-
          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511612_do_11305961646828748812224_1.0_online.ecar
        size: 4936
    courseenrolmentapiSpine:
      title: Spine
      required:
        - ecarUrl
        - size
      type: object
      properties:
        ecarUrl:
          type: string
        size:
          type: integer
          format: int32
      example:
        ecarUrl: >-
          https://sunbirddev.blob.core.windows.net/sunbird-content-dev/ecar_files/do_11305961646828748812224/test-auto-certificate-8thjuly_1594191511275_do_11305961646828748812224_1.0_spine.ecar
        size: 76289
    courseenrolmentapiTrackable:
      title: Trackable
      required:
        - enabled
        - autoBatch
      type: object
      properties:
        enabled:
          type: string
        autoBatch:
          type: string
      example:
        enabled: 'Yes'
        autoBatch: 'Yes'
    courseenrolmentapiCredentials:
      title: Credentials
      required:
        - enabled
      type: object
      properties:
        enabled:
          type: string
      example:
        enabled: 'Yes'
    courseenrolmentapiBatch:
      title: Batch
      required:
        - createdFor
        - endDate
        - name
        - batchId
        - enrollmentType
        - enrollmentEndDate
        - startDate
        - status
      type: object
      properties:
        createdFor:
          type: array
          items:
            type: string
          description: ''
        endDate:
          type: string
          nullable: true
        name:
          type: string
        batchId:
          type: string
        enrollmentType:
          type: string
        enrollmentEndDate:
          type: string
          nullable: true
        startDate:
          type: string
        status:
          type: integer
          format: int32
      example:
        createdFor:
          - ORG_001
        endDate: null
        name: Test-auto-certificate-8thjuly
        batchId: 01305961938705612812
        enrollmentType: open
        enrollmentEndDate: null
        startDate: 2020-07-08T00:00:00.000Z
        status: 1
    courseenrolmentapiContentStatus:
      title: ContentStatus
      required:
        - do_11305605610466508811
      type: object
      properties:
        do_11305605610466508811:
          type: integer
          format: int32
      example:
        do_11305605610466508811: 2
    courseenrolmentapiCertificate:
      title: Certificate
      required:
        - id
        - lastIssuedOn
        - name
        - token
        - url
      type: object
      properties:
        id:
          type: string
        lastIssuedOn:
          type: string
        name:
          type: string
        token:
          type: string
        url:
          type: string
      example:
        id: fe2aadc6-5065-460a-98ed-4de17bc13f62
        lastIssuedOn: 2020-07-22T12:57:44.335Z
        name: Course completion certificate prad
        token: A8T4Q7
        url: >-
          https://dev.sunbirded.org/certs/ORG_001_01305961938705612812/eedc6a60-cc1a-11ea-bff5-c98df349f522.pdf
    courseenrolmentapiUserEnrolmentList-500InternalServerError:
      title: UserEnrolmentList-500InternalServerError
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/courseenrolmentapiParams1'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.user.courses.list
        ver: v1
        ts: '2020-11-23 15:15:18:331+0000'
        params:
          resmsgid: null
          msgid: null
          err: INTERNAL_ERROR
          status: SERVER_ERROR
          errmsg: 'Process failed,please try again later.'
        responseCode: SERVER_ERROR
        result: {}
    courseenrolmentapiCourseBatchUserAddRequest:
      title: CourseBatchUserAddRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/courseenrolmentapiRequest2'
      example:
        request:
          userIds:
            - '{{user-id}}'
    courseenrolmentapiRequest2:
      title: Request2
      required:
        - userIds
      type: object
      properties:
        userIds:
          type: array
          items:
            type: string
          description: Unique identifiers of users to add into batch
      example:
        userIds:
          - '{{user-id}}'
    courseenrolmentapiCourseBatchUserAdd-Success:
      title: CourseBatchUserAdd-Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/courseenrolmentapiParams4'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/courseenrolmentapiResult3'
      example:
        id: api.course.batch.users.add
        ver: v1
        ts: '2020-12-03 11:19:10:707+0000'
        params:
          resmsgid: null
          msgid: 3d661d21-b09f-42e2-beb1-46a86c94bd9b
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          95e4942d-cbe8-477d-aebd-ad8e6de4bfc8: SUCCESS
    courseenrolmentapiResult3:
      title: Result3
      required:
        - 95e4942d-cbe8-477d-aebd-ad8e6de4bfc8
      type: object
      properties:
        95e4942d-cbe8-477d-aebd-ad8e6de4bfc8:
          type: string
      example:
        95e4942d-cbe8-477d-aebd-ad8e6de4bfc8: SUCCESS
    courseenrolmentapiCourseBatchUserRemoveRequest:
      title: CourseBatchUserRemoveRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/courseenrolmentapiRequest2'
      example:
        request:
          userIds:
            - '{{user-id}}'
    courseenrolmentapiCourseBatchUserRemove-Usernotenrolled:
      title: CourseBatchUserRemove-Usernotenrolled
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/courseenrolmentapiParams4'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/courseenrolmentapiResult3'
      example:
        id: api.course.batch.users.remove
        ver: v1
        ts: '2020-12-03 11:17:37:055+0000'
        params:
          resmsgid: null
          msgid: 1ffc170a-68cd-4ea9-9611-fa3e03f6b236
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          95e4942d-cbe8-477d-aebd-ad8e6de4bfc8: User is not enrolled to given course batch.
    courseenrolmentapiCourseBatchUserRemove-Enrollmenttypevalidation:
      title: CourseBatchUserRemove-Enrollmenttypevalidation
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/courseenrolmentapiParams'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.course.batch.users.remove
        ver: v1
        ts: '2020-12-03 10:34:42:159+0000'
        params:
          resmsgid: null
          msgid: bf9f2229-1dba-4fef-a3e3-db58b6cd671d
          err: ENROLLMENT_TYPE_VALIDATION
          status: ENROLLMENT_TYPE_VALIDATION
          errmsg: Enrollment type should be invite-only.
        responseCode: CLIENT_ERROR
        result: {}
    courseenrolmentapiCourseBatchUserRemove-500InternalServerError:
      title: CourseBatchUserRemove-500InternalServerError
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/courseenrolmentapiParams4'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.course.batch.users.remove
        ver: v1
        ts: '2020-12-03 10:35:48:996+0000'
        params:
          resmsgid: null
          msgid: 143d06a4-2a13-4b38-84eb-87ae13a0b1c1
          err: null
          status: SERVER_ERROR
          errmsg: null
        responseCode: SERVER_ERROR
        result: {}
    deviceapiRegisterDeviceRequest:
      title: register device request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/deviceapiRequest'
    deviceapiRequest:
      title: Request
      required:
        - userId
      type: object
      properties:
        deviceapidspec:
          $ref: '#/components/schemas/deviceapidspec'
        userDeclaredLocation:
          $ref: '#/components/schemas/deviceapilocationObject'
    deviceapidspec:
      title: This represents the device specification details
      type: object
      properties:
        os:
          type: string
          description: Device os data
          example: Android 6.0
        cpu:
          type: string
          description: Device cpu info
          example: 'abi: armeabi-v7a  ARMv7 Processor rev 4 (v7l) '
        scrn:
          type: number
          description: Device screen data
          example: 5
        sims:
          type: number
          description: Sim details of device
          example: -1
        id:
          type: string
          description: This is device unique ID
          example: 2d994b152d314aca
        camera:
          type: string
          description: This is device camera info
          example: '9.0,5.0'
        make:
          type: string
          description: This is device make data
          example: Motorola XT1706
        edisk:
          type: number
          description: This is device external disk info
          example: 11
        idisk:
          type: number
          description: This is device internal disk info
          example: 11
        mem:
          type: number
          description: This is device memory info
          example: -1
    deviceapilocationObject:
      title: userDeclaredLocation
      required:
        - state
      type: object
      properties:
        state:
          type: string
          description: This is user decalred state value
          example: Karnataka
        district:
          type: string
          description: This is user decalred district value
          example: BENGALURU URBAN SOUTH
    deviceapiDeviceRegisterResponse:
      title: This is the response body when a device register API is called
      allOf:
        - $ref: '#/components/schemas/deviceapiApiResponse'
        - $ref: '#/components/schemas/deviceapiRegisterResponseResult'
    deviceapiRegisterResponseResult:
      title: Device Register message
      type: object
      properties:
        result:
          type: object
          properties:
            message:
              type: string
              description: This is device registeration message
              example: Device registered successfully
    deviceapiDeviceProfileResponse:
      title: This is the response body when a device register API is called
      allOf:
        - $ref: '#/components/schemas/deviceapiApiResponse'
        - $ref: '#/components/schemas/deviceapiProfileResponseResult'
    deviceapiProfileResponseResult:
      title: Device Profile response
      type: object
      properties:
        result:
          type: object
          properties:
            userDeclaredLocation:
              type: object
              allOf:
                - $ref: '#/components/schemas/deviceapilocationObject'
            ipLocation:
              type: object
              allOf:
                - $ref: '#/components/schemas/deviceapilocationObject'
    deviceapiApiRequest:
      type: object
      properties:
        id:
          type: string
          description: Represents an API uniquely
        ver:
          type: string
          description: Represents the version of the API which was used
        ts:
          type: integer
          description: >-
            Represents the timestamp(UTC) in string. Ex:
            2020-11-27T08:50:55.365+00:00
        params:
          type: object
          properties:
            msgid:
              type: string
              description: Represents the unique ID of the message being sent
    deviceapiApiResponse:
      required:
        - ts
        - id
        - params
        - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ts:
          type: string
          description: >-
            Represents the timestamp(UTC) in string. Ex:
            2020-11-27T08:50:55.365+00:00
        params:
          required:
            - resmsgid
            - status
          type: object
          properties:
            resmsgid:
              type: string
              description: Represents the ID of the message sent
            status:
              type: string
              enum:
                - successful
                - failed
        responseCode:
          type: string
    reportsSearchReportsRequest:
      title: SearchReportsRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/reportsRequest'
      example:
        request:
          filters: {}
    reportsRequest:
      title: Request
      required:
        - filters
      type: object
      properties:
        filters:
          type: object
      example:
        filters: {}
    reportsInternalServerError:
      title: InternalServerError
      required:
        - result
        - id
        - ver
        - params
        - responseCode
      type: object
      properties:
        result:
          type: object
        id:
          type: string
        ver:
          type: string
        params:
          $ref: '#/components/schemas/reportsParams'
        responseCode:
          type: object
      example:
        result: {}
        id: string
        ver: string
        params:
          resmsgid: string
          msgid: string
          err: string
          status: string
          errmsg: string
        responseCode: {}
    reportsParams:
      title: Params
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: string
        msgid: string
        err: string
        status: string
        errmsg: string
    reportsSuccess:
      title: Success
      required:
        - id
        - ver
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        params:
          $ref: '#/components/schemas/reportsParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/reportsResult'
      example:
        id: api.report.list
        ver: 1.0.0
        params:
          resmsgid: string
          msgid: string
          status: string
          err: string
          errmsg: string
        responseCode: string
        result:
          reports:
            - reportid: string
              title: string
              description: string
              authorizedroles:
                - string
              status: string
              type: string
              reportaccessurl: string
              createdon: string
              updatedon: string
              createdby: string
              reportconfig:
                id: string
                label: string
                table:
                  - name: string
                    valuesExpr: string
                    columnsExpr: string
                title: string
                charts:
                  - colors:
                      - borderColor: string
                        backgroundColor: string
                    options:
                      title:
                        text: string
                        display: true
                        fontSize: 16
                      legend:
                        display: false
                      scales:
                        xAxes:
                          - scaleLabel:
                              display: true
                              labelString: string
                        yAxes:
                          - scaleLabel:
                              display: true
                              labelString: string
                      tooltips:
                        mode: string
                        intersect: false
                        bodySpacing: 5
                        titleSpacing: 5
                      responsive: true
                    datasets:
                      - label: string
                        dataExpr: string
                    chartType: string
                    labelsExpr: string
                dataSource: string
                description: string
                downloadUrl: string
              templateurl: string
              slug: string
              reportgenerateddate: string
              reportduration:
                enddate: string
                startdate: string
              tags:
                - string
              updatefrequency: string
              parameters:
                - string
              report_type: string
              children: []
          count: 1
    reportsResult:
      title: Result
      required:
        - reports
        - count
      type: object
      properties:
        reports:
          type: array
          items:
            $ref: '#/components/schemas/reportsReport'
          description: ''
        count:
          type: integer
          format: int32
      example:
        reports:
          - reportid: string
            title: string
            description: string
            authorizedroles:
              - string
            status: string
            type: string
            reportaccessurl: string
            createdon: string
            updatedon: string
            createdby: string
            reportconfig:
              id: string
              label: string
              table:
                - name: string
                  valuesExpr: string
                  columnsExpr: string
              title: string
              charts:
                - colors:
                    - borderColor: string
                      backgroundColor: string
                  options:
                    title:
                      text: string
                      display: true
                      fontSize: 16
                    legend:
                      display: false
                    scales:
                      xAxes:
                        - scaleLabel:
                            display: true
                            labelString: string
                      yAxes:
                        - scaleLabel:
                            display: true
                            labelString: string
                    tooltips:
                      mode: string
                      intersect: false
                      bodySpacing: 5
                      titleSpacing: 5
                    responsive: true
                  datasets:
                    - label: string
                      dataExpr: string
                  chartType: string
                  labelsExpr: string
              dataSource: string
              description: string
              downloadUrl: string
            templateurl: string
            slug: string
            reportgenerateddate: string
            reportduration:
              enddate: string
              startdate: string
            tags:
              - string
            updatefrequency: string
            parameters:
              - string
            report_type: string
            children: []
        count: 1
    reportsReport:
      title: Report
      required:
        - reportid
        - title
        - description
        - authorizedroles
        - status
        - type
        - reportaccessurl
        - createdon
        - updatedon
        - createdby
        - reportconfig
        - templateurl
        - slug
        - reportgenerateddate
        - reportduration
        - tags
        - updatefrequency
        - parameters
        - report_type
        - children
      type: object
      properties:
        reportid:
          type: string
        title:
          type: string
        description:
          type: string
        authorizedroles:
          type: array
          items:
            type: string
          description: ''
        status:
          type: string
        type:
          type: string
        reportaccessurl:
          type: string
        createdon:
          type: string
        updatedon:
          type: string
        createdby:
          type: string
        reportconfig:
          $ref: '#/components/schemas/reportsReportconfig'
        templateurl:
          type: string
        slug:
          type: string
        reportgenerateddate:
          type: string
        reportduration:
          $ref: '#/components/schemas/reportsReportduration'
        tags:
          type: array
          items:
            type: string
          description: ''
        updatefrequency:
          type: string
        parameters:
          type: array
          items:
            type: string
          description: ''
        report_type:
          type: string
        children:
          type: array
          items:
            type: string
          description: ''
      example:
        reportid: string
        title: string
        description: string
        authorizedroles:
          - string
        status: string
        type: string
        reportaccessurl: string
        createdon: string
        updatedon: string
        createdby: string
        reportconfig:
          id: string
          label: string
          table:
            - name: string
              valuesExpr: string
              columnsExpr: string
          title: string
          charts:
            - colors:
                - borderColor: string
                  backgroundColor: string
              options:
                title:
                  text: string
                  display: true
                  fontSize: 16
                legend:
                  display: false
                scales:
                  xAxes:
                    - scaleLabel:
                        display: true
                        labelString: string
                  yAxes:
                    - scaleLabel:
                        display: true
                        labelString: string
                tooltips:
                  mode: string
                  intersect: false
                  bodySpacing: 5
                  titleSpacing: 5
                responsive: true
              datasets:
                - label: string
                  dataExpr: string
              chartType: string
              labelsExpr: string
          dataSource: string
          description: string
          downloadUrl: string
        templateurl: string
        slug: string
        reportgenerateddate: string
        reportduration:
          enddate: string
          startdate: string
        tags:
          - string
        updatefrequency: string
        parameters:
          - string
        report_type: string
        children: []
    reportsReportconfig:
      title: Reportconfig
      required:
        - id
        - label
        - table
        - title
        - charts
        - dataSource
        - description
        - downloadUrl
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        table:
          type: array
          items:
            $ref: '#/components/schemas/reportsTable'
          description: ''
        title:
          type: string
        charts:
          type: array
          items:
            $ref: '#/components/schemas/reportsChart'
          description: ''
        dataSource:
          type: string
        description:
          type: string
        downloadUrl:
          type: string
      example:
        id: string
        label: string
        table:
          - name: string
            valuesExpr: string
            columnsExpr: string
        title: string
        charts:
          - colors:
              - borderColor: string
                backgroundColor: string
            options:
              title:
                text: string
                display: true
                fontSize: 16
              legend:
                display: false
              scales:
                xAxes:
                  - scaleLabel:
                      display: true
                      labelString: string
                yAxes:
                  - scaleLabel:
                      display: true
                      labelString: string
              tooltips:
                mode: string
                intersect: false
                bodySpacing: 5
                titleSpacing: 5
              responsive: true
            datasets:
              - label: string
                dataExpr: string
            chartType: string
            labelsExpr: string
        dataSource: string
        description: string
        downloadUrl: string
    reportsTable:
      title: Table
      required:
        - name
        - valuesExpr
        - columnsExpr
      type: object
      properties:
        name:
          type: string
        valuesExpr:
          type: string
        columnsExpr:
          type: string
      example:
        name: string
        valuesExpr: string
        columnsExpr: string
    reportsChart:
      title: Chart
      required:
        - colors
        - options
        - datasets
        - chartType
        - labelsExpr
      type: object
      properties:
        colors:
          type: array
          items:
            $ref: '#/components/schemas/reportsColor'
          description: ''
        options:
          $ref: '#/components/schemas/reportsOptions'
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/reportsDataset'
          description: ''
        chartType:
          type: string
        labelsExpr:
          type: string
      example:
        colors:
          - borderColor: string
            backgroundColor: string
        options:
          title:
            text: string
            display: true
            fontSize: 16
          legend:
            display: false
          scales:
            xAxes:
              - scaleLabel:
                  display: true
                  labelString: string
            yAxes:
              - scaleLabel:
                  display: true
                  labelString: string
          tooltips:
            mode: string
            intersect: false
            bodySpacing: 5
            titleSpacing: 5
          responsive: true
        datasets:
          - label: string
            dataExpr: string
        chartType: string
        labelsExpr: string
    reportsColor:
      title: Color
      required:
        - borderColor
        - backgroundColor
      type: object
      properties:
        borderColor:
          type: string
        backgroundColor:
          type: string
      example:
        borderColor: string
        backgroundColor: string
    reportsOptions:
      title: Options
      required:
        - title
        - legend
        - scales
        - tooltips
        - responsive
      type: object
      properties:
        title:
          $ref: '#/components/schemas/reportsTitle'
        legend:
          $ref: '#/components/schemas/reportsLegend'
        scales:
          $ref: '#/components/schemas/reportsScales'
        tooltips:
          $ref: '#/components/schemas/reportsTooltips'
        responsive:
          type: boolean
      example:
        title:
          text: string
          display: true
          fontSize: 16
        legend:
          display: false
        scales:
          xAxes:
            - scaleLabel:
                display: true
                labelString: string
          yAxes:
            - scaleLabel:
                display: true
                labelString: string
        tooltips:
          mode: string
          intersect: false
          bodySpacing: 5
          titleSpacing: 5
        responsive: true
    reportsTitle:
      title: Title
      required:
        - text
        - display
        - fontSize
      type: object
      properties:
        text:
          type: string
        display:
          type: boolean
        fontSize:
          type: integer
          format: int32
      example:
        text: string
        display: true
        fontSize: 16
    reportsLegend:
      title: Legend
      required:
        - display
      type: object
      properties:
        display:
          type: boolean
      example:
        display: false
    reportsScales:
      title: Scales
      required:
        - xAxes
        - yAxes
      type: object
      properties:
        xAxes:
          type: array
          items:
            $ref: '#/components/schemas/reportsXAxis'
          description: ''
        yAxes:
          type: array
          items:
            $ref: '#/components/schemas/reportsYAxis'
          description: ''
      example:
        xAxes:
          - scaleLabel:
              display: true
              labelString: string
        yAxes:
          - scaleLabel:
              display: true
              labelString: string
    reportsXAxis:
      title: XAxis
      required:
        - scaleLabel
      type: object
      properties:
        scaleLabel:
          $ref: '#/components/schemas/reportsScaleLabel'
      example:
        scaleLabel:
          display: true
          labelString: string
    reportsScaleLabel:
      title: ScaleLabel
      required:
        - display
        - labelString
      type: object
      properties:
        display:
          type: boolean
        labelString:
          type: string
      example:
        display: true
        labelString: string
    reportsYAxis:
      title: YAxis
      required:
        - scaleLabel
      type: object
      properties:
        scaleLabel:
          $ref: '#/components/schemas/reportsScaleLabel'
      example:
        scaleLabel:
          display: true
          labelString: string
    reportsTooltips:
      title: Tooltips
      required:
        - mode
        - intersect
        - bodySpacing
        - titleSpacing
      type: object
      properties:
        mode:
          type: string
        intersect:
          type: boolean
        bodySpacing:
          type: integer
          format: int32
        titleSpacing:
          type: integer
          format: int32
      example:
        mode: string
        intersect: false
        bodySpacing: 5
        titleSpacing: 5
    reportsDataset:
      title: Dataset
      required:
        - label
        - dataExpr
      type: object
      properties:
        label:
          type: string
        dataExpr:
          type: string
      example:
        label: string
        dataExpr: string
    reportsReportduration:
      title: Reportduration
      required:
        - enddate
        - startdate
      type: object
      properties:
        enddate:
          type: string
        startdate:
          type: string
      example:
        enddate: string
        startdate: string
    reportsParams2:
      title: Params2
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
        msgid:
          type: string
          nullable: true
        status:
          type: string
        err:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: string
        msgid: null
        status: failed
        err: string
        errmsg: string
    reportsNoReportFound:
      title: NoReportFound
      required:
        - id
        - ver
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        params:
          $ref: '#/components/schemas/reportsParams2'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.report.read
        ver: 1.0.0
        params:
          resmsgid: string
          msgid: null
          status: failed
          err: null
          errmsg: no report found
        responseCode: string
        result: {}
    reportsCreateReportRequest:
      title: CreateReportRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/reportsRequest1'
      example:
        request:
          report:
            title: string
            description: string
            authorizedroles:
              - string
            status: string
            type: string
            createdby: string
            reportconfig:
              id: string
              label: string
              table:
                valuesExpr: string
                columnsExpr: string
              title: string
              charts:
                - id: string
                  options:
                    title:
                      text: string
                      display: true
                      fontSize: 16
                    legend:
                      display: true
                    scales:
                      xAxes:
                        - scaleLabel:
                            display: true
                            labelString: string
                      yAxes:
                        - scaleLabel:
                            display: true
                            labelString: string
                    tooltips:
                      mode: string
                      intersect: false
                      bodySpacing: 5
                      titleSpacing: 5
                    responsive: true
                  datasets:
                    - label: string
                      dataExpr: string
                  chartType: string
                  labelsExpr: string
                  dataSource:
                    ids:
                      - string
                    commonDimension: string
              dataSource:
                - id: string
                  path: string
              description: string
              reportLevelDataSourceId: string
            slug: string
            reportgenerateddate: string
            reportduration:
              enddate: string
              startdate: Tstring
            tags:
              - string
            updatefrequency: string
    reportsRequest1:
      title: Request1
      required:
        - report
      type: object
      properties:
        report:
          $ref: '#/components/schemas/reportsReport2'
      example:
        report:
          title: string
          description: string
          authorizedroles:
            - string
          status: string
          type: string
          createdby: string
          reportconfig:
            id: string
            label: string
            table:
              valuesExpr: string
              columnsExpr: string
            title: string
            charts:
              - id: string
                options:
                  title:
                    text: string
                    display: true
                    fontSize: 16
                  legend:
                    display: true
                  scales:
                    xAxes:
                      - scaleLabel:
                          display: true
                          labelString: string
                    yAxes:
                      - scaleLabel:
                          display: true
                          labelString: string
                  tooltips:
                    mode: string
                    intersect: false
                    bodySpacing: 5
                    titleSpacing: 5
                  responsive: true
                datasets:
                  - label: string
                    dataExpr: string
                chartType: string
                labelsExpr: string
                dataSource:
                  ids:
                    - string
                  commonDimension: string
            dataSource:
              - id: string
                path: string
            description: string
            reportLevelDataSourceId: string
          slug: string
          reportgenerateddate: string
          reportduration:
            enddate: string
            startdate: Tstring
          tags:
            - string
          updatefrequency: string
    reportsReport2:
      title: Report2
      required:
        - title
        - description
        - authorizedroles
        - status
        - type
        - createdby
        - reportconfig
        - slug
        - reportgenerateddate
        - reportduration
        - tags
        - updatefrequency
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        authorizedroles:
          type: array
          items:
            type: string
          description: ''
        status:
          type: string
        type:
          type: string
        createdby:
          type: string
        reportconfig:
          $ref: '#/components/schemas/reportsReportconfig2'
        slug:
          type: string
        reportgenerateddate:
          type: string
        reportduration:
          $ref: '#/components/schemas/reportsReportduration'
        tags:
          type: array
          items:
            type: string
          description: ''
        updatefrequency:
          type: string
      example:
        title: string
        description: string
        authorizedroles:
          - string
        status: string
        type: string
        createdby: string
        reportconfig:
          id: string
          label: string
          table:
            valuesExpr: string
            columnsExpr: string
          title: string
          charts:
            - id: string
              options:
                title:
                  text: string
                  display: true
                  fontSize: 16
                legend:
                  display: true
                scales:
                  xAxes:
                    - scaleLabel:
                        display: true
                        labelString: string
                  yAxes:
                    - scaleLabel:
                        display: true
                        labelString: string
                tooltips:
                  mode: string
                  intersect: false
                  bodySpacing: 5
                  titleSpacing: 5
                responsive: true
              datasets:
                - label: string
                  dataExpr: string
              chartType: string
              labelsExpr: string
              dataSource:
                ids:
                  - string
                commonDimension: string
          dataSource:
            - id: string
              path: string
          description: string
          reportLevelDataSourceId: string
        slug: string
        reportgenerateddate: string
        reportduration:
          enddate: string
          startdate: Tstring
        tags:
          - string
        updatefrequency: string
    reportsReportconfig2:
      title: Reportconfig2
      required:
        - id
        - label
        - table
        - title
        - charts
        - dataSource
        - description
        - reportLevelDataSourceId
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        table:
          $ref: '#/components/schemas/reportsTable2'
        title:
          type: string
        charts:
          type: array
          items:
            $ref: '#/components/schemas/reportsChart2'
          description: ''
        dataSource:
          type: array
          items:
            $ref: '#/components/schemas/reportsDataSource1'
          description: ''
        description:
          type: string
        reportLevelDataSourceId:
          type: string
      example:
        id: string
        label: string
        table:
          valuesExpr: string
          columnsExpr: string
        title: string
        charts:
          - id: string
            options:
              title:
                text: string
                display: true
                fontSize: 16
              legend:
                display: true
              scales:
                xAxes:
                  - scaleLabel:
                      display: true
                      labelString: string
                yAxes:
                  - scaleLabel:
                      display: true
                      labelString: string
              tooltips:
                mode: string
                intersect: false
                bodySpacing: 5
                titleSpacing: 5
              responsive: true
            datasets:
              - label: string
                dataExpr: string
            chartType: string
            labelsExpr: string
            dataSource:
              ids:
                - string
              commonDimension: string
        dataSource:
          - id: string
            path: string
        description: string
        reportLevelDataSourceId: string
    reportsTable2:
      title: Table2
      required:
        - valuesExpr
        - columnsExpr
      type: object
      properties:
        valuesExpr:
          type: string
        columnsExpr:
          type: string
      example:
        valuesExpr: string
        columnsExpr: string
    reportsChart2:
      title: Chart2
      required:
        - id
        - options
        - datasets
        - chartType
        - labelsExpr
        - dataSource
      type: object
      properties:
        id:
          type: string
        options:
          $ref: '#/components/schemas/reportsOptions'
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/reportsDataset'
          description: ''
        chartType:
          type: string
        labelsExpr:
          type: string
        dataSource:
          $ref: '#/components/schemas/reportsDataSource'
      example:
        id: string
        options:
          title:
            text: string
            display: true
            fontSize: 16
          legend:
            display: true
          scales:
            xAxes:
              - scaleLabel:
                  display: true
                  labelString: string
            yAxes:
              - scaleLabel:
                  display: true
                  labelString: string
          tooltips:
            mode: string
            intersect: false
            bodySpacing: 5
            titleSpacing: 5
          responsive: true
        datasets:
          - label: string
            dataExpr: string
        chartType: string
        labelsExpr: string
        dataSource:
          ids:
            - string
          commonDimension: string
    reportsDataSource:
      title: DataSource
      required:
        - ids
        - commonDimension
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
          description: ''
        commonDimension:
          type: string
      example:
        ids:
          - string
        commonDimension: string
    reportsDataSource1:
      title: DataSource1
      required:
        - id
        - path
      type: object
      properties:
        id:
          type: string
        path:
          type: string
      example:
        id: string
        path: string
    reportsSuccess2:
      title: Success2
      required:
        - id
        - ver
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        params:
          $ref: '#/components/schemas/reportsParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/reportsResult2'
      example:
        id: api.report.create
        ver: string
        params:
          resmsgid: string
          msgid: string
          status: string
          err: string
          errmsg: string
        responseCode: string
        result:
          reportId: string
          reportaccessurl: string
    reportsResult2:
      title: Result2
      required:
        - reportId
        - reportaccessurl
      type: object
      properties:
        reportId:
          type: string
        reportaccessurl:
          type: string
      example:
        reportId: string
        reportaccessurl: string
    reportsNoReportFound1:
      title: NoReportFound1
      required:
        - id
        - ver
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        params:
          $ref: '#/components/schemas/reportsParams'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.report.delete
        ver: 1.0.0
        params:
          resmsgid: string
          msgid: string
          status: string
          err: null
          errmsg: no report found
        responseCode: string
        result: {}
    reportsSuccess3:
      title: Success3
      required:
        - id
        - ver
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        params:
          $ref: '#/components/schemas/reportsParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/reportsResult3'
      example:
        id: api.report.delete
        ver: 1.0.0
        params:
          resmsgid: string
          msgid: string
          status: string
          err: string
          errmsg: string
        responseCode: OK
        result:
          reportId: string
    reportsResult3:
      title: Result3
      required:
        - reportId
      type: object
      properties:
        reportId:
          type: string
      example:
        reportId: string
    reportsUpdateReportRequest:
      title: UpdateReportRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/reportsRequest2'
      example:
        request:
          report: {}
    reportsRequest2:
      title: Request2
      required:
        - report
      type: object
      properties:
        report:
          type: object
      example:
        report: {}
    reportslistsummariesrequest:
      title: listsummariesrequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/reportsRequest3'
      example:
        request:
          filters:
            reportid: string
    reportsRequest3:
      title: Request3
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/reportsFilters'
      example:
        filters:
          reportid: string
    reportsFilters:
      title: Filters
      required:
        - reportid
      type: object
      properties:
        reportid:
          type: string
      example:
        reportid: string
    reportsSuccess7:
      title: Success7
      required:
        - id
        - ver
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        params:
          $ref: '#/components/schemas/reportsParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/reportsResult7'
      example:
        id: api.report.summary.list
        ver: 1.0.0
        params:
          resmsgid: string
          msgid: string
          status: string
          err: string
          errmsg: string
        responseCode: string
        result:
          summaries: []
          count: 0
    reportsResult7:
      title: Result7
      required:
        - summaries
        - count
      type: object
      properties:
        summaries:
          type: array
          items:
            type: string
          description: ''
        count:
          type: integer
          format: int32
      example:
        summaries: []
        count: 0
    reportsCreateReportSummaryRequest:
      title: CreateReportSummaryRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/reportsRequest4'
      example:
        request:
          summary:
            reportid: string
            createdby: string
            summary: string
    reportsRequest4:
      title: Request4
      required:
        - summary
      type: object
      properties:
        summary:
          $ref: '#/components/schemas/reportsSummary'
      example:
        summary:
          reportid: string
          createdby: string
          summary: string
    reportsSummary:
      title: Summary
      required:
        - reportid
        - createdby
        - summary
      type: object
      properties:
        reportid:
          type: string
        createdby:
          type: string
        summary:
          type: string
      example:
        reportid: string
        createdby: string
        summary: string
    reportsSuccess8:
      title: Success8
      required:
        - id
        - ver
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        params:
          $ref: '#/components/schemas/reportsParams'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/reportsResult8'
      example:
        id: api.report.summary.create
        ver: 1.0.0
        params:
          resmsgid: string
          msgid: string
          status: string
          err: string
          errmsg: string
        responseCode: string
        result:
          summaryId: string
    reportsResult8:
      title: Result8
      required:
        - summaryId
      type: object
      properties:
        summaryId:
          type: string
      example:
        summaryId: string
    reportsCreateChartSummaryRequest:
      title: CreateChartSummaryRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/reportsRequest5'
      example:
        request:
          summary:
            reportid: string
            chartid: string
            createdby: string
            summary: string
    reportsRequest5:
      title: Request5
      required:
        - summary
      type: object
      properties:
        summary:
          $ref: '#/components/schemas/reportsSummary1'
      example:
        summary:
          reportid: string
          chartid: string
          createdby: string
          summary: string
    reportsSummary1:
      title: Summary1
      required:
        - reportid
        - chartid
        - createdby
        - summary
      type: object
      properties:
        reportid:
          type: string
        chartid:
          type: string
        createdby:
          type: string
        summary:
          type: string
      example:
        reportid: string
        chartid: string
        createdby: string
        summary: string
    chatbotapigenerateBotRequest:
      title: Request structure for bot response
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/chatbotapigenBotRequest'
      example:
        request:
          userId: 372175df-7f44-48df-8aa5-4t6228996b06s
          appId: prod.diksha.portal
          channel: 505c7c48ac6dc1edc9b08f21db5a571d
          from: 449c94833e1caa71aaadfe2567bea945
          context: null
          Body: '0'
    chatbotapigenBotRequest:
      title: Request
      required:
        - body
        - userId
      properties:
        userId:
          type: string
          description: Requested user ID
        body:
          type: string
          description: steps
    chatbotapiBotErrorResponse:
      title: Bot Error Response
      allOf:
        - $ref: '#/components/schemas/chatbotapiEmptyResult'
    chatbotapiEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    roleresponse:
      title: Response of role api
      type: object
      properties:
        result:
          type: object
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/roleRoleList'
    roleRoleresponse:
      description: Response of role api
      allOf:
        - $ref: '#/components/schemas/roleresponse'
        - $ref: '#/components/schemas/roleResponseHeader'
    roleResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/roleResponseParams'
        responseCode:
          type: object
          properties: {}
          description: 'API response code '
    roleResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    roleEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    roleRoleList:
      title: List of roles
      type: object
      properties:
        name:
          type: string
          description: name of roles
        id:
          type: string
          description: role identifier
        actionGroups:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              id:
                type: string
              actions:
                type: array
                items:
                  type: string
                  description: list of apis available for this role group
    roleContentCreateErrorResponse:
      title: Create Content Error Response
      allOf:
        - $ref: '#/components/schemas/roleEmptyResult'
        - $ref: '#/components/schemas/roleResponseHeader'
    clientlogapiParams:
      title: Params
      required:
        - resmsgid
        - err
        - status
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        err:
          type: string
        status:
          type: string
    clientlogapiErrorParams:
      title: ErrorParams
      required:
        - resmsgid
        - err
        - status
        - errorMsg
      type: object
      properties:
        resmsgid:
          type: string
        err:
          type: string
        status:
          type: string
        errorMsg:
          type: string
    clientlogapiClientLogRequest:
      title: ClientLogRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/clientlogapiClientLog-Request'
      example:
        request:
          context:
            did: D1234
            dspec:
              os: Android 8.0.0
              make: samsung
              mem: 0
              idisk: '53.3'
              edisk: '53.28'
              scrn: '5.8'
              camera: '13.0,8.0'
              cpu: armeabi-v7a processor
              sims: '-1.0'
              uaspec:
                agent: Mozilla
                ver: '5.0'
                system: Android
                platform: Mozilla/5.0
                raw: >-
                  Dalvik/2.1.0 (Linux; U; Android 10; SM-M205F
                  Build/QP1A.190711.020)
            extras:
              key1: value1
              key2: value2
          pdata:
            pid: player
            ver: '2.0'
            id: portal
          logs:
            - id: dfjdkfd
              ts: 15600045849
              log: Exception in thread
    clientlogapiClientLog-Request:
      title: ClientLog-Request
      required:
        - pdata
        - context
        - logs
      type: object
      properties:
        pdata:
          $ref: '#/components/schemas/clientlogapiPdata'
        context:
          $ref: '#/components/schemas/clientlogapiContext'
        logs:
          type: array
          items:
            $ref: '#/components/schemas/clientlogapiLogs'
          description: logs
    clientlogapiPdata:
      title: Pdata
      required:
        - id
        - ver
        - pid
      properties:
        id:
          type: string
          description: Producer id
        ver:
          type: string
          description: Error Event version
        pid:
          type: string
      example:
        id: contentPlayer
        ver: '1.0'
        pid: sunbird.portal
    clientlogapiLogs:
      title: Logs
      required:
        - log
        - ts
      properties:
        id:
          type: string
          description: Unique id of log
        ts:
          type: number
          description: Log timestamp
        log:
          type: string
          description: Stacktrace of  client error
        appver:
          type: string
        pageid:
          type: string
      example:
        id: 13123-123123
        ts: '1560346371'
        log: Exception in thread \"main\" java.lang.NullPointerException
        appver: '1.0'
        pageid: player
    clientlogapiContext:
      title: Context
      required:
        - did
      properties:
        did:
          type: string
          description: Unique device identifier
        dspec:
          $ref: '#/components/schemas/clientlogapiDspec'
        extras:
          type: object
    clientlogapiDspec:
      title: Dspec
      properties:
        os:
          type: string
        make:
          type: string
        mem:
          type: integer
        idisk:
          type: string
        edisk:
          type: string
        scrn:
          type: string
        camera:
          type: string
        cpu:
          type: string
        sims:
          type: integer
        uaspec:
          $ref: '#/components/schemas/clientlogapiUaspec'
      example:
        os: mac
        make: Xiaomi Redmi Note 7 Pro
        mem: 2
        idisk: Andriod 10
        edisk: '50.49'
        scrn: '49.10'
        camera: '6.1'
        cpu: 'abi: arm64-v8a  AArch64 Processor rev 14 (aarch64)   '
        sims: 0
        uaspec: '#/components/schemas/Uaspec/example'
    clientlogapiUaspec:
      title: Uaspec
      properties:
        agent:
          type: string
        ver:
          type: string
        system:
          type: integer
        platform:
          type: string
        raw:
          type: string
      example:
        agent: Mozilla
        ver: '5.0'
        system: samsung
        platform: AppleWebKit/531.21.10
        raw: 'Mozilla/5.0 (X11 Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko)'
    clientlogapiClientLogAPI-SuccessReponse:
      title: ClientLogAPI-SuccessReponse
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/clientlogapiParams'
        responseCode:
          type: string
        result:
          type: object
          properties:
            message:
              type: string
      example:
        id: ekstep.analytics.client-log
        ver: v1
        ts: '2020-11-23 06:42:39:001+0000'
        params:
          resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
          status: successful
        responseCode: OK
        result:
          message: Log captured successfully!
    clientlogapiClientLog-FailedResponse:
      title: ClientLog-FailedResponse
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/clientlogapiErrorParams'
        responseCode:
          type: string
        result:
          type: string
      example:
        id: ekstep.analytics.client-log
        ver: v1
        ts: '2020-11-23 06:42:39:001+0000'
        params:
          resmsgid: 8c244093-e19d-4694-a4ba-342bc0f8b721
          status: failed
          err: CLIENT_ERROR
          errorMsg: pdata is missing!
        responseCode: CLIENT_ERROR
        result: null
    clientlogapiClientLog-InternalServerError:
      title: ClientLog-InternalServerError
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/clientlogapiErrorParams'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: ekstep.analytics.client-log
        ver: v1
        ts: '2020-11-23 15:15:18:331+0000'
        params:
          resmsgid: null
          msgid: null
          err: INTERNAL_ERROR
          status: SERVER_ERROR
          errmsg: 'Process failed,please try again later.'
        responseCode: SERVER_ERROR
        result: {}
    certificateGenerateCertificateRequest:
      title: Generate certificate request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/certificateRequest'
    certificateGenerateCertificateV2Request:
      title: SVG Generate certificate request
      required:
        - request
      type: object
      properties:
        request:
          title: Request
          required:
            - certificate
          type: object
          properties:
            certificate:
              $ref: '#/components/schemas/certificateCertificateV2'
    certificateRequest:
      title: Request
      required:
        - certificate
      type: object
      properties:
        certificate:
          $ref: '#/components/schemas/certificateCertificate'
    certificateCertificate:
      title: Certificate
      type: object
      required:
        - name
        - htmlTemplate
        - data
        - issuer
        - signatoryList
        - criteria
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/certificatecourseRecipientData'
        courseName:
          type: string
          description: name of the course
        name:
          type: string
          description: name of certificate
        description:
          type: string
          description: description of certificate
        logo:
          type: string
          description: certificate logo
        issuedDate:
          type: string
          description: certificate issue date
        videoURL:
          type: string
          description: url of video
        htmlTemplate:
          type: string
          description: url of html template
        tag:
          type: string
          description: ''
        issuer:
          $ref: '#/components/schemas/certificateissuerData'
        signatoryList:
          type: array
          items:
            $ref: '#/components/schemas/certificatesignatory'
        criteria:
          type: object
          required:
            - narrative
          properties:
            narrative:
              type: string
              description: What was the criteria for issuing this certificate
        keys:
          type: object
          required:
            - id
          properties:
            id:
              type: string
    certificateCertificateV2:
      title: Certificate
      type: object
      required:
        - name
        - svgTemplate
        - data
        - issuer
        - signatoryList
        - criteria
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/certificatecourseRecipientData'
        courseName:
          type: string
          description: name of the course
        name:
          type: string
          description: name of certificate
        description:
          type: string
          description: description of certificate
        logo:
          type: string
          description: certificate logo
        issuedDate:
          type: string
          description: certificate issue date
        videoURL:
          type: string
          description: url of video
        svgTemplate:
          type: string
          description: url of svg template
        tag:
          type: string
          description: ''
        issuer:
          $ref: '#/components/schemas/certificateissuerData'
        signatoryList:
          type: array
          items:
            $ref: '#/components/schemas/certificatesignatory'
        criteria:
          type: object
          required:
            - narrative
          properties:
            narrative:
              type: string
              description: What was the criteria for issuing this certificate
        keys:
          type: object
          required:
            - id
          properties:
            id:
              type: string
    certificatecourseRecipientData:
      title: Recipient data
      type: object
      required:
        - recipientName
      properties:
        recipientName:
          type: string
          description: name of certiticate recipient
        recipientEmail:
          type: string
          description: email of certificate recipient
        recipientPhone:
          type: string
          description: phone number of recipient
        recipientId:
          type: string
          description: identifier of recipient
        validFrom:
          type: string
          description: certificate valid from date default is today
        expiry:
          type: string
          description: certificate expiry date
        oldId:
          type: string
          description: 'old user id , required if u want to regenerate certificate'
    certificateissuerData:
      title: issuer data
      type: object
      required:
        - name
        - url
      properties:
        name:
          type: string
          description: name of issuer
        publicKey:
          type: array
          description: list of public key
          items:
            type: string
        url:
          type: string
          description: issuer valid url
    certificatesignatory:
      title: signatory data
      type: object
      required:
        - name
        - designation
        - id
      properties:
        name:
          type: string
          description: name of signatory
        designation:
          type: string
          description: designation of signatory
        id:
          type: string
          description: identifier
    certificateResultWithNodeId:
      title: certificate creation response
      type: object
      properties:
        result:
          type: object
          properties:
            response:
              type: array
              items:
                $ref: '#/components/schemas/certificatecertificateResponse'
    certificateContentCreateResponse:
      description: Certificate Response
      allOf:
        - $ref: '#/components/schemas/certificateResponseHeader'
        - $ref: '#/components/schemas/certificateResultWithNodeId'
    certificateCertificateGenerateV2Response:
      description: Certificate Response
      allOf:
        - $ref: '#/components/schemas/certificateResponseHeader'
        - $ref: '#/components/schemas/certificateResultWithNodeIdV2'
    certificateResponseHeader:
      title: Response
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/certificateResponseParams'
        responseCode:
          type: object
          properties: {}
          description: 'API response code '
    certificateResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Represents the response Message ID
        msgid:
          type: string
          description: Represents the error Message ID
        err:
          type: string
          description: Represents the Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    certificateEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties:
            message:
              type: string
          description: Empty Result
    certificatecertificateResponse:
      title: Response of certificate creation
      type: object
      properties:
        recipientId:
          type: string
          description: user id who got certificate
        accessCode:
          type: string
          description: code to access the certificate
        uuid:
          type: string
        jsonData:
          type: string
          description: raw data of certificate in json format
        pdfUrl:
          type: string
          description: certificate pdf in format
        jsonUrl:
          type: string
          description: certificate json url
    certificateResultWithNodeIdV2:
      title: certificate creation response
      type: object
      properties:
        result:
          type: object
          properties:
            response:
              type: array
              items:
                $ref: '#/components/schemas/certificatecertificateV2Response'
    certificatecertificateV2Response:
      title: Response of certificate creation
      type: object
      properties:
        recipientId:
          type: string
          description: user id who got certificate
        accessCode:
          type: string
          description: code to access the certificate
        uuid:
          type: string
        jsonData:
          type: string
          description: raw data of certificate in json format
        jsonUrl:
          type: string
          description: 'json Url , certificate is uploaded to cloud'
    certificateContentCreateErrorResponse:
      title: Create Content Error Response
      allOf:
        - $ref: '#/components/schemas/certificateEmptyResult'
        - $ref: '#/components/schemas/certificateResponseHeader'
    certificateApiRequest:
      type: object
      properties:
        id:
          type: string
          description: Represents an API uniquely
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since EPOCH
          format: int64
        params:
          type: object
          properties:
            msgid:
              type: string
              description: Represents the unique ID of the message being sent
            did:
              type: string
              description: Represents the device UUID from which API is called
    certificate500ServerError:
      title: 500ServerError
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          type: string
        responseCode:
          type: string
        result:
          type: object
          properties:
            message:
              type: string
    device-registryRequest:
      title: Registry Request
      required:
        - request
      type: object
      properties:
        request:
          title: RegistryObject
          required:
            - key
          type: object
          properties:
            key:
              type: string
              description: Device id
    device-registryGetTokenResponse:
      description: Get Token Response
      allOf:
        - $ref: '#/components/schemas/device-registryResponseHeader'
        - $ref: '#/components/schemas/device-registryResultWithToken'
    device-registryResultWithToken:
      title: Result Containing token
      type: object
      properties:
        result:
          $ref: '#/components/schemas/device-registryToken'
    device-registryToken:
      title: Token details
      type: object
      properties:
        key:
          type: string
          description: key
        secret:
          type: string
          description: secret
        token:
          type: string
          description: token
    device-registryResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: Represents the unique API Identifier
        ver:
          type: string
          description: Represents the API version information
        ets:
          type: number
          description: Represents the current time stamp
        params:
          $ref: '#/components/schemas/device-registryResponseParams'
    device-registryResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: ID represents the response uniquely
        msgid:
          type: string
          description: Represents the unique ID of the response message
        err:
          type: string
          description: Represents the Error Code in case the execution fails
        status:
          type: string
          description: Represents the Response status when an API is called
        errmsg:
          type: string
          description: Represents the text that is part of response status
    device-registryGetTokenErrorResponse:
      title: Get Token Error Response
      allOf:
        - $ref: '#/components/schemas/device-registryResponseParams'
        - $ref: '#/components/schemas/device-registryResponseHeader'
    app-updateRequest:
      title: App update Request
      type: object
      properties:
        request:
          title: UpdateObject
          type: object
          properties:
            appVersion:
              type: string
              description: Current desktop application version (Example- '1.3.0')
            os:
              type: string
              description: OS of the machine where the app is installed (Example- '64bit')
            arch:
              type: string
              description: >-
                Arch of the machine where the app is installed (Example-
                '64bit')
    app-updateGetUpdateResponse:
      description: Get Update Response
      allOf:
        - $ref: '#/components/schemas/app-updateResponseHeader'
        - $ref: '#/components/schemas/app-updateResultWithUpdateUrl'
    app-updateResultWithUpdateUrl:
      title: Result Containing update url
      type: object
      properties:
        result:
          $ref: '#/components/schemas/app-updateupdateURL'
    app-updateupdateURL:
      title: update url
      type: object
      properties:
        updateAvailable:
          type: boolean
          description: Key to check whether update is available or not
        version:
          type: string
          description: >-
            Key to get the current available version. This is only returned if
            'updateAvailable' key is true.
        url:
          type: string
          description: >-
            Key to get the update url. This is only returned if
            'updateAvailable' key is true.
    app-updateResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: Represents the unique API Identifier
        ver:
          type: string
          description: Represents the API version information
        ts:
          type: string
          description: Represents the current date and time
        params:
          $ref: '#/components/schemas/app-updateResponseParams'
    app-updateResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: ID represents the response uniquely
        msgid:
          type: string
          description: Represents the unique ID of the response message
        err:
          type: string
          description: Represents the Error Code in case the execution fails
        status:
          type: string
          description: Represents the Response status when an API is called
        errmsg:
          type: string
          description: Represents the text that is part of response status
    app-updateEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    app-updateGetUpdateErrorResponse:
      title: Get update url Error Response
      allOf:
        - $ref: '#/components/schemas/app-updateEmptyResult'
        - $ref: '#/components/schemas/app-updateResponseHeader'
    formapireadRequest:
      title: Form read API request object
      type: object
      properties:
        request:
          required:
            - action
            - framework
            - rootOrgId
            - subType
            - type
          type: object
          properties:
            type:
              type: string
            subType:
              type: string
            action:
              type: string
            framework:
              type: string
            rootOrgId:
              type: string
    formapiformReadRequest:
      title: The Read Form API request body
      allOf:
        - $ref: '#/components/schemas/formapiApiRequest'
        - $ref: '#/components/schemas/formapireadRequest'
    formapiformcreateRequest:
      title: The Create and Update form API request body
      allOf:
        - $ref: '#/components/schemas/formapiApiRequest'
        - $ref: '#/components/schemas/formapicreateRequest'
    formapicreateRequest:
      title: Represents the request object of Create and Update Form request object
      type: object
      properties:
        request:
          required:
            - action
            - data
            - framework
            - rootOrgId
            - subType
            - type
          type: object
          properties:
            type:
              type: string
            subType:
              type: string
            action:
              type: string
            framework:
              type: string
            rootOrgId:
              type: string
            data:
              $ref: '#/components/schemas/formapidataFields'
    formapireadResponse:
      title: The basic reponse object for read form
      allOf:
        - $ref: '#/components/schemas/formapiApiResponse'
        - $ref: '#/components/schemas/formapireadResult'
    formapicreateResponse:
      title: The response object for create and update form
      allOf:
        - $ref: '#/components/schemas/formapiApiResponse'
        - $ref: '#/components/schemas/formapicreateResult'
    formapireadResult:
      title: The response object of read(Reading result)
      type: object
      properties:
        result:
          type: object
          properties:
            form:
              type: object
              properties:
                type:
                  type: string
                subType:
                  type: string
                action:
                  type: string
                framework:
                  type: string
                rootOrgId:
                  type: string
                data:
                  $ref: '#/components/schemas/formapidataFields'
    formapicreateResult:
      title: The response object of create and update (Result)
      type: object
      properties:
        result:
          type: object
          properties:
            response:
              type: object
              properties:
                rootOrgId:
                  type: string
                key:
                  type: string
                status:
                  type: string
    formapiFailedResponseHeader:
      title: Failure Response
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the API
        ver:
          type: string
          description: The version information of the API
        ts:
          type: string
          description: ETA for API execution
        params:
          $ref: '#/components/schemas/formapiFailedResponseParams'
        responseCode:
          type: string
          description: It is the response code that comes on execution of API
        result:
          type: object
          properties:
            result:
              type: string
              description: result
    formapiFailedResponseParams:
      title: Failed Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Unique ID that represents the Response
        msgid:
          type: string
          description: Unique ID that represents a response message
        err:
          type: string
          description: Represents that error code if the request fails
        status:
          type: string
          description: Represents the response status after the exection of the API
        errmsg:
          type: string
          description: Represents the error message after the execution of the API
    formapidataFields:
      type: object
      properties:
        templateName:
          type: string
        action:
          type: string
        fields:
          type: array
          items:
            required:
              - code
              - dataType
              - editable
              - index
              - inputType
              - label
              - placeholder
              - required
              - visible
            type: object
            properties:
              code:
                type: string
                description: Unique code to identify a form field
              dataType:
                type: string
                description: DataType of the form field
              description:
                type: string
                description: Description about the form field
              editable:
                type: boolean
                description: Based on this value form will be render in editable mode
              inputType:
                type: string
                description: 'Type of field (text, select) etc.'
              label:
                type: string
                description: The display label of the field
              name:
                type: string
                description: Name of the field on the form
              index:
                type: integer
                description: The position of a field on any form depends on this value
              placeholder:
                type: string
                description: It defines the location at which the form field can be placed
              required:
                type: boolean
                description: It specifies that the form field is mandatory
              visible:
                type: boolean
                description: >-
                  Represents the visibility property that is used to set whether
                  a field should be visible or not
              renderingHints:
                type: object
                properties: {}
                description: Quick tips on the rendering of the form
    formapiApiRequest:
      type: object
      properties:
        id:
          type: string
          description: Represents an API uniquely
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since EPOCH
          format: int64
        params:
          type: object
          properties:
            msgid:
              type: string
              description: Represents the unique ID of the message being sent
            did:
              type: string
              description: Represents the device UUID from which API is called
    formapiApiResponse:
      required:
        - ets
        - id
        - params
        - ver
      type: object
      properties:
        id:
          type: string
          description: Represents the ID of the request which was made
        ver:
          type: string
          description: Represents the version of the API which was used
        ets:
          type: integer
          description: Represents the EPOCH (UTC) timestamp in milliseconds since EPOCH
          format: int64
        params:
          required:
            - msgid
            - resmsgid
            - status
          type: object
          properties:
            msgid:
              type: string
              description: Represents the ID of the message sent
            resmsgid:
              type: string
              description: Represents the ID of the response message
            status:
              type: string
              enum:
                - success
                - error
        responseCode:
          type: string
    notificationapiemailRequest:
      title: Request structure for sending email notification
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/notificationapiRequest'
      example:
        request:
          name: Amit
          subject: test email
          body: Hello Amit.
          downloadUrl: 'https://www.google.com/'
          recipientEmails:
            - amit.kumar@tarento.com
            - amit1.kumar@tarento.com
          mode: sms
          recipientPhones:
            - valid phone number without country code
          recipientUserIds:
            - valid userId
          recipentSearchQuery:
            filters:
              channel: nameof channel
              rootOrgId: rootOrgIds
              organisations.roles:
                - valid roles
    notificationapiRequest:
      title: Request
      required:
        - body
        - downloadUrl
        - recipientEmails
        - recipientUserIds
        - subject
      type: object
      properties:
        name:
          type: string
          description: Recipient name to whom mail is sending
        subject:
          type: string
          description: Subject of mail
        body:
          type: string
          description: Contents of mail body
        mode:
          type: object
          description: >-
            supported value is sms, apart from sms all other values will be
            ignore.if value is sms then it will notify user via sms, and body
            will become sms text
        downloadUrl:
          type: string
          description: Download link of content
        recipientEmails:
          type: array
          description: List of recipient mail ids
          items:
            type: string
        recipientPhones:
          type: array
          description: List of valid phone numbers without country code
          items:
            type: string
        recipientUserIds:
          type: array
          description: >-
            List of recipient user ids. With help of user ids system fetches
            user email to send mail.
          items:
            type: string
        recipientSearchQuery:
          type: object
          properties:
            filters:
              type: object
              properties: {}
          description: >-
            Filter query to find user based on some criteria, Example: send all
            users with particular rootOrgId and having certain roles. among
            recipientEmails,recipientUserIds,recipientSearchQuery any one is
            mandatory.
    notificationapiContentCreateResponse:
      description: Create Content Response
      allOf:
        - $ref: '#/components/schemas/notificationapiResultWithNodeId'
        - $ref: '#/components/schemas/notificationapiResponseHeader'
    notificationapiResultWithNodeId:
      title: Result Body
      type: object
      properties:
        result:
          $ref: '#/components/schemas/notificationapiSendNotificationMailResult'
    notificationapiResponseHeader:
      title: ResponseHeader
      type: object
      properties:
        id:
          type: string
          description: API Identifier
        ver:
          type: string
          description: API version information
        ts:
          type: string
          description: API execution timespan
        params:
          $ref: '#/components/schemas/notificationapiResponseParams'
        responseCode:
          type: object
          properties: {}
          description: 'API response code '
    notificationapiSendNotificationMailResult:
      title: Send Notification Result
      type: object
      properties:
        response:
          type: string
          description: >-
            SUCCESS in case mail send successfully otherwise user id with reason
            of mailsending fail .
    notificationapiResponseParams:
      title: Response Parameter
      type: object
      properties:
        resmsgid:
          type: string
          description: Response Message Id
        msgid:
          type: string
          description: Message Id
        err:
          type: string
          description: Error Code
        status:
          type: string
          description: Response Status
        errmsg:
          type: string
          description: Error Message
    notificationapiContentCreateErrorResponse:
      title: Create Content Error Response
      allOf:
        - $ref: '#/components/schemas/notificationapiEmptyResult'
        - $ref: '#/components/schemas/notificationapiResponseHeader'
    notificationapiEmptyResult:
      title: Empty Result
      type: object
      properties:
        result:
          type: object
          properties: {}
          description: Empty Result
    coursehierarchyapiParams:
      title: Params
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
          nullable: true
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
    coursehierarchyapiCoursegethierarchy-404NotFound:
      title: Coursegethierarchy-404NotFound
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/coursehierarchyapiParams1'
        responseCode:
          type: string
        result:
          type: object
    coursehierarchyapiParams1:
      title: Params1
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
        msgid:
          type: string
          nullable: true
        status:
          type: string
        err:
          type: string
        errmsg:
          type: string
    coursehierarchyapiCoursegethierarchy-Success:
      title: Coursegethierarchy-Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/coursehierarchyapiParams2'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/coursehierarchyapiResult'
    coursehierarchyapiParams2:
      title: Params2
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
        msgid:
          type: string
        status:
          type: string
        err:
          type: string
          nullable: true
        errmsg:
          type: string
          nullable: true
    coursehierarchyapiResult:
      title: Result
      required:
        - content
      type: object
      properties:
        content:
          $ref: '#/components/schemas/coursehierarchyapiContent'
    coursehierarchyapiContent:
      title: Content
      type: object
      properties:
        ownershipType:
          type: array
          items:
            type: string
          description: ''
        copyright:
          type: string
        keywords:
          type: array
          items:
            type: string
          description: ''
        channel:
          type: string
        downloadUrl:
          type: string
        organisation:
          type: array
          items:
            type: string
          description: ''
        language:
          type: array
          items:
            type: string
          description: ''
        mimeType:
          type: string
        variants:
          type: object
        leafNodes:
          type: array
          items:
            type: string
          description: ''
        c_sunbird_dev_private_batch_count:
          type: integer
          format: int32
        objectType:
          type: string
        appIcon:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/coursehierarchyapiChild'
          description: ''
        primaryCategory:
          type: string
        appId:
          type: string
        contentEncoding:
          type: string
        collaborators:
          type: array
          items:
            type: string
          description: ''
        lockKey:
          type: string
        totalCompressedSize:
          type: integer
          format: int32
        mimeTypesCount:
          type: string
        contentType:
          type: string
        contentCredits:
          type: array
          items:
            type: object
          description: List of objects
        trackable:
          $ref: '#/components/schemas/coursehierarchyapiTrackable'
        identifier:
          type: string
        lastUpdatedBy:
          type: string
        audience:
          type: array
          items:
            type: string
          description: ''
        toc_url:
          type: string
        visibility:
          type: string
        contentTypesCount:
          type: string
        consumerId:
          type: string
        childNodes:
          type: array
          items:
            type: string
          description: ''
        mediaType:
          type: string
        osId:
          type: string
        lastPublishedBy:
          type: string
        version:
          type: integer
          format: int32
        license:
          type: string
        prevState:
          type: string
        size:
          type: integer
          format: int32
        lastPublishedOn:
          type: string
        name:
          type: string
        status:
          type: string
        code:
          type: string
        credentials:
          $ref: '#/components/schemas/coursehierarchyapiCredentials'
        prevStatus:
          type: string
        description:
          type: string
        posterImage:
          type: string
        idealScreenSize:
          type: string
        createdOn:
          type: string
        batches:
          type: array
          items:
            $ref: '#/components/schemas/coursehierarchyapiBatch'
          description: ''
        copyrightYear:
          type: integer
          format: int32
        contentDisposition:
          type: string
        lastUpdatedOn:
          type: string
        SYS_INTERNAL_LAST_UPDATED_ON:
          type: string
        dialcodeRequired:
          type: string
        lastStatusChangedOn:
          type: string
        createdFor:
          type: array
          items:
            type: string
          description: ''
        creator:
          type: string
        os:
          type: array
          items:
            type: string
          description: ''
        pkgVersion:
          type: integer
          format: int32
        versionKey:
          type: string
        idealScreenDensity:
          type: string
        framework:
          type: string
        depth:
          type: integer
          format: int32
        s3Key:
          type: string
        createdBy:
          type: string
        compatibilityLevel:
          type: integer
          format: int32
        leafNodesCount:
          type: integer
          format: int32
        userConsent:
          type: string
        board:
          type: string
        resourceType:
          type: string
        c_sunbird_dev_open_batch_count:
          type: integer
          format: int32
    coursehierarchyapiChild:
      title: Child
      type: object
      description: Child Object metadata
    coursehierarchyapiCredentials:
      title: Credentials
      type: object
      properties:
        enabled:
          type: string
    coursehierarchyapiTrackable:
      title: Trackable
      type: object
      properties:
        enabled:
          type: string
        autoBatch:
          type: string
    coursehierarchyapiBatch:
      title: Batch
      type: object
      properties:
        createdFor:
          type: array
          items:
            type: string
          description: ''
        endDate:
          type: string
          nullable: true
        name:
          type: string
        batchId:
          type: string
        enrollmentType:
          type: string
        enrollmentEndDate:
          type: string
          nullable: true
        startDate:
          type: string
        status:
          type: integer
          format: int32
    coursehierarchyapiUpdateCourseHierarchyRequest:
      title: UpdateCourseHierarchyRequest
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/coursehierarchyapiRequest'
    coursehierarchyapiRequest:
      title: Request
      required:
        - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/coursehierarchyapiData'
    coursehierarchyapiData:
      title: Data
      required:
        - nodesModified
        - hierarchy
      type: object
      properties:
        nodesModified:
          $ref: '#/components/schemas/coursehierarchyapiNodesModified'
        hierarchy:
          $ref: '#/components/schemas/coursehierarchyapiHierarchy'
    coursehierarchyapiNodesModified:
      title: NodesModified
      type: object
      properties:
        coursehierarchyapidummy-id-1:
          $ref: '#/components/schemas/coursehierarchyapidummy-id-1'
        coursehierarchyapidummy-id-2:
          $ref: '#/components/schemas/coursehierarchyapidummy-id-2'
    coursehierarchyapidummy-id-1:
      title: dummy-id-1
      description: Dummy id
      required:
        - isNew
        - root
        - metadata
      type: object
      properties:
        isNew:
          type: boolean
        root:
          type: boolean
        metadata:
          $ref: '#/components/schemas/coursehierarchyapiMetadata'
    coursehierarchyapiMetadata:
      title: Metadata
      type: object
      properties:
        mimeType:
          type: string
        contentType:
          type: string
        code:
          type: string
        name:
          type: string
        description:
          type: string
        primaryCategory:
          type: string
        additionalCategories:
          type: array
          items:
            type: string
          description: ''
    coursehierarchyapidummy-id-2:
      title: dummy-id-2
      description: Dummy id
      required:
        - isNew
        - root
        - metadata
      type: object
      properties:
        isNew:
          type: boolean
        root:
          type: boolean
        metadata:
          $ref: '#/components/schemas/coursehierarchyapiMetadata'
    coursehierarchyapiHierarchy:
      title: Hierarchy
      type: object
      properties:
        coursehierarchyapiroot-id:
          $ref: '#/components/schemas/coursehierarchyapiroot-id'
        coursehierarchyapidummy-id-1:
          $ref: '#/components/schemas/coursehierarchyapidummy-id-1-hierarchy'
    coursehierarchyapiroot-id:
      title: root-id
      required:
        - root
      type: object
      properties:
        children:
          type: array
          items:
            type: string
          description: ''
        root:
          type: boolean
    coursehierarchyapidummy-id-1-hierarchy:
      title: dummy-id-1-hierarchy
      required:
        - root
      type: object
      properties:
        children:
          type: array
          items:
            type: string
          description: ''
        root:
          type: boolean
    coursehierarchyapiUpdateCourseHierarchy-500InternalServerError:
      title: UpdateCourseHierarchy-500InternalServerError
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/coursehierarchyapiParams'
        responseCode:
          type: string
        result:
          type: object
    coursehierarchyapiUpdateCourseHierarchy-success:
      title: UpdateCourseHierarchy-success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/coursehierarchyapiParams4'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/coursehierarchyapiResult1'
    coursehierarchyapiParams4:
      title: Params4
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
        msgid:
          type: string
          nullable: true
        err:
          type: string
          nullable: true
        status:
          type: string
        errmsg:
          type: string
          nullable: true
    coursehierarchyapiResult1:
      title: Result1
      required:
        - content_id
        - identifiers
      type: object
      properties:
        content_id:
          type: string
        identifiers:
          $ref: '#/components/schemas/coursehierarchyapiIdentifiers'
    coursehierarchyapiIdentifiers:
      title: Identifiers
      required:
        - b9a50833-eff6-4ef5-a2a4-2413f2d51f6c
        - b9a50833-eff6-4ef5-a2a4-2413f2d51f6d
      type: object
      properties:
        b9a50833-eff6-4ef5-a2a4-2413f2d51f6c:
          type: string
        b9a50833-eff6-4ef5-a2a4-2413f2d51f6d:
          type: string
    coursehierarchyapiUpdateCourseHierarchy-404NotFound:
      title: UpdateCourseHierarchy-404NotFound
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/coursehierarchyapiParams1'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/coursehierarchyapiResult2'
    coursehierarchyapiResult2:
      title: Result2
      required:
        - messages
      type: object
      properties:
        messages:
          type: string
          nullable: true
    feedapiCreate-Feed-Request:
      title: Create-Feed-Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/feedapiFeedCreateRequest'
      example:
        request:
          userId: 37634e84-70db-421e-898e-06e6554c4483
          category: user-feed
          priority: 1
          data:
            dataValue: 'yes'
    feedapiFeedCreateRequest:
      title: FeedCreateRequest
      required:
        - userId
        - category
        - priority
        - data
      type: object
      properties:
        userId:
          type: string
        category:
          type: string
        priority:
          type: integer
          format: int32
        data:
          $ref: '#/components/schemas/feedapiData'
      example:
        userId: 37634e84-70db-421e-898e-06e6554c4483
        category: user-feed
        priority: 1
        data:
          dataValue: 'yes'
    feedapiData:
      title: Data
      description: >-
        Data is Map object, it can contain any number of key-value pairs which
        is related to the feed.
      type: object
      properties:
        dataValue:
          type: string
      example:
        dataValue: 'yes'
    feedapiParams:
      title: Params
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
        status:
          type: string
        errmsg:
          type: string
      example:
        resmsgid: null
        msgid: 659e36df-9ccf-4657-bdad-c836abfeb7e1
        err: MANDATORY_PARAMETER_MISSING
        status: MANDATORY_PARAMETER_MISSING
        errmsg: Mandatory parameter category is missing.
    feedapiCreate_Feed_With_Success:
      title: Create_Feed_With_Success
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/feedapiParamsRequest'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/feedapiResult'
      example:
        id: api.user.feed.create
        ver: v1
        ts: '2020-11-19 11:07:08:428+0530'
        params:
          resmsgid: null
          msgid: 0a5ba3fb-554f-4ef6-a5dc-15b97d18e39a
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
    feedapiParamsRequest:
      title: ParamsRequest
      required:
        - resmsgid
        - msgid
        - err
        - status
        - errmsg
      type: object
      properties:
        resmsgid:
          type: string
          nullable: true
        msgid:
          type: string
        err:
          type: string
          nullable: true
        status:
          type: string
        errmsg:
          type: string
          nullable: true
      example:
        resmsgid: null
        msgid: 0a5ba3fb-554f-4ef6-a5dc-15b97d18e39a
        err: null
        status: success
        errmsg: null
    feedapiResult:
      title: Result
      required:
        - response
      type: object
      properties:
        response:
          type: string
      example:
        response: SUCCESS
    feedapiUpdate-Feed-Request:
      title: Update-Feed-Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/feedapiFeedUpdateRequest'
      example:
        request:
          userId: 37634e84-70db-421e-898e-06e6554c4483
          category: user-feed
          feedId: 22ba004f-3b07-429e-bb9a-0bd3dfb21d2b
    feedapiFeedUpdateRequest:
      title: FeedUpdateRequest
      required:
        - userId
        - category
        - feedId
      type: object
      properties:
        userId:
          type: string
        category:
          type: string
        feedId:
          type: string
      example:
        userId: 37634e84-70db-421e-898e-06e6554c4483
        category: user-feed
        feedId: 22ba004f-3b07-429e-bb9a-0bd3dfb21d2b
    feedapiUpdate_Feed_With_Success_Response:
      title: Update_Feed_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/feedapiParamsRequest'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/feedapiResult'
      example:
        id: api.user.feed.update
        ver: v1
        ts: '2020-11-19 11:52:08:786+0000'
        params:
          resmsgid: null
          msgid: f4c94ce48d50877ab32bd6e46fb3a315
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
    feedapiRead_Feed_With_Success_Response:
      title: Read_Feed_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/feedapiParamsRequest'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/feedapiUserReadResult'
      example:
        id: api.user.feed
        ver: v1
        ts: '2020-11-20 05:57:53:209+0000'
        params:
          resmsgid: null
          msgid: 02119170c396bfff28a5beed2c67bf51
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response:
            userFeed:
              - identifier: a92cd18a-9e5a-406b-ade0-ccf465e85076
                data:
                  dataValue: 'yes'
                id: a92cd18a-9e5a-406b-ade0-ccf465e85076
                category: user-feed
                priority: 1
                userId: 37634e84-70db-421e-898e-06e6554c4483
                createdOn: 1605787188737
                status: unread
              - identifier: be330602-5ed7-400b-a9ad-c0182ec06492
                data:
                  dataValue: 'yes'
                id: be330602-5ed7-400b-a9ad-c0182ec06492
                category: user-feed
                priority: 1
                userId: 37634e84-70db-421e-898e-06e6554c4483
                createdOn: 1605787210529
                status: unread
    feedapiUserReadResult:
      title: UserReadResult
      required:
        - response
      type: object
      properties:
        response:
          $ref: '#/components/schemas/feedapiUserReadResponse'
      example:
        response:
          userFeed:
            - identifier: a92cd18a-9e5a-406b-ade0-ccf465e85076
              data:
                dataValue: 'yes'
              id: a92cd18a-9e5a-406b-ade0-ccf465e85076
              category: user-feed
              priority: 1
              userId: 37634e84-70db-421e-898e-06e6554c4483
              createdOn: 1605787188737
              status: unread
            - identifier: be330602-5ed7-400b-a9ad-c0182ec06492
              data:
                dataValue: 'yes'
              id: be330602-5ed7-400b-a9ad-c0182ec06492
              category: user-feed
              priority: 1
              userId: 37634e84-70db-421e-898e-06e6554c4483
              createdOn: 1605787210529
              status: unread
    feedapiUserReadResponse:
      title: UserReadResponse
      required:
        - userFeed
      type: object
      properties:
        userFeed:
          type: array
          items:
            $ref: '#/components/schemas/feedapiUserFeed'
          description: ''
      example:
        userFeed:
          - identifier: a92cd18a-9e5a-406b-ade0-ccf465e85076
            data:
              dataValue: 'yes'
            id: a92cd18a-9e5a-406b-ade0-ccf465e85076
            category: user-feed
            priority: 1
            userId: 37634e84-70db-421e-898e-06e6554c4483
            createdOn: 1605787188737
            status: unread
          - identifier: be330602-5ed7-400b-a9ad-c0182ec06492
            data:
              dataValue: 'yes'
            id: be330602-5ed7-400b-a9ad-c0182ec06492
            category: user-feed
            priority: 1
            userId: 37634e84-70db-421e-898e-06e6554c4483
            createdOn: 1605787210529
            status: unread
    feedapiUserFeed:
      title: UserFeed
      required:
        - identifier
        - data
        - id
        - category
        - priority
        - userId
        - createdOn
        - status
      type: object
      properties:
        identifier:
          type: string
        data:
          $ref: '#/components/schemas/feedapiData'
        id:
          type: string
        category:
          type: string
        priority:
          type: integer
          format: int32
        userId:
          type: string
        createdOn:
          type: integer
          format: int64
        status:
          type: string
      example:
        identifier: a92cd18a-9e5a-406b-ade0-ccf465e85076
        data:
          dataValue: 'yes'
        id: a92cd18a-9e5a-406b-ade0-ccf465e85076
        category: user-feed
        priority: 1
        userId: 37634e84-70db-421e-898e-06e6554c4483
        createdOn: 1605787188737
        status: unread
    feedapiRead_Feed_With_500_Server_Error:
      title: Read_Feed_With_500_Server_Error
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/feedapiParamsRequest'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.user.feed
        ver: v1
        ts: '2020-11-19 15:58:19:713+0530'
        params:
          resmsgid: null
          msgid: c9bd2899-0c46-4bec-8ef0-759e352d9363
          err: null
          status: SERVER_ERROR
          errmsg: null
        responseCode: SERVER_ERROR
        result: {}
    feedapiDelete-Feed-Request:
      title: Delete-Feed-Request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/feedapiFeedUpdateRequest'
      example:
        request:
          userId: 37634e84-70db-421e-898e-06e6554c4483
          category: user-feed
          feedId: 22ba004f-3b07-429e-bb9a-0bd3dfb21d2b
    feedapiDelete_Feed_With_400_Response:
      title: Delete_Feed_With_400_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/feedapiParams'
        responseCode:
          type: string
        result:
          type: object
      example:
        id: api.user.feed.delete
        ver: v1
        ts: '2020-11-19 12:20:09:062+0000'
        params:
          resmsgid: null
          msgid: 68353252308d3c652589faaa505349d2
          err: MANDATORY_PARAMETER_MISSING
          status: MANDATORY_PARAMETER_MISSING
          errmsg: Mandatory parameter category is missing.
        responseCode: CLIENT_ERROR
        result: {}
    feedapiDelete_Feed_With_Success_Response:
      title: Delete_Feed_With_Success_Response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ts:
          type: string
        params:
          $ref: '#/components/schemas/feedapiParamsRequest'
        responseCode:
          type: string
        result:
          $ref: '#/components/schemas/feedapiResult'
      example:
        id: api.user.feed.delete
        ver: v1
        ts: '2020-11-19 12:21:22:090+0000'
        params:
          resmsgid: null
          msgid: 008b91a183c2d15f6c0cf9285b6b1f01
          err: null
          status: success
          errmsg: null
        responseCode: OK
        result:
          response: SUCCESS
    locklistrequest:
      title: listrequest
      description: This represents the list request body
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/lockListRequest'
      example:
        request:
          filters:
            resourceId:
              - do_11319479631000371211
              - do_11319851826161254418
              - do_113107812356022272164
              - do_1131983093687828481353
              - do_113197939102253056140
              - do_113197917149233152139
              - do_113197913444737024138
              - do_113197844509425664130
              - do_113197903995772928137
    lockListRequest:
      title: ListRequest
      description: This represents the list request body details
      required:
        - filters
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/lockListRequestFilters'
      example:
        filters:
          resourceId:
            - do_11319479631000371211
            - do_11319851826161254418
            - do_113107812356022272164
            - do_1131983093687828481353
            - do_113197939102253056140
            - do_113197917149233152139
            - do_113197913444737024138
            - do_113197844509425664130
            - do_113197903995772928137
    lockListRequestFilters:
      title: ListRequestFilters
      description: This represents the list request body Filters details
      required:
        - resourceId
      type: object
      properties:
        resourceId:
          type: array
          items:
            type: string
          description: This represents unique resourceId
      example:
        resourceId:
          - do_11319479631000371211
          - do_11319851826161254418
          - do_113107812356022272164
          - do_1131983093687828481353
          - do_113197939102253056140
          - do_113197917149233152139
          - do_113197913444737024138
          - do_113197844509425664130
          - do_113197903995772928137
    lockLocklist200:
      title: Locklist200
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/lockParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/lockLocklist200Result'
      example:
        id: api.lock.list
        ver: 1
        ts: 2021-01-21T09:44:03.248Z
        params:
          resmsgid: 32228b00-5bcd-11eb-9b0c-abcfbdf41bc3
          msgid: 3247615a-0095-9236-9b6b-357d7b130b6e
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          count: 1
          data:
            - lockId: 1d767439-a517-4433-bf46-fb0cca148d31
              resourceId: do_11319479631000371211
              resourceType: Content
              resourceInfo: >-
                {"contentType":"TextBook","framework":"ekstep_ncert_k-12","identifier":"do_11319479631000371211","mimeType":"application/vnd.ekstep.content-collection"}
              createdBy: 5a587cc1-e018-4859-a0a8-e842650b9d64
              creatorInfo: '{"name":"N11","id":"5a587cc1-e018-4859-a0a8-e842650b9d64"}'
              createdOn: 2021-01-21T09:22:12.577Z
              deviceId: ad8ed16beb09e7c91534c2af80a1a41e
              expiresAt: 2021-01-21T10:26:27.591Z
    lockParams:
      title: Params
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          description: Represents the message id of the response
          type: string
        status:
          description: Represents the status of the request
          type: string
          enum:
            - success
            - failed
        err:
          description: Represents the error
          type: string
          nullable: true
        errmsg:
          description: Represents the error message
          type: string
          nullable: true
      example:
        resmsgid: 32228b00-5bcd-11eb-9b0c-abcfbdf41bc3
        msgid: 3247615a-0095-9236-9b6b-357d7b130b6e
        status: successful
        err: null
        errmsg: null
    lockLocklist200Result:
      title: Result
      description: Represents the Lock list 200 Result
      required:
        - count
        - data
      type: object
      properties:
        count:
          type: integer
          format: int32
          description: Represents the locked resource list
        data:
          type: array
          items:
            $ref: '#/components/schemas/lockDatum'
          description: Represents the locked resource details
      example:
        count: 1
        data:
          - lockId: 1d767439-a517-4433-bf46-fb0cca148d31
            resourceId: do_11319479631000371211
            resourceType: Content
            resourceInfo: >-
              {"contentType":"TextBook","framework":"ekstep_ncert_k-12","identifier":"do_11319479631000371211","mimeType":"application/vnd.ekstep.content-collection"}
            createdBy: 5a587cc1-e018-4859-a0a8-e842650b9d64
            creatorInfo: '{"name":"N11","id":"5a587cc1-e018-4859-a0a8-e842650b9d64"}'
            createdOn: 2021-01-21T09:22:12.577Z
            deviceId: ad8ed16beb09e7c91534c2af80a1a41e
            expiresAt: 2021-01-21T10:26:27.591Z
    lockDatum:
      title: Datum
      description: Represents the locked each resource details
      required:
        - lockId
        - resourceId
        - resourceType
        - resourceInfo
        - createdBy
        - creatorInfo
        - createdOn
        - deviceId
        - expiresAt
      type: object
      properties:
        lockId:
          type: string
          description: Represents the unique lockId
        resourceId:
          type: string
          description: Represents the unique resourceId
        resourceType:
          type: string
          description: Represents the unique resourceType
        resourceInfo:
          type: string
          description: Represents the resourceInfo
        createdBy:
          type: string
          description: Represents the createdBy info
        creatorInfo:
          type: string
          description: Represents the creatorInfo info
        createdOn:
          type: string
          description: Represents the createdOn info
        deviceId:
          type: string
          description: Represents the unique deviceId
        expiresAt:
          type: string
          description: Represents the resource lock expires At
      example:
        lockId: 1d767439-a517-4433-bf46-fb0cca148d31
        resourceId: do_11319479631000371211
        resourceType: Content
        resourceInfo: >-
          {"contentType":"TextBook","framework":"ekstep_ncert_k-12","identifier":"do_11319479631000371211","mimeType":"application/vnd.ekstep.content-collection"}
        createdBy: 5a587cc1-e018-4859-a0a8-e842650b9d64
        creatorInfo: '{"name":"N11","id":"5a587cc1-e018-4859-a0a8-e842650b9d64"}'
        createdOn: 2021-01-21T09:22:12.577Z
        deviceId: ad8ed16beb09e7c91534c2af80a1a41e
        expiresAt: 2021-01-21T10:26:27.591Z
    lockretire200:
      title: retire200
      description: This represents the retire success response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/lockParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the result of the api response
      example:
        id: api.lock.retire
        ver: 1
        ts: 2021-01-21T11:07:24.864Z
        params:
          resmsgid: d7549400-5bd8-11eb-9b0c-abcfbdf41bc3
          msgid: eb729276-769e-8db2-477a-91548152908b
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result: {}
    lockrefresh400Params:
      title: refresh 400 Params
      description: This represents the refresh 400 Params
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          description: Represents the message id of the response
          type: string
        status:
          description: Represents the status of the request
          type: string
          enum:
            - success
            - failed
        err:
          description: Represents the error
          type: string
          nullable: true
        errmsg:
          description: Represents the error message
          type: string
          nullable: true
      example:
        resmsgid: 0645ca40-5bd9-11eb-9b0c-abcfbdf41bc3
        msgid: null
        status: failed
        err: ERR_LOCK_RETIRING_FAILED
        errmsg: Resource is not locked
    lockcreaterequest:
      title: createrequest
      description: This represents the create request body
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/lockcreateRequestBody'
      example:
        request:
          resourceId: do_11319479631000371211
          resourceType: Content
          resourceInfo: >-
            {"contentType":"TextBook","framework":"ekstep_ncert_k-12","identifier":"do_11319479631000371211","mimeType":"application/vnd.ekstep.content-collection"}
          creatorInfo: '{"name":"N11","id":"5a587cc1-e018-4859-a0a8-e842650b9d64"}'
          createdBy: 5a587cc1-e018-4859-a0a8-e842650b9d64
          isRootOrgAdmin: true
    lockcreateRequestBody:
      title: createRequestBody
      description: This represents the create request body details
      required:
        - resourceId
        - resourceType
        - resourceInfo
        - creatorInfo
        - createdBy
        - isRootOrgAdmin
      type: object
      properties:
        resourceId:
          type: string
          description: This represents the unique resource id
        resourceType:
          type: string
          description: This represents the resource type
        resourceInfo:
          type: string
          description: This represents the resource info
        creatorInfo:
          type: string
          description: This represents the creator info
        createdBy:
          type: string
          description: This represents the created by
        isRootOrgAdmin:
          type: boolean
          description: This represents the boolean value for root org admin
      example:
        resourceId: do_11319479631000371211
        resourceType: Content
        resourceInfo: >-
          {"contentType":"TextBook","framework":"ekstep_ncert_k-12","identifier":"do_11319479631000371211","mimeType":"application/vnd.ekstep.content-collection"}
        creatorInfo: '{"name":"N11","id":"5a587cc1-e018-4859-a0a8-e842650b9d64"}'
        createdBy: 5a587cc1-e018-4859-a0a8-e842650b9d64
        isRootOrgAdmin: true
    lockCreatelock200:
      title: Createlock200
      description: This represents the Create lock success 200 response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/lockParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/lockCreatelock200Result'
      example:
        id: api.lock.create
        ver: 1
        ts: 2021-01-21T11:14:46.643Z
        params:
          resmsgid: dea6b430-5bd9-11eb-9b0c-abcfbdf41bc3
          msgid: 33e7b5d4-7662-bab6-1c06-72e71b8b8221
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          lockKey: bad55f24-8081-4d03-baab-364296062b47
          expiresAt: 2021-01-21T12:14:46.594Z
          expiresIn: 60
    lockCreatelock200Result:
      title: Createlock200Result
      description: This represents Create lock 200 Result
      required:
        - lockKey
        - expiresAt
        - expiresIn
      type: object
      properties:
        lockKey:
          type: string
          description: This represents lock key
        expiresAt:
          type: string
          description: This represents expiresAt
        expiresIn:
          type: integer
          format: int32
          description: This represents expiresIn
      example:
        lockKey: bad55f24-8081-4d03-baab-364296062b47
        expiresAt: 2021-01-21T12:14:46.594Z
        expiresIn: 60
    lockrefreshrequest:
      title: refresh request
      description: This represents refresh request
      required:
        - request
      type: object
      properties:
        request:
          $ref: '#/components/schemas/lockrefreshrequestRequest'
      example:
        request:
          resourceId: do_11316513466772684811649
          resourceType: Content
          lockId: 0e6b1631-93e6-4726-9dcf-0debdba37aa1
    lockrefreshrequestRequest:
      title: refresh request Request
      description: This represents refresh request details
      required:
        - resourceId
        - resourceType
        - lockId
      type: object
      properties:
        resourceId:
          type: string
          description: This represents unique resourceId
        resourceType:
          type: string
          description: This represents resourceType
        lockId:
          type: string
          description: This represents lockId
      example:
        resourceId: do_11316513466772684811649
        resourceType: Content
        lockId: 0e6b1631-93e6-4726-9dcf-0debdba37aa1
    lockrefresh400:
      title: refresh400
      description: This represents the refresh 400 response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/lockrefresh400Params'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the result of the api response
      example:
        id: api.v1.refresh
        ver: 1
        ts: 2021-01-21T11:27:46.193Z
        params:
          resmsgid: af4c9810-5bdb-11eb-9b0c-abcfbdf41bc3
          msgid: null
          status: failed
          err: ERR_LOCK_REFRESHING_FIELDS_MISSING
          errmsg: '"resourceId" is required'
        responseCode: CLIENT_ERROR
        result: {}
    lockrefresh200:
      title: refresh200
      description: Represents the refresh 200 response
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/lockParams'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          $ref: '#/components/schemas/lockrefresh200Result'
      example:
        id: api.v1.refresh
        ver: 1
        ts: 2021-01-21T11:24:31.981Z
        params:
          resmsgid: 3b8a31d0-5bdb-11eb-9b0c-abcfbdf41bc3
          msgid: 3a33a280-5bdb-11eb-9b0c-abcfbdf41bc3
          status: successful
          err: null
          errmsg: null
        responseCode: OK
        result:
          lockKey: 0e6b1631-93e6-4726-9dcf-0debdba37aa1
          expiresAt: 2021-01-21T12:24:29.738Z
          expiresIn: 60
    lockrefresh200Result:
      title: refresh 200 Result
      description: This represents refresh  200 Result
      required:
        - lockKey
        - expiresAt
        - expiresIn
      type: object
      properties:
        lockKey:
          type: string
          description: This represents lock key
        expiresAt:
          type: string
          description: This represents expiresAt
        expiresIn:
          type: integer
          format: int32
          description: This represents expiresIn
      example:
        lockKey: bad55f24-8081-4d03-baab-364296062b47
        expiresAt: 2021-01-21T12:14:46.594Z
        expiresIn: 60
    lockretire400:
      title: retire400
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/lockRetireParams'
        result:
          type: object
          description: Represents the result of the api response
      example:
        id: api.lock.retire
        ver: 1
        ts: 2021-01-21T11:08:43.618Z
        params:
          resmsgid: 0645ca40-5bd9-11eb-9b0c-abcfbdf41bc3
          msgid: null
          status: failed
          err: ERR_LOCK_RETIRING_FAILED
          errmsg: Resource is not locked
        responseCode: CLIENT_ERROR
        result: {}
    lockRetireParams:
      title: Params
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          description: Represents the message id of the response
          type: string
        status:
          description: Represents the status of the request
          type: string
          enum:
            - success
            - failed
        err:
          description: Represents the error
          type: string
          nullable: true
        errmsg:
          description: Represents the error message
          type: string
          nullable: true
        msgid:
          type: string
          nullable: true
          description: Represents the  message id
      example:
        resmsgid: 0645ca40-5bd9-11eb-9b0c-abcfbdf41bc3
        msgid: null
        status: failed
        err: ERR_LOCK_RETIRING_FAILED
        errmsg: Resource is not locked
    locklist500:
      title: list 500
      description: Represents the list 500
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/locklistParams500'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the result of the api response
      example:
        id: api.lock.list
        ver: 1
        ts: 2021-01-21T12:59:12.456Z
        params:
          resmsgid: 755de480-5be8-11eb-9b0c-abcfbdf41bc3
          msgid: null
          status: failed
          err: ERR_LISTING_LOCK_FAILED
          errmsg: Listing lock failed
        responseCode: SERVER_ERROR
        result: {}
    locklistParams500:
      title: list Params 500
      description: Represents the list Params 500
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          description: Represents the message id of the response
          type: string
        status:
          description: Represents the status of the request
          type: string
          enum:
            - success
            - failed
        err:
          description: Represents the error
          type: string
          nullable: true
        errmsg:
          description: Represents the error message
          type: string
          nullable: true
        msgid:
          type: string
          nullable: true
          description: Represents the  message id
      example:
        resmsgid: 755de480-5be8-11eb-9b0c-abcfbdf41bc3
        msgid: null
        status: failed
        err: ERR_LISTING_LOCK_FAILED
        errmsg: Listing lock failed
    locklockcreate400:
      title: lock create 400
      description: Represents the lock create 400
      required:
        - id
        - ver
        - ts
        - params
        - responseCode
        - result
      type: object
      properties:
        id:
          description: Represents the api id
          type: string
        ver:
          description: Represents the api version
          type: string
        ts:
          description: Represents the EPOCH epoch time in milliseconds
          type: integer
          format: int64
        params:
          $ref: '#/components/schemas/lockParamslockcreate400'
        responseCode:
          type: string
          description: Represents the api response code
        result:
          type: object
          description: Represents the result of the api response
      example:
        id: api.lock.create
        ver: 1
        ts: 2021-01-21T13:09:44.935Z
        params:
          resmsgid: ee5a8770-5be9-11eb-9b0c-abcfbdf41bc3
          msgid: null
          status: failed
          err: ERR_LOCK_CREATION_FIELDS_MISSING
          errmsg: '"resourceInfo" is required'
        responseCode: CLIENT_ERROR
        result: {}
    lockParamslockcreate400:
      title: Params
      required:
        - resmsgid
        - msgid
        - status
        - err
        - errmsg
      type: object
      properties:
        resmsgid:
          description: Represents the message id of the response
          type: string
        status:
          description: Represents the status of the request
          type: string
          enum:
            - success
            - failed
        err:
          description: Represents the error
          type: string
          nullable: true
        errmsg:
          description: Represents the error message
          type: string
          nullable: true
        msgid:
          type: string
          nullable: true
          description: Represents the  message id
      example:
        resmsgid: ee5a8770-5be9-11eb-9b0c-abcfbdf41bc3
        msgid: null
        status: failed
        err: ERR_LOCK_CREATION_FIELDS_MISSING
        errmsg: '"resourceInfo" is required'
    groupapiCreateGroupRequest:
      description: Create Group Object
      type: object
      allOf:
        - $ref: '#/components/schemas/groupapiApiRequest'
      properties:
        request:
          type: object
          properties:
            name:
              description: Represents the name of the group
              type: string
            description:
              description: Represents the description of the group
              type: string
            membershipType:
              type: string
              description: >-
                Represents the MembershipType (invite_only/moderated) of the
                group
              default: invite_only
            members:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/groupapimemberReqObject'
            activities:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/groupapiactivityReqObject'
          required:
            - name
      required:
        - request
    groupapiApiRequest:
      description: Group Create Request
      type: object
      properties:
        id:
          description: Represents an API uniquely
          type: string
        ver:
          description: Represents the version of the API which was used
          type: string
        ets:
          description: Represents the EPOCH (UTC) timestamp in milliseconds since EPOCH
          type: string
          format: int64
        params:
          type: object
          properties:
            msgid:
              description: Represents the unique ID of the message being sent
              type: string
            did:
              description: Represents the device UUID from which API is called
              type: string
    groupapiGroupCreateResponse:
      description: The response body of create group
      type: object
      allOf:
        - $ref: '#/components/schemas/groupapiInitResObject'
      required:
        - result
      properties:
        result:
          type: object
          required:
            - groupId
            - response
            - errors
          properties:
            response:
              type: string
              description: Success or Failure
            groupId:
              type: string
              description: Group id of the created group
            errors:
              type: object
              allOf:
                - $ref: '#/components/schemas/groupapiErrorObjectForPartialSuccess'
    groupapiErrorObjectForPartialSuccess:
      type: object
      properties:
        members:
          type: array
          items:
            type: object
            properties:
              useriId:
                type: string
              errorCode:
                type: string
              errorMessage:
                type: string
        activities:
          type: array
          items:
            type: object
            properties:
              activityId:
                type: string
              errorCode:
                type: string
              errorMessage:
                type: string
    groupapiUpdateGroupRequest:
      type: object
      properties:
        request:
          type: object
          properties:
            groupId:
              description: Represents the ID of the group to be updated
              type: string
            name:
              description: Represents the name of the group
              type: string
            description:
              description: Represents the description of the group
              type: string
            membershipType:
              type: string
              description: >-
                Represents the MembershipType (invite_only/moderated) of the
                group
            status:
              description: Represents the status (active/inactive) of the group
              type: string
          allOf:
            - $ref: '#/components/schemas/groupapiMemberOperations'
            - $ref: '#/components/schemas/groupapiActivityOperations'
          required:
            - groupId
      required:
        - request
    groupapiUpdateGroupResponse:
      description: Update response for a Group API
      type: object
      allOf:
        - $ref: '#/components/schemas/groupapiInitResObject'
        - $ref: '#/components/schemas/groupapiResultWithPartialErrorResponse'
    groupapiListGroupRequest:
      description: List group request
      type: object
      properties:
        filters:
          type: object
          properties:
            userId:
              type: string
              description: UserId is optional
    groupapiListGroupResponse:
      description: The response body of List Group
      type: object
      properties:
        response:
          type: object
          properties:
            count:
              type: integer
            group:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/groupapiListGroupResponseObject'
    groupapiListGroupResponseObject:
      title: Group Response Object
      type: object
      properties:
        id:
          type: string
          description: Represents the id of the group
        name:
          description: Represents the name of the group
          type: string
        description:
          description: Represents the description of the group
          type: string
        membershipType:
          type: string
          description: Represents the MembershipType (invite_only/moderated) of the group
          default: invite_only
        status:
          description: Represents the status (active/inactive) of the group
          type: string
        memberRole:
          description: Represents the role (member/admin) of the user
          type: string
      allOf:
        - $ref: '#/components/schemas/groupapiauditObject'
    groupapiGetGroupResponse:
      title: Group Response Object
      type: object
      properties:
        id:
          type: string
          description: Represents the id of the group
        name:
          description: Represents the name of the group
          type: string
        description:
          description: Represents the description of the group
          type: string
        membershipType:
          type: string
          description: Represents the MembershipType (invite_only/moderated) of the group
          default: invite_only
        status:
          description: Represents the status (active/inactive) of the group
          type: string
        members:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/groupapimemberResponse'
        activities:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/groupapiactivityResponse'
      allOf:
        - $ref: '#/components/schemas/groupapiauditObject'
    groupapiDeleteGroupRequest:
      type: object
      properties:
        request:
          type: object
          properties:
            groupId:
              description: Represents the ID of the group to be deleted
              type: string
          required:
            - groupId
      required:
        - request
    groupapiDeleteGroupResponse:
      description: Delete response for a Group API
      type: object
      allOf:
        - $ref: '#/components/schemas/groupapiInitResObject'
        - $ref: '#/components/schemas/groupapiResultWithEmptyBody'
    groupapiGroupMembershipRequest:
      type: object
      properties:
        request:
          type: object
          properties:
            userId:
              description: Represents the ID of the user
              type: string
            groups:
              type: array
              items:
                type: object
                properties:
                  groupId:
                    description: Id of the group
                    type: string
                  visited:
                    description: Visited flag for the group
                    type: boolean
          required:
            - userId
      required:
        - request
    groupapiGroupMembershipResponse:
      description: Group Membership response for a Group API
      type: object
      allOf:
        - $ref: '#/components/schemas/groupapiInitResObject'
        - $ref: '#/components/schemas/groupapiResultWithEmptyBody'
    groupapiGroupErrorResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/groupapiInitResObject'
        - $ref: '#/components/schemas/groupapiEmptyResult'
    groupapiUnAuthorizedResponse:
      allOf:
        - $ref: '#/components/schemas/groupapiResultWithEmptyBody'
        - $ref: '#/components/schemas/groupapiInitResObject'
    groupapiEmptyResult:
      type: object
      properties:
        result:
          type: object
          description: Empty Result
    groupapiResultStatus:
      type: object
      properties:
        response:
          type: string
          description: Success or Failure
    groupapiResultWithEmptyBody:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/groupapiResultStatus'
    groupapiResultWithPartialErrorResponse:
      type: object
      properties:
        result:
          type: object
          properties:
            response:
              type: string
              description: Success or Failure
            error:
              type: object
              allOf:
                - $ref: '#/components/schemas/groupapiErrorObjectForPartialSuccess'
    groupapiInitResObject:
      title: initResObject
      type: object
      properties:
        id:
          type: string
        ver:
          type: string
        ets:
          type: string
        params:
          type: object
          properties:
            msgid:
              type: string
            resmsgid:
              type: string
            err:
              type: string
            errmsg:
              type: string
            errdetail:
              type: string
            status:
              type: string
    groupapiauditObject:
      title: auditObject
      type: object
      properties:
        createdOn:
          type: string
          description: Record created date
        createdBy:
          type: string
          description: Record created userid
        updatedOn:
          type: string
          description: Record updated date
        updatedBy:
          type: string
          description: Record updated userid
    groupapimemberAuditObject:
      title: memberAuditObject
      type: object
      allOf:
        - $ref: '#/components/schemas/groupapiauditObject'
      properties:
        removedOn:
          type: string
          description: Record removed date
        removedBy:
          type: string
          description: Record removed userid
    groupapimemberResponse:
      title: memberResponse
      type: object
      properties:
        userName:
          type: string
          description: Name of the user
      allOf:
        - $ref: '#/components/schemas/groupapimemberObject'
        - $ref: '#/components/schemas/groupapimemberAuditObject'
    groupapiactivityResponse:
      title: activityResponse
      type: object
      allOf:
        - $ref: '#/components/schemas/groupapiactivityObject'
      properties:
        activityInfo:
          type: object
          description: Activity response from content service
    groupapimemberObject:
      title: memberObject
      type: object
      properties:
        groupId:
          type: string
          description: Group id to which the member belongs to
        userId:
          type: string
          description: uuid of the member
        role:
          type: string
          description: 'Role of the user in group [ADMIN/MEMBER]'
        status:
          type: string
          description: 'Status of the user in group [Active/Inactive]'
      required:
        - userId
        - groupId
    groupapiactivityObject:
      title: activityObject
      type: object
      properties:
        id:
          type: string
          description: Id of the activity.
        type:
          type: string
          description: Type of the activity
      required:
        - id
        - type
    groupapimemberReqObject:
      title: memberReqObject
      type: object
      properties:
        userId:
          type: string
          description: uuid of the member
        role:
          type: string
          description: 'Role of the user in group [admin/member]'
          default: member
      required:
        - userId
    groupapiactivityReqObject:
      title: activityReqObject
      type: object
      properties:
        id:
          type: string
          description: Id of the activity.
        type:
          type: string
          description: Type of the activity
      required:
        - id
        - type
    groupapiActivityOperations:
      type: object
      properties:
        activities:
          type: object
          properties:
            add:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/groupapiactivityReqObject'
            edit:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/groupapiactivityReqObject'
            remove:
              type: array
              items:
                type: string
                description: Id of the activity.
    groupapiMemberOperations:
      type: object
      properties:
        members:
          type: object
          properties:
            add:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/groupapimemberReqObject'
            edit:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/groupapimemberReqObject'
            remove:
              type: array
              items:
                type: string
                description: uuid of the member
  securitySchemes:
    bearer:
      type: apiKey
      name: Authorization
      in: header
    userToken:
      type: apiKey
      name: x-authenticated-user-token
      in: header
    httpBearer:
      type: http
      scheme: bearer
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    manageduserToken:
      type: apiKey
      in: header
      name: x-authenticated-for
  examples:
    reportexample:
      value:
        reportId: district_monthly
        requestedBy: analytics
        description: Unique Device district wise monthly
        reportSchedule: reportSchedule
        createdOn: 1589699335278
        updatedOn: 1589699343488
        submittedOn: 1589699335278
        status: INACTIVE
        status_msg: REPORT SUCCESSFULLY ACTIVATED
        config:
          id: district_monthly
        queryType: groupBy
        dateRange:
          staticInterval: LastMonth
          granularity: all
          metrics:
            metric: totalUniqueDevices
            label: Total Unique Devices
            druidQuery:
              queryType: groupBy
              dataSource: telemetry-events
              intervals: LastMonth
            aggregations:
              name: total_unique_devices
              type: cardinality
              fieldName: context_did
            dimensions:
              - fieldName: derived_loc_state
                aliasName: state
              - fieldName: derived_loc_district
                aliasName: district
            filters:
              - type: in
                dimension: context_pdata_id
                values:
                  - sunbirdddev.diksha.portal
                  - sunbirddev.diksha.app
              - type: isnotnull
                dimension: derived_loc_state
              - type: isnotnull
                dimension: derived_loc_district
        descending: 'false'
        labels:
          state: State
          district: District
          total_unique_devices: Number of Unique Devices
        output:
          - type: csv
          - metrics:
              - total_unique_devices
          - dims:
              - state
        fileParameters:
          - id
          - dims
      summary: A sample object
    reportexample1:
      value:
        reportId: board_wise_max_time_spent_1
        createdOn: 1589699335278
        updatedOn: 1589699343488
        requestedBy: analytics
        description: Test Report
        reportSchedule: Daily
        config:
          id: test_report
        queryType: timeseries
        dateRange:
          interval:
            startDate: 2020-01-01T00:00:00.000Z
            endDate: 2020-01-05T00:00:00.000Z
          granularity: all
          metrics:
            metric: Total Plays on Portal
            label: Total Plays on Portal
            druidQuery:
              queryType: timeseries
              dataSource: telemetry-events
              intervals: LastMonth
            aggregations:
              name: total_plays
              type: count
              fieldName: count
            filters:
              - dimension: context_pdata_id
                values:
                  - type: equals
                  - local.diksha.portal
        descending: 'false'
        labels:
          total_plays: Total Plays Portal
        output:
          - type: csv
          - metrics:
              - total_plays
          - dims:
              - date
        fileParameters:
          - id
          - dims
        status: INACTIVE
        submittedOn: 1598857058574
        status_msg: REPORT DEACTIVATED
      summary: A sample object
    addTeacherRegistry:
      summary: Teacher Registry Request
      description: >-
        This is an example of adding the Teacher record in the registry. This
        request is validated with Teacher schema which is available as an
        example schema in the opensaber schema directory.
      value:
        id: open-saber.registry.create
        ver: '1.0'
        ets: '11234'
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapiTeacher:
            signatures:
              - '@type': 'sc:GraphSignature2012'
                signatureFor: 'http://localhost:8080/serialNum'
                creator: 'https://example.com/i/pat/keys/5'
                created: 2017-09-23T20:21:34.000Z
                nonce: 2bbgh3dgjg2302d-d2b3gi423d42
                signatureValue: eyiOiJKJ0eXA...OEjgFWFXk
            serialNum: 8
            teacherCode: 1223h4d
            nationalIdentifier: '1234567890123456'
            teacherName: Marvin Pande
            gender: GenderTypeCode-MALE
            birthDate: 1990-12-06T00:00:00.000Z
            socialCategory: SocialCategoryTypeCode-GENERAL
            highestAcademicQualification: AcademicQualificationTypeCode-PHD
            highestTeacherQualification: TeacherQualificationTypeCode-MED
            yearOfJoiningService: '2014'
            teachingRole:
              '@type': TeachingRole
              teacherType: TeacherTypeCode-HEAD
              appointmentType: TeacherAppointmentTypeCode-REGULAR
              classesTaught: ClassTypeCode-SECONDARYANDHIGHERSECONDARY
              appointedForSubjects: SubjectCode-ENGLISH
              mainSubjectsTaught:
                - SubjectCode-SOCIALSTUDIES
                - SubjectCode-ENGLISH
              appointmentYear: '2015'
            inServiceTeacherTrainingFromBRC:
              daysOfInServiceTeacherTraining: '10'
            inServiceTeacherTrainingFromCRC:
              daysOfInServiceTeacherTraining: '2'
            inServiceTeacherTrainingFromDIET:
              daysOfInServiceTeacherTraining: '5.5'
            inServiceTeacherTrainingFromOthers:
              '@type': InServiceTeacherTrainingFromOthers
              daysOfInServiceTeacherTraining: '3.5'
            nonTeachingAssignmentsForAcademicCalendar:
              '@type': NonTeachingAssignmentsForAcademicCalendar
              daysOfNonTeachingAssignments: 6
            basicProficiencyLevel:
              - '@type': BasicProficiencyLevel
                proficiencySubject: SubjectCode-MATH
                proficiencyAcademicQualification: AcademicQualificationTypeCode-PHD
              - '@type': BasicProficiencyLevel
                proficiencySubject: SubjectCode-ENGLISH
                proficiencyAcademicQualification: AcademicQualificationTypeCode-HIGHERSECONDARY
              - '@type': BasicProficiencyLevel
                proficiencySubject: SubjectCode-SOCIALSTUDIES
                proficiencyAcademicQualification: AcademicQualificationTypeCode-SECONDARY
            disabilityType: DisabilityCode-NA
            trainedForChildrenSpecialNeeds: YesNoCode-YES
            trainedinUseOfComputer: YesNoCode-YES
    addPersonRegistry:
      summary: Person Registry Request
      description: >-
        This is an example of adding the Person record in the registry. This
        request is validated with Person schema which is available as an example
        schema in the opensaber schema directory."
      value:
        id: open-saber.registry.create
        ver: '1.0'
        ets: '11234'
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapiPerson:
            nationalIdentifier: '1234567890123456'
            name: John
            gender: MALE
            dob: '1990-12-01'
            hasDrivingLicense: true
            vehicles:
              - registrationNumber: Kg-12333
                model: Honda BS-1V
                manufacturer: Honda
                yearManufactured: '2016'
                kerbWeight: 130.5
    addTeacherRegistryResponse:
      summary: Teacher Registry Response
      description: >-
        This is an example response for the successful addition of the teacher
        record in the registry. **osid** is the registry id of the teacher
        record which gets inserted into the system
      value:
        id: open-saber.registry.create
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: SUCCESSFUL
          errmsg: ''
        responseCode: OK
        result:
          opensaberapiTeacher:
            osid: 1-d6844c76-b128-43cc-bbba-74edfd09c716
    addPersonRegistryResponse:
      summary: Person Registry Response
      description: >-
        This is an example response for the successful addition of the person
        record in the registry. **osid** is the registry id of the person's
        record which get inserted into the system
      value:
        id: open-saber.registry.create
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: SUCCESSFUL
          errmsg: ''
        responseCode: OK
        result:
          opensaberapiPerson:
            osid: 1-f09e2d35-3410-4c73-b1c2-7ff0b116e05d
    schemaInvalidErrorResponse:
      summary: Invalid Schema Error Response
      description: >-
        This is an example response for the schema validation issue while adding
        teacher record to the registry database.
      value:
        id: open-saber.registry.create
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: '#/Teacher/serialNum: expected type: Number, found: String'
        responseCode: OK
    MandatoryParamMissingResponse:
      summary: Mandatory Paramater Missing Response
      description: >-
        This is an example response for missing of the mandatory paramater which
        are required as per Teacher schema definition.
      value:
        id: open-saber.registry.create
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: '#/Teacher: required key [serialNum] not found'
        responseCode: OK
    AuthenticationInvalidResponse:
      summary: Invalid Authentication Token Response
      description: >-
        This is an example response for the authentication failure of the
        request due to expired token, invalid token or if token is not passed as
        Authorization
      value:
        id: open-saber.registry.create
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: Authentication token is invalid
        responseCode: OK
    InternalServerErrorResponse:
      summary: Operation Unsuccessful Response
      description: >-
        This is an example response if there is any internal error in the api
        and operation is unsuccessful i.e due to NullPointerException or any
        runtime error
      value:
        id: open-saber.registry.create
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: ''
        responseCode: OK
    AuthenticationInvalidReadResponse:
      summary: Invalid Authentication Token Response
      description: >-
        This is an example response for the authentication failure of the
        request due to expired token, invalid token or if token is not passed as
        Authorization
      value:
        id: open-saber.registry.read
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: Authentication token is invalid
        responseCode: OK
    InternalServerErrorReadResponse:
      summary: Operation Unsuccessful Response
      description: >-
        This is an example response if there is any internal error in the api
        and operation is unsuccessful i.e due to NullPointerException or any
        runtime error
      value:
        id: open-saber.registry.read
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: ''
        responseCode: OK
    InvalidIdResponse:
      summary: Invalid Registry Id Response
      description: >-
        This is an example response for the invalid id is passed to **registry
        id**
      value:
        id: open-saber.registry.read
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: Invalid id
        responseCode: OK
    ReadTeacherRegistryRequest:
      summary: Read Teacher Registry Record
      description: >-
        This is an example request to get Teacher registry Records from the
        system. **osid** is the registry id of the teacher as configured in the
        application.yml. Teacher response result is available in examples of the
        `Responses`.
      value:
        id: open-saber.registry.read
        ver: '1.0'
        ets: '11234'
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapiTeacher:
            osid: 1-d6844c76-b128-43cc-bbba-74edfd09c716
            includeSignatures: true
    ReadPersonRegistryRequestWithstaticTemplate:
      summary: Read Registry With Static Template
      description: >-
        1. This is an example request to get Person registry Records with static
        template which is available as a configuration in the view directory in
        the registry resources directory. Static template will customized the
        view(fields in the response) which administrator wants to expose as a
        response. **osid** is the registry id of the person as configured in the
        application.yml. Read Registry With Static templates is available as an
        example view in the `Responses.`

        2. **viewTemplateId** is the key required to pass the static template.
      value:
        id: open-saber.registry.read
        ver: '1.0'
        ets: '11234'
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapiPerson:
            osid: 1-f09e2d35-3410-4c73-b1c2-7ff0b116e05d
          viewTemplateId: 6ccd3400-4745-11ea-b77f-2e728ce88125.json
    ReadPersonRegistryRequestWithDynamicTemplate:
      summary: Read Registry With Dynamic Template
      description: >-
        1. This is an example request to get Person registry Records with
        dynamic template which is added with the request body. Dynamic template
        will customized the view(fields in the response) which administrator
        wants to expose as a response. **osid** is the registry id of the person
        as configured in the application.yml. Read Registry With Static
        templates is available as an example view in the `Responses.`

        2. **viewTemplate** is the key required to pass along with.
      value:
        id: open-saber.registry.read
        ver: '1.0'
        ets: '11234'
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapiPerson:
            osid: 1-f09e2d35-3410-4c73-b1c2-7ff0b116e05d
          viewTemplate:
            fields:
              - name: name
              - name: osid
              - name: nationalIdentifier
              - name: dob
    ReadPersonRegistryRequest:
      summary: Read Person Registry Record
      description: >-
        This is an example request to get Person registry Records from the
        system. **osid** is the registry id of the person as configured in the
        application.yml. Person response result is available in examples of the
        `Responses.`
      value:
        id: open-saber.registry.read
        ver: '1.0'
        ets: '11234'
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapiPerson:
            osid: 1-f09e2d35-3410-4c73-b1c2-7ff0b116e05d
    ReadTeacherRegistryResponse:
      summary: Teacher Registry Read Response
      description: >-
        This is an example response for teacher read operation with teacher
        registry id . `includesignature` is not a manadatory parameter and only
        needed when we need to show signatures in the response.
      value:
        id: open-saber.registry.read
        ver: '1.0'
        ets: '1606128840146'
        params:
          resmsgid: ''
          msgid: 5e5bb5c0-2a7f-4e0f-b164-cf06ceb1dc95
          err: ''
          status: SUCCESSFUL
          errmsg: ''
        responseCode: OK
        result:
          opensaberapiTeacher:
            disabilityType: DisabilityCode-NA
            highestTeacherQualification: TeacherQualificationTypeCode-MED
            gender: GenderTypeCode-MALE
            socialCategory: SocialCategoryTypeCode-GENERAL
            inServiceTeacherTrainingFromCRC:
              osid: 1-03414440-9467-411c-93cc-b028e2006eee
              osUpdatedAt: '2020-11-23T09:58:56.559Z'
              osCreatedAt: '2020-11-23T09:58:56.559Z'
              daysOfInServiceTeacherTraining: '2'
            inServiceTeacherTrainingFromBRC:
              osid: 1-f7ceeb46-22d5-4687-9989-fc8c0a29f24f
              osUpdatedAt: '2020-11-23T09:58:56.559Z'
              osCreatedAt: '2020-11-23T09:58:56.559Z'
              daysOfInServiceTeacherTraining: '10'
            osid: 1-d6844c76-b128-43cc-bbba-74edfd09c716
            yearOfJoiningService: '2014'
            signatures:
              - signatureFor: 'http://localhost:8080/serialNum'
                osUpdatedAt: '2020-11-23T09:58:56.559Z'
                creator: 'https://example.com/i/pat/keys/5'
                osCreatedAt: '2020-11-23T09:58:56.559Z'
                created: '2017-09-23T20:21:34Z'
                osid: 1-e019c0fd-2060-451c-9d61-f7d9b5034ac4
                nonce: 2bbgh3dgjg2302d-d2b3gi423d42
                signatureValue: eyiOiJKJ0eXA...OEjgFWFXk
            teachingRole:
              osid: 1-c8d28fca-1cdf-4958-9d0c-bc94e0927e8b
              teacherType: TeacherTypeCode-HEAD
              appointmentType: TeacherAppointmentTypeCode-REGULAR
              osUpdatedAt: '2020-11-23T09:58:56.559Z'
              osCreatedAt: '2020-11-23T09:58:56.559Z'
            mainSubjectsTaught:
              - SubjectCode-SOCIALSTUDIES
              - SubjectCode-ENGLISH
            appointmentYear: '2015'
            classesTaught: ClassTypeCode-SECONDARYANDHIGHERSECONDARY
            appointedForSubjects: SubjectCode-ENGLISH
            osUpdatedAt: '2020-11-23T09:58:56.559Z'
            serialNum: 4
            teacherName: Marvin Pande
            basicProficiencyLevel:
              - osUpdatedAt: '2020-11-23T09:58:56.559Z'
                proficiencySubject: SubjectCode-MATH
                proficiencyAcademicQualification: AcademicQualificationTypeCode-PHD
                osCreatedAt: '2020-11-23T09:58:56.559Z'
                osid: 1-03f2c43c-e275-4c33-b4d4-630c979dfa84
              - osUpdatedAt: '2020-11-23T09:58:56.559Z'
                proficiencySubject: SubjectCode-ENGLISH
                proficiencyAcademicQualification: AcademicQualificationTypeCode-HIGHERSECONDARY
                osCreatedAt: '2020-11-23T09:58:56.559Z'
                osid: 1-e3a5b8ff-755e-49d6-9033-e5c7f7eed24e
              - osUpdatedAt: '2020-11-23T09:58:56.559Z'
                proficiencySubject: SubjectCode-SOCIALSTUDIES
                proficiencyAcademicQualification: AcademicQualificationTypeCode-SECONDARY
                osCreatedAt: '2020-11-23T09:58:56.559Z'
                osid: 1-f5bf3d90-08b5-4bc1-b1b9-6eb14110566d
            nonTeachingAssignmentsForAcademicCalendar:
              osid: 1-888ce05c-3a1d-424f-9779-5c8c6651f05d
              osUpdatedAt: '2020-11-23T09:58:56.559Z'
              osCreatedAt: '2020-11-23T09:58:56.559Z'
              daysOfNonTeachingAssignments: 6
            trainedinUseOfComputer: YesNoCode-YES
            osCreatedAt: '2020-11-23T09:58:56.559Z'
            highestAcademicQualification: AcademicQualificationTypeCode-PHD
            inServiceTeacherTrainingFromOthers:
              osid: 1-5eca91c4-1cdf-43cd-ad8e-f3da71e19679
              osUpdatedAt: '2020-11-23T09:58:56.559Z'
              osCreatedAt: '2020-11-23T09:58:56.559Z'
              daysOfInServiceTeacherTraining: '3.5'
            inServiceTeacherTrainingFromDIET:
              osid: 1-0125f68e-2117-4796-87d8-53b93136370a
              osUpdatedAt: '2020-11-23T09:58:56.559Z'
              osCreatedAt: '2020-11-23T09:58:56.559Z'
              daysOfInServiceTeacherTraining: '5.5'
            trainedForChildrenSpecialNeeds: YesNoCode-YES
    ReadPersonRegistryResponse:
      summary: Person Registry Read Response
      description: >-
        This is an example response for person read operation with person
        registry id . `includesignature` is not included, hence the response
        will not show the signatures.
      value:
        id: open-saber.registry.read
        ver: '1.0'
        ets: '1606128840146'
        params:
          resmsgid: ''
          msgid: 5e5bb5c0-2a7f-4e0f-b164-cf06ceb1dc95
          err: ''
          status: SUCCESSFUL
          errmsg: ''
        responseCode: OK
        result:
          opensaberapiPerson:
            osUpdatedAt: '2020-11-26T09:24:13.893Z'
            osCreatedAt: '2020-11-26T09:24:13.893Z'
            gender: MALE
            dob: '1990-12-01'
            name: john
            osid: 1-fa1e3602-18c0-4f5a-950c-281e21c000d6
            vehicles:
              - osUpdatedAt: '2020-11-26T09:24:13.893Z'
                kerbWeight: 130.5
                osCreatedAt: '2020-11-26T09:24:13.893Z'
                registrationNumber: Kg-12333
                model: Honda BS-1V
                osid: 1-f09e2d35-3410-4c73-b1c2-7ff0b116e05d
                yearManufactured: '2016'
                manufacturer: Honda
          nationalIdentifier: '1234567890123456'
          hasDrivingLicense: true
    ReadRegistryWithStaticTemplatesResponse:
      summary: Read Registry with Static template Response
      description: >-
        This is an example response for person read operation with static view
        template available as a configuration in view directory.Hence, the
        response will contain fields as per view template configuration.
      value:
        id: open-saber.registry.read
        ver: '1.0'
        ets: '1606128840146'
        params:
          resmsgid: ''
          msgid: 5e5bb5c0-2a7f-4e0f-b164-cf06ceb1dc95
          err: ''
          status: SUCCESSFUL
          errmsg: ''
        responseCode: OK
        result:
          opensaberapiPerson:
            name: john
            osid: 1-fa1e3602-18c0-4f5a-950c-281e21c000d6
            nationalIdentifier: '1234567890123456'
            dob: '1990-12-01'
            gender: MALE
    ReadRegistryWithDynamicTemplatesResponse:
      summary: Read Registry with Dynamic template Response
      description: >-
        This is an example response for person read operation with dynamic view
        template provided in the request body.Hence, the response will contain
        fields as per view template.
      value:
        id: open-saber.registry.read
        ver: '1.0'
        ets: '1606128840146'
        params:
          resmsgid: ''
          msgid: 5e5bb5c0-2a7f-4e0f-b164-cf06ceb1dc95
          err: ''
          status: SUCCESSFUL
          errmsg: ''
        responseCode: OK
        result:
          opensaberapiPerson:
            name: john
            osid: 1-fa1e3602-18c0-4f5a-950c-281e21c000d6
            nationalIdentifier: '1234567890123456'
            dob: '1990-12-01'
    AuthenticationInvalidDeleteResponse:
      summary: Invalid Authentication Token Response
      description: >-
        This is an example response for the authentication failure of the
        request due to expired token, invalid token or if token is not passed as
        Authorization
      value:
        id: open-saber.registry.delete
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: Authentication token is invalid
        responseCode: OK
    InternalServerErrorDeleteResponse:
      summary: Operation Unsuccessful Response
      description: >-
        This is an example response if there is any internal error in the api
        and operation is unsuccessful i.e due to NullPointerException or any
        runtime error
      value:
        id: open-saber.registry.delete
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: ''
        responseCode: OK
    SuccessDeleteResponse:
      summary: Delete Successfull Response
      description: This is an example of delete registry record successfull operation
      value:
        id: open-saber.registry.delete
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: ''
        responseCode: OK
    InvalidIdDeleteResponse:
      summary: Invalid Registry Id Response
      description: >-
        This is an example response for the invalid id is passed to **registry
        id**
      value:
        id: open-saber.registry.delete
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: Invalid id
        responseCode: OK
    TeacherSearchAuditEmptyFilterRequest:
      summary: Search Audit Records for Teacher
      description: >-
        This is an example request to get all the action performed in the
        registry for the entity Teacher.
      value:
        id: open-saber.registry.audit
        ver: '1.0'
        ets: '1606125536553'
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapiTeacher:
            opensaberapifilters: {}
    TeacherSearchAuditFilterRequest:
      summary: Get all the ADD action in the Registry
      description: >-
        This is an example request to get all the ADD action performed in the
        registry for the entity Teacher.
      value:
        id: open-saber.registry.audit
        ver: '1.0'
        ets: '1606125536553'
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapiTeacher:
            opensaberapifilters:
              action:
                eq: ADD
    SearchAuditRecordsResponse:
      summary: Get All Audit Records
      value:
        id: open-saber.registry.audit
        ver: '1.0'
        ets: '1606203260750'
        params:
          resmsgid: ''
          msgid: 16104d32-e5e3-4cbc-bbf2-267deba37b59
          err: ''
          status: SUCCESSFUL
          errmsg: ''
        responseCode: OK
        result:
          Teacher_Audit:
            - recordId: 610ffc0f-6d91-4bc6-a039-087d4a881164
              auditId: cd65e340-899b-4ae9-9595-d14d0c9f6ba5
              auditInfo:
                - op: ADD
              path: /Teacher
              osUpdatedAt: '2020-11-24T07:31:19.304Z'
              osCreatedAt: '2020-11-24T07:31:19.304Z'
              '@type': Teacher_Audit
              opensaberapientityType: Teacher
              action: ADD
              osid: 1-5e37fc11-1c97-49b5-8449-8ead99f40302
              transactionId:
                - '970121863'
              timestamp: '1606203079255'
            - recordId: 610ffc0f-6d91-4bc6-a039-087d4a881164
              auditId: cd65e340-899b-4ae9-9595-d14d0c9f6ba5
              auditInfo:
                - op: READ
              path: /Teacher
              osUpdatedAt: '2020-11-24T07:31:19.304Z'
              osCreatedAt: '2020-11-24T07:31:19.304Z'
              '@type': Teacher_Audit
              opensaberapientityType: Teacher
              action: READ
              osid: 1-5e37fc11-1c97-49b5-8449-8ead99f40302
              transactionId:
                - '970121864'
              timestamp: '1606203079255'
    SearchAddAuditRecordsResponse:
      summary: Get All Add operation Audit Records
      value:
        id: open-saber.registry.audit
        ver: '1.0'
        ets: '1606203260750'
        params:
          resmsgid: ''
          msgid: 16104d32-e5e3-4cbc-bbf2-267deba37b59
          err: ''
          status: SUCCESSFUL
          errmsg: ''
        responseCode: OK
        result:
          Teacher_Audit:
            - recordId: 610ffc0f-6d91-4bc6-a039-087d4a881164
              auditId: cd65e340-899b-4ae9-9595-d14d0c9f6ba5
              auditInfo:
                - op: ADD
              path: /Teacher
              osUpdatedAt: '2020-11-24T07:31:19.304Z'
              osCreatedAt: '2020-11-24T07:31:19.304Z'
              '@type': Teacher_Audit
              opensaberapientityType: Teacher
              action: ADD
              osid: 1-5e37fc11-1c97-49b5-8449-8ead99f40302
              transactionId:
                - '970121863'
              timestamp: '1606203079255'
    SearchRequest1:
      summary: Find all Male Teachers from Registry
      value:
        id: open-saber.registry.search
        ver: '1.0'
        ets: '11234'
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapientityType:
            - Teacher
          opensaberapifilters:
            gender:
              eq: GenderTypeCode-MALE
    SearchRequest2:
      summary: Find all Teachers Whose name starts with Marvin
      value:
        id: open-saber.registry.search
        ver: '1.0'
        ets: '11234'
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapientityType:
            - Teacher
          opensaberapifilters:
            teacherName:
              startsWith: Marvin
    SearchRequest3:
      summary: Find all Teachers with property teacherName as Mahir or Jash
      value:
        id: open-saber.registry.search
        ver: '1.0'
        ets: '11234'
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapientityType:
            - Teacher
          opensaberapifilters:
            teacherName:
              or:
                - Mahir
                - Jash
    SearchResultsResponse1:
      summary: Get Teachers Record
      value:
        id: open-saber.registry.search
        ver: '1.0'
        ets: '1606198791762'
        params:
          resmsgid: ''
          msgid: adee64ca-fe1a-4477-9572-ce91c9d876af
          err: ''
          status: SUCCESSFUL
          errmsg: ''
        responseCode: OK
        result:
          opensaberapiTeacher:
            - disabilityType: DisabilityCode-NA
              highestTeacherQualification: TeacherQualificationTypeCode-MED
              gender: GenderTypeCode-MALE
              '@type': Teacher
              socialCategory: SocialCategoryTypeCode-GENERAL
              inServiceTeacherTrainingFromCRC:
                osid: 1-e3e67444-709e-4313-8f36-3f46e1ad0abf
              inServiceTeacherTrainingFromBRC:
                osid: 1-1503fc79-39c8-4bd5-ba46-610daffa6126
              osid: 1-610ffc0f-6d91-4bc6-a039-087d4a881164
              yearOfJoiningService: 2014
              signatures:
                osid: 1-b0191ff7-bf78-4215-8cc2-10d7d08a4885
              teachingRole:
                osid: 1-be05a8c1-69a0-4e9a-9954-6711e0ab1728
              osUpdatedAt: '2020-11-23T08:13:15.749Z'
              serialNum: 6
              teacherName: Marvin Pande
              basicProficiencyLevel:
                osid: 1-e2ce3153-cd10-48df-a697-8068c06876f6
              nonTeachingAssignmentsForAcademicCalendar:
                osid: 1-aaf08a22-12e5-4b3b-ae92-cdf61e2d21bf
              trainedinUseOfComputer: YesNoCode-YES
              osCreatedAt: '2020-11-23T08:13:15.749Z'
              highestAcademicQualification: AcademicQualificationTypeCode-PHD
              inServiceTeacherTrainingFromOthers:
                osid: 1-32a28ea4-8b61-403a-bc83-0daee216c9f5
              inServiceTeacherTrainingFromDIET:
                osid: 1-0a1c5283-74f4-47b7-b7c3-3a15e0e30d84
              trainedForChildrenSpecialNeeds: YesNoCode-YES
            - disabilityType: DisabilityCode-NA
              highestTeacherQualification: TeacherQualificationTypeCode-MED
              gender: GenderTypeCode-MALE
              '@type': Teacher
              socialCategory: SocialCategoryTypeCode-GENERAL
              inServiceTeacherTrainingFromCRC:
                osid: 1-60a64a04-c497-4009-87c2-2d90f166f57a
              inServiceTeacherTrainingFromBRC:
                osid: 1-f3e1bcaf-fdea-425a-a349-455540f0221b
              osid: 1-54a7b32a-c748-4c47-b3f1-63aa3598eb0a
              yearOfJoiningService: '2014'
              signatures:
                osid: 1-a2d24e9d-468d-45b1-bc50-73e1dc6ded36
              teachingRole:
                osid: 1-967e61b7-65f6-404b-8140-fc88ea3352bf
              osUpdatedAt: '2020-11-24T06:14:36.429Z'
              serialNum: 8
              teacherName: Marvin Pande
              basicProficiencyLevel:
                osid: 1-08920f83-58a9-4321-be6e-9cde5d343f26
              nonTeachingAssignmentsForAcademicCalendar:
                osid: 1-2716f567-d7ec-418a-a25c-da1d12c40794
              trainedinUseOfComputer: YesNoCode-YES
              osCreatedAt: '2020-11-24T06:14:36.429Z'
              highestAcademicQualification: AcademicQualificationTypeCode-PHD
              inServiceTeacherTrainingFromOthers:
                osid: 1-917519aa-a859-4d33-bb9e-67282dd6b4c2
              inServiceTeacherTrainingFromDIET:
                osid: 1-ffb13cec-ce2f-475d-9d91-c19274448702
              trainedForChildrenSpecialNeeds: YesNoCode-YES
    AuthenticationInvalidSearchResponse:
      summary: Invalid Authentication Token Response
      description: >-
        This is an example response for the authentication failure of the
        request due to expired token, invalid token or if token is not passed as
        Authorization
      value:
        id: open-saber.registry.search
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: Authentication token is invalid
        responseCode: OK
    InternalServerErrorSearchResponse:
      summary: Operation Unsuccessful Response
      description: >-
        This is an example response if there is any internal error in the api
        and operation is unsuccessful i.e due to NullPointerException or any
        runtime error
      value:
        id: open-saber.registry.search
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: ''
        responseCode: OK
    EmptySearchResponse:
      summary: Empty Search Response
      description: This is an example of delete registry record successfull operation
      value:
        id: open-saber.registry.delete
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: ''
        responseCode: OK
        result:
          opensaberapiTeacher: []
    UpdateRequestExample1:
      summary: Update Teacher's name and Appointment year
      value:
        id: open-saber.registry.update
        ver: '1.0'
        ets: '11234'
        params:
          did: ''
          key: ''
          msgid: ''
        request:
          opensaberapiTeacher:
            osid: 1-d6844c76-b128-43cc-bbba-74edfd09c716
            teachingRole:
              osid: 1-c8d28fca-1cdf-4958-9d0c-bc94e0927e8b
              appointmentYear: '2016'
            teacherName: Mohan
    AuthenticationInvalidUpdateResponse:
      summary: Invalid Authentication Token Response
      description: >-
        This is an example response for the authentication failure of the
        request due to expired token, invalid token or if token is not passed as
        Authorization
      value:
        id: open-saber.registry.update
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: Authentication token is invalid
        responseCode: OK
    InternalServerErrorUpdateResponse:
      summary: Operation Unsuccessful Response
      description: >-
        This is an example response if there is any internal error in the api
        and operation is unsuccessful i.e due to NullPointerException or any
        runtime error
      value:
        id: open-saber.registry.update
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: ''
        responseCode: OK
    UpdateRequestResponse:
      summary: Operation Successful Response
      description: This is an example successfull update operation
      value:
        id: open-saber.registry.update
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: SUCCESSFUL
          errmsg: ''
        responseCode: OK
    InvalidIdUpdateResponse:
      summary: Invalid Registry Id Response
      description: >-
        This is an example response for the invalid id is passed to **registry
        id**
      value:
        id: open-saber.registry.update
        ver: '1.0'
        ets: '1606125536553'
        params:
          resmsgid: ''
          msgid: 861533da-d815-4809-97c3-9c2bde55f79a
          err: ''
          status: UNSUCCESSFUL
          errmsg: Invalid id
        responseCode: OK
externalDocs:
  description: Testcases
  url: 'https://www.getpostman.com/collections/853df7e2456ddbf20b27'
tags:
  - name: Group Activity Apis
    description: ''
  - name: System Settings Api's
    description: ''
  - name: Location  API(s)
    description: ''
  - name: druid V1
    description: ''
  - name: upload users
    description: Upload custodian users.
  - name: upload shadow users and self-declared users
    description: upload shadow users and self-declared users
  - name: Check upload status
    description: Check the upload status
  - name: Upload status download link
    description: Get upload status download link.
  - name: upload locations
    description: upload locations api
  - name: Bulk Organisation Upload
    description: Bulk Organisation Upload
  - name: opensaber Misc
    description: ''
  - name: Course Batch APIs
    description: ''
  - name: User APIs
    description: ''
  - name: Program CRUD
  - name: Report
  - name: Preference
  - name: Nomination
  - name: Configuration
  - name: Feed Search
  - name: Tenant list
  - name: Contributor Search
  - name: TOC APIs
    description: ''
  - name: expirement V1
    description: ''
  - name: tenant Preference Misc
    description: ''
  - name: Consent APIs
    description: ''
  - name: Course Enrolment APIs
    description: ''
  - name: Reports API's
    description: >-
      The Reports API resources perform operations related to all the Reports on
      the Sunbird Platform.


      - Each of the endpoints serve a different purpose, so which one to use
      depends on what you want to do

      - The operations include CRUD (Create, Update, Read and Delete), Publish ,
      Retire operations on the Reports.

      - The URL for Sunbird Reports API(s) is `/data/v1/report-service/report`
  - name: Report-Summary
    description: Add/ Fetch Report and Chart Summaries.
  - name: V1
    description: ''
  - name: Course Hierarchy APIs
    description: ''
  - name: User-Feed API's
    description: ''
  - name: Lock Create
  - name: Lock List
  - name: Lock Retire
  - name: Lock Refresh
security:
  - httpBearer: []
  - bearerAuth: []
  - httpBearer: []
  - bearerAuth: []
  - httpBearer: []
  - httpBearer: []
  - httpBearer: []
  - bearerAuth: []
